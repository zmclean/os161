cscope 15 $HOME               0001351841
	@os161/build/install/hostinclude/hostcompat.h

31 
	~<sys/ty≥s.h
>

33 
ho°com∑t_öô
(
¨gc
, **
¨gv
);

35 
time_t
 
__time
—ime_à*
£cs
, *
n£cs
);

	@os161/build/install/include/assert.h

30 #i‚de‡
_ASSERT_H_


31 
	#_ASSERT_H_


	)

36 #unde‡
as£π


41 
__bad_as£π
(c⁄° *
fûe
, 
löe
, c⁄° *
msg
);

47 #ifde‡
NDEBUG


50 
	#as£π
(
x
Ë(()(x)Ë

	)

52 
	#as£π
(
x
Ë(()0Ë

	)

56 
	#as£π
(
x
Ë((xË? ()0 : 
	`__bad_as£π
(
__FILE__
, 
__LINE__
, #x))

	)

	@os161/build/install/include/err.h

30 #i‚de‡
_ERR_H_


31 
	#_ERR_H_


	)

33 
	~<kîn/ty≥s.h
>

47 
w¨n
(c⁄° *
fmt
, ...);

48 
w¨nx
(c⁄° *
fmt
, ...);

49 
îr
(
exôcode
, c⁄° *
fmt
, ...);

50 
îrx
(
exôcode
, c⁄° *
fmt
, ...);

52 
vw¨n
(c⁄° *
fmt
, 
__va_li°
);

53 
vw¨nx
(c⁄° *
fmt
, 
__va_li°
);

54 
vîr
(
exôcode
, c⁄° *
fmt
, 
__va_li°
);

55 
vîrx
(
exôcode
, c⁄° *
fmt
, 
__va_li°
);

	@os161/build/install/include/errno.h

30 #i‚de‡
_ERRNO_H_


31 
	#_ERRNO_H_


	)

34 
	~<kîn/î∫o.h
>

37 
î∫o
;

	@os161/build/install/include/fcntl.h

31 
	~<uni°d.h
>

	@os161/build/install/include/kern/endian.h

30 #i‚de‡
_KERN_ENDIAN_H_


31 
	#_KERN_ENDIAN_H_


	)

42 
	#_LITTLE_ENDIAN
 1234

	)

43 
	#_BIG_ENDIAN
 4321

	)

44 
	#_PDP_ENDIAN
 3412

	)

47 
	~<kîn/machöe/ídün.h
>

	@os161/build/install/include/kern/errmsg.h

30 #i‚de‡
_KERN_ERRMSG_H_


31 
	#_KERN_ERRMSG_H_


	)

41 c⁄° *c⁄° 
	gsys_îæi°
[] = {

112 c⁄° 
	gsys_√º
 = (
sys_îæi°
)/(const *);

	@os161/build/install/include/kern/errno.h

30 #i‚de‡
_KERN_ERRNO_H_


31 
	#_KERN_ERRNO_H_


	)

45 
	#ENOSYS
 1

	)

46 
	#EUNIMP
 2

	)

47 
	#ENOMEM
 3

	)

48 
	#EAGAIN
 4

	)

49 
	#EINTR
 5

	)

50 
	#EFAULT
 6

	)

51 
	#ENAMETOOLONG
 7

	)

52 
	#EINVAL
 8

	)

53 
	#EPERM
 9

	)

54 
	#EACCES
 10

	)

55 
	#EMPROC
 11

	)

56 
	#ENPROC
 12

	)

57 
	#ENOEXEC
 13

	)

58 
	#E2BIG
 14

	)

59 
	#ESRCH
 15

	)

60 
	#ECHILD
 16

	)

61 
	#ENOTDIR
 17

	)

62 
	#EISDIR
 18

	)

63 
	#ENOENT
 19

	)

64 
	#ELOOP
 20

	)

65 
	#ENOTEMPTY
 21

	)

66 
	#EEXIST
 22

	)

67 
	#EMLINK
 23

	)

68 
	#EXDEV
 24

	)

69 
	#ENODEV
 25

	)

70 
	#ENXIO
 26

	)

71 
	#EBUSY
 27

	)

72 
	#EMFILE
 28

	)

73 
	#ENFILE
 29

	)

74 
	#EBADF
 30

	)

75 
	#EIOCTL
 31

	)

76 
	#EIO
 32

	)

77 
	#ESPIPE
 33

	)

78 
	#EPIPE
 34

	)

79 
	#EROFS
 35

	)

80 
	#ENOSPC
 36

	)

81 
	#EDQUOT
 37

	)

82 
	#EFBIG
 38

	)

83 
	#EFTYPE
 39

	)

84 
	#EDOM
 40

	)

85 
	#ERANGE
 41

	)

86 
	#EILSEQ
 42

	)

87 
	#ENOTSOCK
 43

	)

88 
	#EISSOCK
 44

	)

89 
	#EISCONN
 45

	)

90 
	#ENOTCONN
 46

	)

91 
	#ESHUTDOWN
 47

	)

92 
	#EPFNOSUPPORT
 48

	)

93 
	#ESOCKTNOSUPPORT
 49

	)

94 
	#EPROTONOSUPPORT
 50

	)

95 
	#EPROTOTYPE
 51

	)

96 
	#EAFNOSUPPORT
 52

	)

97 
	#ENOPROTOOPT
 53

	)

98 
	#EADDRINUSE
 54

	)

99 
	#EADDRNOTAVAIL
 55

	)

100 
	#ENETDOWN
 56

	)

101 
	#ENETUNREACH
 57

	)

102 
	#EHOSTDOWN
 58

	)

103 
	#EHOSTUNREACH
 59

	)

104 
	#ECONNREFUSED
 60

	)

105 
	#ETIMEDOUT
 61

	)

106 
	#ECONNRESET
 62

	)

107 
	#EMSGSIZE
 63

	)

108 
	#ENOTSUP
 64

	)

	@os161/build/install/include/kern/fcntl.h

30 #i‚de‡
_KERN_FCNTL_H_


31 
	#_KERN_FCNTL_H_


	)

43 
	#O_RDONLY
 0

	)

44 
	#O_WRONLY
 1

	)

45 
	#O_RDWR
 2

	)

47 
	#O_CREAT
 4

	)

48 
	#O_EXCL
 8

	)

49 
	#O_TRUNC
 16

	)

50 
	#O_APPEND
 32

	)

51 
	#O_NOCTTY
 64

	)

54 
	#O_ACCMODE
 3

	)

61 
	#LOCK_SH
 1

	)

62 
	#LOCK_EX
 2

	)

63 
	#LOCK_UN
 3

	)

64 
	#LOCK_NB
 4

	)

71 
	#F_DUPFD
 0

	)

72 
	#F_GETFD
 1

	)

73 
	#F_SETFD
 2

	)

74 
	#F_GETFL
 3

	)

75 
	#F_SETFL
 4

	)

76 
	#F_GETOWN
 5

	)

77 
	#F_SETOWN
 6

	)

78 
	#F_GETLK
 7

	)

79 
	#F_SETLK
 8

	)

80 
	#F_SETLKW
 9

	)

83 
	#FD_CLOEXEC
 1

	)

86 
	#F_RDLCK
 0

	)

87 
	#F_WRLCK
 1

	)

88 
	#F_UNLCK
 2

	)

91 
	sÊock
 {

92 
off_t
 
	ml_°¨t
;

93 
	ml_whí˚
;

94 
	ml_ty≥
;

95 
off_t
 
	ml_Àn
;

96 
pid_t
 
	ml_pid
;

	@os161/build/install/include/kern/ioctl.h

30 #i‚de‡
_KERN_IOCTL_H_


31 
	#_KERN_IOCTL_H_


	)

	@os161/build/install/include/kern/iovec.h

30 #i‚de‡
_KERN_IOVEC_H_


31 
	#_KERN_IOVEC_H_


	)

38 
	siovec
 {

57 #ifde‡
_KERNEL


59 
u£Ωå_t
 
	miov_uba£
;

60 *
	miov_kba£
;

63 *
	miov_ba£
;

65 
size_t
 
	miov_Àn
;

	@os161/build/install/include/kern/limits.h

30 #i‚de‡
_KERN_LIMITS_H_


31 
	#_KERN_LIMITS_H_


	)

52 
	#__NAME_MAX
 255

	)

55 
	#__PATH_MAX
 1024

	)

58 
	#__ARG_MAX
 (64 * 1024)

	)

66 
	#__PID_MIN
 2

	)

69 
	#__PID_MAX
 32767

	)

72 
	#__PIPE_BUF
 512

	)

80 
	#__NGROUPS_MAX
 32

	)

83 
	#__LOGIN_NAME_MAX
 17

	)

94 
	#__OPEN_MAX
 128

	)

97 
	#__IOV_MAX
 1024

	)

	@os161/build/install/include/kern/mips/endian.h

30 #i‚de‡
_KERN_MIPS_ENDIAN_H_


31 
	#_KERN_MIS_ENDIAN_H_


	)

42 
	#_BYTE_ORDER
 
_BIG_ENDIAN


	)

	@os161/build/install/include/kern/mips/regdefs.h

36 #i‚de‡
_KERN_MIPS_REGDEFS_H_


37 
	#_KERN_MIPS_REGDEFS_H_


	)

40 
	#z0
 
$0


	)

41 
	#AT
 
$1


	)

42 
	#v0
 
$2


	)

43 
	#v1
 
$3


	)

44 
	#a0
 
$4


	)

45 
	#a1
 
$5


	)

46 
	#a2
 
$6


	)

47 
	#a3
 
$7


	)

48 
	#t0
 
$8


	)

49 
	#t1
 
$9


	)

50 
	#t2
 
$10


	)

51 
	#t3
 
$11


	)

52 
	#t4
 
$12


	)

53 
	#t5
 
$13


	)

54 
	#t6
 
$14


	)

55 
	#t7
 
$15


	)

56 
	#s0
 
$16


	)

57 
	#s1
 
$17


	)

58 
	#s2
 
$18


	)

59 
	#s3
 
$19


	)

60 
	#s4
 
$20


	)

61 
	#s5
 
$21


	)

62 
	#s6
 
$22


	)

63 
	#s7
 
$23


	)

64 
	#t8
 
$24


	)

65 
	#t9
 
$25


	)

66 
	#k0
 
$26


	)

67 
	#k1
 
$27


	)

68 
	#gp
 
$28


	)

69 
	#•
 
$29


	)

70 
	#s8
 
$30


	)

71 
	#ø
 
$31


	)

	@os161/build/install/include/kern/mips/setjmp.h

30 #i‚de‡
_MIPS_SETJMP_H_


31 
	#_MIPS_SETJMP_H_


	)

41 
	#__JB_REGS
 11

	)

44 
uöt32_t
 
	tjmp_buf
[
__JB_REGS
];

	@os161/build/install/include/kern/mips/signal.h

31 #i‚de‡
_KERN_MIPS_SIGNAL_H_


32 
	#_KERN_MIPS_SIGNAL_H_


	)

41 
	ssigc⁄ãxt
 {

	@os161/build/install/include/kern/mips/types.h

30 #i‚de‡
_KERN_MIPS_TYPES_H_


31 
	#_KERN_MIPS_TYPES_H_


	)

43 
	t__i8
;

44 
	t__i16
;

45 
	t__i32
;

46 
	t__i64
;

48 
	t__u8
;

49 
	t__u16
;

50 
	t__u32
;

51 
	t__u64
;

54 
	t__öçå_t
;

55 
	t__uöçå_t
;

65 
	t__size_t
;

66 
	t__ssize_t
;

67 
	t__±rdiff_t
;

69 
	t__size_t
;

70 
	t__ssize_t
;

71 
	t__±rdiff_t
;

75 
	#__CHAR_BIT
 8

	)

	@os161/build/install/include/kern/reboot.h

30 #i‚de‡
_KERN_REBOOT_H_


31 
	#_KERN_REBOOT_H_


	)

40 
	#RB_REBOOT
 0

	)

41 
	#RB_HALT
 1

	)

42 
	#RB_POWEROFF
 2

	)

	@os161/build/install/include/kern/resource.h

30 #i‚de‡
_KERN_RESOURCE_H_


31 
	#_KERN_RESOURCE_H_


	)

41 
	#PRIO_MIN
 (-20)

	)

42 
	#PRIO_MAX
 20

	)

45 
	#PRIO_PROCESS
 0

	)

46 
	#PRIO_PGRP
 1

	)

47 
	#PRIO_USER
 2

	)

50 
	#RUSAGE_SELF
 0

	)

51 
	#RUSAGE_CHILDREN
 (-1)

	)

53 
	srußge
 {

54 
timevÆ
 
	mru_utime
;

55 
timevÆ
 
	mru_°ime
;

56 
__size_t
 
	mru_maxrss
;

57 
__cou¡î_t
 
	mru_ixrss
;

58 
__cou¡î_t
 
	mru_idrss
;

59 
__cou¡î_t
 
	mru_i§ss
;

60 
__cou¡î_t
 
	mru_möÊt
;

61 
__cou¡î_t
 
	mru_majÊt
;

62 
__cou¡î_t
 
	mru_nsw≠
;

63 
__cou¡î_t
 
	mru_öblock
;

64 
__cou¡î_t
 
	mru_oublock
;

65 
__cou¡î_t
 
	mru_msgrcv
;

66 
__cou¡î_t
 
	mru_msg¢d
;

67 
__cou¡î_t
 
	mru_nsig«ls
;

68 
__cou¡î_t
 
	mru_nvcsw
;

69 
__cou¡î_t
 
	mru_nivcsw
;

74 
	#RLIMIT_NPROC
 0

	)

75 
	#RLIMIT_NOFILE
 1

	)

76 
	#RLIMIT_CPU
 2

	)

77 
	#RLIMIT_DATA
 3

	)

78 
	#RLIMIT_STACK
 4

	)

79 
	#RLIMIT_MEMLOCK
 5

	)

80 
	#RLIMIT_RSS
 6

	)

81 
	#RLIMIT_CORE
 7

	)

82 
	#RLIMIT_FSIZE
 8

	)

83 
	#__RLIMIT_NUM
 9

	)

85 
	sæimô
 {

86 
__æim_t
 
	mæim_cur
;

87 
__æim_t
 
	mæim_max
;

90 
	#RLIM_INFINITY
 (~(
__æim_t
)0)

	)

	@os161/build/install/include/kern/seek.h

30 #i‚de‡
_KERN_SEEK_H_


31 
	#_KERN_SEEK_H_


	)

42 
	#SEEK_SET
 0

	)

43 
	#SEEK_CUR
 1

	)

44 
	#SEEK_END
 2

	)

	@os161/build/install/include/kern/sfs.h

30 #i‚de‡
_KERN_SFS_H_


31 
	#_KERN_SFS_H_


	)

39 
	#SFS_MAGIC
 0xabadf001

	)

40 
	#SFS_BLOCKSIZE
 512

	)

41 
	#SFS_VOLNAME_SIZE
 32

	)

42 
	#SFS_NDIRECT
 15

	)

43 
	#SFS_DBPERIDB
 128

	)

44 
	#SFS_NAMELEN
 60

	)

45 
	#SFS_SB_LOCATION
 0

	)

46 
	#SFS_ROOT_LOCATION
 1

	)

47 
	#SFS_MAP_LOCATION
 2

	)

48 
	#SFS_NOINO
 0

	)

51 
	#SFS_BLOCKBITS
 (
SFS_BLOCKSIZE
 * 
CHAR_BIT
)

	)

54 
	#SFS_ROUNDUP
(
a
,
b
Ë(((◊)+(b)-1)/(b))*b)

	)

57 
	#SFS_BITMAPSIZE
(
nblocks
Ë
	`SFS_ROUNDUP
“blocks, 
SFS_BLOCKBITS
)

	)

60 
	#SFS_BITBLOCKS
(
nblocks
Ë(
	`SFS_BITMAPSIZE
“blocks)/
SFS_BLOCKBITS
)

	)

63 
	#SFS_TYPE_INVAL
 0

	)

64 
	#SFS_TYPE_FILE
 1

	)

65 
	#SFS_TYPE_DIR
 2

	)

70 
	ssfs_su≥r
 {

71 
uöt32_t
 
	m•_magic
;

72 
uöt32_t
 
	m•_nblocks
;

73 
	m•_vﬁ«me
[
SFS_VOLNAME_SIZE
];

74 
uöt32_t
 
	mª£rved
[118];

80 
	ssfs_öode
 {

81 
uöt32_t
 
	msfi_size
;

82 
uöt16_t
 
	msfi_ty≥
;

83 
uöt16_t
 
	msfi_lökcou¡
;

84 
uöt32_t
 
	msfi_dúe˘
[
SFS_NDIRECT
];

85 
uöt32_t
 
	msfi_ödúe˘
;

86 
uöt32_t
 
	msfi_wa°e
[128-3-
SFS_NDIRECT
];

92 
	ssfs_dú
 {

93 
uöt32_t
 
	msfd_öo
;

94 
	msfd_«me
[
SFS_NAMELEN
];

	@os161/build/install/include/kern/signal.h

37 #i‚de‡
_KERN_SIGNAL_H_


38 
	#_KERN_SIGNAL_H_


	)

56 
	#SIGHUP
 1

	)

57 
	#SIGINT
 2

	)

58 
	#SIGQUIT
 3

	)

59 
	#SIGILL
 4

	)

60 
	#SIGTRAP
 5

	)

61 
	#SIGABRT
 6

	)

62 
	#SIGEMT
 7

	)

63 
	#SIGFPE
 8

	)

64 
	#SIGKILL
 9

	)

65 
	#SIGBUS
 10

	)

66 
	#SIGSEGV
 11

	)

67 
	#SIGSYS
 12

	)

68 
	#SIGPIPE
 13

	)

69 
	#SIGALRM
 14

	)

70 
	#SIGTERM
 15

	)

71 
	#SIGURG
 16

	)

72 
	#SIGSTOP
 17

	)

73 
	#SIGTSTP
 18

	)

74 
	#SIGCONT
 19

	)

75 
	#SIGCHLD
 20

	)

76 
	#SIGTTIN
 21

	)

77 
	#SIGTTOU
 22

	)

78 
	#SIGIO
 23

	)

79 
	#SIGXCPU
 24

	)

80 
	#SIGXFSZ
 25

	)

81 
	#SIGVTALRM
 26

	)

82 
	#SIGPROF
 27

	)

83 
	#SIGWINCH
 28

	)

84 
	#SIGINFO
 29

	)

85 
	#SIGUSR1
 20

	)

86 
	#SIGUSR2
 31

	)

87 
	#SIGPWR
 32

	)

88 
	#_NSIG
 32

	)

92 
__u32
 
	tsig£t_t
;

95 
	#SA_ONSTACK
 1

	)

96 
	#SA_RESTART
 2

	)

97 
	#SA_RESETHAND
 4

	)

100 
	#SIG_BLOCK
 1

	)

101 
	#SIG_UNBLOCK
 2

	)

102 
	#SIG_SETMASK
 3

	)

105 (*
	t__sigfunc
)();

108 
	#SIG_DFL
 ((
__sigfunc
Ë0Ë

	)

109 
	#SIG_IGN
 ((
__sigfunc
Ë1Ë

	)

114 
	ssiga˘i⁄
 {

115 
__sigfunc
 
ß_h™dÀr
;

116 
sig£t_t
 
ß_mask
;

117 
ß_Êags
;

124 
	ssigÆt°ack
 {

125 *
ss_•
;

126 
size_t
 
ss_size
;

127 
ss_Êags
;

	@os161/build/install/include/kern/socket.h

30 #i‚de‡
_KERN_SOCKET_H_


31 
	#_KERN_SOCKET_H_


	)

43 
	#SOCK_STREAM
 1

	)

44 
	#SOCK_DGRAM
 2

	)

45 
	#SOCK_RAW
 3

	)

48 
	#AF_UNSPEC
 0

	)

49 
	#AF_UNIX
 1

	)

50 
	#AF_INET
 2

	)

51 
	#AF_INET6
 3

	)

54 
	#PF_UNSPEC
 
AF_UNSPEC


	)

55 
	#PF_UNIX
 
AF_UNIX


	)

56 
	#PF_INET
 
AF_INET


	)

57 
	#PF_INET6
 
AF_INET6


	)

73 
	ssockaddr
 {

74 
__u8
 
	mß_Àn
;

75 
__u8
 
	mß_Ámûy
;

78 
	#_SS_SIZE
 128

	)

79 
	ssockaddr_°‹age
 {

80 
__u8
 
	mss_Àn
;

81 
__u8
 
	mss_Ámûy
;

82 
__u8
 
	m__ss_∑d1
;

83 
__u8
 
	m__ss_∑d2
;

84 
__u32
 
	m__ss_∑d3
;

85 
__u64
 
	m__ss_∑d4
;

86 
	m__ss_∑d5
[
_SS_SIZE
 - (
__u64
Ë- (
__u32
Ë- 4*(
__u8
)];

98 
	smsghdr
 {

99 *
	mmsg_«me
;

100 
sockÀn_t
 
	mmsg_«mñí
;

101 
iovec
 *
	mmsg_iov
;

102 
	mmsg_iovÀn
;

103 *
	mmsg_c⁄åﬁ
;

104 
sockÀn_t
 
	mmsg_c⁄åﬁÀn
;

105 
	mmsg_Êags
;

108 
	scmsghdr
 {

109 
sockÀn_t
 
	mcmsg_Àn
;

110 
	mcmsg_Àvñ
;

111 
	mcmsg_ty≥
;

	@os161/build/install/include/kern/stat.h

30 #i‚de‡
_KERN_STAT_H_


31 
	#_KERN_STAT_H_


	)

42 
	s°©
 {

44 
off_t
 
	m°_size
;

45 
mode_t
 
	m°_mode
;

46 
∆ök_t
 
	m°_∆ök
;

47 
blk˙t_t
 
	m°_blocks
;

50 
dev_t
 
	m°_dev
;

51 
öo_t
 
	m°_öo
;

52 
dev_t
 
	m°_rdev
;

55 
time_t
 
	m°_©ime
;

56 
time_t
 
	m°_˘ime
;

57 
time_t
 
	m°_mtime
;

58 
__u32
 
	m°_©imí£c
;

59 
__u32
 
	m°_˘imí£c
;

60 
__u32
 
	m°_mtimí£c
;

63 
uid_t
 
	m°_uid
;

64 
gid_t
 
	m°_gid
;

67 
__u32
 
	m°_gí
;

68 
blksize_t
 
	m°_blksize
;

	@os161/build/install/include/kern/stattypes.h

30 #i‚de‡
_KERN_STATTYPES_H_


31 
	#_KERN_STATTYPES_H_


	)

45 
	#_S_IFMT
 070000

	)

46 
	#_S_IFREG
 010000

	)

47 
	#_S_IFDIR
 020000

	)

48 
	#_S_IFLNK
 030000

	)

49 
	#_S_IFIFO
 040000

	)

50 
	#_S_IFSOCK
 050000

	)

51 
	#_S_IFCHR
 060000

	)

52 
	#_S_IFBLK
 070000

	)

	@os161/build/install/include/kern/syscall.h

30 #i‚de‡
_KERN_SYSCALL_H_


31 
	#_KERN_SYSCALL_H_


	)

50 
	#SYS_f‹k
 0

	)

51 
	#SYS_vf‹k
 1

	)

52 
	#SYS_execv
 2

	)

53 
	#SYS__exô
 3

	)

54 
	#SYS_waôpid
 4

	)

55 
	#SYS_gëpid
 5

	)

56 
	#SYS_gëµid
 6

	)

58 
	#SYS_sbrk
 7

	)

59 
	#SYS_mm≠
 8

	)

60 
	#SYS_munm≠
 9

	)

61 
	#SYS_m¥Ÿe˘
 10

	)

69 
	#SYS_umask
 17

	)

70 
	#SYS_is£tugid
 18

	)

71 
	#SYS_gëªsuid
 19

	)

72 
	#SYS_£åesuid
 20

	)

73 
	#SYS_gëªsgid
 21

	)

74 
	#SYS_£åesgid
 22

	)

75 
	#SYS_gëgroups
 23

	)

76 
	#SYS_£tgroups
 24

	)

77 
	#SYS___gëlogö
 25

	)

78 
	#SYS___£éogö
 26

	)

80 
	#SYS_kûl
 27

	)

81 
	#SYS_siga˘i⁄
 28

	)

82 
	#SYS_sig≥ndög
 29

	)

83 
	#SYS_sig¥ocmask
 30

	)

84 
	#SYS_sigsu•íd
 31

	)

85 
	#SYS_sigªtu∫
 32

	)

105 
	#SYS_›í
 45

	)

106 
	#SYS_pùe
 46

	)

107 
	#SYS_dup
 47

	)

108 
	#SYS_dup2
 48

	)

109 
	#SYS_˛o£
 49

	)

110 
	#SYS_ªad
 50

	)

111 
	#SYS_¥ód
 51

	)

114 
	#SYS_gëdúíåy
 54

	)

115 
	#SYS_wrôe
 55

	)

116 
	#SYS_pwrôe
 56

	)

119 
	#SYS_l£ek
 59

	)

120 
	#SYS_Êock
 60

	)

121 
	#SYS_·runˇã
 61

	)

122 
	#SYS_fsync
 62

	)

123 
	#SYS_f˙é
 63

	)

124 
	#SYS_io˘l
 64

	)

125 
	#SYS_£À˘
 65

	)

126 
	#SYS_pﬁl
 66

	)

129 
	#SYS_lök
 67

	)

130 
	#SYS_ªmove
 68

	)

131 
	#SYS_mkdú
 69

	)

132 
	#SYS_rmdú
 70

	)

133 
	#SYS_mkfifo
 71

	)

134 
	#SYS_ª«me
 72

	)

135 
	#SYS_ac˚ss
 73

	)

137 
	#SYS_chdú
 74

	)

138 
	#SYS_fchdú
 75

	)

139 
	#SYS___gëcwd
 76

	)

141 
	#SYS_symlök
 77

	)

142 
	#SYS_ªadlök
 78

	)

144 
	#SYS_mou¡
 79

	)

145 
	#SYS_unmou¡
 80

	)

149 
	#SYS_°©
 81

	)

150 
	#SYS_f°©
 82

	)

151 
	#SYS_l°©
 83

	)

153 
	#SYS_utimes
 84

	)

154 
	#SYS_futimes
 85

	)

155 
	#SYS_lutimes
 86

	)

157 
	#SYS_chmod
 87

	)

158 
	#SYS_chown
 88

	)

159 
	#SYS_fchmod
 89

	)

160 
	#SYS_fchown
 90

	)

161 
	#SYS_lchmod
 91

	)

162 
	#SYS_lchown
 92

	)

172 
	#SYS_sockë
 98

	)

173 
	#SYS_böd
 99

	)

174 
	#SYS_c⁄√˘
 100

	)

175 
	#SYS_li°í
 101

	)

176 
	#SYS_ac˚±
 102

	)

178 
	#SYS_shutdown
 104

	)

179 
	#SYS_gësock«me
 105

	)

180 
	#SYS_gë≥î«me
 106

	)

181 
	#SYS_gësock›t
 107

	)

182 
	#SYS_£tsock›t
 108

	)

189 
	#SYS___time
 113

	)

190 
	#SYS___£âime
 114

	)

191 
	#SYS_«no¶ìp
 115

	)

196 
	#SYS_sync
 118

	)

197 
	#SYS_ªboŸ
 119

	)

	@os161/build/install/include/kern/time.h

30 #i‚de‡
_KERN_TIME_H_


31 
	#_KERN_TIME_H_


	)

43 
	stimevÆ
 {

44 
__time_t
 
	mtv_£c
;

45 
__i32
 
	mtv_u£c
;

48 
	stime•ec
 {

49 
__time_t
 
	mtv_£c
;

50 
__i32
 
	mtv_n£c
;

59 
	#ITIMER_REAL
 0

	)

60 
	#ITIMER_VIRTUAL
 1

	)

61 
	#ITIMER_PROF
 2

	)

64 
	sôimîvÆ
 {

65 
timevÆ
 
	mô_öãrvÆ
;

66 
timevÆ
 
	mô_vÆue
;

	@os161/build/install/include/kern/types.h

30 #i‚de‡
_KERN_TYPES_H_


31 
	#_KERN_TYPES_H_


	)

34 
	~<kîn/machöe/ty≥s.h
>

64 
__u32
 
	t__blk˙t_t
;

65 
__u32
 
	t__blksize_t
;

66 
__u64
 
	t__cou¡î_t
;

67 
__u32
 
	t__daddr_t
;

68 
__u32
 
	t__dev_t
;

69 
__u32
 
	t__fsid_t
;

70 
__i32
 
	t__gid_t
;

71 
__u32
 
	t__ö_addr_t
;

72 
__u32
 
	t__ö_p‹t_t
;

73 
__u32
 
	t__öo_t
;

74 
__u32
 
	t__mode_t
;

75 
__u16
 
	t__∆ök_t
;

76 
__i64
 
	t__off_t
;

77 
__i32
 
	t__pid_t
;

78 
__u64
 
	t__æim_t
;

79 
__u8
 
	t__ß_Ámûy_t
;

80 
__i64
 
	t__time_t
;

81 
__i32
 
	t__uid_t
;

83 
	t__nfds_t
;

84 
	t__sockÀn_t
;

87 #ifde‡
__GNUC__


88 
__buûtö_va_li°
 
	t__va_li°
;

	@os161/build/install/include/kern/unistd.h

30 #i‚de‡
_KERN_UNISTD_H_


31 
	#_KERN_UNISTD_H_


	)

34 
	#STDIN_FILENO
 0

	)

35 
	#STDOUT_FILENO
 1

	)

36 
	#STDERR_FILENO
 2

	)

	@os161/build/install/include/kern/wait.h

30 #i‚de‡
_KERN_WAIT_H_


31 
	#_KERN_WAIT_H_


	)

39 
	#WNOHANG
 1

	)

40 
	#WUNTRACED
 2

	)

43 
	#WAIT_ANY
 (-1Ë

	)

44 
	#WAIT_MYPGRP
 0

	)

54 
	#_WWHAT
(
x
Ë((x)&3Ë

	)

55 
	#_WVAL
(
x
Ë((x)>>2Ë

	)

56 
	#_MKWVAL
(
x
Ë((x)<<2Ë

	)

59 
	#__WEXITED
 0

	)

60 
	#__WSIGNALED
 1

	)

61 
	#__WCORED
 2

	)

62 
	#__WSTOPPED
 3

	)

65 
	#WIFEXITED
(
x
Ë(
	`_WWHAT
(x)==
__WEXITED
)

	)

66 
	#WIFSIGNALED
(
x
Ë(
	`_WWHAT
(x)==
__WSIGNALED
 || _WWHAT(x)==
__WCORED
)

	)

67 
	#WIFSTOPPED
(
x
Ë(
	`_WWHAT
(x)==
__WSTOPPED
)

	)

68 
	#WEXITSTATUS
(
x
Ë(
	`_WVAL
(x))

	)

69 
	#WTERMSIG
(
x
Ë(
	`_WVAL
(x))

	)

70 
	#WSTOPSIG
(
x
Ë(
	`_WVAL
(x))

	)

71 
	#WCOREDUMP
(
x
Ë(
	`_WWHAT
(x)==
__WCORED
)

	)

74 
	#_MKWAIT_EXIT
(
x
Ë(
	`_MKWVAL
(x)|
__WEXITED
)

	)

75 
	#_MKWAIT_SIG
(
x
Ë(
	`_MKWVAL
(x)|
__WSIGNALED
)

	)

76 
	#_MKWAIT_CORE
(
x
Ë(
	`_MKWVAL
(x)|
__WCORED
)

	)

77 
	#_MKWAIT_STOP
(
x
Ë(
	`_MKWVAL
(x)|
__WSTOPPED
)

	)

	@os161/build/install/include/limits.h

30 #i‚de‡
_LIMITS_H_


31 
	#_LIMITS_H_


	)

38 
	~<kîn/limôs.h
>

41 
	#NAME_MAX
 
__NAME_MAX


	)

42 
	#PATH_MAX
 
__PATH_MAX


	)

43 
	#ARG_MAX
 
__ARG_MAX


	)

44 
	#PID_MIN
 
__PID_MIN


	)

45 
	#PID_MAX
 
__PID_MAX


	)

46 
	#PIPE_BUF
 
__PIPE_BUF


	)

47 
	#NGROUPS_MAX
 
__NGROUPS_MAX


	)

48 
	#LOGIN_NAME_MAX
 
__LOGIN_NAME_MAX


	)

49 
	#OPEN_MAX
 
__OPEN_MAX


	)

50 
	#IOV_MAX
 
__IOV_MAX


	)

	@os161/build/install/include/setjmp.h

30 #i‚de‡
_SETJMP_H_


31 
	#_SETJMP_H_


	)

34 
	~<machöe/£tjmp.h
>

49 
£tjmp
(
jmp_buf
 
jb
);

50 
l⁄gjmp
(
jmp_buf
 
jb
, 
code
);

	@os161/build/install/include/signal.h

30 
	~<kîn/sig«l.h
>

	@os161/build/install/include/stdarg.h

30 #i‚de‡
_STDARG_H_


31 
	#_STDARG_H_


	)

33 
	~<kîn/ty≥s.h
>

41 
__va_li°
 
	tva_li°
;

43 
	#va_°¨t
(
≠
,
fmt
Ë
	`__buûtö_°d¨g_°¨t
◊p,fmt)

	)

44 
	#va_¨g
(
≠
,
t
Ë
	`__buûtö_va_¨g
◊p,t)

	)

45 
	#va_c›y
(
≠1
,
≠2
Ë
	`__buûtö_va_c›y
◊p1,≠2)

	)

46 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

	@os161/build/install/include/stdint.h

30 #i‚de‡
_STDINT_H_


31 
	#_STDINT_H_


	)

37 
	~<kîn/ty≥s.h
>

39 
__i8
 
	töt8_t
;

40 
__i16
 
	töt16_t
;

41 
__i32
 
	töt32_t
;

42 
__i64
 
	töt64_t
;

43 
__u8
 
	tuöt8_t
;

44 
__u16
 
	tuöt16_t
;

45 
__u32
 
	tuöt32_t
;

46 
__u64
 
	tuöt64_t
;

48 
__öçå_t
 
	töçå_t
;

49 
__uöçå_t
 
	tuöçå_t
;

	@os161/build/install/include/stdio.h

30 #i‚de‡
_STDIO_H_


31 
	#_STDIO_H_


	)

37 
	~<kîn/ty≥s.h
>

38 
	~<ty≥s/size_t.h
>

39 
	~<sys/nuŒ.h
>

42 
	#EOF
 (-1)

	)

48 
__v¥ötf
((*
£ndfunc
)(*
˛õ¡d©a
, c⁄° *, 
size_t
 
Àn
),

49 *
˛õ¡d©a
,

50 c⁄° *
fmt
,

51 
__va_li°
 
≠
);

54 
	`¥ötf
(c⁄° *
fmt
, ...);

55 
	`v¥ötf
(c⁄° *
fmt
, 
__va_li°
 
≠
);

56 
	`¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, ...);

57 
	`v¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, 
__va_li°
 
≠
);

60 
	`puts
(const *);

64 
	`__puts
(const *);

67 
	`putch¨
();

70 
	`gëch¨
();

	@os161/build/install/include/stdlib.h

30 #i‚de‡
_STDLIB_H_


31 
	#_STDLIB_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
	~<ty≥s/size_t.h
>

35 
	~<sys/nuŒ.h
>

40 
©oi
(const *);

45 
ab‹t
();

51 
exô
(
code
);

56 
sy°em
(c⁄° *
comm™d
);

61 
	#RAND_MAX
 0x7fffffff

	)

62 
øndom
();

63 
§™dom
(
£ed
);

64 *
öô°©e
(, *, 
size_t
);

65 *
£t°©e
(*);

70 *
mÆloc
(
size_t
 
size
);

71 
‰ì
(*
±r
);

	@os161/build/install/include/string.h

30 #i‚de‡
_STRING_H_


31 
	#_STRING_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
	~<ty≥s/size_t.h
>

35 
	~<sys/nuŒ.h
>

40 *
°rˇt
(*, const *);

41 *
°r˝y
(*, const *);

42 *
°rchr
(const *, );

43 *
°ºchr
(const *, );

44 
°rcmp
(const *, const *);

45 
size_t
 
°æí
(const *);

46 *
°πok_r
(*, const *, **);

47 *
°πok
(*, const *);

49 *
mem£t
(*, 
c
, 
size_t
);

50 *
mem˝y
(*, c⁄° *, 
size_t
);

51 *
memmove
(*, c⁄° *, 
size_t
);

52 
memcmp
(c⁄° *, c⁄° *, 
size_t
);

57 c⁄° *
°ªº‹
(
îrcode
);

62 
bzîo
(*, 
size_t
);

	@os161/build/install/include/sys/endian.h

30 #i‚de‡
_SYS_ENDIAN_H_


31 
	#_SYS_ENDIAN_H_


	)

33 
	~<kîn/ídün.h
>

	@os161/build/install/include/sys/ioctl.h

31 
	~<uni°d.h
>

	@os161/build/install/include/sys/null.h

30 #i‚de‡
_SYS_NULL_H_


31 
	#_SYS_NULL_H_


	)

37 
	#NULL
 ((*)0)

	)

	@os161/build/install/include/sys/reboot.h

31 
	~<uni°d.h
>

	@os161/build/install/include/sys/stat.h

30 #i‚de‡
_SYS_STAT_H_


31 
	#_SYS_STAT_H_


	)

36 
	~<kîn/°©.h
>

37 
	~<kîn/°©ty≥s.h
>

42 
	#S_ISDIR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFDIR
)

	)

43 
	#S_ISREG
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFREG
)

	)

44 
	#S_ISDIR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFDIR
)

	)

45 
	#S_ISLNK
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFLNK
)

	)

46 
	#S_ISIFO
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFIFO
)

	)

47 
	#S_ISSOCK
(
mode
Ë((modê& 
_S_IFMT
Ë==
_S_IFSOCK
)

	)

48 
	#S_ISCHR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFCHR
)

	)

49 
	#S_ISBLK
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFBLK
)

	)

55 
	#S_IFMT
 
_S_IFMT


	)

56 
	#S_IFREG
 
_S_IFREG


	)

57 
	#S_IFDIR
 
_S_IFDIR


	)

58 
	#S_IFLNK
 
_S_IFLNK


	)

59 
	#S_IFIFO
 
_S_IFIFO


	)

60 
	#S_IFSOCK
 
_S_IFSOCK


	)

61 
	#S_IFCHR
 
_S_IFCHR


	)

62 
	#S_IFBLK
 
_S_IFBLK


	)

71 
f°©
(
fûeh™dÀ
, 
°©
 *
buf
);

72 
°©
(c⁄° *
∑th
, °© *
buf
);

73 
l°©
(c⁄° *
∑th
, 
°©
 *
buf
);

80 
mkdú
(c⁄° *
dú«me
, 
ign‹e
);

	@os161/build/install/include/sys/types.h

30 #i‚de‡
_SYS_TYPES_H_


31 
	#_SYS_TYPES_H_


	)

42 
	~<kîn/ty≥s.h
>

45 
	~<ty≥s/size_t.h
>

46 
	~<sys/nuŒ.h
>

55 
__ssize_t
 
	tssize_t
;

56 
__±rdiff_t
 
	t±rdiff_t
;

59 
__blk˙t_t
 
	tblk˙t_t
;

60 
__blksize_t
 
	tblksize_t
;

61 
__daddr_t
 
	tdaddr_t
;

62 
__dev_t
 
	tdev_t
;

63 
__fsid_t
 
	tfsid_t
;

64 
__gid_t
 
	tgid_t
;

65 
__ö_addr_t
 
	tö_addr_t
;

66 
__ö_p‹t_t
 
	tö_p‹t_t
;

67 
__öo_t
 
	töo_t
;

68 
__mode_t
 
	tmode_t
;

69 
__∆ök_t
 
	t∆ök_t
;

70 
__off_t
 
	toff_t
;

71 
__pid_t
 
	tpid_t
;

72 
__æim_t
 
	tæim_t
;

73 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

74 
__time_t
 
	ttime_t
;

75 
__uid_t
 
	tuid_t
;

77 
__nfds_t
 
	tnfds_t
;

78 
__sockÀn_t
 
	tsockÀn_t
;

84 
	#CHAR_BIT
 
__CHAR_BIT


	)

	@os161/build/install/include/sys/wait.h

31 
	~<uni°d.h
>

	@os161/build/install/include/time.h

31 
	~<uni°d.h
>

	@os161/build/install/include/types/size_t.h

30 #i‚de‡
_TYPES_SIZE_T_H_


31 
	#_TYPES_SIZE_T_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
__size_t
 
	tsize_t
;

	@os161/build/install/include/unistd.h

30 #i‚de‡
_UNISTD_H_


31 
	#_UNISTD_H_


	)

33 
	~<sys/ty≥s.h
>

40 
	~<kîn/f˙é.h
>

41 
	~<kîn/io˘l.h
>

42 
	~<kîn/ªboŸ.h
>

43 
	~<kîn/£ek.h
>

44 
	~<kîn/time.h
>

45 
	~<kîn/uni°d.h
>

46 
	~<kîn/waô.h
>

110 #ifde‡
__GNUC__


112 
	#__DEAD
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

114 
	#__DEAD


	)

118 
__DEAD
 
_exô
(
code
);

119 
execv
(c⁄° *
¥og
, *c⁄° *
¨gs
);

120 
pid_t
 
f‹k
();

121 
waôpid
(
pid_t
 
pid
, *
ªtu∫code
, 
Êags
);

127 
›í
(c⁄° *
fûíame
, 
Êags
, ...);

128 
ªad
(
fûeh™dÀ
, *
buf
, 
size_t
 
size
);

129 
wrôe
(
fûeh™dÀ
, c⁄° *
buf
, 
size_t
 
size
);

130 
˛o£
(
fûeh™dÀ
);

131 
ªboŸ
(
code
);

132 
sync
();

134 
rmdú
(c⁄° *
dú«me
);

137 
gëpid
();

138 
io˘l
(
fûeh™dÀ
, 
code
, *
buf
);

139 
off_t
 
l£ek
(
fûeh™dÀ
, off_à
pos
, 
code
);

140 
fsync
(
fûeh™dÀ
);

141 
·runˇã
(
fûeh™dÀ
, 
off_t
 
size
);

142 
ªmove
(c⁄° *
fûíame
);

143 
ª«me
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
);

144 
lök
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
);

146 
chdú
(c⁄° *
∑th
);

149 *
sbrk
(
ch™ge
);

150 
gëdúíåy
(
fûeh™dÀ
, *
buf
, 
size_t
 
buÊí
);

151 
symlök
(c⁄° *
èrgë
, c⁄° *
lök«me
);

152 
ªadlök
(c⁄° *
∑th
, *
buf
, 
size_t
 
buÊí
);

153 
dup2
(
fûeh™dÀ
, 
√wh™dÀ
);

154 
pùe
(
fûeh™dÀs
[2]);

155 
time_t
 
__time
—ime_à*
£c⁄ds
, *
«no£c⁄ds
);

156 
__gëcwd
(*
buf
, 
size_t
 
buÊí
);

164 *
gëcwd
(*
buf
, 
size_t
 
buÊí
);

165 
time_t
 
time
—ime_à*
£c⁄ds
);

	@os161/common/gcc-millicode/adddi3.c

38 
	~"l⁄gl⁄g.h
"

47 
	$__adddi3
(
a
, 
b
)

49 
uu
 
Ø
, 
bb
, 
sum
;

51 
Ø
.
Œ
 = 
a
;

52 
bb
.
Œ
 = 
b
;

53 
sum
.
ui
[
L
] = 
Ø
.ui[L] + 
bb
.ui[L];

54 
sum
.
ui
[
H
] = 
Ø
.ui[H] + 
bb
.ui[H] + (sum.ui[
L
] < bb.ui[L]);

55  (
sum
.
Œ
);

56 
	}
}

	@os161/common/gcc-millicode/anddi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__™ddi3
(
a
, 
b
)

46 
uu
 
Ø
, 
bb
;

48 
Ø
.
Œ
 = 
a
;

49 
bb
.
Œ
 = 
b
;

50 
Ø
.
ui
[0] &
bb
.ui[0];

51 
Ø
.
ui
[1] &
bb
.ui[1];

52  (
Ø
.
Œ
);

53 
	}
}

	@os161/common/gcc-millicode/ashldi3.c

38 
	~"l⁄gl⁄g.h
"

45 
	$__ashldi3
(
a
, 
shi·
)

47 
uu
 
Ø
;

49 i‡(
shi·
 == 0)

50 (
a
);

51 
Ø
.
Œ
 = 
a
;

52 i‡(
shi·
 >
INT_BITS
) {

53 
Ø
.
ui
[
H
] =áa.ui[
L
] << (
shi·
 - 
INT_BITS
);

54 
Ø
.
ui
[
L
] = 0;

56 
Ø
.
ui
[
H
] = (Ø.ui[H] << 
shi·
) |

57 (
Ø
.
ui
[
L
] >> (
INT_BITS
 - 
shi·
));

58 
Ø
.
ui
[
L
] <<
shi·
;

60  (
Ø
.
Œ
);

61 
	}
}

	@os161/common/gcc-millicode/ashrdi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__ashrdi3
(
a
, 
shi·
)

46 
uu
 
Ø
;

48 i‡(
shi·
 == 0)

49 (
a
);

50 
Ø
.
Œ
 = 
a
;

51 i‡(
shi·
 >
INT_BITS
) {

52 
s
;

62 
s
 = (
Ø
.
si
[
H
] >> (
INT_BITS
 - 1)) >> 1;

64 
Ø
.
ui
[
L
] =áa.
si
[
H
] >> (
shi·
 - 
INT_BITS
);

65 
Ø
.
ui
[
H
] = 
s
;

67 
Ø
.
ui
[
L
] = (Ø.ui[L] >> 
shi·
) |

68 (
Ø
.
ui
[
H
] << (
INT_BITS
 - 
shi·
));

70 
Ø
.
si
[
H
] >>
shi·
;

72  (
Ø
.
Œ
);

73 
	}
}

	@os161/common/gcc-millicode/cmpdi2.c

38 
	~"l⁄gl⁄g.h
"

46 
	$__cmpdi2
(
a
, 
b
)

48 
uu
 
Ø
, 
bb
;

50 
Ø
.
Œ
 = 
a
;

51 
bb
.
Œ
 = 
b
;

52  (
Ø
.
si
[
H
] < 
bb
.si[H] ? 0 :áa.si[H] > bb.si[H] ? 2 :

53 
Ø
.
ui
[
L
] < 
bb
.ui[L] ? 0 :áa.ui[L] > bb.ui[L] ? 2 : 1);

54 
	}
}

	@os161/common/gcc-millicode/divdi3.c

38 
	~"l⁄gl⁄g.h
"

45 
	$__divdi3
(
a
, 
b
)

47 
ua
, 
ub
, 
uq
;

48 
√g
 = 0;

50 
ua
 = 
a
;

51 
ub
 = 
b
;

53 i‡(
a
 < 0)

54 
ua
 = -ua, 
√g
 ^= 1;

55 i‡(
b
 < 0)

56 
ub
 = -ub, 
√g
 ^= 1;

58 
uq
 = 
	`__qdivªm
(
ua
, 
ub
, 
NULL
);

59 i‡(
√g
)

60 
uq
 = - uq;

61  
uq
;

62 
	}
}

	@os161/common/gcc-millicode/iordi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__i‹di3
(
a
, 
b
)

46 
uu
 
Ø
, 
bb
;

48 
Ø
.
Œ
 = 
a
;

49 
bb
.
Œ
 = 
b
;

50 
Ø
.
ui
[0] |
bb
.ui[0];

51 
Ø
.
ui
[1] |
bb
.ui[1];

52  (
Ø
.
Œ
);

53 
	}
}

	@os161/common/gcc-millicode/longlong.h

56 #i‡
deföed
(
_KERNEL
)

57 
	~<ty≥s.h
>

58 
	~<ídün.h
>

60 
	~<sys/ty≥s.h
>

61 
	~<sys/ídün.h
>

64 
	~<limôs.h
>

70 
	uuu
 {

71 
	mŒ
;

72 
	muŒ
;

73 
	msi
[2];

74 
	mui
[2];

80 #i‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


81 
	#H
 1

	)

82 
	#L
 0

	)

85 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


86 
	#H
 0

	)

87 
	#L
 1

	)

96 
	#LONGLONG_BITS
 ((Ë* 
CHAR_BIT
)

	)

97 
	#INT_BITS
 ((Ë* 
CHAR_BIT
)

	)

98 
	#HALF_BITS
 ((Ë* 
CHAR_BIT
 / 2)

	)

110 
	#HHALF
(
x
Ë(()(xË>> 
HALF_BITS
)

	)

111 
	#LHALF
(
x
Ë(()(xË& ((()1 << 
HALF_BITS
Ë- 1))

	)

112 
	#LHUP
(
x
Ë(()(xË<< 
HALF_BITS
)

	)

114 
__adddi3
 ( , );

115 
__™ddi3
 ( , );

116 
__ashldi3
 ( , );

117 
__ashrdi3
 ( , );

118 
__cmpdi2
 ( , );

119 
__divdi3
 ( , );

120 
__i‹di3
 ( , );

121 
__lshldi3
 ( , );

122 
__lshrdi3
 ( , );

123 
__moddi3
 ( , );

124 
__muldi3
 ( , );

125 
__√gdi2
 ( );

126 
__⁄e_cm∂di2
 ( );

127 
__subdi3
 ( , );

128 
__ucmpdi2
 (, );

129 
__udivdi3
 (, );

130 
__umoddi3
 (, );

131 
__x‹di3
 ( , );

133 #i‚de‡
_KERNEL


134 
__fixdfdi
 ();

135 
__fixsfdi
 ();

136 
__fixunsdfdi
 ();

137 
__fixunssfdi
 ();

138 
__Êﬂtdidf
 ();

139 
__Êﬂtdisf
 ();

140 
__Êﬂtunsdidf
();

143 
__qdivªm
 (, ,

	@os161/common/gcc-millicode/lshldi3.c

38 
	~"l⁄gl⁄g.h
"

45 
	$__lshldi3
(
a
, 
shi·
)

47 
uu
 
Ø
;

49 i‡(
shi·
 == 0)

50 (
a
);

51 
Ø
.
Œ
 = 
a
;

52 i‡(
shi·
 >
INT_BITS
) {

53 
Ø
.
ui
[
H
] =áa.ui[
L
] << (
shi·
 - 
INT_BITS
);

54 
Ø
.
ui
[
L
] = 0;

56 
Ø
.
ui
[
H
] = (Ø.ui[H] << 
shi·
) |

57 (
Ø
.
ui
[
L
] >> (
INT_BITS
 - 
shi·
));

58 
Ø
.
ui
[
L
] <<
shi·
;

60  (
Ø
.
Œ
);

61 
	}
}

	@os161/common/gcc-millicode/lshrdi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__lshrdi3
(
a
, 
shi·
)

46 
uu
 
Ø
;

48 i‡(
shi·
 == 0)

49 (
a
);

50 
Ø
.
Œ
 = 
a
;

51 i‡(
shi·
 >
INT_BITS
) {

52 
Ø
.
ui
[
L
] =áa.ui[
H
] >> (
shi·
 - 
INT_BITS
);

53 
Ø
.
ui
[
H
] = 0;

55 
Ø
.
ui
[
L
] = (Ø.ui[L] >> 
shi·
) |

56 (
Ø
.
ui
[
H
] << (
INT_BITS
 - 
shi·
));

57 
Ø
.
ui
[
H
] >>
shi·
;

59  (
Ø
.
Œ
);

60 
	}
}

	@os161/common/gcc-millicode/moddi3.c

38 
	~"l⁄gl⁄g.h
"

46 
	$__moddi3
(
a
, 
b
)

48 
ua
, 
ub
, 
ur
;

49 
√g
 = 0;

51 
ua
 = 
a
;

52 
ub
 = 
b
;

54 i‡(
a
 < 0)

55 
ua
 = -ua, 
√g
 ^= 1;

56 i‡(
b
 < 0)

57 
ub
 = -ub;

58 ()
	`__qdivªm
(
ua
, 
ub
, &
ur
);

59 i‡(
√g
)

60 
ur
 = -ur;

61  (
ur
);

62 
	}
}

	@os161/common/gcc-millicode/muldi3.c

38 
	~"l⁄gl⁄g.h
"

97 
__lmulq
(, );

100 
	$__muldi3
(
a
, 
b
)

102 
uu
 
u
, 
v
, 
low
, 
¥od
;

103 
high
, 
mid
, 
udiff
, 
vdiff
;

104 
√gÆl
, 
√gmid
;

105 
	#u1
 
u
.
ui
[
H
]

	)

106 
	#u0
 
u
.
ui
[
L
]

	)

107 
	#v1
 
v
.
ui
[
H
]

	)

108 
	#v0
 
v
.
ui
[
L
]

	)

115 i‡(
a
 >= 0)

116 
u
.
Œ
 = 
a
, 
√gÆl
 = 0;

118 
u
.
Œ
 = -
a
, 
√gÆl
 = 1;

119 i‡(
b
 >= 0)

120 
v
.
Œ
 = 
b
;

122 
v
.
Œ
 = -
b
, 
√gÆl
 ^= 1;

124 i‡(
u1
 =0 && 
v1
 == 0) {

130 
¥od
.
Œ
 = 
	`__lmulq
(
u0
, 
v0
);

138 
low
.
Œ
 = 
	`__lmulq
(
u0
, 
v0
);

140 i‡(
u1
 >
u0
)

141 
√gmid
 = 0, 
udiff
 = 
u1
 - 
u0
;

143 
√gmid
 = 1, 
udiff
 = 
u0
 - 
u1
;

144 i‡(
v0
 >
v1
)

145 
vdiff
 = 
v0
 - 
v1
;

147 
vdiff
 = 
v1
 - 
v0
, 
√gmid
 ^= 1;

148 
mid
 = 
udiff
 * 
vdiff
;

150 
high
 = 
u1
 * 
v1
;

155 
¥od
.
ui
[
H
] = 
high
 + (
√gmid
 ? -
mid
 : midË+ 
low
.ui[
L
] +

156 
low
.
ui
[
H
];

157 
¥od
.
ui
[
L
] = 
low
.ui[L];

159  (
√gÆl
 ? -
¥od
.
Œ
 :Örod.ll);

160 #unde‡
u1


161 #unde‡
u0


162 #unde‡
v1


163 #unde‡
v0


164 
	}
}

184 
	$__lmulq
(
u
, 
v
)

186 
u1
, 
u0
, 
v1
, 
v0
, 
udiff
, 
vdiff
, 
high
, 
mid
, 
low
;

187 
¥odh
, 
¥odl
, 
was
;

188 
uu
 
¥od
;

189 
√g
;

191 
u1
 = 
	`HHALF
(
u
);

192 
u0
 = 
	`LHALF
(
u
);

193 
v1
 = 
	`HHALF
(
v
);

194 
v0
 = 
	`LHALF
(
v
);

196 
low
 = 
u0
 * 
v0
;

199 i‡(
u1
 =0 && 
v1
 == 0)

200  (
low
);

202 i‡(
u1
 >
u0
)

203 
udiff
 = 
u1
 - 
u0
, 
√g
 = 0;

205 
udiff
 = 
u0
 - 
u1
, 
√g
 = 1;

206 i‡(
v0
 >
v1
)

207 
vdiff
 = 
v0
 - 
v1
;

209 
vdiff
 = 
v1
 - 
v0
, 
√g
 ^= 1;

210 
mid
 = 
udiff
 * 
vdiff
;

212 
high
 = 
u1
 * 
v1
;

215 
¥odh
 = 
high
 + 
	`HHALF
(high);

216 
¥odl
 = 
	`LHUP
(
high
);

219 i‡(
√g
) {

220 
was
 = 
¥odl
;

221 
¥odl
 -
	`LHUP
(
mid
);

222 
¥odh
 -
	`HHALF
(
mid
Ë+ (
¥odl
 > 
was
);

224 
was
 = 
¥odl
;

225 
¥odl
 +
	`LHUP
(
mid
);

226 
¥odh
 +
	`HHALF
(
mid
Ë+ (
¥odl
 < 
was
);

230 
was
 = 
¥odl
;

231 
¥odl
 +
	`LHUP
(
low
);

232 
¥odh
 +
	`HHALF
(
low
Ë+ (
¥odl
 < 
was
);

234 i‡((
¥odl
 +
low
) <Üow)

235 
¥odh
++;

238 
¥od
.
ui
[
H
] = 
¥odh
;

239 
¥od
.
ui
[
L
] = 
¥odl
;

240  (
¥od
.
Œ
);

241 
	}
}

	@os161/common/gcc-millicode/negdi2.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__√gdi2
(
a
)

46 
uu
 
Ø
, 
ªs
;

48 
Ø
.
Œ
 = 
a
;

49 
ªs
.
ui
[
L
] = -
Ø
.ui[L];

50 
ªs
.
ui
[
H
] = -
Ø
.ui[H] - (ªs.ui[
L
] > 0);

51  (
ªs
.
Œ
);

52 
	}
}

	@os161/common/gcc-millicode/notdi2.c

38 
	~"l⁄gl⁄g.h
"

45 
	$__⁄e_cm∂di2
(
a
)

47 
uu
 
Ø
;

49 
Ø
.
Œ
 = 
a
;

50 
Ø
.
ui
[0] = ~aa.ui[0];

51 
Ø
.
ui
[1] = ~aa.ui[1];

52  (
Ø
.
Œ
);

53 
	}
}

	@os161/common/gcc-millicode/qdivrem.c

43 
	~"l⁄gl⁄g.h
"

45 
	#B
 (()1 << 
HALF_BITS
Ë

	)

48 
	#COMBINE
(
a
, 
b
Ë((()◊Ë<< 
HALF_BITS
Ë| (b))

	)

51 #i‡
UINT_MAX
 =0xffffffffU && 
USHRT_MAX
 >= 0xffff

52 
	tdigô
;

54 
	tdigô
;

57 
shl
(
digô
 *
p
, 
Àn
, 
sh
);

68 
	$__qdivªm
(
uŒ
, 
vŒ
,

69 *
¨q
)

71 
uu
 
tmp
;

72 
digô
 *
u
, *
v
, *
q
;

73 
digô
 
v1
, 
v2
;

74 
qh©
, 
rh©
, 
t
;

75 
m
, 
n
, 
d
, 
j
, 
i
;

76 
digô
 
u•a˚
[5], 
v•a˚
[5], 
q•a˚
[5];

81 i‡(
vŒ
 == 0) {

83 vﬁ©ûêc⁄° 
zîo
 = 0;

85 
tmp
.
ui
[
H
] =Åmp.ui[
L
] = 1 / 
zîo
;

86 i‡(
¨q
)

87 *
¨q
 = 
uŒ
;

88  (
tmp
.
Œ
);

90 i‡(
uŒ
 < 
vŒ
) {

91 i‡(
¨q
)

92 *
¨q
 = 
uŒ
;

95 
u
 = &
u•a˚
[0];

96 
v
 = &
v•a˚
[0];

97 
q
 = &
q•a˚
[0];

112 
tmp
.
uŒ
 = ull;

113 
u
[0] = 0;

114 
u
[1] = (
digô
)
	`HHALF
(
tmp
.
ui
[
H
]);

115 
u
[2] = (
digô
)
	`LHALF
(
tmp
.
ui
[
H
]);

116 
u
[3] = (
digô
)
	`HHALF
(
tmp
.
ui
[
L
]);

117 
u
[4] = (
digô
)
	`LHALF
(
tmp
.
ui
[
L
]);

118 
tmp
.
uŒ
 = 
vŒ
;

119 
v
[1] = (
digô
)
	`HHALF
(
tmp
.
ui
[
H
]);

120 
v
[2] = (
digô
)
	`LHALF
(
tmp
.
ui
[
H
]);

121 
v
[3] = (
digô
)
	`HHALF
(
tmp
.
ui
[
L
]);

122 
v
[4] = (
digô
)
	`LHALF
(
tmp
.
ui
[
L
]);

123 
n
 = 4; 
v
[1] == 0; v++) {

124 i‡(--
n
 == 1) {

125 
rbj
;

126 
digô
 
q1
, 
q2
, 
q3
, 
q4
;

136 
t
 = 
v
[2];

137 
q1
 = (
digô
)(
u
[1] / 
t
);

138 
rbj
 = 
	`COMBINE
(
u
[1] % 
t
, u[2]);

139 
q2
 = (
digô
)(
rbj
 / 
t
);

140 
rbj
 = 
	`COMBINE
‘bj % 
t
, 
u
[3]);

141 
q3
 = (
digô
)(
rbj
 / 
t
);

142 
rbj
 = 
	`COMBINE
‘bj % 
t
, 
u
[4]);

143 
q4
 = (
digô
)(
rbj
 / 
t
);

144 i‡(
¨q
)

145 *
¨q
 = 
rbj
 % 
t
;

146 
tmp
.
ui
[
H
] = 
	`COMBINE
(
q1
, 
q2
);

147 
tmp
.
ui
[
L
] = 
	`COMBINE
(
q3
, 
q4
);

148  (
tmp
.
Œ
);

157 
m
 = 4 - 
n
; 
u
[1] == 0; u++)

158 
m
--;

159 
i
 = 4 - 
m
; --i >= 0;)

160 
q
[
i
] = 0;

161 
q
 +4 - 
m
;

169 
d
 = 0;

170 
t
 = 
v
[1];Å < 
B
 / 2;Å <<= 1)

171 
d
++;

172 i‡(
d
 > 0) {

173 
	`shl
(&
u
[0], 
m
 + 
n
, 
d
);

174 
	`shl
(&
v
[1], 
n
 - 1, 
d
);

179 
j
 = 0;

180 
v1
 = 
v
[1];

181 
v2
 = 
v
[2];

183 
digô
 
uj0
, 
uj1
, 
uj2
;

193 
uj0
 = 
u
[
j
 + 0];

194 
uj1
 = 
u
[
j
 + 1];

195 
uj2
 = 
u
[
j
 + 2];

196 i‡(
uj0
 =
v1
) {

197 
qh©
 = 
B
;

198 
rh©
 = 
uj1
;

199 
qh©_too_big
;

201 
¬
 = 
	`COMBINE
(
uj0
, 
uj1
);

202 
qh©
 = 
¬
 / 
v1
;

203 
rh©
 = 
¬
 % 
v1
;

205 
v2
 * 
qh©
 > 
	`COMBINE
(
rh©
, 
uj2
)) {

206 
qh©_too_big
:

207 
qh©
--;

208 i‡((
rh©
 +
v1
Ë>
B
)

217 
t
 = 0, 
i
 = 
n
; i > 0; i--) {

218 
t
 = 
u
[
i
 + 
j
] - 
v
[i] * 
qh©
 -Å;

219 
u
[
i
 + 
j
] = (
digô
)
	`LHALF
(
t
);

220 
t
 = (
B
 - 
	`HHALF
(t)) & (B - 1);

222 
t
 = 
u
[
j
] -Å;

223 
u
[
j
] = (
digô
)
	`LHALF
(
t
);

230 i‡(
	`HHALF
(
t
)) {

231 
qh©
--;

232 
t
 = 0, 
i
 = 
n
; i > 0; i--) {

233 
t
 +
u
[
i
 + 
j
] + 
v
[i];

234 
u
[
i
 + 
j
] = (
digô
)
	`LHALF
(
t
);

235 
t
 = 
	`HHALF
(t);

237 
u
[
j
] = (
digô
)
	`LHALF
(u[j] + 
t
);

239 
q
[
j
] = (
digô
)
qh©
;

240 } ++
j
 <
m
);

247 i‡(
¨q
) {

248 i‡(
d
) {

249 
i
 = 
m
 + 
n
; i > m; --i)

250 
u
[
i
] = (
digô
)((()u[i] >> 
d
) |

251 
	`LHALF
(()
u
[
i
 - 1] <<

252 (
HALF_BITS
 - 
d
)));

253 
u
[
i
] = 0;

255 
tmp
.
ui
[
H
] = 
	`COMBINE
(
u•a˚
[1], uspace[2]);

256 
tmp
.
ui
[
L
] = 
	`COMBINE
(
u•a˚
[3], uspace[4]);

257 *
¨q
 = 
tmp
.
Œ
;

260 
tmp
.
ui
[
H
] = 
	`COMBINE
(
q•a˚
[1], qspace[2]);

261 
tmp
.
ui
[
L
] = 
	`COMBINE
(
q•a˚
[3], qspace[4]);

262  (
tmp
.
Œ
);

263 
	}
}

271 
	$shl
(
digô
 *
p
, 
Àn
, 
sh
)

273 
i
;

275 
i
 = 0; i < 
Àn
; i++)

276 
p
[
i
] = (
digô
)(
	`LHALF
((Ì[i] << 
sh
) |

277 (()
p
[
i
 + 1] >> (
HALF_BITS
 - 
sh
)));

278 
p
[
i
] = (
digô
)(
	`LHALF
((Ì[i] << 
sh
));

279 
	}
}

	@os161/common/gcc-millicode/subdi3.c

38 
	~"l⁄gl⁄g.h
"

46 
	$__subdi3
(
a
, 
b
)

48 
uu
 
Ø
, 
bb
, 
diff
;

50 
Ø
.
Œ
 = 
a
;

51 
bb
.
Œ
 = 
b
;

52 
diff
.
ui
[
L
] = 
Ø
.ui[L] - 
bb
.ui[L];

53 
diff
.
ui
[
H
] = 
Ø
.ui[H] - 
bb
.ui[H] - (diff.ui[
L
] >áa.ui[L]);

54  (
diff
.
Œ
);

55 
	}
}

	@os161/common/gcc-millicode/ucmpdi2.c

38 
	~"l⁄gl⁄g.h
"

45 
	$__ucmpdi2
(
a
, 
b
)

47 
uu
 
Ø
, 
bb
;

49 
Ø
.
uŒ
 = 
a
;

50 
bb
.
uŒ
 = 
b
;

51  (
Ø
.
ui
[
H
] < 
bb
.ui[H] ? 0 :áa.ui[H] > bb.ui[H] ? 2 :

52 
Ø
.
ui
[
L
] < 
bb
.ui[L] ? 0 :áa.ui[L] > bb.ui[L] ? 2 : 1);

53 
	}
}

	@os161/common/gcc-millicode/udivdi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__udivdi3
(
a
, 
b
)

47  
	`__qdivªm
(
a
, 
b
, 
NULL
);

48 
	}
}

	@os161/common/gcc-millicode/umoddi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__umoddi3
(
a
, 
b
)

46 
r
;

48 ()
	`__qdivªm
(
a
, 
b
, &
r
);

49  (
r
);

50 
	}
}

	@os161/common/gcc-millicode/xordi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__x‹di3
(
a
, 
b
)

46 
uu
 
Ø
, 
bb
;

48 
Ø
.
Œ
 = 
a
;

49 
bb
.
Œ
 = 
b
;

50 
Ø
.
ui
[0] ^
bb
.ui[0];

51 
Ø
.
ui
[1] ^
bb
.ui[1];

52  (
Ø
.
Œ
);

53 
	}
}

	@os161/common/libc/printf/__printf.c

40 #ifde‡
_KERNEL


41 
	~<ty≥s.h
>

42 
	~<lib.h
>

43 
	#as£π
 
KASSERT


	)

46 
	~<sys/ty≥s.h
>

47 
	~<as£π.h
>

48 
	~<°döt.h
>

49 
	~<°dio.h
>

50 
	~<°rög.h
>

53 
	~<°d¨g.h
>

64 
	#USE_LONGLONG


	)

69 #ifde‡
USE_LONGLONG


70 
	#INTTYPE
 

	)

72 
	#INTTYPE
 

	)

84 
	#NUMBER_BUF_SIZE
 (((
INTTYPE
Ë* 
CHAR_BIT
Ë/ 3 + 2)

	)

91 (*
	m£ndfunc
)(*
	m˛õ¡d©a
, c⁄° *
	m°r
, 
size_t
 
	mÀn
);

92 *
	m˛õ¡d©a
;

95 
va_li°
 
	m≠
;

98 
	mch¨cou¡
;

101 
	mö_p˘
;

105 
	mINTSZ
,

106 
	mLONGSZ
,

107 #ifde‡
USE_LONGLONG


108 
	mLLONGSZ
,

110 } 
	msize
;

113 
INTTYPE
 
	mnum
;

116 
	msign
;

119 
	m•acög
;

122 
	mright•c
;

125 
	mfûlch¨
;

128 
	mba£
;

131 
	mba£¥efix
;

134 
	mÆtf‹m©
;

135 } 
	tPF
;

145 
	$__pf_¥öt
(
PF
 *
pf
, c⁄° *
txt
, 
size_t
 
Àn
)

147 
pf
->
	`£ndfunc
’f->
˛õ¡d©a
, 
txt
, 
Àn
);

148 
pf
->
ch¨cou¡
 +
Àn
;

149 
	}
}

156 
	$__pf_ídfõld
(
PF
 *
pf
)

158 
pf
->
ö_p˘
 = 0;

159 
pf
->
size
 = 
INTSZ
;

160 
pf
->
num
 = 0;

161 
pf
->
sign
 = 0;

162 
pf
->
•acög
 = 0;

163 
pf
->
right•c
 = 0;

164 
pf
->
fûlch¨
 = ' ';

165 
pf
->
ba£
 = 0;

166 
pf
->
ba£¥efix
 = 0;

167 
pf
->
Ætf‹m©
 = 0;

168 
	}
}

180 
	$__pf_modifõr
(
PF
 *
pf
, 
ch
)

182 
ch
) {

184 
pf
->
Ætf‹m©
 = 1;

187 
pf
->
right•c
 = 1;

190 i‡(
pf
->
size
==
LONGSZ
) {

191 #ifde‡
USE_LONGLONG


192 
pf
->
size
 = 
LLONGSZ
;

196 
pf
->
size
 = 
LONGSZ
;

200 i‡(
pf
->
•acög
>0) {

205 
pf
->
•acög
 =Öf->spacing*10;

211 
pf
->
fûlch¨
 = '0';

220 
	`as£π
(
ch
>'0' && ch<='9');

225 
pf
->
•acög
 =Öf->•acög*10 + (
ch
-'0');

228 
	}
}

237 
	$__pf_gënum
(
PF
 *
pf
, 
ch
)

239 i‡(
ch
=='p') {

246 
pf
->
num
 = (
uöçå_t
Ë
	`va_¨g
’f->
≠
, *);

248 i‡(
ch
=='d') {

250 
INTTYPE
 
sig√dnum
=0;

251 
pf
->
size
) {

252 
INTSZ
:

254 
sig√dnum
 = 
	`va_¨g
(
pf
->
≠
, );

256 
LONGSZ
:

258 
sig√dnum
 = 
	`va_¨g
(
pf
->
≠
, );

260 #ifde‡
USE_LONGLONG


261 
LLONGSZ
:

263 
sig√dnum
 = 
	`va_¨g
(
pf
->
≠
, );

271 i‡(
sig√dnum
 < 0) {

272 
pf
->
sign
 = -1;

273 
pf
->
num
 = -
sig√dnum
;

276 
pf
->
num
 = 
sig√dnum
;

281 
pf
->
size
) {

282 
INTSZ
:

284 
pf
->
num
 = 
	`va_¨g
’f->
≠
, );

286 
LONGSZ
:

288 
pf
->
num
 = 
	`va_¨g
’f->
≠
, );

290 #ifde‡
USE_LONGLONG


291 
LLONGSZ
:

293 
pf
->
num
 = 
	`va_¨g
’f->
≠
, );

298 
	}
}

312 
	$__pf_£tba£
(
PF
 *
pf
, 
ch
)

314 
ch
) {

317 
pf
->
ba£
 = 10;

321 
pf
->
ba£
 = 16;

324 
pf
->
ba£
 = 8;

327 i‡(
pf
->
Ætf‹m©
 || 
ch
=='p') {

328 
pf
->
ba£¥efix
 = 1;

330 
	}
}

337 
	$__pf_fûl
(
PF
 *
pf
, 
•c
)

339 
f
 = 
pf
->
fûlch¨
;

340 
i
;

341 
i
=0; i<
•c
; i++) {

342 
	`__pf_¥öt
(
pf
, &
f
, 1);

344 
	}
}

354 
	$__pf_¥öt°uff
(
PF
 *
pf
,

355 c⁄° *
¥efix
, c⁄° *
¥efix2
,

356 c⁄° *
°uff
)

359 
Àn
 = 
	`°æí
(
¥efix
)+°æí(
¥efix2
)+°æí(
°uff
);

362 
•c
 = 
pf
->
•acög
;

363 i‡(
•c
 > 
Àn
) {

364 
•c
 -
Àn
;

367 
•c
 = 0;

371 i‡(
•c
 > 0 && 
pf
->
right•c
==0 &&Öf->
fûlch¨
!='0') {

372 
	`__pf_fûl
(
pf
, 
•c
);

376 
	`__pf_¥öt
(
pf
, 
¥efix
, 
	`°æí
(prefix));

377 
	`__pf_¥öt
(
pf
, 
¥efix2
, 
	`°æí
(prefix2));

380 i‡(
•c
 > 0 && 
pf
->
right•c
==0 &&Öf->
fûlch¨
=='0') {

381 
	`__pf_fûl
(
pf
, 
•c
);

385 
	`__pf_¥öt
(
pf
, 
°uff
, 
	`°æí
(stuff));

388 i‡(
•c
 > 0 && 
pf
->
right•c
!=0) {

389 
	`__pf_fûl
(
pf
, 
•c
);

391 
	}
}

402 
	$__pf_¥öäum
(
PF
 *
pf
)

405 c⁄° *c⁄° 
digôs
 = "0123456789abcdef";

407 
buf
[
NUMBER_BUF_SIZE
];

408 *
x
;

409 
INTTYPE
 
xnum
;

410 c⁄° *
b¥efix
;

411 c⁄° *
•ªfix
;

414 
x
 = 
buf
+(buf)-1;

417 *
x
-- = 0;

420 
xnum
 = 
pf
->
num
;

431 *
x
 = 
digôs
[
xnum
 % 
pf
->
ba£
];

436 
x
--;

441 
xnum
 = xnum / 
pf
->
ba£
;

446 } 
xnum
 > 0);

454 
x
++;

459 i‡(
pf
->
ba£¥efix
 &&Öf->
ba£
==16) {

460 
b¥efix
 = "0x";

462 i‡(
pf
->
ba£¥efix
 &&Öf->
ba£
==8) {

463 
b¥efix
 = "0";

466 
b¥efix
 = "";

472 
•ªfix
 = 
pf
->
sign
 ? "-" : "";

477 
	`__pf_¥öt°uff
(
pf
, 
•ªfix
, 
b¥efix
, 
x
);

478 
	}
}

485 
	$__pf_£nd
(
PF
 *
pf
, 
ch
)

488 
	`as£π
(
ch
!=0);

490 i‡(
pf
->
ö_p˘
==0 && 
ch
!='%') {

495 
c
 = 
ch
;

496 
	`__pf_¥öt
(
pf
, &
c
, 1);

498 i‡(
pf
->
ö_p˘
==0) {

502 
pf
->
ö_p˘
 = 1;

504 i‡(
	`°rchr
("#-l0123456789", 
ch
)) {

509 
	`__pf_modifõr
(
pf
, 
ch
);

511 i‡(
	`°rchr
("doupx", 
ch
)) {

517 
	`__pf_gënum
(
pf
, 
ch
);

518 
	`__pf_£tba£
(
pf
, 
ch
);

519 
	`__pf_¥öäum
(
pf
);

520 
	`__pf_ídfõld
(
pf
);

522 i‡(
ch
=='s') {

526 c⁄° *
°r
 = 
	`va_¨g
(
pf
->
≠
, const *);

527 i‡(
°r
==
NULL
) {

528 
°r
 = "(null)";

530 
	`__pf_¥öt°uff
(
pf
, "", "", 
°r
);

531 
	`__pf_ídfõld
(
pf
);

539 
x
[2];

540 i‡(
ch
=='c') {

541 
x
[0] = 
	`va_¨g
(
pf
->
≠
, );

544 
x
[0] = 
ch
;

546 
x
[1] = 0;

547 
	`__pf_¥öt°uff
(
pf
, "", "", 
x
);

548 
	`__pf_ídfõld
(
pf
);

550 
	}
}

558 
__v¥ötf
((*
func
)(*
˛õ¡d©a
, c⁄° *
°r
, 
size_t
 
Àn
),

559 *
˛õ¡d©a
, c⁄° *
f‹m©
, 
va_li°
 
≠
)

561 
PF
 
pf
;

562 
i
;

564 
pf
.
£ndfunc
 = 
func
;

565 
pf
.
˛õ¡d©a
 = clientdata;

566 
pf
.
≠
 =áp;

567 
pf
.
ch¨cou¡
 = 0;

568 
	`__pf_ídfõld
(&
pf
);

570 
i
=0; 
f‹m©
[i]; i++) {

571 
	`__pf_£nd
(&
pf
, 
f‹m©
[
i
]);

574  
pf
.
ch¨cou¡
;

575 
	}
}

	@os161/common/libc/printf/snprintf.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

40 
	~<°dio.h
>

44 
	~<°d¨g.h
>

61 *
	mbuf
;

62 
size_t
 
	mbuÊí
;

63 
size_t
 
	mbuÂos
;

64 } 
	tSNP
;

75 
	$__¢¥ötf_£nd
(*
myd©a
, c⁄° *
d©a
, 
size_t
 
Àn
)

77 
SNP
 *
¢p
 = 
myd©a
;

78 
i
;

81 
i
=0; i<
Àn
; i++) {

84 i‡(
¢p
->
buÂos
 < s≈->
buÊí
) {

87 
¢p
->
buf
[¢p->
buÂos
] = 
d©a
[
i
];

90 
¢p
->
buÂos
++;

93 
	}
}

99 
	$v¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, 
va_li°
 
≠
)

101 
ch¨s
;

102 
SNP
 
¢p
;

111 
¢p
.
buf
 = buf;

112 i‡(
Àn
==0) {

113 
¢p
.
buÊí
 = 0;

116 
¢p
.
buÊí
 = 
Àn
-1;

118 
¢p
.
buÂos
 = 0;

121 
ch¨s
 = 
	`__v¥ötf
(
__¢¥ötf_£nd
, &
¢p
, 
fmt
, 
≠
);

130 i‡(
Àn
 > 0) {

131 
buf
[
¢p
.
buÂos
] = 0;

141  
ch¨s
;

142 
	}
}

148 
	$¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, ...)

150 
ch¨s
;

151 
va_li°
 
≠
;

152 
	`va_°¨t
(
≠
, 
fmt
);

153 
ch¨s
 = 
	`v¢¥ötf
(
buf
, 
Àn
, 
fmt
, 
≠
);

154 
	`va_íd
(
≠
);

155  
ch¨s
;

156 
	}
}

	@os161/common/libc/stdlib/atoi.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°dlib.h
>

40 
	~<°rög.h
>

50 
	$©oi
(c⁄° *
s
)

52 c⁄° 
digôs
[] = "0123456789";

53 
vÆ
=0;

54 
√g
=0;

57 *
s
==' ' || *s=='\t') {

58 
s
++;

62 i‡(*
s
=='-') {

63 
√g
=1;

64 
s
++;

66 i‡(*
s
=='+') {

67 
s
++;

71 *
s
) {

72 c⁄° *
whîe
;

73 
digô
;

76 
whîe
 = 
	`°rchr
(
digôs
, *
s
);

77 i‡(
whîe
==
NULL
) {

83 
digô
 = (
whîe
 - 
digôs
);

88 
vÆ
 = vÆ*10 + 
digô
;

91 
s
++;

95 i‡(
√g
) {

96  -
vÆ
;

100  
vÆ
;

101 
	}
}

	@os161/common/libc/string/bzero.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°döt.h
>

40 
	~<°rög.h
>

49 
	$bzîo
(*
vblock
, 
size_t
 
Àn
)

51 *
block
 = 
vblock
;

52 
size_t
 
i
;

64 i‡((
uöçå_t
)
block
 % () == 0 &&

65 
Àn
 % () == 0) {

66 *
lb
 = (*)
block
;

67 
i
=0; i<
Àn
/(); i++) {

68 
lb
[
i
] = 0;

72 
i
=0; i<
Àn
; i++) {

73 
block
[
i
] = 0;

76 
	}
}

	@os161/common/libc/string/memcpy.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°döt.h
>

40 
	~<°rög.h
>

48 
	$mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
)

50 
size_t
 
i
;

65 i‡((
uöçå_t
)
d°
 % () == 0 &&

66 (
uöçå_t
)
§c
 % () == 0 &&

67 
Àn
 % () == 0) {

69 *
d
 = 
d°
;

70 c⁄° *
s
 = 
§c
;

72 
i
=0; i<
Àn
/(); i++) {

73 
d
[
i
] = 
s
[i];

77 *
d
 = 
d°
;

78 c⁄° *
s
 = 
§c
;

80 
i
=0; i<
Àn
; i++) {

81 
d
[
i
] = 
s
[i];

85  
d°
;

86 
	}
}

	@os161/common/libc/string/memmove.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°döt.h
>

40 
	~<°rög.h
>

49 
	$memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
)

51 
size_t
 
i
;

78 i‡((
uöçå_t
)
d°
 < (uöçå_t)
§c
) {

83  
	`mem˝y
(
d°
, 
§c
, 
Àn
);

91 i‡((
uöçå_t
)
d°
 % () == 0 &&

92 (
uöçå_t
)
§c
 % () == 0 &&

93 
Àn
 % () == 0) {

95 *
d
 = 
d°
;

96 c⁄° *
s
 = 
§c
;

103 
i
=
Àn
/(); i>0; i--) {

104 
d
[
i
-1] = 
s
[i-1];

108 *
d
 = 
d°
;

109 c⁄° *
s
 = 
§c
;

111 
i
=
Àn
; i>0; i--) {

112 
d
[
i
-1] = 
s
[i-1];

116  
d°
;

117 
	}
}

	@os161/common/libc/string/strcat.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

47 
	$°rˇt
(*
de°
, c⁄° *
§c
)

49 
size_t
 
off£t
;

51 
off£t
 = 
	`°æí
(
de°
);

52 
	`°r˝y
(
de°
+
off£t
, 
§c
);

53  
de°
;

54 
	}
}

	@os161/common/libc/string/strchr.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

47 
	$°rchr
(c⁄° *
s
, 
ch_¨g
)

50 c⁄° 
ch
 = 
ch_¨g
;

53 *
s
) {

55 i‡(*
s
 =
ch
) {

56  (*)
s
;

58 
s
++;

62 i‡(*
s
 =
ch
) {

63  (*)
s
;

67  
NULL
;

68 
	}
}

	@os161/common/libc/string/strcmp.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

48 
	$°rcmp
(c⁄° *
a
, c⁄° *
b
)

50 
size_t
 
i
;

66 
i
=0; 
a
[i]!=0 &&á[i]==
b
[i]; i++) {

83 i‡(()
a
[
i
] > ()
b
[i]) {

86 i‡(
a
[
i
] =
b
[i]) {

90 
	}
}

	@os161/common/libc/string/strcpy.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

46 
	$°r˝y
(*
de°
, c⁄° *
§c
)

48 
size_t
 
i
;

53 
i
=0; 
§c
[i]; i++) {

54 
de°
[
i
] = 
§c
[i];

60 
de°
[
i
] = 0;

62  
de°
;

63 
	}
}

	@os161/common/libc/string/strlen.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

46 
size_t


47 
	$°æí
(c⁄° *
°r
)

49 
size_t
 
ªt
 = 0;

51 
°r
[
ªt
]) {

52 
ªt
++;

54  
ªt
;

55 
	}
}

	@os161/common/libc/string/strrchr.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

47 
	$°ºchr
(c⁄° *
s
, 
ch_¨g
)

50 c⁄° 
ch
 = 
ch_¨g
;

53 
size_t
 
i
 = 
	`°æí
(
s
)+1;

56 
i
 > 0) {

59 
i
--;

62 i‡(
s
[
i
] =
ch
) {

63  (*)(
s
+
i
);

68  
NULL
;

69 
	}
}

	@os161/common/libc/string/strtok_r.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

50 
	$°πok_r
(*
°rög
, c⁄° *
£ps
, **
c⁄ãxt
)

52 *
hód
;

53 *
èû
;

56 i‡(
°rög
) {

57 *
c⁄ãxt
 = 
°rög
;

61 
hód
 = *
c⁄ãxt
;

62 i‡(
hód
 =
NULL
) {

63  
NULL
;

67 *
hód
 && 
	`°rchr
(
£ps
, *head)) {

68 
hód
++;

72 i‡(*
hód
 == 0) {

74 *
c⁄ãxt
 = 
NULL
;

75  
NULL
;

79 
èû
 = 
hód
;

80 *
èû
 && !
	`°rchr
(
£ps
, *tail)) {

81 
èû
++;

85 i‡(*
èû
 == 0) {

86 *
c⁄ãxt
 = 
NULL
;

89 *
èû
 = 0;

90 
èû
++;

91 *
c⁄ãxt
 = 
èû
;

95  
hód
;

96 
	}
}

	@os161/kern/arch/mips/include/current.h

30 #i‚de‡
_MIPS_CURRENT_H_


31 
	#_MIPS_CURRENT_H_


	)

79 
thªad
 *
cuπhªad
 
asm
("$23");

80 #unde‡
__NEED_CURTHREAD


81 
	#__NEED_CURCPU


	)

84 
	#INIT_CURCPU
(
˝u
, 
thªad
Ë(
cuπhªad
 = (thªad), 
cur˝u
 = (˝u))

	)

	@os161/kern/arch/mips/include/elf.h

30 #i‚de‡
_MIPS_ELF_H_


31 
	#_MIPS_ELF_H_


	)

39 
	#EM_MACHINE
 
EM_MIPS


	)

42 
	#R_MIPS_NONE
 0

	)

43 
	#R_MIPS_16
 1

	)

44 
	#R_MIPS_32
 2

	)

45 
	#R_MIPS_REL32
 3

	)

46 
	#R_MIPS_26
 4

	)

47 
	#R_MIPS_HI16
 5

	)

48 
	#R_MIPS_LO16
 6

	)

49 
	#R_MIS_GREL16
 7

	)

50 
	#R_MIPS_LITERAL
 8

	)

51 
	#R_MIPS_GOT16
 9

	)

52 
	#R_MIPS_PC16
 10

	)

53 
	#R_MIPS_CALL16
 11

	)

54 
	#R_MIPS_GPREL32
 12

	)

	@os161/kern/arch/mips/include/kern/endian.h

30 #i‚de‡
_KERN_MIPS_ENDIAN_H_


31 
	#_KERN_MIS_ENDIAN_H_


	)

42 
	#_BYTE_ORDER
 
_BIG_ENDIAN


	)

	@os161/kern/arch/mips/include/kern/regdefs.h

36 #i‚de‡
_KERN_MIPS_REGDEFS_H_


37 
	#_KERN_MIPS_REGDEFS_H_


	)

40 
	#z0
 
$0


	)

41 
	#AT
 
$1


	)

42 
	#v0
 
$2


	)

43 
	#v1
 
$3


	)

44 
	#a0
 
$4


	)

45 
	#a1
 
$5


	)

46 
	#a2
 
$6


	)

47 
	#a3
 
$7


	)

48 
	#t0
 
$8


	)

49 
	#t1
 
$9


	)

50 
	#t2
 
$10


	)

51 
	#t3
 
$11


	)

52 
	#t4
 
$12


	)

53 
	#t5
 
$13


	)

54 
	#t6
 
$14


	)

55 
	#t7
 
$15


	)

56 
	#s0
 
$16


	)

57 
	#s1
 
$17


	)

58 
	#s2
 
$18


	)

59 
	#s3
 
$19


	)

60 
	#s4
 
$20


	)

61 
	#s5
 
$21


	)

62 
	#s6
 
$22


	)

63 
	#s7
 
$23


	)

64 
	#t8
 
$24


	)

65 
	#t9
 
$25


	)

66 
	#k0
 
$26


	)

67 
	#k1
 
$27


	)

68 
	#gp
 
$28


	)

69 
	#•
 
$29


	)

70 
	#s8
 
$30


	)

71 
	#ø
 
$31


	)

	@os161/kern/arch/mips/include/kern/setjmp.h

30 #i‚de‡
_MIPS_SETJMP_H_


31 
	#_MIPS_SETJMP_H_


	)

41 
	#__JB_REGS
 11

	)

44 
uöt32_t
 
	tjmp_buf
[
__JB_REGS
];

	@os161/kern/arch/mips/include/kern/signal.h

31 #i‚de‡
_KERN_MIPS_SIGNAL_H_


32 
	#_KERN_MIPS_SIGNAL_H_


	)

41 
	ssigc⁄ãxt
 {

	@os161/kern/arch/mips/include/kern/types.h

30 #i‚de‡
_KERN_MIPS_TYPES_H_


31 
	#_KERN_MIPS_TYPES_H_


	)

43 
	t__i8
;

44 
	t__i16
;

45 
	t__i32
;

46 
	t__i64
;

48 
	t__u8
;

49 
	t__u16
;

50 
	t__u32
;

51 
	t__u64
;

54 
	t__öçå_t
;

55 
	t__uöçå_t
;

65 
	t__size_t
;

66 
	t__ssize_t
;

67 
	t__±rdiff_t
;

69 
	t__size_t
;

70 
	t__ssize_t
;

71 
	t__±rdiff_t
;

75 
	#__CHAR_BIT
 8

	)

	@os161/kern/arch/mips/include/specialreg.h

30 #i‚de‡
_MIPS_SPECIALREG_H_


31 
	#_MIPS_SPECIALREG_H_


	)

37 
	#c0_ödex
 
$0


	)

38 
	#c0_øndom
 
$1


	)

39 
	#c0_íåylo
 
$2


	)

42 
	#c0_c⁄ãxt
 
$4


	)

45 
	#c0_vaddr
 
$8


	)

46 
	#c0_cou¡
 
$9


	)

47 
	#c0_íåyhi
 
$10


	)

48 
	#c0_com∑ª
 
$11


	)

49 
	#c0_°©us
 
$12


	)

50 
	#c0_ˇu£
 
$13


	)

51 
	#c0_ïc
 
$14


	)

52 
	#c0_¥id
 
$15


	)

61 
	#CST_IEc
 0x00000001

	)

62 
	#CST_KUc
 0x00000002

	)

63 
	#CST_IEp
 0x00000004

	)

64 
	#CST_KUp
 0x00000008

	)

65 
	#CST_IEo
 0x00000010

	)

66 
	#CST_KUo
 0x00000020

	)

67 
	#CST_MODEMASK
 0x0000003‡

	)

68 
	#CST_IRQMASK
 0x0000ff00

	)

69 
	#CST_BEV
 0x00400000

	)

74 
	#CCA_UTLB
 0x00000001

	)

75 
	#CCA_CODE
 0x0000003¯

	)

76 
	#CCA_IRQS
 0x0000ff00

	)

77 
	#CCA_COPN
 0x30000000

	)

78 
	#CCA_JD
 0x80000000

	)

80 
	#CCA_CODESHIFT
 2

	)

85 
	#CIN_P
 0x80000000

	)

86 
	#CIN_INDEX
 0x00003f00

	)

88 
	#CIN_INDEXSHIFT
 8

	)

105 
	#CTX_VSHIFT
 0x001ffff¯

	)

106 
	#CTX_PTBASE
 0xf„00000

	)

108 
	#CTX_PTBASESHIFT
 21

	)

113 
	#EXADDR_UTLB
 0x80000000

	)

114 
	#EXADDR_GENERAL
 0x80000080

	)

	@os161/kern/arch/mips/include/spinlock.h

30 #i‚de‡
_MIPS_SPINLOCK_H_


31 
	#_MIPS_SPINLOCK_H_


	)

33 
	~<cdefs.h
>

37 
	t•ölock_d©a_t
;

40 
	#SPINLOCK_DATA_INITIALIZER
 0

	)

43 
•ölock_d©a_£t
(vﬁ©ûê
•ölock_d©a_t
 *
sd
, 
vÆ
);

44 
•ölock_d©a_t
 
•ölock_d©a_gë
(vﬁ©ûê•ölock_d©a_à*
sd
);

45 
•ölock_d©a_t
 
•ölock_d©a_ã°™d£t
(vﬁ©ûê•ölock_d©a_à*
sd
);

49 
SPINLOCK_INLINE


51 
	$•ölock_d©a_£t
(vﬁ©ûê
•ölock_d©a_t
 *
sd
, 
vÆ
)

53 *
sd
 = 
vÆ
;

54 
	}
}

56 
SPINLOCK_INLINE


57 
•ölock_d©a_t


58 
	$•ölock_d©a_gë
(vﬁ©ûê
•ölock_d©a_t
 *
sd
)

60  *
sd
;

61 
	}
}

63 
SPINLOCK_INLINE


64 
•ölock_d©a_t


65 
	$•ölock_d©a_ã°™d£t
(vﬁ©ûê
•ölock_d©a_t
 *
sd
)

67 
•ölock_d©a_t
 
x
;

68 
•ölock_d©a_t
 
y
;

81 
y
 = 1;

82 
__asm
 volatile(

89 : "Ù" (
x
), "+r" (
y
Ë: "r" (
sd
));

90 i‡(
y
 == 0) {

93  
x
;

94 
	}
}

	@os161/kern/arch/mips/include/thread.h

30 #i‚de‡
_MIPS_THREAD_H_


31 
	#_MIPS_THREAD_H_


	)

38 
	~<£tjmp.h
>

40 (*
	tbadÁu…func_t
)();

42 
	sthªad_machdï
 {

43 
badÁu…func_t
 
tm_badÁu…func
;

44 
jmp_buf
 
tm_c›yjmp
;

	@os161/kern/arch/mips/include/tlb.h

30 #i‚de‡
_MIPS_TLB_H_


31 
	#_MIPS_TLB_H_


	)

58 
éb_øndom
(
uöt32_t
 
íåyhi
, uöt32_à
íåylo
);

59 
éb_wrôe
(
uöt32_t
 
íåyhi
, uöt32_à
íåylo
, uöt32_à
ödex
);

60 
éb_ªad
(
uöt32_t
 *
íåyhi
, uöt32_à*
íåylo
, uöt32_à
ödex
);

61 
éb_¥obe
(
uöt32_t
 
íåyhi
, uöt32_à
íåylo
);

80 
	#TLBHI_VPAGE
 0xfffff000

	)

84 
	#TLBLO_PPAGE
 0xfffff000

	)

85 
	#TLBLO_NOCACHE
 0x00000800

	)

86 
	#TLBLO_DIRTY
 0x00000400

	)

87 
	#TLBLO_VALID
 0x00000200

	)

95 
	#TLBHI_INVALID
(
íåyno
Ë((0x80000+”¡ryno))<<12)

	)

96 
	#TLBLO_INVALID
(Ë(0)

	)

102 
	#NUM_TLB
 64

	)

	@os161/kern/arch/mips/include/trapframe.h

30 #i‚de‡
_MIPS_TRAPFRAME_H_


31 
	#_MIPS_TRAPFRAME_H_


	)

40 
	så≠‰ame
 {

41 
uöt32_t
 
	mtf_vaddr
;

42 
uöt32_t
 
	mtf_°©us
;

43 
uöt32_t
 
	mtf_ˇu£
;

44 
uöt32_t
 
	mtf_lo
;

45 
uöt32_t
 
	mtf_hi
;

46 
uöt32_t
 
	mtf_ø
;

47 
uöt32_t
 
	mtf_©
;

48 
uöt32_t
 
	mtf_v0
;

49 
uöt32_t
 
	mtf_v1
;

50 
uöt32_t
 
	mtf_a0
;

51 
uöt32_t
 
	mtf_a1
;

52 
uöt32_t
 
	mtf_a2
;

53 
uöt32_t
 
	mtf_a3
;

54 
uöt32_t
 
	mtf_t0
;

55 
uöt32_t
 
	mtf_t1
;

56 
uöt32_t
 
	mtf_t2
;

57 
uöt32_t
 
	mtf_t3
;

58 
uöt32_t
 
	mtf_t4
;

59 
uöt32_t
 
	mtf_t5
;

60 
uöt32_t
 
	mtf_t6
;

61 
uöt32_t
 
	mtf_t7
;

62 
uöt32_t
 
	mtf_s0
;

63 
uöt32_t
 
	mtf_s1
;

64 
uöt32_t
 
	mtf_s2
;

65 
uöt32_t
 
	mtf_s3
;

66 
uöt32_t
 
	mtf_s4
;

67 
uöt32_t
 
	mtf_s5
;

68 
uöt32_t
 
	mtf_s6
;

69 
uöt32_t
 
	mtf_s7
;

70 
uöt32_t
 
	mtf_t8
;

71 
uöt32_t
 
	mtf_t9
;

72 
uöt32_t
 
	mtf_k0
;

73 
uöt32_t
 
	mtf_k1
;

74 
uöt32_t
 
	mtf_gp
;

75 
uöt32_t
 
	mtf_•
;

76 
uöt32_t
 
	mtf_s8
;

77 
uöt32_t
 
	mtf_ïc
;

83 
	#EX_IRQ
 0

	)

84 
	#EX_MOD
 1

	)

85 
	#EX_TLBL
 2

	)

86 
	#EX_TLBS
 3

	)

87 
	#EX_ADEL
 4

	)

88 
	#EX_ADES
 5

	)

89 
	#EX_IBE
 6

	)

90 
	#EX_DBE
 7

	)

91 
	#EX_SYS
 8

	)

92 
	#EX_BP
 9

	)

93 
	#EX_RI
 10

	)

94 
	#EX_CPU
 11

	)

95 
	#EX_OVF
 12

	)

101 
mùs_u£rmode
(
å≠‰ame
 *
tf
);

106 
vaddr_t
 
˝u°acks
[];

107 
vaddr_t
 
˝uthªads
[];

	@os161/kern/arch/mips/include/types.h

30 #i‚de‡
_MIPS_TYPES_H_


31 
	#_MIPS_TYPES_H_


	)

43 
__u32
 
	t∑ddr_t
;

44 
__u32
 
	tvaddr_t
;

	@os161/kern/arch/mips/include/vm.h

30 #i‚de‡
_MIPS_VM_H_


31 
	#_MIPS_VM_H_


	)

38 
	#PAGE_SIZE
 4096

	)

39 
	#PAGE_FRAME
 0xfffff000

	)

51 
	#MIPS_KUSEG
 0x00000000

	)

52 
	#MIPS_KSEG0
 0x80000000

	)

53 
	#MIPS_KSEG1
 0xa0000000

	)

54 
	#MIPS_KSEG2
 0xc0000000

	)

68 
	#PADDR_TO_KVADDR
(
∑ddr
Ë(’addr)+
MIPS_KSEG0
)

	)

74 
	#USERSPACETOP
 
MIPS_KSEG0


	)

84 
	#USERSTACK
 
USERSPACETOP


	)

101 
øm_boŸ°øp
();

102 
∑ddr_t
 
øm_°ólmem
(
≈ages
);

103 
øm_gësize
(
∑ddr_t
 *
lo
,Öaddr_à*
hi
);

111 
	sébshoŸdown
 {

115 
addr•a˚
 *
	mts_addr•a˚
;

116 
vaddr_t
 
	mts_vaddr
;

119 
	#TLBSHOOTDOWN_MAX
 16

	)

	@os161/kern/arch/mips/locore/trap.c

30 
	~<ty≥s.h
>

31 
	~<sig«l.h
>

32 
	~<lib.h
>

33 
	~<mùs/•ecüÃeg.h
>

34 
	~<mùs/å≠‰ame.h
>

35 
	~<˝u.h
>

36 
	~<•l.h
>

37 
	~<thªad.h
>

38 
	~<cuºít.h
>

39 
	~<vm.h
>

40 
	~<maöbus.h
>

41 
	~<sysˇŒ.h
>

45 
asm_u£rmode
(
å≠‰ame
 *
tf
);

48 
mùs_å≠
(
å≠‰ame
 *
tf
);

52 
	#NTRAPCODES
 13

	)

53 c⁄° *c⁄° 
	gå≠codíames
[
NTRAPCODES
] = {

74 
	$kûl_cuπhªad
(
vaddr_t
 
ïc
, 
code
, vaddr_à
vaddr
)

76 
sig
 = 0;

78 
	`KASSERT
(
code
 < 
NTRAPCODES
);

79 
code
) {

80 
EX_IRQ
:

81 
EX_IBE
:

82 
EX_DBE
:

83 
EX_SYS
:

85 
	`KASSERT
(0);

86 
sig
 = 
SIGABRT
;

88 
EX_MOD
:

89 
EX_TLBL
:

90 
EX_TLBS
:

91 
sig
 = 
SIGSEGV
;

93 
EX_ADEL
:

94 
EX_ADES
:

95 
sig
 = 
SIGBUS
;

97 
EX_BP
:

98 
sig
 = 
SIGTRAP
;

100 
EX_RI
:

101 
sig
 = 
SIGILL
;

103 
EX_CPU
:

104 
sig
 = 
SIGSEGV
;

106 
EX_OVF
:

107 
sig
 = 
SIGFPE
;

115 
	`k¥ötf
("Fatal user modeÅrap %u sig %d (%s,Épc 0x%x, vaddr 0x%x)\n",

116 
code
, 
sig
, 
å≠codíames
[code], 
ïc
, 
vaddr
);

117 
	`∑nic
("I don't know howÅo handleÅhis\n");

118 
	}
}

126 
	$mùs_å≠
(
å≠‰ame
 *
tf
)

128 
uöt32_t
 
code
;

129 
boﬁ
 
isuéb
, 
iskîn
;

130 
•l
;

133 
	`KASSERT
((
å≠‰ame
)==(37*4));

138 
code
 = (
tf
->
tf_ˇu£
 & 
CCA_CODE
Ë>> 
CCA_CODESHIFT
;

139 
isuéb
 = (
tf
->
tf_ˇu£
 & 
CCA_UTLB
) != 0;

140 
iskîn
 = (
tf
->
tf_°©us
 & 
CST_KUp
) == 0;

142 
	`KASSERT
(
code
 < 
NTRAPCODES
);

145 i‡(
cuπhªad
 !
NULL
 && cuπhªad->
t_°ack
 != NULL) {

146 
	`KASSERT
((
vaddr_t
)
tf
 > (vaddr_t)
cuπhªad
->
t_°ack
);

147 
	`KASSERT
((
vaddr_t
)
tf
 < (vaddr_t)(
cuπhªad
->
t_°ack


148 + 
STACK_SIZE
));

152 i‡(
code
 =
EX_IRQ
) {

153 
ﬁd_ö
;

154 
boﬁ
 
dﬂdju°
;

156 
ﬁd_ö
 = 
cuπhªad
->
t_ö_öãºu±
;

157 
cuπhªad
->
t_ö_öãºu±
 = 1;

176 i‡(
cuπhªad
->
t_cur•l
 == 0) {

177 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

178 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

179 
cuπhªad
->
t_cur•l
 = 
IPL_HIGH
;

180 
cuπhªad
->
t_ùlhigh_cou¡
++;

181 
dﬂdju°
 = 
åue
;

184 
dﬂdju°
 = 
Ál£
;

187 
	`maöbus_öãºu±
(
tf
);

189 i‡(
dﬂdju°
) {

190 
	`KASSERT
(
cuπhªad
->
t_cur•l
 =
IPL_HIGH
);

191 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 1);

192 
cuπhªad
->
t_ùlhigh_cou¡
--;

193 
cuπhªad
->
t_cur•l
 = 0;

196 
cuπhªad
->
t_ö_öãºu±
 = 
ﬁd_ö
;

197 
d⁄e2
;

211 
•l
 = 
	`•lhigh
();

212 
	`•lx
(
•l
);

215 i‡(
code
 =
EX_SYS
) {

217 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

218 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

220 
	`DEBUG
(
DB_SYSCALL
, "syscall: #%d,árgs %x %x %x %x\n",

221 
tf
->
tf_v0
,Åf->
tf_a0
,Åf->
tf_a1
,Åf->
tf_a2
,Åf->
tf_a3
);

223 
	`sysˇŒ
(
tf
);

224 
d⁄e
;

232 
code
) {

233 
EX_MOD
:

234 i‡(
	`vm_Áu…
(
VM_FAULT_READONLY
, 
tf
->
tf_vaddr
)==0) {

235 
d⁄e
;

238 
EX_TLBL
:

239 i‡(
	`vm_Áu…
(
VM_FAULT_READ
, 
tf
->
tf_vaddr
)==0) {

240 
d⁄e
;

243 
EX_TLBS
:

244 i‡(
	`vm_Áu…
(
VM_FAULT_WRITE
, 
tf
->
tf_vaddr
)==0) {

245 
d⁄e
;

248 
EX_IBE
:

249 
EX_DBE
:

259 
	`∑nic
("Bu†îr‹Éx˚±i⁄, PC=0x%x\n", 
tf
->
tf_ïc
);

269 i‡(!
iskîn
) {

274 
	`kûl_cuπhªad
(
tf
->
tf_ïc
, 
code
,Åf->
tf_vaddr
);

275 
d⁄e
;

299 i‡(
cuπhªad
 !
NULL
 &&

300 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 !
NULL
) {

301 
tf
->
tf_ïc
 = (
vaddr_t
Ë
cuπhªad
->
t_machdï
.
tm_badÁu…func
;

302 
d⁄e
;

309 
	`k¥ötf
("∑nic: F©ÆÉx˚±i⁄ %u (%sËö kî√»mode\n", 
code
,

310 
å≠codíames
[
code
]);

311 
	`k¥ötf
("panic: EPC 0x%x,Éxception vaddr 0x%x\n",

312 
tf
->
tf_ïc
,Åf->
tf_vaddr
);

314 
	`∑nic
("I can't handleÅhis... IÅhink I'll just dieÇow...\n");

316 
d⁄e
:

321 
	`˝u_úqoff
();

322 
d⁄e2
:

330 i‡(
cuπhªad
->
t_°ack
 =
NULL
) {

334 
˝uthªads
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
;

335 
˝u°acks
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
->
t_°ack
 + 
STACK_SIZE
;

346 
	`KASSERT
(
	`SAME_STACK
(
˝u°acks
[
cur˝u
->
c_numbî
]-1, (
vaddr_t
)
tf
));

347 
	}
}

367 
	$mùs_u£rmode
(
å≠‰ame
 *
tf
)

376 
	`•l0
();

377 
	`˝u_úqoff
();

379 
˝uthªads
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
;

380 
˝u°acks
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
->
t_°ack
 + 
STACK_SIZE
;

397 
	`KASSERT
(
	`SAME_STACK
(
˝u°acks
[
cur˝u
->
c_numbî
]-1, (
vaddr_t
)
tf
));

402 
	`asm_u£rmode
(
tf
);

403 
	}
}

418 
	$íãr_√w_¥o˚ss
(
¨gc
, 
u£Ωå_t
 
¨gv
, 
vaddr_t
 
°ack
, vaddr_à
íåy
)

420 
å≠‰ame
 
tf
;

422 
	`bzîo
(&
tf
, (tf));

424 
tf
.
tf_°©us
 = 
CST_IRQMASK
 | 
CST_IEp
 | 
CST_KUp
;

425 
tf
.
tf_ïc
 = 
íåy
;

426 
tf
.
tf_a0
 = 
¨gc
;

427 
tf
.
tf_a1
 = (
vaddr_t
)
¨gv
;

428 
tf
.
tf_•
 = 
°ack
;

430 
	`mùs_u£rmode
(&
tf
);

431 
	}
}

	@os161/kern/arch/mips/syscall/syscall.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/sysˇŒ.h
>

33 
	~<lib.h
>

34 
	~<mùs/å≠‰ame.h
>

35 
	~<thªad.h
>

36 
	~<cuºít.h
>

37 
	~<sysˇŒ.h
>

79 
	$sysˇŒ
(
å≠‰ame
 *
tf
)

81 
ˇŒno
;

82 
öt32_t
 
ªtvÆ
;

83 
îr
;

85 
	`KASSERT
(
cuπhªad
 !
NULL
);

86 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

87 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

89 
ˇŒno
 = 
tf
->
tf_v0
;

100 
ªtvÆ
 = 0;

102 
ˇŒno
) {

103 
SYS_ªboŸ
:

104 
îr
 = 
	`sys_ªboŸ
(
tf
->
tf_a0
);

107 
SYS___time
:

108 
îr
 = 
	`sys___time
((
u£Ωå_t
)
tf
->
tf_a0
,

109 (
u£Ωå_t
)
tf
->
tf_a1
);

111 #ifde‡
UW


112 
SYS_wrôe
:

113 
îr
 = 
	`sys_wrôe
(()
tf
->
tf_a0
,

114 (
u£Ωå_t
)
tf
->
tf_a1
,

115 ()
tf
->
tf_a2
,

116 (*)(&
ªtvÆ
));

118 
SYS__exô
:

119 
	`sys__exô
(()
tf
->
tf_a0
);

121 
	`∑nic
("unexpectedÑeturn from sys__exit");

123 
SYS_gëpid
:

124 
îr
 = 
	`sys_gëpid
((
pid_t
 *)&
ªtvÆ
);

126 
SYS_waôpid
:

127 
îr
 = 
	`sys_waôpid
((
pid_t
)
tf
->
tf_a0
,

128 (
u£Ωå_t
)
tf
->
tf_a1
,

129 ()
tf
->
tf_a2
,

130 (
pid_t
 *)&
ªtvÆ
);

137 
	`k¥ötf
("Unknow¿sysˇŒ %d\n", 
ˇŒno
);

138 
îr
 = 
ENOSYS
;

143 i‡(
îr
) {

149 
tf
->
tf_v0
 = 
îr
;

150 
tf
->
tf_a3
 = 1;

154 
tf
->
tf_v0
 = 
ªtvÆ
;

155 
tf
->
tf_a3
 = 0;

163 
tf
->
tf_ïc
 += 4;

166 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

168 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

169 
	}
}

180 
	$íãr_f‹ked_¥o˚ss
(
å≠‰ame
 *
tf
)

182 ()
tf
;

183 
	}
}

	@os161/kern/arch/mips/thread/cpu.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<mùs/•ecüÃeg.h
>

37 
	~<mùs/å≠‰ame.h
>

38 
	~<∂©f‹m/max˝us.h
>

39 
	~<˝u.h
>

40 
	~<thªad.h
>

59 
vaddr_t
 
	g˝u°acks
[
MAXCPUS
];

60 
vaddr_t
 
	g˝uthªads
[
MAXCPUS
];

68 
	$˝u_machdï_öô
(
˝u
 *
c
)

70 
vaddr_t
 
°ackpoöãr
;

72 
	`KASSERT
(
c
->
c_numbî
 < 
MAXCPUS
);

74 i‡(
c
->
c_cuπhªad
->
t_°ack
 =
NULL
) {

84 
°ackpoöãr
 = (
vaddr_t
Ë
c
->
c_cuπhªad
->
t_°ack
;

86 
°ackpoöãr
 +
STACK_SIZE
;

88 
˝u°acks
[
c
->
c_numbî
] = 
°ackpoöãr
;

89 
˝uthªads
[
c
->
c_numbî
] = (
vaddr_t
)c->
c_cuπhªad
;

91 
	}
}

100 
	$˝u_idítify
()

104 
	}
}

130 
	#GET_STATUS
(
x
Ë
__asm
 vﬁ©ûe("mfc0 %0,$12" : "Ù" (x))

	)

131 
	#SET_STATUS
(
x
Ë
__asm
 vﬁ©ûe("mtc0 %0,$12" :: "r" (x))

	)

137 
	$˝u_úq⁄
()

139 
uöt32_t
 
x
;

141 
	`GET_STATUS
(
x
);

142 
x
 |
CST_IEc
;

143 
	`SET_STATUS
(
x
);

144 
	}
}

150 
	$˝u_úqoff
()

152 
uöt32_t
 
x
;

154 
	`GET_STATUS
(
x
);

155 
x
 &~(
uöt32_t
)
CST_IEc
;

156 
	`SET_STATUS
(
x
);

157 
	}
}

164 
	$˝u_úq⁄off
()

166 
uöt32_t
 
x
, 
x⁄
, 
xoff
;

168 
	`GET_STATUS
(
x
);

169 
x⁄
 = 
x
 | 
CST_IEc
;

170 
xoff
 = 
x
 & ~(
uöt32_t
)
CST_IEc
;

171 
	`SET_STATUS
(
x⁄
);

172 
__asm
 volatile("nop;Çop;Çop;Çop");

173 
	`SET_STATUS
(
xoff
);

174 
	}
}

192 
ölöe


194 
	$waô
()

207 
__asm
 volatile(

214 
	}
}

220 
	$˝u_idÀ
()

222 
	`waô
();

223 
	`˝u_úq⁄off
();

224 
	}
}

230 
	$˝u_hÆt
()

232 
	`˝u_úqoff
();

234 
	`waô
();

236 
	}
}

	@os161/kern/arch/mips/thread/switchframe.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<thªad.h
>

33 
	~<thªad¥iv©e.h
>

35 
	~"swôch‰ame.h
"

38 
mùs_thªad°¨t
( );

55 
swôch‰ame_öô
(
thªad
 *thread,

56 (*
íåypoöt
)(*
d©a1
, 
d©a2
),

57 *
d©a1
, 
d©a2
)

59 
vaddr_t
 
°ackt›
;

60 
swôch‰ame
 *
sf
;

67 
°ackt›
 = ((
vaddr_t
)
thªad
->
t_°ack
Ë+ 
STACK_SIZE
;

68 
sf
 = ((
swôch‰ame
 *Ë
°ackt›
) - 1;

71 
	`bzîo
(
sf
, (*sf));

91 
sf
->
sf_s0
 = (
uöt32_t
)
íåypoöt
;

92 
sf
->
sf_s1
 = (
uöt32_t
)
d©a1
;

93 
sf
->
sf_s2
 = (
uöt32_t
)
d©a2
;

94 
sf
->
sf_ø
 = (
uöt32_t
)
mùs_thªad°¨t
;

97 
thªad
->
t_c⁄ãxt
 = 
sf
;

98 
	}
}

	@os161/kern/arch/mips/thread/switchframe.h

30 #i‚de‡
_MIPS_SWITCHFRAME_H_


31 
	#_MIPS_SWITCHFRAME_H_


	)

39 
	sswôch‰ame
 {

40 
uöt32_t
 
	msf_s0
;

41 
uöt32_t
 
	msf_s1
;

42 
uöt32_t
 
	msf_s2
;

43 
uöt32_t
 
	msf_s3
;

44 
uöt32_t
 
	msf_s4
;

45 
uöt32_t
 
	msf_s5
;

46 
uöt32_t
 
	msf_s6
;

47 
uöt32_t
 
	msf_s8
;

48 
uöt32_t
 
	msf_gp
;

49 
uöt32_t
 
	msf_ø
;

	@os161/kern/arch/mips/thread/thread_machdep.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<thªad.h
>

37 
	~<thªad¥iv©e.h
>

40 
	$thªad_machdï_öô
(
thªad_machdï
 *
tm
)

42 
tm
->
tm_badÁu…func
 = 
NULL
;

43 
	}
}

46 
	$thªad_machdï_˛ónup
(
thªad_machdï
 *
tm
)

48 
	`KASSERT
(
tm
->
tm_badÁu…func
 =
NULL
);

49 
	}
}

	@os161/kern/arch/mips/vm/dumbvm.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<•l.h
>

34 
	~<•ölock.h
>

35 
	~<¥oc.h
>

36 
	~<cuºít.h
>

37 
	~<mùs/éb.h
>

38 
	~<addr•a˚.h
>

39 
	~<vm.h
>

49 
	#DUMBVM_STACKPAGES
 12

	)

54 
•ölock
 
	g°ólmem_lock
 = 
SPINLOCK_INITIALIZER
;

57 
	$vm_boŸ°øp
()

60 
	}
}

63 
∑ddr_t


64 
	$gëµages
(
≈ages
)

66 
∑ddr_t
 
addr
;

68 
	`•ölock_acquúe
(&
°ólmem_lock
);

70 
addr
 = 
	`øm_°ólmem
(
≈ages
);

72 
	`•ölock_ªÀa£
(&
°ólmem_lock
);

73  
addr
;

74 
	}
}

77 
vaddr_t


78 
	$Æloc_k∑ges
(
≈ages
)

80 
∑ddr_t
 
∑
;

81 
∑
 = 
	`gëµages
(
≈ages
);

82 i‡(
∑
==0) {

85  
	`PADDR_TO_KVADDR
(
∑
);

86 
	}
}

89 
	$‰ì_k∑ges
(
vaddr_t
 
addr
)

93 ()
addr
;

94 
	}
}

97 
	$vm_ébshoŸdown_Æl
()

99 
	`∑nic
("dumbvmÅriedÅo doÅlb shootdown?!\n");

100 
	}
}

103 
	$vm_ébshoŸdown
(c⁄° 
ébshoŸdown
 *
ts
)

105 ()
ts
;

106 
	`∑nic
("dumbvmÅriedÅo doÅlb shootdown?!\n");

107 
	}
}

110 
	$vm_Áu…
(
Áu…ty≥
, 
vaddr_t
 
Áu…addªss
)

112 
vaddr_t
 
vba£1
, 
vt›1
, 
vba£2
, 
vt›2
, 
°ackba£
, 
°ackt›
;

113 
∑ddr_t
 
∑ddr
;

114 
i
;

115 
uöt32_t
 
ehi
, 
ño
;

116 
addr•a˚
 *
as
;

117 
•l
;

119 
Áu…addªss
 &
PAGE_FRAME
;

121 
	`DEBUG
(
DB_VM
, "dumbvm: fau…: 0x%x\n", 
Áu…addªss
);

123 
Áu…ty≥
) {

124 
VM_FAULT_READONLY
:

126 
	`∑nic
("dumbvm: got VM_FAULT_READONLY\n");

127 
VM_FAULT_READ
:

128 
VM_FAULT_WRITE
:

131  
EINVAL
;

134 i‡(
cuΩroc
 =
NULL
) {

140  
EFAULT
;

143 
as
 = 
	`cuΩroc_gëas
();

144 i‡(
as
 =
NULL
) {

149  
EFAULT
;

153 
	`KASSERT
(
as
->
as_vba£1
 != 0);

154 
	`KASSERT
(
as
->
as_pba£1
 != 0);

155 
	`KASSERT
(
as
->
as_≈ages1
 != 0);

156 
	`KASSERT
(
as
->
as_vba£2
 != 0);

157 
	`KASSERT
(
as
->
as_pba£2
 != 0);

158 
	`KASSERT
(
as
->
as_≈ages2
 != 0);

159 
	`KASSERT
(
as
->
as_°ackpba£
 != 0);

160 
	`KASSERT
((
as
->
as_vba£1
 & 
PAGE_FRAME
) ==ás->as_vbase1);

161 
	`KASSERT
((
as
->
as_pba£1
 & 
PAGE_FRAME
) ==ás->as_pbase1);

162 
	`KASSERT
((
as
->
as_vba£2
 & 
PAGE_FRAME
) ==ás->as_vbase2);

163 
	`KASSERT
((
as
->
as_pba£2
 & 
PAGE_FRAME
) ==ás->as_pbase2);

164 
	`KASSERT
((
as
->
as_°ackpba£
 & 
PAGE_FRAME
) ==ás->as_stackpbase);

166 
vba£1
 = 
as
->
as_vba£1
;

167 
vt›1
 = 
vba£1
 + 
as
->
as_≈ages1
 * 
PAGE_SIZE
;

168 
vba£2
 = 
as
->
as_vba£2
;

169 
vt›2
 = 
vba£2
 + 
as
->
as_≈ages2
 * 
PAGE_SIZE
;

170 
°ackba£
 = 
USERSTACK
 - 
DUMBVM_STACKPAGES
 * 
PAGE_SIZE
;

171 
°ackt›
 = 
USERSTACK
;

173 i‡(
Áu…addªss
 >
vba£1
 && fau…addªs†< 
vt›1
) {

174 
∑ddr
 = (
Áu…addªss
 - 
vba£1
Ë+ 
as
->
as_pba£1
;

176 i‡(
Áu…addªss
 >
vba£2
 && fau…addªs†< 
vt›2
) {

177 
∑ddr
 = (
Áu…addªss
 - 
vba£2
Ë+ 
as
->
as_pba£2
;

179 i‡(
Áu…addªss
 >
°ackba£
 && fau…addªs†< 
°ackt›
) {

180 
∑ddr
 = (
Áu…addªss
 - 
°ackba£
Ë+ 
as
->
as_°ackpba£
;

183  
EFAULT
;

187 
	`KASSERT
((
∑ddr
 & 
PAGE_FRAME
) ==Öaddr);

190 
•l
 = 
	`•lhigh
();

192 
i
=0; i<
NUM_TLB
; i++) {

193 
	`éb_ªad
(&
ehi
, &
ño
, 
i
);

194 i‡(
ño
 & 
TLBLO_VALID
) {

197 
ehi
 = 
Áu…addªss
;

198 
ño
 = 
∑ddr
 | 
TLBLO_DIRTY
 | 
TLBLO_VALID
;

199 
	`DEBUG
(
DB_VM
, "dumbvm: 0x%x -> 0x%x\n", 
Áu…addªss
, 
∑ddr
);

200 
	`éb_wrôe
(
ehi
, 
ño
, 
i
);

201 
	`•lx
(
•l
);

205 
	`k¥ötf
("dumbvm: Ran out of TLBÉntries - cannot handleÖage fault\n");

206 
	`•lx
(
•l
);

207  
EFAULT
;

208 
	}
}

210 
addr•a˚
 *

211 
	$as_¸óã
()

213 
addr•a˚
 *
as
 = 
	`kmÆloc
((addrspace));

214 i‡(
as
==
NULL
) {

215  
NULL
;

218 
as
->
as_vba£1
 = 0;

219 
as
->
as_pba£1
 = 0;

220 
as
->
as_≈ages1
 = 0;

221 
as
->
as_vba£2
 = 0;

222 
as
->
as_pba£2
 = 0;

223 
as
->
as_≈ages2
 = 0;

224 
as
->
as_°ackpba£
 = 0;

226  
as
;

227 
	}
}

230 
	$as_de°roy
(
addr•a˚
 *
as
)

232 
	`k‰ì
(
as
);

233 
	}
}

236 
	$as_a˘iv©e
()

238 
i
, 
•l
;

239 
addr•a˚
 *
as
;

241 
as
 = 
	`cuΩroc_gëas
();

242 #ifde‡
UW


245 i‡(
as
 =
NULL
) {

250 
•l
 = 
	`•lhigh
();

252 
i
=0; i<
NUM_TLB
; i++) {

253 
	`éb_wrôe
(
	`TLBHI_INVALID
(
i
), 
	`TLBLO_INVALID
(), i);

256 
	`•lx
(
•l
);

257 
	}
}

260 
	$as_dó˘iv©e
()

263 
	}
}

266 
	$as_deföe_ªgi⁄
(
addr•a˚
 *
as
, 
vaddr_t
 
vaddr
, 
size_t
 
sz
,

267 
ªadabÀ
, 
wrôóbÀ
, 
execuèbÀ
)

269 
size_t
 
≈ages
;

272 
sz
 +
vaddr
 & ~(
vaddr_t
)
PAGE_FRAME
;

273 
vaddr
 &
PAGE_FRAME
;

276 
sz
 = (sz + 
PAGE_SIZE
 - 1Ë& 
PAGE_FRAME
;

278 
≈ages
 = 
sz
 / 
PAGE_SIZE
;

281 ()
ªadabÀ
;

282 ()
wrôóbÀ
;

283 ()
execuèbÀ
;

285 i‡(
as
->
as_vba£1
 == 0) {

286 
as
->
as_vba£1
 = 
vaddr
;

287 
as
->
as_≈ages1
 = 
≈ages
;

291 i‡(
as
->
as_vba£2
 == 0) {

292 
as
->
as_vba£2
 = 
vaddr
;

293 
as
->
as_≈ages2
 = 
≈ages
;

300 
	`k¥ötf
("dumbvm: Warning:Åoo manyÑegions\n");

301  
EUNIMP
;

302 
	}
}

306 
	$as_zîo_ªgi⁄
(
∑ddr_t
 
∑ddr
, 
≈ages
)

308 
	`bzîo
((*)
	`PADDR_TO_KVADDR
(
∑ddr
), 
≈ages
 * 
PAGE_SIZE
);

309 
	}
}

312 
	$as_¥ï¨e_lﬂd
(
addr•a˚
 *
as
)

314 
	`KASSERT
(
as
->
as_pba£1
 == 0);

315 
	`KASSERT
(
as
->
as_pba£2
 == 0);

316 
	`KASSERT
(
as
->
as_°ackpba£
 == 0);

318 
as
->
as_pba£1
 = 
	`gëµages
◊s->
as_≈ages1
);

319 i‡(
as
->
as_pba£1
 == 0) {

320  
ENOMEM
;

323 
as
->
as_pba£2
 = 
	`gëµages
◊s->
as_≈ages2
);

324 i‡(
as
->
as_pba£2
 == 0) {

325  
ENOMEM
;

328 
as
->
as_°ackpba£
 = 
	`gëµages
(
DUMBVM_STACKPAGES
);

329 i‡(
as
->
as_°ackpba£
 == 0) {

330  
ENOMEM
;

333 
	`as_zîo_ªgi⁄
(
as
->
as_pba£1
,ás->
as_≈ages1
);

334 
	`as_zîo_ªgi⁄
(
as
->
as_pba£2
,ás->
as_≈ages2
);

335 
	`as_zîo_ªgi⁄
(
as
->
as_°ackpba£
, 
DUMBVM_STACKPAGES
);

338 
	}
}

341 
	$as_com∂ëe_lﬂd
(
addr•a˚
 *
as
)

343 ()
as
;

345 
	}
}

348 
	$as_deföe_°ack
(
addr•a˚
 *
as
, 
vaddr_t
 *
°ack±r
)

350 
	`KASSERT
(
as
->
as_°ackpba£
 != 0);

352 *
°ack±r
 = 
USERSTACK
;

354 
	}
}

357 
	$as_c›y
(
addr•a˚
 *
ﬁd
, addr•a˚ **
ªt
)

359 
addr•a˚
 *
√w
;

361 
√w
 = 
	`as_¸óã
();

362 i‡(
√w
==
NULL
) {

363  
ENOMEM
;

366 
√w
->
as_vba£1
 = 
ﬁd
->as_vbase1;

367 
√w
->
as_≈ages1
 = 
ﬁd
->as_npages1;

368 
√w
->
as_vba£2
 = 
ﬁd
->as_vbase2;

369 
√w
->
as_≈ages2
 = 
ﬁd
->as_npages2;

372 i‡(
	`as_¥ï¨e_lﬂd
(
√w
)) {

373 
	`as_de°roy
(
√w
);

374  
ENOMEM
;

377 
	`KASSERT
(
√w
->
as_pba£1
 != 0);

378 
	`KASSERT
(
√w
->
as_pba£2
 != 0);

379 
	`KASSERT
(
√w
->
as_°ackpba£
 != 0);

381 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_pba£1
),

382 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_pba£1
),

383 
ﬁd
->
as_≈ages1
*
PAGE_SIZE
);

385 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_pba£2
),

386 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_pba£2
),

387 
ﬁd
->
as_≈ages2
*
PAGE_SIZE
);

389 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_°ackpba£
),

390 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_°ackpba£
),

391 
DUMBVM_STACKPAGES
*
PAGE_SIZE
);

393 *
ªt
 = 
√w
;

395 
	}
}

	@os161/kern/arch/mips/vm/ram.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<vm.h
>

33 
	~<maöbus.h
>

36 
vaddr_t
 
	gfú°‰ì
;

38 
∑ddr_t
 
	gfú°∑ddr
;

39 
∑ddr_t
 
	gœ°∑ddr
;

46 
	$øm_boŸ°øp
()

48 
size_t
 
ømsize
;

51 
ømsize
 = 
	`maöbus_ømsize
();

60 i‡(
ømsize
 > 508*1024*1024) {

61 
ømsize
 = 508*1024*1024;

64 
œ°∑ddr
 = 
ømsize
;

70 
fú°∑ddr
 = 
fú°‰ì
 - 
MIPS_KSEG0
;

72 
	`k¥ötf
("%ukÖhysical memoryávailable\n",

73 (
œ°∑ddr
-
fú°∑ddr
)/1024);

74 
	}
}

94 
∑ddr_t


95 
	$øm_°ólmem
(
≈ages
)

97 
size_t
 
size
;

98 
∑ddr_t
 
∑ddr
;

100 
size
 = 
≈ages
 * 
PAGE_SIZE
;

102 i‡(
fú°∑ddr
 + 
size
 > 
œ°∑ddr
) {

106 
∑ddr
 = 
fú°∑ddr
;

107 
fú°∑ddr
 +
size
;

109  
∑ddr
;

110 
	}
}

121 
	$øm_gësize
(
∑ddr_t
 *
lo
,Öaddr_à*
hi
)

123 *
lo
 = 
fú°∑ddr
;

124 *
hi
 = 
œ°∑ddr
;

125 
fú°∑ddr
 = 
œ°∑ddr
 = 0;

126 
	}
}

	@os161/kern/arch/sys161/dev/lamebus_machdep.c

30 
	~<ty≥s.h
>

31 
	~<kîn/uni°d.h
>

32 
	~<lib.h
>

33 
	~<mùs/å≠‰ame.h
>

34 
	~<˝u.h
>

35 
	~<•l.h
>

36 
	~<˛ock.h
>

37 
	~<thªad.h
>

38 
	~<cuºít.h
>

39 
	~<synch.h
>

40 
	~<maöbus.h
>

41 
	~<sys161/bus.h
>

42 
	~<œmebus/œmebus.h
>

43 
	~"autoc⁄f.h
"

51 
	#CPU_FREQUENCY
 25000000

	)

62 
	$mùs_timî_£t
(
uöt32_t
 
cou¡
)

68 
__asm
 volatile(

73 :: "r" (
cou¡
));

74 
	}
}

81 
œmebus_so·c
 *
	gœmebus
;

84 
	$maöbus_boŸ°øp
()

87 
	`KASSERT
(
cuπhªad
->
t_cur•l
 > 0);

90 
œmebus
 = 
	`œmebus_öô
();

93 
	`œmebus_föd_˝us
(
œmebus
);

98 
	`k¥ötf
("lamebus0 (system main bus)\n");

105 
	`•l0
();

111 
	`autoc⁄f_œmebus
(
œmebus
, 0);

116 
	`mùs_timî_£t
(
CPU_FREQUENCY
 / 
HZ
);

117 
	}
}

123 
	$maöbus_°¨t_˝us
()

125 
	`œmebus_°¨t_˝us
(
œmebus
);

126 
	}
}

134 
	$œmebus_m≠_¨ó
(
œmebus_so·c
 *
bus
, 
¶Ÿ
, 
uöt32_t
 
off£t
)

136 
uöt32_t
 
addªss
;

138 ()
bus
;

140 
	`KASSERT
(
¶Ÿ
 >0 && slŸ < 
LB_NSLOTS
);

142 
addªss
 = 
LB_BASEADDR
 + 
¶Ÿ
*
LB_SLOT_SIZE
 + 
off£t
;

143  (*)
addªss
;

144 
	}
}

149 
uöt32_t


150 
	$œmebus_ªad_ªgi°î
(
œmebus_so·c
 *
bus
, 
¶Ÿ
, 
uöt32_t
 
off£t
)

152 
uöt32_t
 *
±r
 = 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
);

154  *
±r
;

155 
	}
}

161 
	$œmebus_wrôe_ªgi°î
(
œmebus_so·c
 *
bus
, 
¶Ÿ
,

162 
uöt32_t
 
off£t
, uöt32_à
vÆ
)

164 
uöt32_t
 *
±r
 = 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
);

166 *
±r
 = 
vÆ
;

167 
	}
}

174 
	$maöbus_powîoff
()

182 
	`œmebus_powîoff
(
œmebus
);

183 
	}
}

189 
	$maöbus_ªboŸ
()

198 
	`k¥ötf
("CannotÑeboot -Öowering off instead, sorry.\n");

199 
	`maöbus_powîoff
();

200 
	}
}

208 
	$maöbus_hÆt
()

210 
	`˝u_hÆt
();

211 
	}
}

221 
	$maöbus_∑nic
()

223 
	`maöbus_powîoff
();

224 
	}
}

230 
uöt32_t


231 
	$maöbus_ømsize
()

233  
	`œmebus_ømsize
();

234 
	}
}

240 
	$maöbus_£nd_ùi
(
˝u
 *
èrgë
)

242 
	`œmebus_as£π_ùi
(
œmebus
, 
èrgë
);

243 
	}
}

250 
	#LAMEBUS_IRQ_BIT
 0x00000400

	)

251 
	#LAMEBUS_IPI_BIT
 0x00000800

	)

252 
	#MIPS_TIMER_BIT
 0x00008000

	)

255 
	$maöbus_öãºu±
(
å≠‰ame
 *
tf
)

257 
uöt32_t
 
ˇu£
;

260 
	`KASSERT
(
cuπhªad
->
t_cur•l
 > 0);

262 
ˇu£
 = 
tf
->
tf_ˇu£
;

263 i‡(
ˇu£
 & 
LAMEBUS_IRQ_BIT
) {

264 
	`œmebus_öãºu±
(
œmebus
);

266 i‡(
ˇu£
 & 
LAMEBUS_IPI_BIT
) {

267 
	`öãΩro˚ss‹_öãºu±
();

268 
	`œmebus_˛ór_ùi
(
œmebus
, 
cur˝u
);

270 i‡(
ˇu£
 & 
MIPS_TIMER_BIT
) {

272 
	`mùs_timî_£t
(
CPU_FREQUENCY
 / 
HZ
);

274 
	`h¨d˛ock
();

277 
	`∑nic
("Unknow¿öãºu±; cau£Ñegi°î i†%08x\n", 
ˇu£
);

279 
	}
}

	@os161/kern/arch/sys161/include/bus.h

30 #i‚de‡
_SYS161_BUS_H_


31 
	#_SYS161_BUS_H_


	)

40 
	~<machöe/vm.h
>

41 
	~<œmebus/œmebus.h
>

43 
	#bus_wrôe_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
, 
vÆ
) \

44 
	`œmebus_wrôe_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
, 
vÆ
)

	)

46 
	#bus_ªad_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
) \

47 
	`œmebus_ªad_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
)

	)

49 
	#bus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
) \

50 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
)

	)

57 
	#LB_BASEADDR
 (
MIPS_KSEG1
 + 0x1„00000)

	)

	@os161/kern/arch/sys161/include/maxcpus.h

30 #i‚de‡
_SYS161_MAXCPUS_H_


31 
	#_SYS161_MAXCPUS_H_


	)

42 
	#MAXCPUS
 32

	)

	@os161/kern/compile/ASST0/autoconf.c

2 
	~<ty≥s.h
>

3 
	~<lib.h
>

4 
	~"autoc⁄f.h
"

6 
autoc⁄f_bìp
(
bìp_so·c
 *, );

7 
autoc⁄f_c⁄
(
c⁄_so·c
 *, );

8 
autoc⁄f_emu
(
emu_so·c
 *, );

9 
autoc⁄f_lhd
(
lhd_so·c
 *, );

10 
autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *, );

11 
autoc⁄f_l£r
(
l£r_so·c
 *, );

12 
autoc⁄f_…imî
(
…imî_so·c
 *, );

13 
autoc⁄f_…ø˚
(
…ø˚_so·c
 *, );

14 
autoc⁄f_øndom
(
øndom_so·c
 *, );

15 
autoc⁄f_π˛ock
(
π˛ock_so·c
 *, );

16 
	g√xtunô_bìp
;

17 
	g√xtunô_c⁄
;

18 
	g√xtunô_emu
;

19 
	g√xtunô_lhd
;

20 
	g√xtunô_Ã™dom
;

21 
	g√xtunô_l£r
;

22 
	g√xtunô_…imî
;

23 
	g√xtunô_…ø˚
;

24 
	g√xtunô_øndom
;

25 
	g√xtunô_π˛ock
;

29 
	$åy©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

31 
emu_so·c
 *
dev
;

32 
ªsu…
;

34 
dev
 = 
	`©èch_emu_to_œmebus
(
devunô
, 
bus
);

35 i‡(
dev
==
NULL
) {

38 
	`k¥ötf
("emu%dáàœmebus%d", 
devunô
, 
busunô
);

39 
ªsu…
 = 
	`c⁄fig_emu
(
dev
, 
devunô
);

40 i‡(
ªsu…
 != 0) {

41 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

43  
ªsu…
;

45 
	`k¥ötf
("\n");

46 
√xtunô_emu
 = 
devunô
+1;

47 
	`autoc⁄f_emu
(
dev
, 
devunô
);

49 
	}
}

53 
	$åy©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

55 
…ø˚_so·c
 *
dev
;

56 
ªsu…
;

58 
dev
 = 
	`©èch_…ø˚_to_œmebus
(
devunô
, 
bus
);

59 i‡(
dev
==
NULL
) {

62 
	`k¥ötf
("…ø˚%dáàœmebus%d", 
devunô
, 
busunô
);

63 
ªsu…
 = 
	`c⁄fig_…ø˚
(
dev
, 
devunô
);

64 i‡(
ªsu…
 != 0) {

65 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

67  
ªsu…
;

69 
	`k¥ötf
("\n");

70 
√xtunô_…ø˚
 = 
devunô
+1;

71 
	`autoc⁄f_…ø˚
(
dev
, 
devunô
);

73 
	}
}

77 
	$åy©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

79 
…imî_so·c
 *
dev
;

80 
ªsu…
;

82 
dev
 = 
	`©èch_…imî_to_œmebus
(
devunô
, 
bus
);

83 i‡(
dev
==
NULL
) {

86 
	`k¥ötf
("…imî%dáàœmebus%d", 
devunô
, 
busunô
);

87 
ªsu…
 = 
	`c⁄fig_…imî
(
dev
, 
devunô
);

88 i‡(
ªsu…
 != 0) {

89 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

91  
ªsu…
;

93 
	`k¥ötf
("\n");

94 
√xtunô_…imî
 = 
devunô
+1;

95 
	`autoc⁄f_…imî
(
dev
, 
devunô
);

97 
	}
}

101 
	$åy©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

103 
Ã™dom_so·c
 *
dev
;

104 
ªsu…
;

106 
dev
 = 
	`©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
);

107 i‡(
dev
==
NULL
) {

110 
	`k¥ötf
("Ã™dom%dáàœmebus%d", 
devunô
, 
busunô
);

111 
ªsu…
 = 
	`c⁄fig_Ã™dom
(
dev
, 
devunô
);

112 i‡(
ªsu…
 != 0) {

113 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

115  
ªsu…
;

117 
	`k¥ötf
("\n");

118 
√xtunô_Ã™dom
 = 
devunô
+1;

119 
	`autoc⁄f_Ã™dom
(
dev
, 
devunô
);

121 
	}
}

125 
	$åy©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

127 
lhd_so·c
 *
dev
;

128 
ªsu…
;

130 
dev
 = 
	`©èch_lhd_to_œmebus
(
devunô
, 
bus
);

131 i‡(
dev
==
NULL
) {

134 
	`k¥ötf
("lhd%dáàœmebus%d", 
devunô
, 
busunô
);

135 
ªsu…
 = 
	`c⁄fig_lhd
(
dev
, 
devunô
);

136 i‡(
ªsu…
 != 0) {

137 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

139  
ªsu…
;

141 
	`k¥ötf
("\n");

142 
√xtunô_lhd
 = 
devunô
+1;

143 
	`autoc⁄f_lhd
(
dev
, 
devunô
);

145 
	}
}

149 
	$åy©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

151 
l£r_so·c
 *
dev
;

152 
ªsu…
;

154 
dev
 = 
	`©èch_l£r_to_œmebus
(
devunô
, 
bus
);

155 i‡(
dev
==
NULL
) {

158 
	`k¥ötf
("l£r%dáàœmebus%d", 
devunô
, 
busunô
);

159 
ªsu…
 = 
	`c⁄fig_l£r
(
dev
, 
devunô
);

160 i‡(
ªsu…
 != 0) {

161 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

163  
ªsu…
;

165 
	`k¥ötf
("\n");

166 
√xtunô_l£r
 = 
devunô
+1;

167 
	`autoc⁄f_l£r
(
dev
, 
devunô
);

169 
	}
}

173 
	$åy©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

175 
bìp_so·c
 *
dev
;

176 
ªsu…
;

178 
dev
 = 
	`©èch_bìp_to_…imî
(
devunô
, 
bus
);

179 i‡(
dev
==
NULL
) {

182 
	`k¥ötf
("bìp%dáà…imî%d", 
devunô
, 
busunô
);

183 
ªsu…
 = 
	`c⁄fig_bìp
(
dev
, 
devunô
);

184 i‡(
ªsu…
 != 0) {

185 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

187  
ªsu…
;

189 
	`k¥ötf
("\n");

190 
√xtunô_bìp
 = 
devunô
+1;

191 
	`autoc⁄f_bìp
(
dev
, 
devunô
);

193 
	}
}

197 
	$åy©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
, 
busunô
)

199 
c⁄_so·c
 *
dev
;

200 
ªsu…
;

202 
dev
 = 
	`©èch_c⁄_to_l£r
(
devunô
, 
bus
);

203 i‡(
dev
==
NULL
) {

206 
	`k¥ötf
("c⁄%dáàl£r%d", 
devunô
, 
busunô
);

207 
ªsu…
 = 
	`c⁄fig_c⁄
(
dev
, 
devunô
);

208 i‡(
ªsu…
 != 0) {

209 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

211  
ªsu…
;

213 
	`k¥ötf
("\n");

214 
√xtunô_c⁄
 = 
devunô
+1;

215 
	`autoc⁄f_c⁄
(
dev
, 
devunô
);

217 
	}
}

221 
	$åy©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

223 
π˛ock_so·c
 *
dev
;

224 
ªsu…
;

226 
dev
 = 
	`©èch_π˛ock_to_…imî
(
devunô
, 
bus
);

227 i‡(
dev
==
NULL
) {

230 
	`k¥ötf
("π˛ock%dáà…imî%d", 
devunô
, 
busunô
);

231 
ªsu…
 = 
	`c⁄fig_π˛ock
(
dev
, 
devunô
);

232 i‡(
ªsu…
 != 0) {

233 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

235  
ªsu…
;

237 
	`k¥ötf
("\n");

238 
√xtunô_π˛ock
 = 
devunô
+1;

239 
	`autoc⁄f_π˛ock
(
dev
, 
devunô
);

241 
	}
}

245 
	$åy©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
, 
busunô
)

247 
øndom_so·c
 *
dev
;

248 
ªsu…
;

250 
dev
 = 
	`©èch_øndom_to_Ã™dom
(
devunô
, 
bus
);

251 i‡(
dev
==
NULL
) {

254 
	`k¥ötf
("øndom%dáàÃ™dom%d", 
devunô
, 
busunô
);

255 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

256 i‡(
ªsu…
 != 0) {

257 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

259  
ªsu…
;

261 
	`k¥ötf
("\n");

262 
√xtunô_øndom
 = 
devunô
+1;

263 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

265 
	}
}

270 
	$autoc⁄f_c⁄
(
c⁄_so·c
 *
bus
, 
busunô
)

272 ()
bus
; ()
busunô
;

273 
	}
}

277 
	$autoc⁄f_l£r
(
l£r_so·c
 *
bus
, 
busunô
)

279 ()
bus
; ()
busunô
;

281 i‡(
√xtunô_c⁄
 <= 0) {

282 
	`åy©èch_c⁄_to_l£r
(0, 
bus
, 
busunô
);

285 
	}
}

289 
	$autoc⁄f_lhd
(
lhd_so·c
 *
bus
, 
busunô
)

291 ()
bus
; ()
busunô
;

292 
	}
}

296 
	$autoc⁄f_emu
(
emu_so·c
 *
bus
, 
busunô
)

298 ()
bus
; ()
busunô
;

299 
	}
}

303 
	$autoc⁄f_øndom
(
øndom_so·c
 *
bus
, 
busunô
)

305 ()
bus
; ()
busunô
;

306 
	}
}

310 
	$autoc⁄f_…imî
(
…imî_so·c
 *
bus
, 
busunô
)

312 ()
bus
; ()
busunô
;

314 i‡(
√xtunô_bìp
 <= 0) {

315 
	`åy©èch_bìp_to_…imî
(0, 
bus
, 
busunô
);

319 i‡(
√xtunô_π˛ock
 <= 0) {

320 
	`åy©èch_π˛ock_to_…imî
(0, 
bus
, 
busunô
);

323 
	}
}

326 
	$autoc⁄f_œmebus
(
œmebus_so·c
 *
bus
, 
busunô
)

328 ()
bus
; ()
busunô
;

330 
ªsu…
, 
devunô
=
√xtunô_emu
;

332 
ªsu…
 = 
	`åy©èch_emu_to_œmebus
(
devunô
, 
bus
, 
busunô
);

333 
devunô
++;

334 } 
ªsu…
==0);

337 
ªsu…
, 
devunô
=
√xtunô_…ø˚
;

339 
ªsu…
 = 
	`åy©èch_…ø˚_to_œmebus
(
devunô
, 
bus
, 
busunô
);

340 
devunô
++;

341 } 
ªsu…
==0);

344 
ªsu…
, 
devunô
=
√xtunô_…imî
;

346 
ªsu…
 = 
	`åy©èch_…imî_to_œmebus
(
devunô
, 
bus
, 
busunô
);

347 
devunô
++;

348 } 
ªsu…
==0);

351 
ªsu…
, 
devunô
=
√xtunô_Ã™dom
;

353 
ªsu…
 = 
	`åy©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
, 
busunô
);

354 
devunô
++;

355 } 
ªsu…
==0);

358 
ªsu…
, 
devunô
=
√xtunô_lhd
;

360 
ªsu…
 = 
	`åy©èch_lhd_to_œmebus
(
devunô
, 
bus
, 
busunô
);

361 
devunô
++;

362 } 
ªsu…
==0);

365 
ªsu…
, 
devunô
=
√xtunô_l£r
;

367 
ªsu…
 = 
	`åy©èch_l£r_to_œmebus
(
devunô
, 
bus
, 
busunô
);

368 
devunô
++;

369 } 
ªsu…
==0);

371 
	}
}

375 
	$autoc⁄f_bìp
(
bìp_so·c
 *
bus
, 
busunô
)

377 ()
bus
; ()
busunô
;

378 
	}
}

382 
	$autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *
bus
, 
busunô
)

384 ()
bus
; ()
busunô
;

386 i‡(
√xtunô_øndom
 <= 0) {

387 
	`åy©èch_øndom_to_Ã™dom
(0, 
bus
, 
busunô
);

390 
	}
}

394 
	$autoc⁄f_π˛ock
(
π˛ock_so·c
 *
bus
, 
busunô
)

396 ()
bus
; ()
busunô
;

397 
	}
}

401 
	$autoc⁄f_…ø˚
(
…ø˚_so·c
 *
bus
, 
busunô
)

403 ()
bus
; ()
busunô
;

404 
	}
}

407 
	$p£udoc⁄fig
()

409 
	}
}

	@os161/kern/compile/ASST0/autoconf.h

2 #i‚de‡
_AUTOCONF_H_


3 
	#_AUTOCONF_H_


	)

5 
	gœmebus_so·c
;

6 
	gemu_so·c
;

7 
	g…ø˚_so·c
;

8 
	g…imî_so·c
;

9 
	gÃ™dom_so·c
;

10 
	glhd_so·c
;

11 
	gl£r_so·c
;

12 
	gbìp_so·c
;

13 
	gc⁄_so·c
;

14 
	gπ˛ock_so·c
;

15 
	gøndom_so·c
;

17 
autoc⁄f_œmebus
(
œmebus_so·c
 *
dev
, 
unô
);

19 
emu_so·c
 *
©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

20 
…ø˚_so·c
 *
©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

21 
…imî_so·c
 *
©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

22 
Ã™dom_so·c
 *
©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

23 
lhd_so·c
 *
©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

24 
l£r_so·c
 *
©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

25 
bìp_so·c
 *
©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

26 
c⁄_so·c
 *
©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
);

27 
π˛ock_so·c
 *
©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

28 
øndom_so·c
 *
©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
);

30 
c⁄fig_emu
(
emu_so·c
 *
dev
, 
unô
);

31 
c⁄fig_…ø˚
(
…ø˚_so·c
 *
dev
, 
unô
);

32 
c⁄fig_…imî
(
…imî_so·c
 *
dev
, 
unô
);

33 
c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
dev
, 
unô
);

34 
c⁄fig_lhd
(
lhd_so·c
 *
dev
, 
unô
);

35 
c⁄fig_l£r
(
l£r_so·c
 *
dev
, 
unô
);

36 
c⁄fig_bìp
(
bìp_so·c
 *
dev
, 
unô
);

37 
c⁄fig_c⁄
(
c⁄_so·c
 *
dev
, 
unô
);

38 
c⁄fig_π˛ock
(
π˛ock_so·c
 *
dev
, 
unô
);

39 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

41 
p£udoc⁄fig
();

	@os161/kern/compile/ASST0/opt-A0.h

2 #i‚de‡
_OPT_A0_H_


3 
	#_OPT_A0_H_


	)

4 
	#OPT_A0
 1

	)

	@os161/kern/compile/ASST0/opt-A1.h

2 #i‚de‡
_OPT_A1_H_


3 
	#_OPT_A1_H_


	)

4 
	#OPT_A1
 0

	)

	@os161/kern/compile/ASST0/opt-A2.h

2 #i‚de‡
_OPT_A2_H_


3 
	#_OPT_A2_H_


	)

4 
	#OPT_A2
 0

	)

	@os161/kern/compile/ASST0/opt-A3.h

2 #i‚de‡
_OPT_A3_H_


3 
	#_OPT_A3_H_


	)

4 
	#OPT_A3
 0

	)

	@os161/kern/compile/ASST0/opt-A4.h

2 #i‚de‡
_OPT_A4_H_


3 
	#_OPT_A4_H_


	)

4 
	#OPT_A4
 0

	)

	@os161/kern/compile/ASST0/opt-A5.h

2 #i‚de‡
_OPT_A5_H_


3 
	#_OPT_A5_H_


	)

4 
	#OPT_A5
 0

	)

	@os161/kern/compile/ASST0/opt-dumbvm.h

2 #i‚de‡
_OPT_DUMBVM_H_


3 
	#_OPT_DUMBVM_H_


	)

4 
	#OPT_DUMBVM
 1

	)

	@os161/kern/compile/ASST0/opt-net.h

2 #i‚de‡
_OPT_NET_H_


3 
	#_OPT_NET_H_


	)

4 
	#OPT_NET
 0

	)

	@os161/kern/compile/ASST0/opt-netfs.h

2 #i‚de‡
_OPT_NETFS_H_


3 
	#_OPT_NETFS_H_


	)

4 
	#OPT_NETFS
 0

	)

	@os161/kern/compile/ASST0/opt-noasserts.h

2 #i‚de‡
_OPT_NOASSERTS_H_


3 
	#_OPT_NOASSERTS_H_


	)

4 
	#OPT_NOASSERTS
 0

	)

	@os161/kern/compile/ASST0/opt-sfs.h

2 #i‚de‡
_OPT_SFS_H_


3 
	#_OPT_SFS_H_


	)

4 
	#OPT_SFS
 1

	)

	@os161/kern/compile/ASST0/opt-synchprobs.h

2 #i‚de‡
_OPT_SYNCHPROBS_H_


3 
	#_OPT_SYNCHPROBS_H_


	)

4 
	#OPT_SYNCHPROBS
 0

	)

	@os161/kern/compile/ASST0/vers.c

2 c⁄° 
	gbuûdvîsi⁄
 = 4;

3 c⁄° 
	gbuûdc⁄fig
[] = "ASST0";

	@os161/kern/compile/ASST1/autoconf.c

2 
	~<ty≥s.h
>

3 
	~<lib.h
>

4 
	~"autoc⁄f.h
"

6 
autoc⁄f_bìp
(
bìp_so·c
 *, );

7 
autoc⁄f_c⁄
(
c⁄_so·c
 *, );

8 
autoc⁄f_emu
(
emu_so·c
 *, );

9 
autoc⁄f_lhd
(
lhd_so·c
 *, );

10 
autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *, );

11 
autoc⁄f_l£r
(
l£r_so·c
 *, );

12 
autoc⁄f_…imî
(
…imî_so·c
 *, );

13 
autoc⁄f_…ø˚
(
…ø˚_so·c
 *, );

14 
autoc⁄f_øndom
(
øndom_so·c
 *, );

15 
autoc⁄f_π˛ock
(
π˛ock_so·c
 *, );

16 
	g√xtunô_bìp
;

17 
	g√xtunô_c⁄
;

18 
	g√xtunô_emu
;

19 
	g√xtunô_lhd
;

20 
	g√xtunô_Ã™dom
;

21 
	g√xtunô_l£r
;

22 
	g√xtunô_…imî
;

23 
	g√xtunô_…ø˚
;

24 
	g√xtunô_øndom
;

25 
	g√xtunô_π˛ock
;

29 
	$åy©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

31 
emu_so·c
 *
dev
;

32 
ªsu…
;

34 
dev
 = 
	`©èch_emu_to_œmebus
(
devunô
, 
bus
);

35 i‡(
dev
==
NULL
) {

38 
	`k¥ötf
("emu%dáàœmebus%d", 
devunô
, 
busunô
);

39 
ªsu…
 = 
	`c⁄fig_emu
(
dev
, 
devunô
);

40 i‡(
ªsu…
 != 0) {

41 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

43  
ªsu…
;

45 
	`k¥ötf
("\n");

46 
√xtunô_emu
 = 
devunô
+1;

47 
	`autoc⁄f_emu
(
dev
, 
devunô
);

49 
	}
}

53 
	$åy©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

55 
…ø˚_so·c
 *
dev
;

56 
ªsu…
;

58 
dev
 = 
	`©èch_…ø˚_to_œmebus
(
devunô
, 
bus
);

59 i‡(
dev
==
NULL
) {

62 
	`k¥ötf
("…ø˚%dáàœmebus%d", 
devunô
, 
busunô
);

63 
ªsu…
 = 
	`c⁄fig_…ø˚
(
dev
, 
devunô
);

64 i‡(
ªsu…
 != 0) {

65 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

67  
ªsu…
;

69 
	`k¥ötf
("\n");

70 
√xtunô_…ø˚
 = 
devunô
+1;

71 
	`autoc⁄f_…ø˚
(
dev
, 
devunô
);

73 
	}
}

77 
	$åy©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

79 
…imî_so·c
 *
dev
;

80 
ªsu…
;

82 
dev
 = 
	`©èch_…imî_to_œmebus
(
devunô
, 
bus
);

83 i‡(
dev
==
NULL
) {

86 
	`k¥ötf
("…imî%dáàœmebus%d", 
devunô
, 
busunô
);

87 
ªsu…
 = 
	`c⁄fig_…imî
(
dev
, 
devunô
);

88 i‡(
ªsu…
 != 0) {

89 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

91  
ªsu…
;

93 
	`k¥ötf
("\n");

94 
√xtunô_…imî
 = 
devunô
+1;

95 
	`autoc⁄f_…imî
(
dev
, 
devunô
);

97 
	}
}

101 
	$åy©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

103 
Ã™dom_so·c
 *
dev
;

104 
ªsu…
;

106 
dev
 = 
	`©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
);

107 i‡(
dev
==
NULL
) {

110 
	`k¥ötf
("Ã™dom%dáàœmebus%d", 
devunô
, 
busunô
);

111 
ªsu…
 = 
	`c⁄fig_Ã™dom
(
dev
, 
devunô
);

112 i‡(
ªsu…
 != 0) {

113 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

115  
ªsu…
;

117 
	`k¥ötf
("\n");

118 
√xtunô_Ã™dom
 = 
devunô
+1;

119 
	`autoc⁄f_Ã™dom
(
dev
, 
devunô
);

121 
	}
}

125 
	$åy©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

127 
lhd_so·c
 *
dev
;

128 
ªsu…
;

130 
dev
 = 
	`©èch_lhd_to_œmebus
(
devunô
, 
bus
);

131 i‡(
dev
==
NULL
) {

134 
	`k¥ötf
("lhd%dáàœmebus%d", 
devunô
, 
busunô
);

135 
ªsu…
 = 
	`c⁄fig_lhd
(
dev
, 
devunô
);

136 i‡(
ªsu…
 != 0) {

137 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

139  
ªsu…
;

141 
	`k¥ötf
("\n");

142 
√xtunô_lhd
 = 
devunô
+1;

143 
	`autoc⁄f_lhd
(
dev
, 
devunô
);

145 
	}
}

149 
	$åy©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

151 
l£r_so·c
 *
dev
;

152 
ªsu…
;

154 
dev
 = 
	`©èch_l£r_to_œmebus
(
devunô
, 
bus
);

155 i‡(
dev
==
NULL
) {

158 
	`k¥ötf
("l£r%dáàœmebus%d", 
devunô
, 
busunô
);

159 
ªsu…
 = 
	`c⁄fig_l£r
(
dev
, 
devunô
);

160 i‡(
ªsu…
 != 0) {

161 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

163  
ªsu…
;

165 
	`k¥ötf
("\n");

166 
√xtunô_l£r
 = 
devunô
+1;

167 
	`autoc⁄f_l£r
(
dev
, 
devunô
);

169 
	}
}

173 
	$åy©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

175 
bìp_so·c
 *
dev
;

176 
ªsu…
;

178 
dev
 = 
	`©èch_bìp_to_…imî
(
devunô
, 
bus
);

179 i‡(
dev
==
NULL
) {

182 
	`k¥ötf
("bìp%dáà…imî%d", 
devunô
, 
busunô
);

183 
ªsu…
 = 
	`c⁄fig_bìp
(
dev
, 
devunô
);

184 i‡(
ªsu…
 != 0) {

185 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

187  
ªsu…
;

189 
	`k¥ötf
("\n");

190 
√xtunô_bìp
 = 
devunô
+1;

191 
	`autoc⁄f_bìp
(
dev
, 
devunô
);

193 
	}
}

197 
	$åy©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
, 
busunô
)

199 
c⁄_so·c
 *
dev
;

200 
ªsu…
;

202 
dev
 = 
	`©èch_c⁄_to_l£r
(
devunô
, 
bus
);

203 i‡(
dev
==
NULL
) {

206 
	`k¥ötf
("c⁄%dáàl£r%d", 
devunô
, 
busunô
);

207 
ªsu…
 = 
	`c⁄fig_c⁄
(
dev
, 
devunô
);

208 i‡(
ªsu…
 != 0) {

209 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

211  
ªsu…
;

213 
	`k¥ötf
("\n");

214 
√xtunô_c⁄
 = 
devunô
+1;

215 
	`autoc⁄f_c⁄
(
dev
, 
devunô
);

217 
	}
}

221 
	$åy©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

223 
π˛ock_so·c
 *
dev
;

224 
ªsu…
;

226 
dev
 = 
	`©èch_π˛ock_to_…imî
(
devunô
, 
bus
);

227 i‡(
dev
==
NULL
) {

230 
	`k¥ötf
("π˛ock%dáà…imî%d", 
devunô
, 
busunô
);

231 
ªsu…
 = 
	`c⁄fig_π˛ock
(
dev
, 
devunô
);

232 i‡(
ªsu…
 != 0) {

233 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

235  
ªsu…
;

237 
	`k¥ötf
("\n");

238 
√xtunô_π˛ock
 = 
devunô
+1;

239 
	`autoc⁄f_π˛ock
(
dev
, 
devunô
);

241 
	}
}

245 
	$åy©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
, 
busunô
)

247 
øndom_so·c
 *
dev
;

248 
ªsu…
;

250 
dev
 = 
	`©èch_øndom_to_Ã™dom
(
devunô
, 
bus
);

251 i‡(
dev
==
NULL
) {

254 
	`k¥ötf
("øndom%dáàÃ™dom%d", 
devunô
, 
busunô
);

255 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

256 i‡(
ªsu…
 != 0) {

257 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

259  
ªsu…
;

261 
	`k¥ötf
("\n");

262 
√xtunô_øndom
 = 
devunô
+1;

263 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

265 
	}
}

270 
	$autoc⁄f_c⁄
(
c⁄_so·c
 *
bus
, 
busunô
)

272 ()
bus
; ()
busunô
;

273 
	}
}

277 
	$autoc⁄f_l£r
(
l£r_so·c
 *
bus
, 
busunô
)

279 ()
bus
; ()
busunô
;

281 i‡(
√xtunô_c⁄
 <= 0) {

282 
	`åy©èch_c⁄_to_l£r
(0, 
bus
, 
busunô
);

285 
	}
}

289 
	$autoc⁄f_lhd
(
lhd_so·c
 *
bus
, 
busunô
)

291 ()
bus
; ()
busunô
;

292 
	}
}

296 
	$autoc⁄f_emu
(
emu_so·c
 *
bus
, 
busunô
)

298 ()
bus
; ()
busunô
;

299 
	}
}

303 
	$autoc⁄f_øndom
(
øndom_so·c
 *
bus
, 
busunô
)

305 ()
bus
; ()
busunô
;

306 
	}
}

310 
	$autoc⁄f_…imî
(
…imî_so·c
 *
bus
, 
busunô
)

312 ()
bus
; ()
busunô
;

314 i‡(
√xtunô_bìp
 <= 0) {

315 
	`åy©èch_bìp_to_…imî
(0, 
bus
, 
busunô
);

319 i‡(
√xtunô_π˛ock
 <= 0) {

320 
	`åy©èch_π˛ock_to_…imî
(0, 
bus
, 
busunô
);

323 
	}
}

326 
	$autoc⁄f_œmebus
(
œmebus_so·c
 *
bus
, 
busunô
)

328 ()
bus
; ()
busunô
;

330 
ªsu…
, 
devunô
=
√xtunô_emu
;

332 
ªsu…
 = 
	`åy©èch_emu_to_œmebus
(
devunô
, 
bus
, 
busunô
);

333 
devunô
++;

334 } 
ªsu…
==0);

337 
ªsu…
, 
devunô
=
√xtunô_…ø˚
;

339 
ªsu…
 = 
	`åy©èch_…ø˚_to_œmebus
(
devunô
, 
bus
, 
busunô
);

340 
devunô
++;

341 } 
ªsu…
==0);

344 
ªsu…
, 
devunô
=
√xtunô_…imî
;

346 
ªsu…
 = 
	`åy©èch_…imî_to_œmebus
(
devunô
, 
bus
, 
busunô
);

347 
devunô
++;

348 } 
ªsu…
==0);

351 
ªsu…
, 
devunô
=
√xtunô_Ã™dom
;

353 
ªsu…
 = 
	`åy©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
, 
busunô
);

354 
devunô
++;

355 } 
ªsu…
==0);

358 
ªsu…
, 
devunô
=
√xtunô_lhd
;

360 
ªsu…
 = 
	`åy©èch_lhd_to_œmebus
(
devunô
, 
bus
, 
busunô
);

361 
devunô
++;

362 } 
ªsu…
==0);

365 
ªsu…
, 
devunô
=
√xtunô_l£r
;

367 
ªsu…
 = 
	`åy©èch_l£r_to_œmebus
(
devunô
, 
bus
, 
busunô
);

368 
devunô
++;

369 } 
ªsu…
==0);

371 
	}
}

375 
	$autoc⁄f_bìp
(
bìp_so·c
 *
bus
, 
busunô
)

377 ()
bus
; ()
busunô
;

378 
	}
}

382 
	$autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *
bus
, 
busunô
)

384 ()
bus
; ()
busunô
;

386 i‡(
√xtunô_øndom
 <= 0) {

387 
	`åy©èch_øndom_to_Ã™dom
(0, 
bus
, 
busunô
);

390 
	}
}

394 
	$autoc⁄f_π˛ock
(
π˛ock_so·c
 *
bus
, 
busunô
)

396 ()
bus
; ()
busunô
;

397 
	}
}

401 
	$autoc⁄f_…ø˚
(
…ø˚_so·c
 *
bus
, 
busunô
)

403 ()
bus
; ()
busunô
;

404 
	}
}

407 
	$p£udoc⁄fig
()

409 
	}
}

	@os161/kern/compile/ASST1/autoconf.h

2 #i‚de‡
_AUTOCONF_H_


3 
	#_AUTOCONF_H_


	)

5 
	gœmebus_so·c
;

6 
	gemu_so·c
;

7 
	g…ø˚_so·c
;

8 
	g…imî_so·c
;

9 
	gÃ™dom_so·c
;

10 
	glhd_so·c
;

11 
	gl£r_so·c
;

12 
	gbìp_so·c
;

13 
	gc⁄_so·c
;

14 
	gπ˛ock_so·c
;

15 
	gøndom_so·c
;

17 
autoc⁄f_œmebus
(
œmebus_so·c
 *
dev
, 
unô
);

19 
emu_so·c
 *
©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

20 
…ø˚_so·c
 *
©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

21 
…imî_so·c
 *
©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

22 
Ã™dom_so·c
 *
©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

23 
lhd_so·c
 *
©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

24 
l£r_so·c
 *
©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

25 
bìp_so·c
 *
©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

26 
c⁄_so·c
 *
©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
);

27 
π˛ock_so·c
 *
©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

28 
øndom_so·c
 *
©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
);

30 
c⁄fig_emu
(
emu_so·c
 *
dev
, 
unô
);

31 
c⁄fig_…ø˚
(
…ø˚_so·c
 *
dev
, 
unô
);

32 
c⁄fig_…imî
(
…imî_so·c
 *
dev
, 
unô
);

33 
c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
dev
, 
unô
);

34 
c⁄fig_lhd
(
lhd_so·c
 *
dev
, 
unô
);

35 
c⁄fig_l£r
(
l£r_so·c
 *
dev
, 
unô
);

36 
c⁄fig_bìp
(
bìp_so·c
 *
dev
, 
unô
);

37 
c⁄fig_c⁄
(
c⁄_so·c
 *
dev
, 
unô
);

38 
c⁄fig_π˛ock
(
π˛ock_so·c
 *
dev
, 
unô
);

39 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

41 
p£udoc⁄fig
();

	@os161/kern/compile/ASST1/opt-A0.h

2 #i‚de‡
_OPT_A0_H_


3 
	#_OPT_A0_H_


	)

4 
	#OPT_A0
 0

	)

	@os161/kern/compile/ASST1/opt-A1.h

2 #i‚de‡
_OPT_A1_H_


3 
	#_OPT_A1_H_


	)

4 
	#OPT_A1
 1

	)

	@os161/kern/compile/ASST1/opt-A2.h

2 #i‚de‡
_OPT_A2_H_


3 
	#_OPT_A2_H_


	)

4 
	#OPT_A2
 0

	)

	@os161/kern/compile/ASST1/opt-A3.h

2 #i‚de‡
_OPT_A3_H_


3 
	#_OPT_A3_H_


	)

4 
	#OPT_A3
 0

	)

	@os161/kern/compile/ASST1/opt-A4.h

2 #i‚de‡
_OPT_A4_H_


3 
	#_OPT_A4_H_


	)

4 
	#OPT_A4
 0

	)

	@os161/kern/compile/ASST1/opt-A5.h

2 #i‚de‡
_OPT_A5_H_


3 
	#_OPT_A5_H_


	)

4 
	#OPT_A5
 0

	)

	@os161/kern/compile/ASST1/opt-dumbvm.h

2 #i‚de‡
_OPT_DUMBVM_H_


3 
	#_OPT_DUMBVM_H_


	)

4 
	#OPT_DUMBVM
 1

	)

	@os161/kern/compile/ASST1/opt-net.h

2 #i‚de‡
_OPT_NET_H_


3 
	#_OPT_NET_H_


	)

4 
	#OPT_NET
 0

	)

	@os161/kern/compile/ASST1/opt-netfs.h

2 #i‚de‡
_OPT_NETFS_H_


3 
	#_OPT_NETFS_H_


	)

4 
	#OPT_NETFS
 0

	)

	@os161/kern/compile/ASST1/opt-noasserts.h

2 #i‚de‡
_OPT_NOASSERTS_H_


3 
	#_OPT_NOASSERTS_H_


	)

4 
	#OPT_NOASSERTS
 0

	)

	@os161/kern/compile/ASST1/opt-sfs.h

2 #i‚de‡
_OPT_SFS_H_


3 
	#_OPT_SFS_H_


	)

4 
	#OPT_SFS
 1

	)

	@os161/kern/compile/ASST1/opt-synchprobs.h

2 #i‚de‡
_OPT_SYNCHPROBS_H_


3 
	#_OPT_SYNCHPROBS_H_


	)

4 
	#OPT_SYNCHPROBS
 1

	)

	@os161/kern/compile/ASST1/vers.c

2 c⁄° 
	gbuûdvîsi⁄
 = 152;

3 c⁄° 
	gbuûdc⁄fig
[] = "ASST1";

	@os161/kern/dev/generic/beep.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<gíîic/bìp.h
>

34 
	~"autoc⁄f.h
"

47 
bìp_so·c
 *
	gthe_bìp
 = 
NULL
;

50 
	$c⁄fig_bìp
(
bìp_so·c
 *
bs
, 
unô
)

53 i‡(
unô
!=0) {

54  
ENODEV
;

57 
	`KASSERT
(
the_bìp
==
NULL
);

58 
the_bìp
 = 
bs
;

60 
	}
}

63 
	$bìp
()

65 i‡(
the_bìp
!=
NULL
) {

66 
the_bìp
->
	`bs_bìp
—he_bìp->
bs_devd©a
);

69 
	`k¥ötf
("beep: Warning:Ço beep device\n");

71 
	}
}

	@os161/kern/dev/generic/beep.h

30 #i‚de‡
_GENERIC_BEEP_H_


31 
	#_GENERIC_BEEP_H_


	)

38 
	sbìp_so·c
 {

39 *
	mbs_devd©a
;

40 (*
	mbs_bìp
)(*
	mdevd©a
);

	@os161/kern/dev/generic/console.c

53 
	~<ty≥s.h
>

54 
	~<kîn/î∫o.h
>

55 
	~<lib.h
>

56 
	~<uio.h
>

57 
	~<thªad.h
>

58 
	~<cuºít.h
>

59 
	~<synch.h
>

60 
	~<gíîic/c⁄sﬁe.h
>

61 
	~<vfs.h
>

62 
	~<devi˚.h
>

63 
	~"autoc⁄f.h
"

68 
c⁄_so·c
 *
	gthe_c⁄sﬁe
 = 
NULL
;

74 
lock
 *
	gc⁄_u£æock_ªad
 = 
NULL
;

75 
lock
 *
	gc⁄_u£æock_wrôe
 = 
NULL
;

84 
	#DELAYBUFSIZE
 1024

	)

85 
	gdñayed_outbuf
[
DELAYBUFSIZE
];

86 
size_t
 
	gdñayed_outbuf_pos
=0;

90 
	$putch_dñayed
(
ch
)

97 
	`KASSERT
(
dñayed_outbuf_pos
 < (
dñayed_outbuf
));

98 
dñayed_outbuf
[
dñayed_outbuf_pos
++] = 
ch
;

99 
	}
}

103 
	$Êush_dñay_buf
()

105 
size_t
 
i
;

106 
i
=0; i<
dñayed_outbuf_pos
; i++) {

107 
	`putch
(
dñayed_outbuf
[
i
]);

109 
dñayed_outbuf_pos
 = 0;

110 
	}
}

120 
	$putch_pﬁÀd
(
c⁄_so·c
 *
cs
, 
ch
)

122 
cs
->
	`cs_£ndpﬁÀd
(cs->
cs_devd©a
, 
ch
);

123 
	}
}

127 
	$putch_¥ï¨e_pﬁÀd
(
c⁄_so·c
 *
cs
)

129 i‡(
cs
->
cs_°¨çﬁlög
 !
NULL
) {

130 
cs
->
	`cs_°¨çﬁlög
(cs->
cs_devd©a
);

132 
	}
}

136 
	$putch_com∂ëe_pﬁÀd
(
c⁄_so·c
 *
cs
)

138 i‡(
cs
->
cs_ídpﬁlög
 !
NULL
) {

139 
cs
->
	`cs_ídpﬁlög
(cs->
cs_devd©a
);

141 
	}
}

150 
	$putch_öå
(
c⁄_so·c
 *
cs
, 
ch
)

152 
	`P
(
cs
->
cs_w£m
);

153 
cs
->
	`cs_£nd
(cs->
cs_devd©a
, 
ch
);

154 
	}
}

161 
	$gëch_öå
(
c⁄_so·c
 *
cs
)

163 
ªt
;

165 
	`P
(
cs
->
cs_r£m
);

166 
ªt
 = 
cs
->
cs_gŸch¨s
[cs->
cs_gŸch¨s_èû
];

167 
cs
->
cs_gŸch¨s_èû
 =

168 (
cs
->
cs_gŸch¨s_èû
 + 1Ë% 
CONSOLE_INPUT_BUFFER_SIZE
;

169  
ªt
;

170 
	}
}

182 
	$c⁄_öput
(*
vcs
, 
ch
)

184 
c⁄_so·c
 *
cs
 = 
vcs
;

185 
√xthód
;

187 
√xthód
 = (
cs
->
cs_gŸch¨s_hód
 + 1Ë% 
CONSOLE_INPUT_BUFFER_SIZE
;

188 i‡(
√xthód
 =
cs
->
cs_gŸch¨s_èû
) {

193 
cs
->
cs_gŸch¨s
[cs->
cs_gŸch¨s_hód
] = 
ch
;

194 
cs
->
cs_gŸch¨s_hód
 = 
√xthód
;

196 
	`V
(
cs
->
cs_r£m
);

197 
	}
}

203 
	$c⁄_°¨t
(*
vcs
)

205 
c⁄_so·c
 *
cs
 = 
vcs
;

207 
	`V
(
cs
->
cs_w£m
);

208 
	}
}

221 
	$putch
(
ch
)

223 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

225 i‡(
cs
==
NULL
) {

226 
	`putch_dñayed
(
ch
);

228 i‡(
cuπhªad
->
t_ö_öãºu±
 || cuπhªad->
t_ùlhigh_cou¡
 > 0) {

229 
	`putch_pﬁÀd
(
cs
, 
ch
);

232 
	`putch_öå
(
cs
, 
ch
);

234 
	}
}

237 
	$putch_¥ï¨e
()

239 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

241 i‡(
cs
 =
NULL
) {

244 i‡(
cuπhªad
->
t_ö_öãºu±
 || cuπhªad->
t_ùlhigh_cou¡
 > 0) {

245 
	`putch_¥ï¨e_pﬁÀd
(
cs
);

250 
	}
}

253 
	$putch_com∂ëe
()

255 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

257 i‡(
cs
 =
NULL
) {

260 i‡(
cuπhªad
->
t_ö_öãºu±
 || cuπhªad->
t_ùlhigh_cou¡
 > 0) {

261 
	`putch_com∂ëe_pﬁÀd
(
cs
);

266 
	}
}

269 
	$gëch
()

271 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

272 
	`KASSERT
(
cs
 !
NULL
);

273 
	`KASSERT
(!
cuπhªad
->
t_ö_öãºu±
 && cuπhªad->
t_ùlhigh_cou¡
 == 0);

275  
	`gëch_öå
(
cs
);

276 
	}
}

286 
	$c⁄_›í
(
devi˚
 *
dev
, 
›íÊags
)

288 ()
dev
;

289 ()
›íÊags
;

291 
	}
}

295 
	$c⁄_˛o£
(
devi˚
 *
dev
)

297 ()
dev
;

299 
	}
}

303 
	$c⁄_io
(
devi˚
 *
dev
, 
uio
 *uio)

305 
ªsu…
;

306 
ch
;

307 
lock
 *
lk
;

309 ()
dev
;

311 i‡(
uio
->
uio_rw
==
UIO_READ
) {

312 
lk
 = 
c⁄_u£æock_ªad
;

315 
lk
 = 
c⁄_u£æock_wrôe
;

318 
	`KASSERT
(
lk
 !
NULL
);

319 
	`lock_acquúe
(
lk
);

321 
uio
->
uio_ªsid
 > 0) {

322 i‡(
uio
->
uio_rw
==
UIO_READ
) {

323 
ch
 = 
	`gëch
();

324 i‡(
ch
=='\r') {

325 
ch
 = '\n';

327 
ªsu…
 = 
	`uiomove
(&
ch
, 1, 
uio
);

328 i‡(
ªsu…
) {

329 
	`lock_ªÀa£
(
lk
);

330  
ªsu…
;

332 i‡(
ch
=='\n') {

337 
ªsu…
 = 
	`uiomove
(&
ch
, 1, 
uio
);

338 i‡(
ªsu…
) {

339 
	`lock_ªÀa£
(
lk
);

340  
ªsu…
;

342 i‡(
ch
=='\n') {

343 
	`putch
('\r');

345 
	`putch
(
ch
);

348 
	`lock_ªÀa£
(
lk
);

350 
	}
}

354 
	$c⁄_io˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

357 ()
dev
;

358 ()
›
;

359 ()
d©a
;

360  
EINVAL
;

361 
	}
}

365 
	$©èch_c⁄sﬁe_to_vfs
(
c⁄_so·c
 *
cs
)

367 
devi˚
 *
dev
;

368 
ªsu…
;

370 
dev
 = 
	`kmÆloc
((*dev));

371 i‡(
dev
==
NULL
) {

372  
ENOMEM
;

375 
dev
->
d_›í
 = 
c⁄_›í
;

376 
dev
->
d_˛o£
 = 
c⁄_˛o£
;

377 
dev
->
d_io
 = 
c⁄_io
;

378 
dev
->
d_io˘l
 = 
c⁄_io˘l
;

379 
dev
->
d_blocks
 = 0;

380 
dev
->
d_blocksize
 = 1;

381 
dev
->
d_d©a
 = 
cs
;

383 
ªsu…
 = 
	`vfs_adddev
("c⁄", 
dev
, 0);

384 i‡(
ªsu…
) {

385 
	`k‰ì
(
dev
);

386  
ªsu…
;

390 
	}
}

399 
	$c⁄fig_c⁄
(
c⁄_so·c
 *
cs
, 
unô
)

401 
£m≠h‹e
 *
r£m
, *
w£m
;

402 
lock
 *
æk
, *
wlk
;

411 i‡(
unô
>0) {

412 
	`KASSERT
(
the_c⁄sﬁe
!=
NULL
);

413  
ENODEV
;

415 
	`KASSERT
(
the_c⁄sﬁe
==
NULL
);

417 
r£m
 = 
	`£m_¸óã
("consoleÑead", 0);

418 i‡(
r£m
 =
NULL
) {

419  
ENOMEM
;

421 
w£m
 = 
	`£m_¸óã
("console write", 1);

422 i‡(
w£m
 =
NULL
) {

423 
	`£m_de°roy
(
r£m
);

424  
ENOMEM
;

426 
æk
 = 
	`lock_¸óã
("console-lock-read");

427 i‡(
æk
 =
NULL
) {

428 
	`£m_de°roy
(
r£m
);

429 
	`£m_de°roy
(
w£m
);

430  
ENOMEM
;

432 
wlk
 = 
	`lock_¸óã
("console-lock-write");

433 i‡(
wlk
 =
NULL
) {

434 
	`lock_de°roy
(
æk
);

435 
	`£m_de°roy
(
r£m
);

436 
	`£m_de°roy
(
w£m
);

437  
ENOMEM
;

440 
cs
->
cs_r£m
 = 
r£m
;

441 
cs
->
cs_w£m
 = 
w£m
;

442 
cs
->
cs_gŸch¨s_hód
 = 0;

443 
cs
->
cs_gŸch¨s_èû
 = 0;

445 
the_c⁄sﬁe
 = 
cs
;

446 
c⁄_u£æock_ªad
 = 
æk
;

447 
c⁄_u£æock_wrôe
 = 
wlk
;

449 
	`Êush_dñay_buf
();

451  
	`©èch_c⁄sﬁe_to_vfs
(
cs
);

452 
	}
}

	@os161/kern/dev/generic/console.h

30 #i‚de‡
_GENERIC_CONSOLE_H_


31 
	#_GENERIC_CONSOLE_H_


	)

40 
	#CONSOLE_INPUT_BUFFER_SIZE
 32

	)

42 
	sc⁄_so·c
 {

44 *
	mcs_devd©a
;

45 (*
	mcs_£nd
)(*
	mdevd©a
, 
	mch
);

46 (*
	mcs_£ndpﬁÀd
)(*
	mdevd©a
, 
	mch
);

47 (*
	mcs_°¨çﬁlög
)(*
	mdevd©a
);

48 (*
	mcs_ídpﬁlög
)(*
	mdevd©a
);

51 
£m≠h‹e
 *
	mcs_r£m
;

52 
£m≠h‹e
 *
	mcs_w£m
;

53 
	mcs_gŸch¨s
[
CONSOLE_INPUT_BUFFER_SIZE
];

54 
	mcs_gŸch¨s_hód
;

55 
	mcs_gŸch¨s_èû
;

61 
c⁄_öput
–*
cs
, 
ch
);

62 
c⁄_°¨t
–*
cs
);

	@os161/kern/dev/generic/random.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/f˙é.h
>

33 
	~<lib.h
>

34 
	~<uio.h
>

35 
	~<vfs.h
>

36 
	~<gíîic/øndom.h
>

37 
	~"autoc⁄f.h
"

50 
øndom_so·c
 *
	gthe_øndom
 = 
NULL
;

58 
	$ønd›í
(
devi˚
 *
dev
, 
›íÊags
)

60 ()
dev
;

62 i‡(
›íÊags
 !
O_RDONLY
) {

63  
EIO
;

67 
	}
}

74 
	$ønd˛o£
(
devi˚
 *
dev
)

76 ()
dev
;

78 
	}
}

85 
	$øndio
(
devi˚
 *
dev
, 
uio
 *uio)

87 
øndom_so·c
 *
rs
 = 
dev
->
d_d©a
;

89 i‡(
uio
->
uio_rw
 !
UIO_READ
) {

90  
EIO
;

93  
rs
->
	`rs_ªad
‘s->
rs_devd©a
, 
uio
);

94 
	}
}

101 
	$øndio˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

106 ()
dev
;

107 ()
›
;

108 ()
d©a
;

109  
EIOCTL
;

110 
	}
}

116 
	$c⁄fig_øndom
(
øndom_so·c
 *
rs
, 
unô
)

118 
ªsu…
;

121 i‡(
unô
!=0) {

122  
ENODEV
;

125 
	`KASSERT
(
the_øndom
==
NULL
);

126 
the_øndom
 = 
rs
;

128 
rs
->
rs_dev
.
d_›í
 = 
ønd›í
;

129 
rs
->
rs_dev
.
d_˛o£
 = 
ønd˛o£
;

130 
rs
->
rs_dev
.
d_io
 = 
øndio
;

131 
rs
->
rs_dev
.
d_io˘l
 = 
øndio˘l
;

132 
rs
->
rs_dev
.
d_blocks
 = 0;

133 
rs
->
rs_dev
.
d_blocksize
 = 1;

134 
rs
->
rs_dev
.
d_d©a
 =Ñs;

137 
ªsu…
 = 
	`vfs_adddev
("øndom", &
rs
->
rs_dev
, 0);

138 i‡(
ªsu…
) {

139  
ªsu…
;

143 
	}
}

150 
uöt32_t


151 
	$øndom
()

153 i‡(
the_øndom
==
NULL
) {

154 
	`∑nic
("NoÑandom device\n");

156  
the_øndom
->
	`rs_øndom
—he_øndom->
rs_devd©a
);

157 
	}
}

159 
uöt32_t


160 
	$øndmax
()

162 i‡(
the_øndom
==
NULL
) {

163 
	`∑nic
("NoÑandom device\n");

165  
the_øndom
->
	`rs_øndmax
—he_øndom->
rs_devd©a
);

166 
	}
}

	@os161/kern/dev/generic/random.h

30 #i‚de‡
_GENERIC_RANDOM_H_


31 
	#_GENERIC_RANDOM_H_


	)

33 
	~<devi˚.h
>

34 
	guio
;

36 
	søndom_so·c
 {

38 *
	mrs_devd©a
;

39 
uöt32_t
 (*
rs_øndom
)(*
	mdevd©a
);

40 
uöt32_t
 (*
rs_øndmax
)(*
	mdevd©a
);

41 (*
	mrs_ªad
)(*
	mdevd©a
, 
uio
 *
	muio
);

43 
devi˚
 
	mrs_dev
;

	@os161/kern/dev/generic/rtclock.c

43 
	~<ty≥s.h
>

44 
	~<kîn/î∫o.h
>

45 
	~<lib.h
>

46 
	~<˛ock.h
>

47 
	~<gíîic/π˛ock.h
>

48 
	~"autoc⁄f.h
"

50 
π˛ock_so·c
 *
	gthe_˛ock
 = 
NULL
;

53 
	$c⁄fig_π˛ock
(
π˛ock_so·c
 *
πc
, 
unô
)

56 i‡(
unô
!=0) {

57  
ENODEV
;

60 
	`KASSERT
(
the_˛ock
==
NULL
);

61 
the_˛ock
 = 
πc
;

63 
	}
}

66 
	$gëtime
(
time_t
 *
£cs
, 
uöt32_t
 *
n£cs
)

68 
	`KASSERT
(
the_˛ock
!=
NULL
);

69 
the_˛ock
->
	`πc_gëtime
—he_˛ock->
πc_devd©a
, 
£cs
, 
n£cs
);

70 
	}
}

	@os161/kern/dev/generic/rtclock.h

30 #i‚de‡
_GENERIC_RTCLOCK_H_


31 
	#_GENERIC_RTCLOCK_H_


	)

38 
	sπ˛ock_so·c
 {

39 *
	mπc_devd©a
;

41 (*
	mπc_gëtime
)(*
	mdevd©a
, 
time_t
 *
	m£cs
, 
uöt32_t
 *
	mn£cs
);

	@os161/kern/dev/lamebus/beep_ltimer.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/bìp.h
>

38 
	~<œmebus/…imî.h
>

39 
	~"autoc⁄f.h
"

41 
bìp_so·c
 *

42 
	$©èch_bìp_to_…imî
(
bì≤o
, 
…imî_so·c
 *
ls
)

44 
bìp_so·c
 *
bs
 = 
	`kmÆloc
((beep_softc));

45 i‡(
bs
==
NULL
) {

46  
NULL
;

49 ()
bì≤o
;

51 
bs
->
bs_devd©a
 = 
ls
;

52 
bs
->
bs_bìp
 = 
…imî_bìp
;

54  
bs
;

55 
	}
}

	@os161/kern/dev/lamebus/con_lscreen.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/c⁄sﬁe.h
>

38 
	~<œmebus/ls¸ìn.h
>

39 
	~"autoc⁄f.h
"

41 
c⁄_so·c
 *

42 
	$©èch_c⁄_to_ls¸ìn
(
c⁄¢o
, 
ls¸ìn_so·c
 *
ls
)

44 
c⁄_so·c
 *
cs
 = 
	`kmÆloc
((con_softc));

45 i‡(
cs
==
NULL
) {

46  
NULL
;

49 
cs
->
cs_devd©a
 = 
ls
;

50 
cs
->
cs_£nd
 = 
ls¸ìn_wrôe
;

51 
cs
->
cs_£ndpﬁÀd
 = 
ls¸ìn_wrôe
;

52 
cs
->
cs_°¨çﬁlög
 = 
NULL
;

53 
cs
->
cs_ídpﬁlög
 = 
NULL
;

55 
ls
->
ls_devd©a
 = 
cs
;

56 
ls
->
ls_°¨t
 = 
c⁄_°¨t
;

57 
ls
->
ls_öput
 = 
c⁄_öput
;

59  
cs
;

60 
	}
}

	@os161/kern/dev/lamebus/con_lser.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/c⁄sﬁe.h
>

38 
	~<œmebus/l£r.h
>

39 
	~"autoc⁄f.h
"

41 
c⁄_so·c
 *

42 
	$©èch_c⁄_to_l£r
(
c⁄¢o
, 
l£r_so·c
 *
ls
)

44 
c⁄_so·c
 *
cs
 = 
	`kmÆloc
((con_softc));

45 i‡(
cs
==
NULL
) {

46  
NULL
;

49 ()
c⁄¢o
;

51 
cs
->
cs_devd©a
 = 
ls
;

52 
cs
->
cs_£nd
 = 
l£r_wrôe
;

53 
cs
->
cs_£ndpﬁÀd
 = 
l£r_wrôïﬁÀd
;

54 
cs
->
cs_°¨çﬁlög
 = 
l£r_°¨çﬁlög
;

55 
cs
->
cs_ídpﬁlög
 = 
l£r_ídpﬁlög
;

57 
ls
->
ls_devd©a
 = 
cs
;

58 
ls
->
ls_°¨t
 = 
c⁄_°¨t
;

59 
ls
->
ls_öput
 = 
c⁄_öput
;

61  
cs
;

62 
	}
}

	@os161/kern/dev/lamebus/emu.c

43 
	~<ty≥s.h
>

44 
	~<kîn/î∫o.h
>

45 
	~<kîn/f˙é.h
>

46 
	~<°©.h
>

47 
	~<lib.h
>

48 
	~<¨øy.h
>

49 
	~<uio.h
>

50 
	~<synch.h
>

51 
	~<œmebus/emu.h
>

52 
	~<∂©f‹m/bus.h
>

53 
	~<vfs.h
>

54 
	~<emufs.h
>

55 
	~"autoc⁄f.h
"

58 
	#REG_HANDLE
 0

	)

59 
	#REG_OFFSET
 4

	)

60 
	#REG_IOLEN
 8

	)

61 
	#REG_OPER
 12

	)

62 
	#REG_RESULT
 16

	)

65 
	#EMU_BUFFER
 32768

	)

68 
	#EMU_OP_OPEN
 1

	)

69 
	#EMU_OP_CREATE
 2

	)

70 
	#EMU_OP_EXCLCREATE
 3

	)

71 
	#EMU_OP_CLOSE
 4

	)

72 
	#EMU_OP_READ
 5

	)

73 
	#EMU_OP_READDIR
 6

	)

74 
	#EMU_OP_WRITE
 7

	)

75 
	#EMU_OP_GETSIZE
 8

	)

76 
	#EMU_OP_TRUNC
 9

	)

79 
	#EMU_RES_SUCCESS
 1

	)

80 
	#EMU_RES_BADHANDLE
 2

	)

81 
	#EMU_RES_BADOP
 3

	)

82 
	#EMU_RES_BADPATH
 4

	)

83 
	#EMU_RES_BADSIZE
 5

	)

84 
	#EMU_RES_EXISTS
 6

	)

85 
	#EMU_RES_ISDIR
 7

	)

86 
	#EMU_RES_MEDIA
 8

	)

87 
	#EMU_RES_NOHANDLES
 9

	)

88 
	#EMU_RES_NOSPACE
 10

	)

89 
	#EMU_RES_NOTDIR
 11

	)

90 
	#EMU_RES_UNKNOWN
 12

	)

91 
	#EMU_RES_UNSUPP
 13

	)

102 
ölöe


103 
uöt32_t


104 
	$emu_ºeg
(
emu_so·c
 *
sc
, 
uöt32_t
 
ªg
)

106  
	`bus_ªad_ªgi°î
(
sc
->
e_busd©a
, sc->
e_bu•os
, 
ªg
);

107 
	}
}

113 
ölöe


115 
	$emu_wªg
(
emu_so·c
 *
sc
, 
uöt32_t
 
ªg
, uöt32_à
vÆ
)

117 
	`bus_wrôe_ªgi°î
(
sc
->
e_busd©a
, sc->
e_bu•os
, 
ªg
, 
vÆ
);

118 
	}
}

124 
	$emu_úq
(*
dev
)

126 
emu_so·c
 *
sc
 = 
dev
;

128 
sc
->
e_ªsu…
 = 
	`emu_ºeg
(sc, 
REG_RESULT
);

129 
	`emu_wªg
(
sc
, 
REG_RESULT
, 0);

131 
	`V
(
sc
->
e_£m
);

132 
	}
}

139 
uöt32_t


140 
	$å™¶©e_îr
(
emu_so·c
 *
sc
, 
uöt32_t
 
code
)

142 
code
) {

143 
EMU_RES_SUCCESS
:  0;

144 
EMU_RES_BADHANDLE
:

145 
EMU_RES_BADOP
:

146 
EMU_RES_BADSIZE
:

147 
	`∑nic
("emu%d: gŸ f©ÆÑesu… codê%d\n", 
sc
->
e_unô
, 
code
);

148 
EMU_RES_BADPATH
:  
ENOENT
;

149 
EMU_RES_EXISTS
:  
EEXIST
;

150 
EMU_RES_ISDIR
:  
EISDIR
;

151 
EMU_RES_MEDIA
:  
EIO
;

152 
EMU_RES_NOHANDLES
:  
ENFILE
;

153 
EMU_RES_NOSPACE
:  
ENOSPC
;

154 
EMU_RES_NOTDIR
:  
ENOTDIR
;

155 
EMU_RES_UNKNOWN
:  
EIO
;

156 
EMU_RES_UNSUPP
:  
EUNIMP
;

158 
	`k¥ötf
("emu%d: Unknow¿ªsu… codê%d\n", 
sc
->
e_unô
, 
code
);

159  
EAGAIN
;

160 
	}
}

167 
	$emu_waôd⁄e
(
emu_so·c
 *
sc
)

169 
	`P
(
sc
->
e_£m
);

170  
	`å™¶©e_îr
(
sc
, sc->
e_ªsu…
);

171 
	}
}

181 
	$emu_›í
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, c⁄° *
«me
,

182 
boﬁ
 
¸óã
, boﬁ 
ex˛
, 
mode_t
 
mode
,

183 
uöt32_t
 *
√wh™dÀ
, *
√wisdú
)

185 
uöt32_t
 
›
;

186 
ªsu…
;

188 i‡(
	`°æí
(
«me
)+1 > 
EMU_MAXIO
) {

189  
ENAMETOOLONG
;

192 i‡(
¸óã
 && 
ex˛
) {

193 
›
 = 
EMU_OP_EXCLCREATE
;

195 i‡(
¸óã
) {

196 
›
 = 
EMU_OP_CREATE
;

199 
›
 = 
EMU_OP_OPEN
;

203 ()
mode
;

205 
	`lock_acquúe
(
sc
->
e_lock
);

207 
	`°r˝y
(
sc
->
e_iobuf
, 
«me
);

208 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
	`°æí
(
«me
));

209 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

210 
	`emu_wªg
(
sc
, 
REG_OPER
, 
›
);

211 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

213 i‡(
ªsu…
==0) {

214 *
√wh™dÀ
 = 
	`emu_ºeg
(
sc
, 
REG_HANDLE
);

215 *
√wisdú
 = 
	`emu_ºeg
(
sc
, 
REG_IOLEN
)>0;

218 
	`lock_ªÀa£
(
sc
->
e_lock
);

219  
ªsu…
;

220 
	}
}

229 
	$emu_˛o£
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
)

231 
ªsu…
;

232 
boﬁ
 
möe
;

233 
ªåõs
 = 0;

235 
möe
 = 
	`lock_do_i_hﬁd
(
sc
->
e_lock
);

236 i‡(!
möe
) {

237 
	`lock_acquúe
(
sc
->
e_lock
);

243 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

244 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_CLOSE
);

245 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

247 i‡(
ªsu…
==
EIO
 && 
ªåõs
 < 10) {

248 
	`k¥ötf
("emu%d: I/OÉrror on close,Ñetrying\n",

249 
sc
->
e_unô
);

250 
ªåõs
++;

256 i‡(!
möe
) {

257 
	`lock_ªÀa£
(
sc
->
e_lock
);

259  
ªsu…
;

260 
	}
}

267 
	$emu_d‹ód
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

268 
uöt32_t
 
›
, 
uio
 *uio)

270 
ªsu…
;

272 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

274 
	`lock_acquúe
(
sc
->
e_lock
);

276 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

277 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

278 
	`emu_wªg
(
sc
, 
REG_OFFSET
, 
uio
->
uio_off£t
);

279 
	`emu_wªg
(
sc
, 
REG_OPER
, 
›
);

280 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

281 i‡(
ªsu…
) {

282 
out
;

285 
ªsu…
 = 
	`uiomove
(
sc
->
e_iobuf
, 
	`emu_ºeg
(sc, 
REG_IOLEN
), 
uio
);

287 
uio
->
uio_off£t
 = 
	`emu_ºeg
(
sc
, 
REG_OFFSET
);

289 
out
:

290 
	`lock_ªÀa£
(
sc
->
e_lock
);

291  
ªsu…
;

292 
	}
}

299 
	$emu_ªad
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

300 
uio
 *uio)

302  
	`emu_d‹ód
(
sc
, 
h™dÀ
, 
Àn
, 
EMU_OP_READ
, 
uio
);

303 
	}
}

310 
	$emu_ªaddú
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

311 
uio
 *uio)

313  
	`emu_d‹ód
(
sc
, 
h™dÀ
, 
Àn
, 
EMU_OP_READDIR
, 
uio
);

314 
	}
}

321 
	$emu_wrôe
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

322 
uio
 *uio)

324 
ªsu…
;

326 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_WRITE
);

328 
	`lock_acquúe
(
sc
->
e_lock
);

330 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

331 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

332 
	`emu_wªg
(
sc
, 
REG_OFFSET
, 
uio
->
uio_off£t
);

334 
ªsu…
 = 
	`uiomove
(
sc
->
e_iobuf
, 
Àn
, 
uio
);

335 i‡(
ªsu…
) {

336 
out
;

339 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_WRITE
);

340 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

342 
out
:

343 
	`lock_ªÀa£
(
sc
->
e_lock
);

344  
ªsu…
;

345 
	}
}

352 
	$emu_gësize
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, 
off_t
 *
ªtvÆ
)

354 
ªsu…
;

356 
	`lock_acquúe
(
sc
->
e_lock
);

358 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

359 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_GETSIZE
);

360 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

361 i‡(
ªsu…
==0) {

362 *
ªtvÆ
 = 
	`emu_ºeg
(
sc
, 
REG_IOLEN
);

365 
	`lock_ªÀa£
(
sc
->
e_lock
);

366  
ªsu…
;

367 
	}
}

374 
	$emu_åunc
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, 
off_t
 
Àn
)

376 
ªsu…
;

378 
	`lock_acquúe
(
sc
->
e_lock
);

380 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

381 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

382 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_TRUNC
);

383 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

385 
	`lock_ªÀa£
(
sc
->
e_lock
);

386  
ªsu…
;

387 
	}
}

399 
emufs_lﬂdvnode
(
emufs_fs
 *
ef
, 
uöt32_t
 
h™dÀ
, 
isdú
,

400 
emufs_vnode
 **
ªt
);

407 
	$emufs_›í
(
vnode
 *
v
, 
›íÊags
)

417 i‡(
›íÊags
 & 
O_APPEND
) {

418  
EUNIMP
;

421 ()
v
;

424 
	}
}

431 
	$emufs_›ídú
(
vnode
 *
v
, 
›íÊags
)

433 
›íÊags
 & 
O_ACCMODE
) {

434 
O_RDONLY
:

436 
O_WRONLY
:

437 
O_RDWR
:

439  
EISDIR
;

441 i‡(
›íÊags
 & 
O_APPEND
) {

442  
EISDIR
;

445 ()
v
;

447 
	}
}

454 
	$emufs_˛o£
(
vnode
 *
v
)

456 ()
v
;

458 
	}
}

467 
	$emufs_ª˛aim
(
vnode
 *
v
)

469 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

470 
emufs_fs
 *
ef
 = 
v
->
vn_fs
->
fs_d©a
;

471 
ix
, 
i
, 
num
;

472 
ªsu…
;

479 
	`vfs_biglock_acquúe
();

480 
	`lock_acquúe
(
ef
->
ef_emu
->
e_lock
);

482 i‡(
ev
->
ev_v
.
vn_ªfcou¡
 != 1) {

483 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

484 
	`vfs_biglock_ªÀa£
();

485  
EBUSY
;

489 
ªsu…
 = 
	`emu_˛o£
(
ev
->
ev_emu
,Év->
ev_h™dÀ
);

490 i‡(
ªsu…
) {

491 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

492 
	`vfs_biglock_ªÀa£
();

493  
ªsu…
;

496 
num
 = 
	`vnodóºay_num
(
ef
->
ef_vnodes
);

497 
ix
 = 
num
;

498 
i
=0; i<
num
; i++) {

499 
vnode
 *
vx
;

501 
vx
 = 
	`vnodóºay_gë
(
ef
->
ef_vnodes
, 
i
);

502 i‡(
vx
 =
v
) {

503 
ix
 = 
i
;

507 i‡(
ix
 =
num
) {

508 
	`∑nic
("emu%d:Ñeclaim vnode %uÇot in vnodeÖool\n",

509 
ef
->
ef_emu
->
e_unô
, 
ev
->
ev_h™dÀ
);

512 
	`vnodóºay_ªmove
(
ef
->
ef_vnodes
, 
ix
);

513 
	`VOP_CLEANUP
(&
ev
->
ev_v
);

515 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

516 
	`vfs_biglock_ªÀa£
();

518 
	`k‰ì
(
ev
);

520 
	}
}

527 
	$emufs_ªad
(
vnode
 *
v
, 
uio
 *uio)

529 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

530 
uöt32_t
 
amt
;

531 
size_t
 
ﬁdªsid
;

532 
ªsu…
;

534 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

536 
uio
->
uio_ªsid
 > 0) {

537 
amt
 = 
uio
->
uio_ªsid
;

538 i‡(
amt
 > 
EMU_MAXIO
) {

539 
amt
 = 
EMU_MAXIO
;

542 
ﬁdªsid
 = 
uio
->
uio_ªsid
;

544 
ªsu…
 = 
	`emu_ªad
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

545 i‡(
ªsu…
) {

546  
ªsu…
;

549 i‡(
uio
->
uio_ªsid
 =
ﬁdªsid
) {

556 
	}
}

563 
	$emufs_gëdúíåy
(
vnode
 *
v
, 
uio
 *uio)

565 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

566 
uöt32_t
 
amt
;

568 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

570 
amt
 = 
uio
->
uio_ªsid
;

571 i‡(
amt
 > 
EMU_MAXIO
) {

572 
amt
 = 
EMU_MAXIO
;

575  
	`emu_ªaddú
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

576 
	}
}

583 
	$emufs_wrôe
(
vnode
 *
v
, 
uio
 *uio)

585 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

586 
uöt32_t
 
amt
;

587 
size_t
 
ﬁdªsid
;

588 
ªsu…
;

590 
	`KASSERT
(
uio
->
uio_rw
==
UIO_WRITE
);

592 
uio
->
uio_ªsid
 > 0) {

593 
amt
 = 
uio
->
uio_ªsid
;

594 i‡(
amt
 > 
EMU_MAXIO
) {

595 
amt
 = 
EMU_MAXIO
;

598 
ﬁdªsid
 = 
uio
->
uio_ªsid
;

600 
ªsu…
 = 
	`emu_wrôe
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

601 i‡(
ªsu…
) {

602  
ªsu…
;

605 i‡(
uio
->
uio_ªsid
 =
ﬁdªsid
) {

612 
	}
}

619 
	$emufs_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

625 ()
v
;

626 ()
›
;

627 ()
d©a
;

629  
EINVAL
;

630 
	}
}

637 
	$emufs_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

639 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

640 
ªsu…
;

642 
	`bzîo
(
°©buf
, (
°©
));

644 
ªsu…
 = 
	`emu_gësize
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, &
°©buf
->
°_size
);

645 i‡(
ªsu…
) {

646  
ªsu…
;

649 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

650 i‡(
ªsu…
) {

651  
ªsu…
;

653 
°©buf
->
°_mode
 |= 0644;

654 
°©buf
->
°_∆ök
 = 1;

655 
°©buf
->
°_blocks
 = 0;

658 
	}
}

665 
	$emufs_fûe_gëty≥
(
vnode
 *
v
, 
uöt32_t
 *
ªsu…
)

667 ()
v
;

668 *
ªsu…
 = 
S_IFREG
;

670 
	}
}

677 
	$emufs_dú_gëty≥
(
vnode
 *
v
, 
uöt32_t
 *
ªsu…
)

679 ()
v
;

680 *
ªsu…
 = 
S_IFDIR
;

682 
	}
}

689 
	$emufs_åy£ek
(
vnode
 *
v
, 
off_t
 
pos
)

691 i‡(
pos
<0) {

692  
EINVAL
;

696 ()
v
;

699 
	}
}

706 
	$emufs_fsync
(
vnode
 *
v
)

708 ()
v
;

710 
	}
}

717 
	$emufs_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

719 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

720  
	`emu_åunc
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
Àn
);

721 
	}
}

728 
	$emufs_¸ót
(
vnode
 *
dú
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

729 
vnode
 **
ªt
)

731 
emufs_vnode
 *
ev
 = 
dú
->
vn_d©a
;

732 
emufs_fs
 *
ef
 = 
dú
->
vn_fs
->
fs_d©a
;

733 
emufs_vnode
 *
√wguy
;

734 
uöt32_t
 
h™dÀ
;

735 
ªsu…
;

736 
isdú
;

738 
ªsu…
 = 
	`emu_›í
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
«me
, 
åue
, 
ex˛
, 
mode
,

739 &
h™dÀ
, &
isdú
);

740 i‡(
ªsu…
) {

741  
ªsu…
;

744 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
h™dÀ
, 
isdú
, &
√wguy
);

745 i‡(
ªsu…
) {

746 
	`emu_˛o£
(
ev
->
ev_emu
, 
h™dÀ
);

747  
ªsu…
;

750 *
ªt
 = &
√wguy
->
ev_v
;

752 
	}
}

759 
	$emufs_lookup
(
vnode
 *
dú
, *
∑th«me
, vnodê**
ªt
)

761 
emufs_vnode
 *
ev
 = 
dú
->
vn_d©a
;

762 
emufs_fs
 *
ef
 = 
dú
->
vn_fs
->
fs_d©a
;

763 
emufs_vnode
 *
√wguy
;

764 
uöt32_t
 
h™dÀ
;

765 
ªsu…
;

766 
isdú
;

768 
ªsu…
 = 
	`emu_›í
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
∑th«me
, 
Ál£
, false, 0,

769 &
h™dÀ
, &
isdú
);

770 i‡(
ªsu…
) {

771  
ªsu…
;

774 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
h™dÀ
, 
isdú
, &
√wguy
);

775 i‡(
ªsu…
) {

776 
	`emu_˛o£
(
ev
->
ev_emu
, 
h™dÀ
);

777  
ªsu…
;

780 *
ªt
 = &
√wguy
->
ev_v
;

782 
	}
}

789 
	$emufs_look∑ª¡
(
vnode
 *
dú
, *
∑th«me
, vnodê**
ªt
,

790 *
buf
, 
size_t
 
Àn
)

792 *
s
;

794 
s
 = 
	`°ºchr
(
∑th«me
, '/');

795 i‡(
s
==
NULL
) {

797 i‡(
	`°æí
(
∑th«me
)+1 > 
Àn
) {

798  
ENAMETOOLONG
;

800 
	`VOP_INCREF
(
dú
);

801 *
ªt
 = 
dú
;

802 
	`°r˝y
(
buf
, 
∑th«me
);

806 *
s
 = 0;

807 
s
++;

808 i‡(
	`°æí
(
s
)+1 > 
Àn
) {

809  
ENAMETOOLONG
;

811 
	`°r˝y
(
buf
, 
s
);

813  
	`emufs_lookup
(
dú
, 
∑th«me
, 
ªt
);

814 
	}
}

821 
	$emufs_«mefûe
(
vnode
 *
v
, 
uio
 *uio)

823 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

824 
emufs_fs
 *
ef
 = 
v
->
vn_fs
->
fs_d©a
;

826 i‡(
ev
 =
ef
->
ef_roŸ
) {

833 ()
uio
;

835  
EUNIMP
;

836 
	}
}

843 
	$emufs_mm≠
(
vnode
 *
v
)

845 ()
v
;

846  
EUNIMP
;

847 
	}
}

857 
	$emufs_dú_åy£ek
(
vnode
 *
v
, 
off_t
 
pos
)

859 ()
v
;

860 ()
pos
;

861  
EUNIMP
;

862 
	}
}

866 
	$emufs_symlök
(
vnode
 *
v
, c⁄° *
c⁄ã¡s
, c⁄° *
«me
)

868 ()
v
;

869 ()
c⁄ã¡s
;

870 ()
«me
;

871  
EUNIMP
;

872 
	}
}

876 
	$emufs_mkdú
(
vnode
 *
v
, c⁄° *
«me
, 
mode_t
 
mode
)

878 ()
v
;

879 ()
«me
;

880 ()
mode
;

881  
EUNIMP
;

882 
	}
}

886 
	$emufs_lök
(
vnode
 *
v
, c⁄° *
«me
, vnodê*
èrgë
)

888 ()
v
;

889 ()
«me
;

890 ()
èrgë
;

891  
EUNIMP
;

892 
	}
}

896 
	$emufs_ªmove
(
vnode
 *
v
, c⁄° *
«me
)

898 ()
v
;

899 ()
«me
;

900  
EUNIMP
;

901 
	}
}

905 
	$emufs_rmdú
(
vnode
 *
v
, c⁄° *
«me
)

907 ()
v
;

908 ()
«me
;

909  
EUNIMP
;

910 
	}
}

914 
	$emufs_ª«me
(
vnode
 *
v1
, c⁄° *
n1
,

915 
vnode
 *
v2
, c⁄° *
n2
)

917 ()
v1
;

918 ()
n1
;

919 ()
v2
;

920 ()
n2
;

921  
EUNIMP
;

922 
	}
}

941 
	$emufs_void_›_isdú
(
vnode
 *
v
)

943 ()
v
;

944  
EISDIR
;

945 
	}
}

949 
	$emufs_uio_›_isdú
(
vnode
 *
v
, 
uio
 *uio)

951 ()
v
;

952 ()
uio
;

953  
EISDIR
;

954 
	}
}

958 
	$emufs_uio_›_nŸdú
(
vnode
 *
v
, 
uio
 *uio)

960 ()
v
;

961 ()
uio
;

962  
ENOTDIR
;

963 
	}
}

967 
	$emufs_«me_›_nŸdú
(
vnode
 *
v
, c⁄° *
«me
)

969 ()
v
;

970 ()
«me
;

971  
ENOTDIR
;

972 
	}
}

976 
	$emufs_ªadlök_nŸlök
(
vnode
 *
v
, 
uio
 *uio)

978 ()
v
;

979 ()
uio
;

980  
EINVAL
;

981 
	}
}

985 
	$emufs_¸ót_nŸdú
(
vnode
 *
v
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

986 
vnode
 **
ªtvÆ
)

988 ()
v
;

989 ()
«me
;

990 ()
ex˛
;

991 ()
mode
;

992 ()
ªtvÆ
;

993  
ENOTDIR
;

994 
	}
}

998 
	$emufs_symlök_nŸdú
(
vnode
 *
v
, c⁄° *
c⁄ã¡s
, c⁄° *
«me
)

1000 ()
v
;

1001 ()
c⁄ã¡s
;

1002 ()
«me
;

1003  
ENOTDIR
;

1004 
	}
}

1008 
	$emufs_mkdú_nŸdú
(
vnode
 *
v
, c⁄° *
«me
, 
mode_t
 
mode
)

1010 ()
v
;

1011 ()
«me
;

1012 ()
mode
;

1013  
ENOTDIR
;

1014 
	}
}

1018 
	$emufs_lök_nŸdú
(
vnode
 *
v
, c⁄° *
«me
, vnodê*
èrgë
)

1020 ()
v
;

1021 ()
«me
;

1022 ()
èrgë
;

1023  
ENOTDIR
;

1024 
	}
}

1028 
	$emufs_ª«me_nŸdú
(
vnode
 *
v1
, c⁄° *
n1
,

1029 
vnode
 *
v2
, c⁄° *
n2
)

1031 ()
v1
;

1032 ()
n1
;

1033 ()
v2
;

1034 ()
n2
;

1035  
ENOTDIR
;

1036 
	}
}

1040 
	$emufs_lookup_nŸdú
(
vnode
 *
v
, *
∑th«me
, vnodê**
ªsu…
)

1042 ()
v
;

1043 ()
∑th«me
;

1044 ()
ªsu…
;

1045  
ENOTDIR
;

1046 
	}
}

1050 
	$emufs_look∑ª¡_nŸdú
(
vnode
 *
v
, *
∑th«me
, vnodê**
ªsu…
,

1051 *
buf
, 
size_t
 
Àn
)

1053 ()
v
;

1054 ()
∑th«me
;

1055 ()
ªsu…
;

1056 ()
buf
;

1057 ()
Àn
;

1058  
ENOTDIR
;

1059 
	}
}

1064 
	$emufs_åunˇã_isdú
(
vnode
 *
v
, 
off_t
 
Àn
)

1066 ()
v
;

1067 ()
Àn
;

1068  
ENOTDIR
;

1069 
	}
}

1076 c⁄° 
vnode_›s
 
	gemufs_fûe›s
 = {

1077 
VOP_MAGIC
,

1079 
emufs_›í
,

1080 
emufs_˛o£
,

1081 
emufs_ª˛aim
,

1083 
emufs_ªad
,

1084 
emufs_ªadlök_nŸlök
,

1085 
emufs_uio_›_nŸdú
,

1086 
emufs_wrôe
,

1087 
emufs_io˘l
,

1088 
emufs_°©
,

1089 
emufs_fûe_gëty≥
,

1090 
emufs_åy£ek
,

1091 
emufs_fsync
,

1092 
emufs_mm≠
,

1093 
emufs_åunˇã
,

1094 
emufs_uio_›_nŸdú
,

1096 
emufs_¸ót_nŸdú
,

1097 
emufs_symlök_nŸdú
,

1098 
emufs_mkdú_nŸdú
,

1099 
emufs_lök_nŸdú
,

1100 
emufs_«me_›_nŸdú
,

1101 
emufs_«me_›_nŸdú
,

1102 
emufs_ª«me_nŸdú
,

1104 
emufs_lookup_nŸdú
,

1105 
emufs_look∑ª¡_nŸdú
,

1111 c⁄° 
vnode_›s
 
	gemufs_dú›s
 = {

1112 
VOP_MAGIC
,

1114 
emufs_›ídú
,

1115 
emufs_˛o£
,

1116 
emufs_ª˛aim
,

1118 
emufs_uio_›_isdú
,

1119 
emufs_uio_›_isdú
,

1120 
emufs_gëdúíåy
,

1121 
emufs_uio_›_isdú
,

1122 
emufs_io˘l
,

1123 
emufs_°©
,

1124 
emufs_dú_gëty≥
,

1125 
emufs_dú_åy£ek
,

1126 
emufs_void_›_isdú
,

1127 
emufs_void_›_isdú
,

1128 
emufs_åunˇã_isdú
,

1129 
emufs_«mefûe
,

1131 
emufs_¸ót
,

1132 
emufs_symlök
,

1133 
emufs_mkdú
,

1134 
emufs_lök
,

1135 
emufs_ªmove
,

1136 
emufs_rmdú
,

1137 
emufs_ª«me
,

1139 
emufs_lookup
,

1140 
emufs_look∑ª¡
,

1148 
	$emufs_lﬂdvnode
(
emufs_fs
 *
ef
, 
uöt32_t
 
h™dÀ
, 
isdú
,

1149 
emufs_vnode
 **
ªt
)

1151 
vnode
 *
v
;

1152 
emufs_vnode
 *
ev
;

1153 
i
, 
num
;

1154 
ªsu…
;

1156 
	`vfs_biglock_acquúe
();

1157 
	`lock_acquúe
(
ef
->
ef_emu
->
e_lock
);

1159 
num
 = 
	`vnodóºay_num
(
ef
->
ef_vnodes
);

1160 
i
=0; i<
num
; i++) {

1161 
v
 = 
	`vnodóºay_gë
(
ef
->
ef_vnodes
, 
i
);

1162 
ev
 = 
v
->
vn_d©a
;

1163 i‡(
ev
->
ev_h™dÀ
 =
h™dÀ
) {

1166 
	`VOP_INCREF
(&
ev
->
ev_v
);

1168 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1169 
	`vfs_biglock_ªÀa£
();

1170 *
ªt
 = 
ev
;

1177 
ev
 = 
	`kmÆloc
((
emufs_vnode
));

1178 i‡(
ev
==
NULL
) {

1179 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1180  
ENOMEM
;

1183 
ev
->
ev_emu
 = 
ef
->
ef_emu
;

1184 
ev
->
ev_h™dÀ
 = 
h™dÀ
;

1186 
ªsu…
 = 
	`VOP_INIT
(&
ev
->
ev_v
, 
isdú
 ? &
emufs_dú›s
 : &
emufs_fûe›s
,

1187 &
ef
->
ef_fs
, 
ev
);

1188 i‡(
ªsu…
) {

1189 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1190 
	`vfs_biglock_ªÀa£
();

1191 
	`k‰ì
(
ev
);

1192  
ªsu…
;

1195 
ªsu…
 = 
	`vnodóºay_add
(
ef
->
ef_vnodes
, &
ev
->
ev_v
, 
NULL
);

1196 i‡(
ªsu…
) {

1198 
	`VOP_CLEANUP
(&
ev
->
ev_v
);

1199 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1200 
	`vfs_biglock_ªÀa£
();

1201 
	`k‰ì
(
ev
);

1202  
ªsu…
;

1205 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1206 
	`vfs_biglock_ªÀa£
();

1208 *
ªt
 = 
ev
;

1210 
	}
}

1225 
	$emufs_sync
(
fs
 *fs)

1227 ()
fs
;

1229 
	}
}

1236 
	$emufs_gëvﬁ«me
(
fs
 *fs)

1239 ()
fs
;

1240  
NULL
;

1241 
	}
}

1247 
vnode
 *

1248 
	$emufs_gëroŸ
(
fs
 *fs)

1250 
emufs_fs
 *
ef
;

1252 
	`KASSERT
(
fs
 !
NULL
);

1254 
ef
 = 
fs
->
fs_d©a
;

1256 
	`KASSERT
(
ef
 !
NULL
);

1257 
	`KASSERT
(
ef
->
ef_roŸ
 !
NULL
);

1259 
	`VOP_INCREF
(&
ef
->
ef_roŸ
->
ev_v
);

1260  &
ef
->
ef_roŸ
->
ev_v
;

1261 
	}
}

1268 
	$emufs_unmou¡
(
fs
 *fs)

1271 ()
fs
;

1272  
EBUSY
;

1273 
	}
}

1284 
	$emufs_addtovfs
(
emu_so·c
 *
sc
, c⁄° *
dev«me
)

1286 
emufs_fs
 *
ef
;

1287 
ªsu…
;

1289 
ef
 = 
	`kmÆloc
((
emufs_fs
));

1290 i‡(
ef
==
NULL
) {

1291  
ENOMEM
;

1294 
ef
->
ef_fs
.
fs_sync
 = 
emufs_sync
;

1295 
ef
->
ef_fs
.
fs_gëvﬁ«me
 = 
emufs_gëvﬁ«me
;

1296 
ef
->
ef_fs
.
fs_gëroŸ
 = 
emufs_gëroŸ
;

1297 
ef
->
ef_fs
.
fs_unmou¡
 = 
emufs_unmou¡
;

1298 
ef
->
ef_fs
.
fs_d©a
 =Éf;

1300 
ef
->
ef_emu
 = 
sc
;

1301 
ef
->
ef_roŸ
 = 
NULL
;

1302 
ef
->
ef_vnodes
 = 
	`vnodóºay_¸óã
();

1303 i‡(
ef
->
ef_vnodes
 =
NULL
) {

1304 
	`k‰ì
(
ef
);

1305  
ENOMEM
;

1308 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
EMU_ROOTHANDLE
, 1, &ef->
ef_roŸ
);

1309 i‡(
ªsu…
) {

1310 
	`k‰ì
(
ef
);

1311  
ªsu…
;

1314 
	`KASSERT
(
ef
->
ef_roŸ
!=
NULL
);

1316 
ªsu…
 = 
	`vfs_addfs
(
dev«me
, &
ef
->
ef_fs
);

1317 i‡(
ªsu…
) {

1318 
	`VOP_DECREF
(&
ef
->
ef_roŸ
->
ev_v
);

1319 
	`k‰ì
(
ef
);

1321  
ªsu…
;

1322 
	}
}

1333 
	$c⁄fig_emu
(
emu_so·c
 *
sc
, 
emuno
)

1335 
«me
[32];

1337 
sc
->
e_lock
 = 
	`lock_¸óã
("emufs-lock");

1338 i‡(
sc
->
e_lock
 =
NULL
) {

1339  
ENOMEM
;

1341 
sc
->
e_£m
 = 
	`£m_¸óã
("emufs-sem", 0);

1342 i‡(
sc
->
e_£m
 =
NULL
) {

1343 
	`lock_de°roy
(
sc
->
e_lock
);

1344 
sc
->
e_lock
 = 
NULL
;

1345  
ENOMEM
;

1347 
sc
->
e_iobuf
 = 
	`bus_m≠_¨ó
(sc->
e_busd©a
, sc->
e_bu•os
, 
EMU_BUFFER
);

1349 
	`¢¥ötf
(
«me
, “ame), "emu%d", 
emuno
);

1351  
	`emufs_addtovfs
(
sc
, 
«me
);

1352 
	}
}

	@os161/kern/dev/lamebus/emu.h

30 #i‚de‡
_LAMEBUS_EMU_H_


31 
	#_LAMEBUS_EMU_H_


	)

34 
	#EMU_MAXIO
 16384

	)

35 
	#EMU_ROOTHANDLE
 0

	)

43 
	semu_so·c
 {

45 *
	me_busd©a
;

46 
uöt32_t
 
	me_bu•os
;

47 
	me_unô
;

50 
lock
 *
	me_lock
;

51 
£m≠h‹e
 *
	me_£m
;

52 *
	me_iobuf
;

55 
uöt32_t
 
	me_ªsu…
;

59 
emu_úq
( *);

	@os161/kern/dev/lamebus/emu_att.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<œmebus/œmebus.h
>

37 
	~<œmebus/emu.h
>

38 
	~"autoc⁄f.h
"

41 
	#LOW_VERSION
 1

	)

43 
	#HIGH_VERSION
 1

	)

45 
emu_so·c
 *

46 
	$©èch_emu_to_œmebus
(
emuno
, 
œmebus_so·c
 *
sc
)

48 
emu_so·c
 *
es
;

49 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_EMUFS
,

50 
LOW_VERSION
, 
HIGH_VERSION
);

51 i‡(
¶Ÿ
 < 0) {

52  
NULL
;

55 
es
 = 
	`kmÆloc
((
emu_so·c
));

56 i‡(
es
==
NULL
) {

57  
NULL
;

60 
es
->
e_busd©a
 = 
sc
;

61 
es
->
e_bu•os
 = 
¶Ÿ
;

62 
es
->
e_unô
 = 
emuno
;

64 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

65 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
es
, 
emu_úq
);

67  
es
;

68 
	}
}

	@os161/kern/dev/lamebus/lamebus.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<˝u.h
>

37 
	~<•ölock.h
>

38 
	~<cuºít.h
>

39 
	~<œmebus/œmebus.h
>

42 
	#CFGREG_VID
 0

	)

43 
	#CFGREG_DID
 4

	)

44 
	#CFGREG_DRL
 8

	)

47 
	#CTLREG_RAMSZ
 0x200

	)

48 
	#CTLREG_IRQS
 0x204

	)

49 
	#CTLREG_PWR
 0x208

	)

50 
	#CTLREG_IRQE
 0x20c

	)

51 
	#CTLREG_CPUS
 0x210

	)

52 
	#CTLREG_CPUE
 0x214

	)

53 
	#CTLREG_SELF
 0x218

	)

56 
	#CTLCPU_CIRQE
 0x000

	)

57 
	#CTLCPU_CIPI
 0x004

	)

58 
	#CTLCPU_CRAM
 0x300

	)

65 
ölöe


66 
uöt32_t


67 
	$ªad_cfg_ªgi°î
(
œmebus_so·c
 *
lb
, 
¶Ÿ
, 
uöt32_t
 
off£t
)

70 
off£t
 +
LB_CONFIG_SIZE
*
¶Ÿ
;

71  
	`œmebus_ªad_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
);

72 
	}
}

78 
ölöe


80 
	$wrôe_cfg_ªgi°î
(
œmebus_so·c
 *
lb
, 
¶Ÿ
, 
uöt32_t
 
off£t
,

81 
uöt32_t
 
vÆ
)

83 
off£t
 +
LB_CONFIG_SIZE
*
¶Ÿ
;

84 
	`œmebus_wrôe_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

85 
	}
}

91 
ölöe


92 
uöt32_t


93 
	$ªad_˘l_ªgi°î
(
œmebus_so·c
 *
lb
, 
uöt32_t
 
off£t
)

96  
	`ªad_cfg_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
);

97 
	}
}

103 
ölöe


105 
	$wrôe_˘l_ªgi°î
(
œmebus_so·c
 *
lb
, 
uöt32_t
 
off£t
, uöt32_à
vÆ
)

107 
	`wrôe_cfg_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

108 
	}
}

114 
ölöe


116 
	$wrôe_˘l˝u_ªgi°î
(
œmebus_so·c
 *
lb
, 
hw_˝unum
,

117 
uöt32_t
 
off£t
, uöt32_à
vÆ
)

119 
off£t
 +
LB_CTLCPU_OFFSET
 + 
hw_˝unum
 * 
LB_CTLCPU_SIZE
;

120 
	`œmebus_wrôe_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

121 
	}
}

127 
	$œmebus_föd_˝us
(
œmebus_so·c
 *
œmebus
)

129 
uöt32_t
 
˝umask
, 
£lf
, 
bô
, 
vÆ
;

130 
i
, 
num˝us
, 
boŸ˝u
;

131 
hwnum
[32];

133 
˝umask
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_CPUS
);

134 
£lf
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_SELF
);

136 
num˝us
 = 0;

137 
boŸ˝u
 = 0;

138 
i
=0; i<32; i++) {

139 
bô
 = (
uöt32_t
)1 << 
i
;

140 i‡((
˝umask
 & 
bô
) != 0) {

141 i‡(
£lf
 & 
bô
) {

142 
boŸ˝u
 = 
num˝us
;

143 
cur˝u
->
c_h¨dw¨e_numbî
 = 
i
;

145 
hwnum
[
num˝us
] = 
i
;

146 
num˝us
++;

150 
i
=0; i<
num˝us
; i++) {

151 i‡(
i
 !
boŸ˝u
) {

152 
	`˝u_¸óã
(
hwnum
[
i
]);

162 
i
=0; i<
num˝us
; i++) {

163 i‡(
i
 !
boŸ˝u
) {

164 
vÆ
 = 0;

167 
vÆ
 = 0xffffffff;

169 
	`wrôe_˘l˝u_ªgi°î
(
œmebus
, 
hwnum
[
i
], 
CTLCPU_CIRQE
, 
vÆ
);

171 
	}
}

184 
	$œmebus_°¨t_˝us
(
œmebus_so·c
 *
œmebus
)

186 
uöt32_t
 
˝umask
, 
£lf
, 
bô
;

187 
uöt32_t
 
˘l˝uoff£t
;

188 
uöt32_t
 *
¸am
;

189 
i
;

190 
˝unum
;

192 
˝umask
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_CPUS
);

193 
£lf
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_SELF
);

196 
˝unum
 = 1;

197 
i
=0; i<32; i++) {

198 
bô
 = (
uöt32_t
)1 << 
i
;

199 i‡((
˝umask
 & 
bô
) != 0) {

200 i‡(
£lf
 & 
bô
) {

203 
˘l˝uoff£t
 = 
LB_CTLCPU_OFFSET
 + 
i
 * 
LB_CTLCPU_SIZE
;

204 
¸am
 = 
	`œmebus_m≠_¨ó
(
œmebus
,

205 
LB_CONTROLLER_SLOT
,

206 
˘l˝uoff£t
 + 
CTLCPU_CRAM
);

207 
¸am
[0] = (
uöt32_t
)
˝u_°¨t_£c⁄d¨y
;

208 
¸am
[1] = 
˝unum
++;

213 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_CPUE
, 
˝umask
);

214 
	}
}

228 
	$œmebus_¥obe
(
œmebus_so·c
 *
sc
,

229 
uöt32_t
 
víd‹id
, uöt32_à
devi˚id
,

230 
uöt32_t
 
lowvî
, uöt32_à
highvî
)

232 
¶Ÿ
;

233 
uöt32_t
 
vÆ
;

240 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

242 
¶Ÿ
=0; slŸ<
LB_NSLOTS
; slot++) {

243 i‡(
sc
->
ls_¶Ÿsöu£
 & (1<<
¶Ÿ
)) {

248 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_VID
);

249 i‡(
vÆ
!=
víd‹id
) {

254 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_DID
);

255 i‡(
vÆ
 !
devi˚id
) {

260 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_DRL
);

261 i‡(
vÆ
 < 
lowvî
 || vÆ > 
highvî
) {

268 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

269  
¶Ÿ
;

274 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

276 
	}
}

284 
	$œmebus_m¨k
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

286 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

287 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

289 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

291 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)!=0) {

292 
	`∑nic
("œmebus_m¨k: slŸ %dáÃódy i¿u£\n", 
¶Ÿ
);

295 
sc
->
ls_¶Ÿsöu£
 |
mask
;

297 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

298 
	}
}

304 
	$œmebus_unm¨k
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

306 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

307 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

309 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

311 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

312 
	`∑nic
("œmebus_m¨k: slŸ %dÇŸ m¨ked i¿u£\n", 
¶Ÿ
);

315 
sc
->
ls_¶Ÿsöu£
 &~
mask
;

317 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

318 
	}
}

325 
œmebus_©èch_öãºu±
(
œmebus_so·c
 *
sc
, 
¶Ÿ
,

326 *
devd©a
,

327 (*
úqfunc
)(*
devd©a
))

329 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

330 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

332 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

334 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

335 
	`∑nic
("lamebus_attach_interrupt: slot %dÇot marked in use\n",

336 
¶Ÿ
);

339 
	`KASSERT
(
sc
->
ls_devd©a
[
¶Ÿ
]==
NULL
);

340 
	`KASSERT
(
sc
->
ls_úqfuncs
[
¶Ÿ
]==
NULL
);

342 
sc
->
ls_devd©a
[
¶Ÿ
] = 
devd©a
;

343 
sc
->
ls_úqfuncs
[
¶Ÿ
] = 
úqfunc
;

345 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

346 
	}
}

353 
	$œmebus_dëach_öãºu±
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

355 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

356 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

358 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

360 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

361 
	`∑nic
("lamebus_detach_interrupt: slot %dÇot marked in use\n",

362 
¶Ÿ
);

365 
	`KASSERT
(
sc
->
ls_úqfuncs
[
¶Ÿ
]!=
NULL
);

367 
sc
->
ls_devd©a
[
¶Ÿ
] = 
NULL
;

368 
sc
->
ls_úqfuncs
[
¶Ÿ
] = 
NULL
;

370 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

371 
	}
}

377 
	$œmebus_mask_öãºu±
(
œmebus_so·c
 *
œmebus
, 
¶Ÿ
)

379 
uöt32_t
 
bôs
, 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

380 
	`KASSERT
(
¶Ÿ
 >0 && slŸ < 
LB_NSLOTS
);

382 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

383 
bôs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
);

384 
bôs
 &~
mask
;

385 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
, 
bôs
);

386 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

387 
	}
}

390 
	$œmebus_unmask_öãºu±
(
œmebus_so·c
 *
œmebus
, 
¶Ÿ
)

392 
uöt32_t
 
bôs
, 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

393 
	`KASSERT
(
¶Ÿ
 >0 && slŸ < 
LB_NSLOTS
);

395 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

396 
bôs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
);

397 
bôs
 |
mask
;

398 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
, 
bôs
);

399 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

400 
	}
}

407 
	$œmebus_öãºu±
(
œmebus_so·c
 *
œmebus
)

420 
¶Ÿ
;

421 
uöt32_t
 
mask
;

422 
uöt32_t
 
úqs
;

423 (*
h™dÀr
)(*);

424 *
d©a
;

427 
duds
 = 0;

428 
duds_this_time
 = 0;

431 
	`KASSERT
(
œmebus
 !
NULL
);

434 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

440 
úqs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQS
);

442 i‡(
úqs
 == 0) {

446 
	`k¥ötf
("lamebus: stray interrupt on cpu %u\n",

447 
cur˝u
->
c_numbî
);

448 
duds
++;

449 
duds_this_time
++;

469 
mask
=1, 
¶Ÿ
=0; slŸ<
LB_NSLOTS
; mask<<=1, slot++) {

470 i‡((
úqs
 & 
mask
) == 0) {

479 i‡((
œmebus
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

483 
duds
++;

484 
duds_this_time
++;

488 i‡(
œmebus
->
ls_úqfuncs
[
¶Ÿ
]==
NULL
) {

493 
duds
++;

494 
duds_this_time
++;

503 
h™dÀr
 = 
œmebus
->
ls_úqfuncs
[
¶Ÿ
];

504 
d©a
 = 
œmebus
->
ls_devd©a
[
¶Ÿ
];

505 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

507 
	`h™dÀr
(
d©a
);

509 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

517 
úqs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQS
);

539 i‡(
duds_this_time
 =0 && 
duds
 > 0) {

540 
	`k¥ötf
("œmebus: %d dud i¡îru±s\n", 
duds
);

541 
duds
 = 0;

544 i‡(
duds
 > 10000) {

545 
	`∑nic
("œmebus:Åoÿm™y (%dËdud i¡îru±s\n", 
duds
);

549 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

550 
	}
}

556 
	$œmebus_powîoff
(
œmebus_so·c
 *
œmebus
)

562 
	`˝u_úqoff
();

563 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_PWR
, 0);

566 
	`˝u_hÆt
();

567 
	}
}

572 
uöt32_t


573 
	$œmebus_ømsize
()

582  
	`ªad_˘l_ªgi°î
(
NULL
, 
CTLREG_RAMSZ
);

583 
	}
}

589 
	$œmebus_as£π_ùi
(
œmebus_so·c
 *
œmebus
, 
˝u
 *
èrgë
)

591 
	`wrôe_˘l˝u_ªgi°î
(
œmebus
, 
èrgë
->
c_h¨dw¨e_numbî
,

592 
CTLCPU_CIPI
, 1);

593 
	}
}

596 
	$œmebus_˛ór_ùi
(
œmebus_so·c
 *
œmebus
, 
˝u
 *
èrgë
)

598 
	`wrôe_˘l˝u_ªgi°î
(
œmebus
, 
èrgë
->
c_h¨dw¨e_numbî
,

599 
CTLCPU_CIPI
, 0);

600 
	}
}

606 
œmebus_so·c
 *

607 
	$œmebus_öô
()

609 
œmebus_so·c
 *
œmebus
;

610 
i
;

613 
œmebus
 = 
	`kmÆloc
((
œmebus_so·c
));

614 i‡(
œmebus
==
NULL
) {

615 
	`∑nic
("lamebus_init: Out of memory\n");

618 
	`•ölock_öô
(&
œmebus
->
ls_lock
);

623 
œmebus
->
ls_¶Ÿsöu£
 = 1 << 
LB_CONTROLLER_SLOT
;

625 
i
=0; i<
LB_NSLOTS
; i++) {

626 
œmebus
->
ls_devd©a
[
i
] = 
NULL
;

627 
œmebus
->
ls_úqfuncs
[
i
] = 
NULL
;

630  
œmebus
;

631 
	}
}

	@os161/kern/dev/lamebus/lamebus.h

30 #i‚de‡
_LAMEBUS_H_


31 
	#_LAMEBUS_H_


	)

33 
	~<˝u.h
>

34 
	~<•ölock.h
>

44 
	#LB_VENDOR_CS161
 1

	)

47 
	#LBCS161_BUSCTL
 1

	)

48 
	#LBCS161_TIMER
 2

	)

49 
	#LBCS161_DISK
 3

	)

50 
	#LBCS161_SERIAL
 4

	)

51 
	#LBCS161_SCREEN
 5

	)

52 
	#LBCS161_NET
 6

	)

53 
	#LBCS161_EMUFS
 7

	)

54 
	#LBCS161_TRACE
 8

	)

55 
	#LBCS161_RANDOM
 9

	)

58 
	#LB_CONTROLLER_SLOT
 31

	)

61 
	#LB_NSLOTS
 32

	)

64 
	#LB_CONFIG_SIZE
 1024

	)

67 
	#LB_CTLCPU_SIZE
 1024

	)

70 
	#LB_CTLCPU_OFFSET
 32768

	)

73 
	#LB_SLOT_SIZE
 65536

	)

76 (*
	tlb_úqfunc
)(*
	tdevd©a
);

81 
	sœmebus_so·c
 {

82 
•ölock
 
ls_lock
;

85 
uöt32_t
 
ls_¶Ÿsöu£
;

86 *
ls_devd©a
[
LB_NSLOTS
];

87 
lb_úqfunc
 
ls_úqfuncs
[
LB_NSLOTS
];

93 
œmebus_so·c
 *
	`œmebus_öô
();

98 
	`œmebus_föd_˝us
(
œmebus_so·c
 *
œmebus
);

103 
	`œmebus_°¨t_˝us
(
œmebus_so·c
 *
œmebus
);

112 
	`œmebus_¥obe
(
œmebus_so·c
 *,

113 
uöt32_t
 
víd‹id
, uöt32_à
devi˚id
,

114 
uöt32_t
 
lowvî
, uöt32_à
highvî
);

121 
	`œmebus_m¨k
(
œmebus_so·c
 *, 
¶Ÿ
);

122 
	`œmebus_unm¨k
(
œmebus_so·c
 *, 
¶Ÿ
);

127 
	`œmebus_©èch_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
,

128 *
devd©a
,

129 (*
úqfunc
)(*
devd©a
));

133 
	`œmebus_dëach_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
);

138 
	`œmebus_mask_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
);

139 
	`œmebus_unmask_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
);

144 
	`œmebus_öãºu±
(
œmebus_so·c
 *);

149 
	`œmebus_powîoff
(
œmebus_so·c
 *);

154 
size_t
 
	`œmebus_ømsize
();

159 
	`œmebus_as£π_ùi
(
œmebus_so·c
 *, 
˝u
 *
èrgë˝u
);

160 
	`œmebus_˛ór_ùi
(
œmebus_so·c
 *, 
˝u
 *
èrgë˝u
);

166 
uöt32_t
 
	`œmebus_ªad_ªgi°î
(
œmebus_so·c
 *, 
¶Ÿ
,

167 
uöt32_t
 
off£t
);

168 
	`œmebus_wrôe_ªgi°î
(
œmebus_so·c
 *, 
¶Ÿ
,

169 
uöt32_t
 
off£t
, uöt32_à
vÆ
);

174 *
	`œmebus_m≠_¨ó
(
œmebus_so·c
 *, 
¶Ÿ
,

175 
uöt32_t
 
off£t
);

	@os161/kern/dev/lamebus/lhd.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<lib.h
>

37 
	~<uio.h
>

38 
	~<synch.h
>

39 
	~<∂©f‹m/bus.h
>

40 
	~<vfs.h
>

41 
	~<œmebus/lhd.h
>

42 
	~"autoc⁄f.h
"

45 
	#LHD_REG_NSECT
 0

	)

46 
	#LHD_REG_STAT
 4

	)

47 
	#LHD_REG_SECT
 8

	)

48 
	#LHD_REG_RPM
 12

	)

51 
	#LHD_IDLE
 0

	)

52 
	#LHD_WORKING
 1

	)

53 
	#LHD_OK
 4

	)

54 
	#LHD_INVSECT
 12

	)

55 
	#LHD_MEDIA
 20

	)

56 
	#LHD_ISWRITE
 2

	)

57 
	#LHD_STATEMASK
 0x1d

	)

60 
	#LHD_BUFFER
 32768

	)

66 
ölöe


67 
uöt32_t
 
	$lhd_rdªg
(
lhd_so·c
 *
lh
, 
uöt32_t
 
ªg
)

69  
	`bus_ªad_ªgi°î
(
lh
->
lh_busd©a
,Üh->
lh_bu•os
, 
ªg
);

70 
	}
}

76 
ölöe


77 
	$lhd_wªg
(
lhd_so·c
 *
lh
, 
uöt32_t
 
ªg
, uöt32_à
vÆ
)

79 
	`bus_wrôe_ªgi°î
(
lh
->
lh_busd©a
,Üh->
lh_bu•os
, 
ªg
, 
vÆ
);

80 
	}
}

86 
	$lhd_code_to_î∫o
(
lhd_so·c
 *
lh
, 
code
)

88 
code
 & 
LHD_STATEMASK
) {

89 
LHD_OK
:  0;

90 
LHD_INVSECT
:  
EINVAL
;

91 
LHD_MEDIA
:  
EIO
;

93 
	`k¥ötf
("lhd%d: Unknow¿ªsu… codê%d\n", 
lh
->
lh_unô
, 
code
);

94  
EAGAIN
;

95 
	}
}

103 
	$lhd_iod⁄e
(
lhd_so·c
 *
lh
, 
îr
)

105 
lh
->
lh_ªsu…
 = 
îr
;

106 
	`V
(
lh
->
lh_d⁄e
);

107 
	}
}

115 
	$lhd_úq
(*
vlh
)

117 
lhd_so·c
 *
lh
 = 
vlh
;

118 
uöt32_t
 
vÆ
;

120 
vÆ
 = 
	`lhd_rdªg
(
lh
, 
LHD_REG_STAT
);

122 
vÆ
 & 
LHD_STATEMASK
) {

123 
LHD_IDLE
:

124 
LHD_WORKING
:

126 
LHD_OK
:

127 
LHD_INVSECT
:

128 
LHD_MEDIA
:

129 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 0);

130 
	`lhd_iod⁄e
(
lh
, 
	`lhd_code_to_î∫o
÷h, 
vÆ
));

133 
	}
}

140 
	$lhd_›í
(
devi˚
 *
d
, 
›íÊags
)

145 ()
d
;

146 ()
›íÊags
;

149 
	}
}

156 
	$lhd_˛o£
(
devi˚
 *
d
)

161 ()
d
;

164 
	}
}

171 
	$lhd_io˘l
(
devi˚
 *
d
, 
›
, 
u£Ωå_t
 
d©a
)

176 ()
d
;

177 ()
›
;

178 ()
d©a
;

179  
EIOCTL
;

180 
	}
}

190 
	$lhd_ª£t
(
lhd_so·c
 *
lh
)

192 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 0);

193 
	}
}

201 
	$lhd_io
(
devi˚
 *
d
, 
uio
 *uio)

203 
lhd_so·c
 *
lh
 = 
d
->
d_d©a
;

205 
uöt32_t
 
£˘‹
 = 
uio
->
uio_off£t
 / 
LHD_SECTSIZE
;

206 
uöt32_t
 
£˘off
 = 
uio
->
uio_off£t
 % 
LHD_SECTSIZE
;

207 
uöt32_t
 
Àn
 = 
uio
->
uio_ªsid
 / 
LHD_SECTSIZE
;

208 
uöt32_t
 
Ànoff
 = 
uio
->
uio_ªsid
 % 
LHD_SECTSIZE
;

209 
uöt32_t
 
i
;

210 
uöt32_t
 
°©vÆ
 = 
LHD_WORKING
;

211 
ªsu…
;

214 i‡(
£˘off
 !0 || 
Ànoff
 != 0) {

215  
EINVAL
;

219 i‡(
£˘‹
+
Àn
 > 
lh
->
lh_dev
.
d_blocks
) {

220  
EINVAL
;

224 i‡(
uio
->
uio_rw
==
UIO_WRITE
) {

225 
°©vÆ
 |
LHD_ISWRITE
;

229 
i
=0; i<
Àn
; i++) {

232 
	`P
(
lh
->
lh_˛ór
);

238 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

239 
ªsu…
 = 
	`uiomove
(
lh
->
lh_buf
, 
LHD_SECTSIZE
, 
uio
);

240 i‡(
ªsu…
) {

241 
	`V
(
lh
->
lh_˛ór
);

242  
ªsu…
;

247 
	`lhd_wªg
(
lh
, 
LHD_REG_SECT
, 
£˘‹
+
i
);

250 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 
°©vÆ
);

253 
	`P
(
lh
->
lh_d⁄e
);

256 
ªsu…
 = 
lh
->
lh_ªsu…
;

262 i‡(
ªsu…
==0 && 
uio
->
uio_rw
==
UIO_READ
) {

263 
ªsu…
 = 
	`uiomove
(
lh
->
lh_buf
, 
LHD_SECTSIZE
, 
uio
);

267 
	`V
(
lh
->
lh_˛ór
);

270 i‡(
ªsu…
) {

271  
ªsu…
;

276 
	}
}

282 
	$c⁄fig_lhd
(
lhd_so·c
 *
lh
, 
lhdno
)

284 
«me
[32];

287 
	`¢¥ötf
(
«me
, “ame), "lhd%d", 
lhdno
);

290 
lh
->
lh_buf
 = 
	`bus_m≠_¨ó
÷h->
lh_busd©a
,Üh->
lh_bu•os
, 
LHD_BUFFER
);

293 
lh
->
lh_˛ór
 = 
	`£m_¸óã
("lhd-clear", 1);

294 i‡(
lh
->
lh_˛ór
 =
NULL
) {

295  
ENOMEM
;

297 
lh
->
lh_d⁄e
 = 
	`£m_¸óã
("lhd-done", 0);

298 i‡(
lh
->
lh_d⁄e
 =
NULL
) {

299 
	`£m_de°roy
(
lh
->
lh_˛ór
);

300 
lh
->
lh_˛ór
 = 
NULL
;

301  
ENOMEM
;

305 
lh
->
lh_dev
.
d_›í
 = 
lhd_›í
;

306 
lh
->
lh_dev
.
d_˛o£
 = 
lhd_˛o£
;

307 
lh
->
lh_dev
.
d_io
 = 
lhd_io
;

308 
lh
->
lh_dev
.
d_io˘l
 = 
lhd_io˘l
;

309 
lh
->
lh_dev
.
d_blocks
 = 
	`bus_ªad_ªgi°î
÷h->
lh_busd©a
,Üh->
lh_bu•os
,

310 
LHD_REG_NSECT
);

311 
lh
->
lh_dev
.
d_blocksize
 = 
LHD_SECTSIZE
;

312 
lh
->
lh_dev
.
d_d©a
 =Üh;

315  
	`vfs_adddev
(
«me
, &
lh
->
lh_dev
, 1);

316 
	}
}

	@os161/kern/dev/lamebus/lhd.h

30 #i‚de‡
_LAMEBUS_LHD_H_


31 
	#_LAMEBUS_LHD_H_


	)

33 
	~<devi˚.h
>

38 
	#LHD_SECTSIZE
 512

	)

43 
	slhd_so·c
 {

45 *
	mlh_busd©a
;

46 
uöt32_t
 
	mlh_bu•os
;

47 
	mlh_unô
;

53 *
	mlh_buf
;

54 
	mlh_ªsu…
;

55 
£m≠h‹e
 *
	mlh_˛ór
;

56 
£m≠h‹e
 *
	mlh_d⁄e
;

58 
devi˚
 
	mlh_dev
;

62 
lhd_úq
( *);

	@os161/kern/dev/lamebus/lhd_att.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<œmebus/œmebus.h
>

36 
	~<œmebus/lhd.h
>

37 
	~"autoc⁄f.h
"

40 
	#LOW_VERSION
 2

	)

42 
	#HIGH_VERSION
 2

	)

44 
lhd_so·c
 *

45 
	$©èch_lhd_to_œmebus
(
lhdno
, 
œmebus_so·c
 *
sc
)

47 
lhd_so·c
 *
lh
;

48 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_DISK
,

49 
LOW_VERSION
, 
HIGH_VERSION
);

50 i‡(
¶Ÿ
 < 0) {

52  
NULL
;

55 
lh
 = 
	`kmÆloc
((
lhd_so·c
));

56 i‡(
lh
==
NULL
) {

58  
NULL
;

62 
lh
->
lh_busd©a
 = 
sc
;

63 
lh
->
lh_bu•os
 = 
¶Ÿ
;

64 
lh
->
lh_unô
 = 
lhdno
;

67 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

68 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
lh
, 
lhd_úq
);

70  
lh
;

71 
	}
}

	@os161/kern/dev/lamebus/lnet.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

34 
	~"autoc⁄f.h
"

37 
	$c⁄fig_ ë
(
 ë_so·c
 *
sc
, 
 ëno
)

39 ()
sc
;

41 
	`k¥ötf
(" ë%d: Nÿ√tw‹k suµ‹àö sy°em\n", 
 ëno
);

43  
ENODEV
;

44 
	}
}

	@os161/kern/dev/lamebus/lnet_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~"autoc⁄f.h
"

36 
	#LOW_VERSION
 1

	)

38 
	#HIGH_VERSION
 1

	)

40 
 ë_so·c
 *

41 
	$©èch_ ë_to_œmebus
(
 ëno
, 
œmebus_so·c
 *
sc
)

43 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_NET
,

44 
LOW_VERSION
, 
HIGH_VERSION
);

45 i‡(
¶Ÿ
 < 0) {

46  
NULL
;

49 
	`k¥ötf
(" ë%d: Nÿ√tw‹k suµ‹àö sy°em\n", 
 ëno
);

51  
NULL
;

52 
	}
}

	@os161/kern/dev/lamebus/lrandom.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<uio.h
>

36 
	~<∂©f‹m/bus.h
>

37 
	~<œmebus/Ã™dom.h
>

38 
	~"autoc⁄f.h
"

41 
	#LR_REG_RAND
 0

	)

44 
	#LR_RANDMAX
 0xffffffff

	)

47 
	$c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
Ã
, 
Ã™domno
)

49 ()
Ã™domno
;

50 ()
Ã
;

52 
	}
}

54 
uöt32_t


55 
	$Ã™dom_øndom
(*
devd©a
)

57 
Ã™dom_so·c
 *
Ã
 = 
devd©a
;

58  
	`bus_ªad_ªgi°î
(
Ã
->
Ã_bus
,Ür->
Ã_bu•os
, 
LR_REG_RAND
);

59 
	}
}

61 
uöt32_t


62 
	$Ã™dom_øndmax
(*
devd©a
)

64 ()
devd©a
;

65  
LR_RANDMAX
;

66 
	}
}

69 
	$Ã™dom_ªad
(*
devd©a
, 
uio
 *uio)

71 
Ã™dom_so·c
 *
Ã
 = 
devd©a
;

72 
uöt32_t
 
vÆ
;

73 
ªsu…
;

75 
uio
->
uio_ªsid
 > 0) {

76 
vÆ
 = 
	`bus_ªad_ªgi°î
(
Ã
->
Ã_bus
,Ür->
Ã_bu•os
,

77 
LR_REG_RAND
);

78 
ªsu…
 = 
	`uiomove
(&
vÆ
, (vÆ), 
uio
);

79 i‡(
ªsu…
) {

80  
ªsu…
;

85 
	}
}

	@os161/kern/dev/lamebus/lrandom.h

30 #i‚de‡
_LAMEBUS_LRANDOM_H_


31 
	#_LAMEBUS_LRANDOM_H_


	)

33 
	guio
;

35 
	sÃ™dom_so·c
 {

37 *
	mÃ_bus
;

38 
uöt32_t
 
	mÃ_bu•os
;

42 
uöt32_t
 
Ã™dom_øndom
–*
devd©a
);

43 
uöt32_t
 
Ã™dom_øndmax
–*
devd©a
);

44 
Ã™dom_ªad
–*, 
uio
 *);

	@os161/kern/dev/lamebus/lrandom_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~<œmebus/Ã™dom.h
>

34 
	~"autoc⁄f.h
"

37 
	#LOW_VERSION
 1

	)

39 
	#HIGH_VERSION
 1

	)

41 
Ã™dom_so·c
 *

42 
	$©èch_Ã™dom_to_œmebus
(
Ã™domno
, 
œmebus_so·c
 *
sc
)

44 
Ã™dom_so·c
 *
Ã
;

45 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_RANDOM
,

46 
LOW_VERSION
, 
HIGH_VERSION
);

47 i‡(
¶Ÿ
 < 0) {

48  
NULL
;

51 
Ã
 = 
	`kmÆloc
((
Ã™dom_so·c
));

52 i‡(
Ã
==
NULL
) {

53  
NULL
;

56 ()
Ã™domno
;

58 
Ã
->
Ã_bus
 = 
sc
;

59 
Ã
->
Ã_bu•os
 = 
¶Ÿ
;

61 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

63  
Ã
;

64 
	}
}

	@os161/kern/dev/lamebus/lscreen.c

36 
	~<ty≥s.h
>

37 
	~<lib.h
>

38 
	~<•ölock.h
>

39 
	~<∂©f‹m/bus.h
>

40 
	~<œmebus/ls¸ìn.h
>

41 
	~"autoc⁄f.h
"

44 
	#LSCR_REG_POSN
 0

	)

45 
	#LSCR_REG_SIZE
 4

	)

46 
	#LSCR_REG_CHAR
 8

	)

47 
	#LSCR_REG_RIRQ
 12

	)

50 
	#LSCR_IRQ_ENABLE
 1

	)

51 
	#LSCR_IRQ_ACTIVE
 2

	)

54 
	#LSCR_SCREEN
 32768

	)

58 
ölöe


60 
	$•lôxy
(
uöt32_t
 
xy
, *
x
, *
y
)

62 *
x
 = 
xy
 >> 16;

63 *
y
 = 
xy
 & 0xffff;

64 
	}
}

68 
ölöe


69 
uöt32_t


70 
	$mîgexy
(
x
, 
y
)

72 
uöt32_t
 
vÆ
 = 
x
;

74  (
vÆ
 << 16Ë| 
y
;

75 
	}
}

83 
	$ls¸ìn_úq
(*
vsc
)

85 
ls¸ìn_so·c
 *
sc
 = 
vsc
;

86 
uöt32_t
 
ch
, 
x
;

88 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

90 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSCR_REG_RIRQ
);

91 i‡(
x
 & 
LSCR_IRQ_ACTIVE
) {

92 
ch
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

93 
LSCR_REG_CHAR
);

94 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

95 
LSCR_REG_RIRQ
, 
LSCR_IRQ_ENABLE
);

97 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

98 i‡(
sc
->
ls_öput
) {

99 
sc
->
	`ls_öput
(sc->
ls_devd©a
, 
ch
);

103 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

105 
	}
}

114 
	$ls¸ìn_√wlöe
(
ls¸ìn_so·c
 *
sc
)

116 i‡(
sc
->
ls_cy
 >sc->
ls_height
-1) {

121 
	`memmove
(
sc
->
ls_s¸ìn
, sc->ls_s¸ì¿+ sc->
ls_width
,

122 
sc
->
ls_width
 * (sc->
ls_height
-1));

123 
	`bzîo
(
sc
->
ls_s¸ìn
 + sc->
ls_width
 * (sc->
ls_height
-1),

124 
sc
->
ls_width
);

127 
sc
->
ls_cy
++;

129 
sc
->
ls_cx
=0;

130 
	}
}

137 
	$ls¸ìn_ch¨
(
ls¸ìn_so·c
 *
sc
, 
ch
)

139 i‡(
sc
->
ls_cx
 >sc->
ls_width
) {

140 
	`ls¸ìn_√wlöe
(
sc
);

143 
sc
->
ls_s¸ìn
[sc->
ls_cy
*sc->
ls_width
 + sc->
ls_cx
] = 
ch
;

144 
sc
->
ls_cx
++;

145 
	}
}

152 
	$ls¸ìn_wrôe
(*
vsc
, 
ch
)

154 
ls¸ìn_so·c
 *
sc
 = 
vsc
;

155 
ccx
, 
ccy
;

157 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

159 
ch
) {

160 '\n': 
	`ls¸ìn_√wlöe
(
sc
); ;

161 : 
	`ls¸ìn_ch¨
(
sc
, 
ch
); ;

169 
ccx
 = 
sc
->
ls_cx
;

170 
ccy
 = 
sc
->
ls_cy
;

171 i‡(
ccx
==
sc
->
ls_width
) {

172 
ccx
--;

176 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

177 
LSCR_REG_POSN
, 
	`mîgexy
(
ccx
, 
ccy
));

179 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

180 
	}
}

188 
	$c⁄fig_ls¸ìn
(
ls¸ìn_so·c
 *
sc
, 
ls¸ì¬o
)

190 
uöt32_t
 
vÆ
;

192 ()
ls¸ì¬o
;

194 
	`•ölock_öô
(&
sc
->
ls_lock
);

200 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

201 
LSCR_REG_RIRQ
, 
LSCR_IRQ_ENABLE
);

206 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

207 
LSCR_REG_SIZE
);

208 
	`•lôxy
(
vÆ
, &
sc
->
ls_width
, &sc->
ls_height
);

213 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

214 
LSCR_REG_POSN
);

215 
	`•lôxy
(
vÆ
, &
sc
->
ls_cx
, &sc->
ls_cy
);

220 
sc
->
ls_s¸ìn
 = 
	`bus_m≠_¨ó
(sc->
ls_busd©a
, sc->
ls_bu•os
,

221 
LSCR_SCREEN
);

224 
	}
}

	@os161/kern/dev/lamebus/lscreen.h

30 #i‚de‡
_LAMEBUS_LSCREEN_H_


31 
	#_LAMEBUS_LSCREEN_H_


	)

36 
	sls¸ìn_so·c
 {

38 
•ölock
 
	mls_lock
;

39 
	mls_width
, 
	mls_height
;

40 
	mls_cx
, 
	mls_cy
;

41 *
	mls_s¸ìn
;

44 *
	mls_busd©a
;

45 
uöt32_t
 
	mls_bu•os
;

48 *
	mls_devd©a
;

49 (*
	mls_°¨t
)(*
	mdevd©a
);

50 (*
	mls_öput
)(*
	mdevd©a
, 
	mch
);

54 
ls¸ìn_úq
–*
sc
);

57 
ls¸ìn_wrôe
–*
sc
, 
ch
);

	@os161/kern/dev/lamebus/lscreen_att.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<œmebus/œmebus.h
>

36 
	~<œmebus/ls¸ìn.h
>

37 
	~"autoc⁄f.h
"

40 
	#LOW_VERSION
 1

	)

42 
	#HIGH_VERSION
 1

	)

44 
ls¸ìn_so·c
 *

45 
	$©èch_ls¸ìn_to_œmebus
(
ls¸ì¬o
, 
œmebus_so·c
 *
sc
)

47 
ls¸ìn_so·c
 *
ls
;

48 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_SCREEN
,

49 
LOW_VERSION
, 
HIGH_VERSION
);

50 i‡(
¶Ÿ
 < 0) {

52  
NULL
;

55 
ls
 = 
	`kmÆloc
((
ls¸ìn_so·c
));

56 i‡(
ls
==
NULL
) {

58  
NULL
;

62 
ls
->
ls_busd©a
 = 
sc
;

63 
ls
->
ls_bu•os
 = 
¶Ÿ
;

66 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

67 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
ls
, 
ls¸ìn_úq
);

69  
ls
;

70 
	}
}

	@os161/kern/dev/lamebus/lser.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<•ölock.h
>

33 
	~<∂©f‹m/bus.h
>

34 
	~<œmebus/l£r.h
>

35 
	~"autoc⁄f.h
"

38 
	#LSER_REG_CHAR
 0

	)

39 
	#LSER_REG_WIRQ
 4

	)

40 
	#LSER_REG_RIRQ
 8

	)

43 
	#LSER_IRQ_ENABLE
 1

	)

44 
	#LSER_IRQ_ACTIVE
 2

	)

47 
	$l£r_úq
(*
vsc
)

49 
l£r_so·c
 *
sc
 = 
vsc
;

50 
uöt32_t
 
x
;

51 
boﬁ
 
˛ór_to_wrôe
 = 
Ál£
;

52 
boﬁ
 
gŸ_a_ªad
 = 
Ál£
;

53 
uöt32_t
 
ch
 = 0;

55 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

57 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_WIRQ
);

58 i‡(
x
 & 
LSER_IRQ_ACTIVE
) {

59 
x
 = 
LSER_IRQ_ENABLE
;

60 
sc
->
ls_wbusy
 = 0;

61 
˛ór_to_wrôe
 = 
åue
;

62 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

63 
LSER_REG_WIRQ
, 
x
);

66 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_RIRQ
);

67 i‡(
x
 & 
LSER_IRQ_ACTIVE
) {

68 
x
 = 
LSER_IRQ_ENABLE
;

69 
ch
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

70 
LSER_REG_CHAR
);

71 
gŸ_a_ªad
 = 
åue
;

72 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

73 
LSER_REG_RIRQ
, 
x
);

76 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

78 i‡(
˛ór_to_wrôe
 && 
sc
->
ls_°¨t
 !
NULL
) {

79 
sc
->
	`ls_°¨t
(sc->
ls_devd©a
);

81 i‡(
gŸ_a_ªad
 && 
sc
->
ls_öput
 !
NULL
) {

82 
sc
->
	`ls_öput
(sc->
ls_devd©a
, 
ch
);

84 
	}
}

87 
	$l£r_wrôe
(*
vls
, 
ch
)

89 
l£r_so·c
 *
ls
 = 
vls
;

91 
	`•ölock_acquúe
(&
ls
->
ls_lock
);

93 i‡(
ls
->
ls_wbusy
) {

105 
	`∑nic
("lser: Not clearÅo write\n");

107 
ls
->
ls_wbusy
 = 
åue
;

109 
	`bus_wrôe_ªgi°î
(
ls
->
ls_busd©a
,Üs->
ls_bu•os
, 
LSER_REG_CHAR
, 
ch
);

111 
	`•ölock_ªÀa£
(&
ls
->
ls_lock
);

112 
	}
}

116 
	$l£r_pﬁl_u¡û_wrôe
(
l£r_so·c
 *
sc
)

118 
uöt32_t
 
vÆ
;

120 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
sc
->
ls_lock
));

123 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

124 
LSER_REG_WIRQ
);

126 (
vÆ
 & 
LSER_IRQ_ACTIVE
) == 0);

127 
	}
}

130 
	$l£r_wrôïﬁÀd
(*
vsc
, 
ch
)

132 
l£r_so·c
 *
sc
 = 
vsc
;

133 
boﬁ
 
úq≥ndög
 = 
Ál£
;

135 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

137 i‡(
sc
->
ls_wbusy
) {

138 
úq≥ndög
 = 
åue
;

139 
	`l£r_pﬁl_u¡û_wrôe
(
sc
);

141 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

142 
LSER_REG_WIRQ
, 
LSER_IRQ_ENABLE
);

146 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_CHAR
, 
ch
);

149 
	`l£r_pﬁl_u¡û_wrôe
(
sc
);

156 i‡(!
úq≥ndög
) {

157 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

158 
LSER_REG_WIRQ
, 
LSER_IRQ_ENABLE
);

161 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

162 
	}
}

170 
	$l£r_°¨çﬁlög
(*
vsc
)

172 
l£r_so·c
 *
sc
 = 
vsc
;

173 
sc
->
	`ls_masköãºu±
(sc->
ls_busd©a
, sc->
ls_bu•os
);

174 
	}
}

177 
	$l£r_ídpﬁlög
(*
vsc
)

179 
l£r_so·c
 *
sc
 = 
vsc
;

180 
sc
->
	`ls_unmasköãºu±
(sc->
ls_busd©a
, sc->
ls_bu•os
);

181 
	}
}

184 
	$c⁄fig_l£r
(
l£r_so·c
 *
sc
, 
l£∫o
)

186 ()
l£∫o
;

192 
	`•ölock_öô
(&
sc
->
ls_lock
);

193 
sc
->
ls_wbusy
 = 
Ál£
;

195 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

196 
LSER_REG_RIRQ
, 
LSER_IRQ_ENABLE
);

197 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

198 
LSER_REG_WIRQ
, 
LSER_IRQ_ENABLE
);

201 
	}
}

	@os161/kern/dev/lamebus/lser.h

30 #i‚de‡
_LAMEBUS_LSER_H_


31 
	#_LAMEBUS_LSER_H_


	)

33 
	~<•ölock.h
>

35 
	sl£r_so·c
 {

37 
•ölock
 
	mls_lock
;

38 vﬁ©ûê
boﬁ
 
	mls_wbusy
;

41 *
	mls_busd©a
;

42 
uöt32_t
 
	mls_bu•os
;

43 (*
	mls_masköãºu±
)(*
	mbusd©a
, 
uöt32_t
 
	mbu•os
);

44 (*
	mls_unmasköãºu±
)(*
	mbusd©a
, 
uöt32_t
 
	mbu•os
);

47 *
	mls_devd©a
;

48 (*
	mls_°¨t
)(*
	mdevd©a
);

49 (*
	mls_öput
)(*
	mdevd©a
, 
	mch
);

53 
l£r_úq
–*
sc
);

56 
l£r_wrôe
–*
sc
, 
ch
);

57 
l£r_°¨çﬁlög
–*
sc
);

58 
l£r_wrôïﬁÀd
–*
sc
, 
ch
);

59 
l£r_ídpﬁlög
–*
sc
);

	@os161/kern/dev/lamebus/lser_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~<œmebus/l£r.h
>

34 
	~"autoc⁄f.h
"

37 
	#LOW_VERSION
 1

	)

39 
	#HIGH_VERSION
 1

	)

46 
	$do_œmebus_mask_öãºu±
(*
bus
, 
uöt32_t
 
bu•os
)

48 
œmebus_so·c
 *
lb
 = 
bus
;

49 
	`œmebus_mask_öãºu±
(
lb
, 
bu•os
);

50 
	}
}

54 
	$do_œmebus_unmask_öãºu±
(*
bus
, 
uöt32_t
 
bu•os
)

56 
œmebus_so·c
 *
lb
 = 
bus
;

57 
	`œmebus_unmask_öãºu±
(
lb
, 
bu•os
);

58 
	}
}

63 
l£r_so·c
 *

64 
	$©èch_l£r_to_œmebus
(
l£∫o
, 
œmebus_so·c
 *
sc
)

66 
l£r_so·c
 *
ls
;

67 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_SERIAL
,

68 
LOW_VERSION
, 
HIGH_VERSION
);

69 i‡(
¶Ÿ
 < 0) {

70  
NULL
;

73 
ls
 = 
	`kmÆloc
((
l£r_so·c
));

74 i‡(
ls
==
NULL
) {

75  
NULL
;

78 ()
l£∫o
;

80 
ls
->
ls_busd©a
 = 
sc
;

81 
ls
->
ls_bu•os
 = 
¶Ÿ
;

82 
ls
->
ls_masköãºu±
 = 
do_œmebus_mask_öãºu±
;

83 
ls
->
ls_unmasköãºu±
 = 
do_œmebus_unmask_öãºu±
;

85 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

86 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
ls
, 
l£r_úq
);

88  
ls
;

89 
	}
}

	@os161/kern/dev/lamebus/ltimer.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<•l.h
>

36 
	~<˛ock.h
>

37 
	~<∂©f‹m/bus.h
>

38 
	~<œmebus/…imî.h
>

39 
	~"autoc⁄f.h
"

42 
	#LT_REG_SEC
 0

	)

43 
	#LT_REG_NSEC
 4

	)

44 
	#LT_REG_ROE
 8

	)

45 
	#LT_REG_IRQ
 12

	)

46 
	#LT_REG_COUNT
 16

	)

47 
	#LT_REG_SPKR
 20

	)

50 
	#LT_GRANULARITY
 1000000

	)

52 
boﬁ
 
	ghavëimî˛ock
;

58 
	$c⁄fig_…imî
(
…imî_so·c
 *
…
, 
…imîno
)

83 ()
…imîno
;

84 
…
->
…_h¨d˛ock
 = 0;

90 i‡(!
havëimî˛ock
) {

91 
havëimî˛ock
 = 
åue
;

92 
…
->
…_timî˛ock
 = 1;

95 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_ROE
, 1);

96 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_COUNT
,

97 
LT_GRANULARITY
);

101 
	}
}

107 
	$…imî_úq
(*
v…
)

109 
…imî_so·c
 *
…
 = 
v…
;

110 
uöt32_t
 
vÆ
;

112 
vÆ
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_IRQ
);

113 i‡(
vÆ
) {

118 i‡(
…
->
…_h¨d˛ock
) {

119 
	`h¨d˛ock
();

124 i‡(
…
->
…_timî˛ock
) {

125 
	`timî˛ock
();

128 
	}
}

136 
	$…imî_bìp
(*
v…
)

138 
…imî_so·c
 *
…
 = 
v…
;

140 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_SPKR
, 440);

141 
	}
}

149 
	$…imî_gëtime
(*
v…
, 
time_t
 *
£cs
, 
uöt32_t
 *
n£cs
)

151 
…imî_so·c
 *
…
 = 
v…
;

152 
uöt32_t
 
£cs1
, 
£cs2
;

153 
•l
;

170 
•l
 = 
	`•lhigh
();

172 
£cs1
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

173 
LT_REG_SEC
);

174 *
n£cs
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

175 
LT_REG_NSEC
);

176 
£cs2
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

177 
LT_REG_SEC
);

179 
	`•lx
(
•l
);

181 i‡(*
n£cs
 < 5000000) {

182 *
£cs
 = 
£cs2
;

185 *
£cs
 = 
£cs1
;

187 
	}
}

	@os161/kern/dev/lamebus/ltimer.h

30 #i‚de‡
_LAMEBUS_LTIMER_H_


31 
	#_LAMEBUS_LTIMER_H_


	)

36 
	s…imî_so·c
 {

38 
	m…_h¨d˛ock
;

39 
	m…_timî˛ock
;

42 *
	m…_bus
;

43 
uöt32_t
 
	m…_bu•os
;

48 
…imî_úq
–*
…
);

51 
…imî_bìp
–*
devd©a
);

52 
…imî_gëtime
–*
devd©a
,

53 
time_t
 *
£cs
, 
uöt32_t
 *
n£cs
);

	@os161/kern/dev/lamebus/ltimer_att.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<œmebus/œmebus.h
>

36 
	~<œmebus/…imî.h
>

37 
	~"autoc⁄f.h
"

40 
	#LOW_VERSION
 1

	)

42 
	#HIGH_VERSION
 1

	)

44 
…imî_so·c
 *

45 
	$©èch_…imî_to_œmebus
(
…imîno
, 
œmebus_so·c
 *
sc
)

47 
…imî_so·c
 *
…
;

48 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_TIMER
,

49 
LOW_VERSION
, 
HIGH_VERSION
);

50 i‡(
¶Ÿ
 < 0) {

52  
NULL
;

55 
…
 = 
	`kmÆloc
((
…imî_so·c
));

56 i‡(
…
==
NULL
) {

58  
NULL
;

61 ()
…imîno
;

64 
…
->
…_bus
 = 
sc
;

65 
…
->
…_bu•os
 = 
¶Ÿ
;

68 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

69 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
…
, 
…imî_úq
);

71  
…
;

72 
	}
}

	@os161/kern/dev/lamebus/ltrace.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<∂©f‹m/bus.h
>

33 
	~<œmebus/…ø˚.h
>

34 
	~"autoc⁄f.h
"

37 
	#LTRACE_REG_TRON
 0

	)

38 
	#LTRACE_REG_TROFF
 4

	)

39 
	#LTRACE_REG_DEBUG
 8

	)

40 
	#LTRACE_REG_DUMP
 12

	)

42 
…ø˚_so·c
 *
	gthe_åa˚
;

45 
	$…ø˚_⁄
(
uöt32_t
 
code
)

47 i‡(
the_åa˚
 !
NULL
) {

48 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

49 
LTRACE_REG_TRON
, 
code
);

51 
	}
}

54 
	$…ø˚_off
(
uöt32_t
 
code
)

56 i‡(
the_åa˚
 !
NULL
) {

57 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

58 
LTRACE_REG_TROFF
, 
code
);

60 
	}
}

63 
	$…ø˚_debug
(
uöt32_t
 
code
)

65 i‡(
the_åa˚
 !
NULL
) {

66 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

67 
LTRACE_REG_DEBUG
, 
code
);

69 
	}
}

72 
	$…ø˚_dump
(
uöt32_t
 
code
)

74 i‡(
the_åa˚
 !
NULL
) {

75 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

76 
LTRACE_REG_DUMP
, 
code
);

78 
	}
}

81 
	$c⁄fig_…ø˚
(
…ø˚_so·c
 *
sc
, 
…ø˚no
)

83 ()
…ø˚no
;

84 
the_åa˚
 = 
sc
;

86 
	}
}

	@os161/kern/dev/lamebus/ltrace.h

30 #i‚de‡
_LAMEBUS_LTRACE_H_


31 
	#_LAMEBUS_LTRACE_H_


	)

33 
	s…ø˚_so·c
 {

35 *
	m…_busd©a
;

36 
uöt32_t
 
	m…_bu•os
;

62 
…ø˚_⁄
(
uöt32_t
 
code
);

63 
…ø˚_off
(
uöt32_t
 
code
);

64 
…ø˚_debug
(
uöt32_t
 
code
);

65 
…ø˚_dump
(
uöt32_t
 
code
);

	@os161/kern/dev/lamebus/ltrace_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~<œmebus/…ø˚.h
>

34 
	~"autoc⁄f.h
"

37 
	#LOW_VERSION
 1

	)

39 
	#HIGH_VERSION
 1

	)

41 
…ø˚_so·c
 *

42 
	$©èch_…ø˚_to_œmebus
(
…ø˚no
, 
œmebus_so·c
 *
sc
)

44 
…ø˚_so·c
 *
…
;

45 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_TRACE
,

46 
LOW_VERSION
, 
HIGH_VERSION
);

47 i‡(
¶Ÿ
 < 0) {

48  
NULL
;

51 
…
 = 
	`kmÆloc
((
…ø˚_so·c
));

52 i‡(
…
==
NULL
) {

53  
NULL
;

56 ()
…ø˚no
;

58 
…
->
…_busd©a
 = 
sc
;

59 
…
->
…_bu•os
 = 
¶Ÿ
;

61 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

63  
…
;

64 
	}
}

	@os161/kern/dev/lamebus/random_lrandom.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/øndom.h
>

38 
	~<œmebus/Ã™dom.h
>

39 
	~"autoc⁄f.h
"

41 
øndom_so·c
 *

42 
	$©èch_øndom_to_Ã™dom
(
øndomno
, 
Ã™dom_so·c
 *
ls
)

44 
øndom_so·c
 *
rs
 = 
	`kmÆloc
((random_softc));

45 i‡(
rs
==
NULL
) {

46  
NULL
;

49 ()
øndomno
;

51 
rs
->
rs_devd©a
 = 
ls
;

52 
rs
->
rs_øndom
 = 
Ã™dom_øndom
;

53 
rs
->
rs_øndmax
 = 
Ã™dom_øndmax
;

54 
rs
->
rs_ªad
 = 
Ã™dom_ªad
;

56  
rs
;

57 
	}
}

	@os161/kern/dev/lamebus/rtclock_ltimer.c

41 
	~<ty≥s.h
>

42 
	~<lib.h
>

43 
	~<gíîic/π˛ock.h
>

44 
	~<œmebus/…imî.h
>

45 
	~"autoc⁄f.h
"

47 
π˛ock_so·c
 *

48 
	$©èch_π˛ock_to_…imî
(
π˛ockno
, 
…imî_so·c
 *
ls
)

54 
π˛ock_so·c
 *
πc
 = 
	`kmÆloc
((rtclock_softc));

55 i‡(
πc
==
NULL
) {

57  
NULL
;

60 ()
π˛ockno
;

62 
πc
->
πc_devd©a
 = 
ls
;

63 
πc
->
πc_gëtime
 = 
…imî_gëtime
;

65  
πc
;

66 
	}
}

	@os161/kern/fs/sfs/sfs_fs.c

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<lib.h
>

39 
	~<¨øy.h
>

40 
	~<bôm≠.h
>

41 
	~<uio.h
>

42 
	~<vfs.h
>

43 
	~<devi˚.h
>

44 
	~<sfs.h
>

47 
	#SFS_FS_BITMAPSIZE
(
sfs
Ë
	`SFS_BITMAPSIZE
((sfs)->
sfs_su≥r
.
•_nblocks
)

	)

48 
	#SFS_FS_BITBLOCKS
(
sfs
Ë
	`SFS_BITBLOCKS
((sfs)->
sfs_su≥r
.
•_nblocks
)

	)

70 
	$sfs_m≠io
(
sfs_fs
 *
sfs
, 
uio_rw
 
rw
)

72 
uöt32_t
 
j
, 
m≠size
;

73 *
bôd©a
;

74 
ªsu…
;

77 
m≠size
 = 
	`SFS_FS_BITBLOCKS
(
sfs
);

80 
bôd©a
 = 
	`bôm≠_gëd©a
(
sfs
->
sfs_‰ìm≠
);

83 
j
=0; j<
m≠size
; j++) {

86 *
±r
 = 
bôd©a
 + 
j
*
SFS_BLOCKSIZE
;

89 i‡(
rw
 =
UIO_READ
) {

90 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
±r
, 
SFS_MAP_LOCATION
+
j
);

93 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
±r
, 
SFS_MAP_LOCATION
+
j
);

97 i‡(
ªsu…
) {

98  
ªsu…
;

102 
	}
}

111 
	$sfs_sync
(
fs
 *fs)

113 
sfs_fs
 *
sfs
;

114 
i
, 
num
;

115 
ªsu…
;

117 
	`vfs_biglock_acquúe
();

149 
sfs
 = 
fs
->
fs_d©a
;

152 
num
 = 
	`vnodóºay_num
(
sfs
->
sfs_vnodes
);

153 
i
=0; i<
num
; i++) {

154 
vnode
 *
v
 = 
	`vnodóºay_gë
(
sfs
->
sfs_vnodes
, 
i
);

155 
	`VOP_FSYNC
(
v
);

159 i‡(
sfs
->
sfs_‰ìm≠dúty
) {

160 
ªsu…
 = 
	`sfs_m≠io
(
sfs
, 
UIO_WRITE
);

161 i‡(
ªsu…
) {

162 
	`vfs_biglock_ªÀa£
();

163  
ªsu…
;

165 
sfs
->
sfs_‰ìm≠dúty
 = 
Ál£
;

169 i‡(
sfs
->
sfs_su≥rdúty
) {

170 
ªsu…
 = 
	`sfs_wblock
(
sfs
, &sfs->
sfs_su≥r
, 
SFS_SB_LOCATION
);

171 i‡(
ªsu…
) {

172 
	`vfs_biglock_ªÀa£
();

173  
ªsu…
;

175 
sfs
->
sfs_su≥rdúty
 = 
Ál£
;

178 
	`vfs_biglock_ªÀa£
();

180 
	}
}

189 
	$sfs_gëvﬁ«me
(
fs
 *fs)

191 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

192 c⁄° *
ªt
;

194 
	`vfs_biglock_acquúe
();

195 
ªt
 = 
sfs
->
sfs_su≥r
.
•_vﬁ«me
;

196 
	`vfs_biglock_ªÀa£
();

198  
ªt
;

199 
	}
}

208 
	$sfs_unmou¡
(
fs
 *fs)

210 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

212 
	`vfs_biglock_acquúe
();

215 i‡(
	`vnodóºay_num
(
sfs
->
sfs_vnodes
) > 0) {

216 
	`vfs_biglock_ªÀa£
();

217  
EBUSY
;

221 
	`KASSERT
(
sfs
->
sfs_su≥rdúty
 =
Ál£
);

222 
	`KASSERT
(
sfs
->
sfs_‰ìm≠dúty
 =
Ál£
);

225 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

226 
	`bôm≠_de°roy
(
sfs
->
sfs_‰ìm≠
);

229 ()
sfs
->
sfs_devi˚
;

232 
	`k‰ì
(
sfs
);

235 
	`vfs_biglock_ªÀa£
();

237 
	}
}

255 
	$sfs_domou¡
(*
›ti⁄s
, 
devi˚
 *
dev
, 
fs
 **
ªt
)

257 
ªsu…
;

258 
sfs_fs
 *
sfs
;

260 
	`vfs_biglock_acquúe
();

263 ()
›ti⁄s
;

268 
	`KASSERT
((
sfs_su≥r
)==
SFS_BLOCKSIZE
);

269 
	`KASSERT
((
sfs_öode
)==
SFS_BLOCKSIZE
);

270 
	`KASSERT
(
SFS_BLOCKSIZE
 % (
sfs_dú
) == 0);

280 i‡(
dev
->
d_blocksize
 !
SFS_BLOCKSIZE
) {

281 
	`vfs_biglock_ªÀa£
();

282  
ENXIO
;

286 
sfs
 = 
	`kmÆloc
((
sfs_fs
));

287 i‡(
sfs
==
NULL
) {

288 
	`vfs_biglock_ªÀa£
();

289  
ENOMEM
;

293 
sfs
->
sfs_vnodes
 = 
	`vnodóºay_¸óã
();

294 i‡(
sfs
->
sfs_vnodes
 =
NULL
) {

295 
	`k‰ì
(
sfs
);

296 
	`vfs_biglock_ªÀa£
();

297  
ENOMEM
;

301 
sfs
->
sfs_devi˚
 = 
dev
;

304 
ªsu…
 = 
	`sfs_rblock
(
sfs
, &sfs->
sfs_su≥r
, 
SFS_SB_LOCATION
);

305 i‡(
ªsu…
) {

306 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

307 
	`k‰ì
(
sfs
);

308 
	`vfs_biglock_ªÀa£
();

309  
ªsu…
;

314 i‡(
sfs
->
sfs_su≥r
.
•_magic
 !
SFS_MAGIC
) {

315 
	`k¥ötf
("sfs: Wrong magicÇumber in superblock "

317 
sfs
->
sfs_su≥r
.
•_magic
,

318 
SFS_MAGIC
);

319 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

320 
	`k‰ì
(
sfs
);

321 
	`vfs_biglock_ªÀa£
();

322  
EINVAL
;

325 i‡(
sfs
->
sfs_su≥r
.
•_nblocks
 > 
dev
->
d_blocks
) {

326 
	`k¥ötf
("sfs: warning - fs has %u blocks, device has %u\n",

327 
sfs
->
sfs_su≥r
.
•_nblocks
, 
dev
->
d_blocks
);

331 
sfs
->
sfs_su≥r
.
•_vﬁ«me
[(sfs->sfs_super.sp_volname)-1] = 0;

334 
sfs
->
sfs_‰ìm≠
 = 
	`bôm≠_¸óã
(
	`SFS_FS_BITMAPSIZE
(sfs));

335 i‡(
sfs
->
sfs_‰ìm≠
 =
NULL
) {

336 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

337 
	`k‰ì
(
sfs
);

338 
	`vfs_biglock_ªÀa£
();

339  
ENOMEM
;

341 
ªsu…
 = 
	`sfs_m≠io
(
sfs
, 
UIO_READ
);

342 i‡(
ªsu…
) {

343 
	`bôm≠_de°roy
(
sfs
->
sfs_‰ìm≠
);

344 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

345 
	`k‰ì
(
sfs
);

346 
	`vfs_biglock_ªÀa£
();

347  
ªsu…
;

351 
sfs
->
sfs_absfs
.
fs_sync
 = 
sfs_sync
;

352 
sfs
->
sfs_absfs
.
fs_gëvﬁ«me
 = 
sfs_gëvﬁ«me
;

353 
sfs
->
sfs_absfs
.
fs_gëroŸ
 = 
sfs_gëroŸ
;

354 
sfs
->
sfs_absfs
.
fs_unmou¡
 = 
sfs_unmou¡
;

355 
sfs
->
sfs_absfs
.
fs_d©a
 = sfs;

358 
sfs
->
sfs_su≥rdúty
 = 
Ál£
;

359 
sfs
->
sfs_‰ìm≠dúty
 = 
Ál£
;

362 *
ªt
 = &
sfs
->
sfs_absfs
;

364 
	`vfs_biglock_ªÀa£
();

366 
	}
}

373 
	$sfs_mou¡
(c⁄° *
devi˚
)

375  
	`vfs_mou¡
(
devi˚
, 
NULL
, 
sfs_domou¡
);

376 
	}
}

	@os161/kern/fs/sfs/sfs_io.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<uio.h
>

34 
	~<vfs.h
>

35 
	~<devi˚.h
>

36 
	~<sfs.h
>

48 
	$sfs_rwblock
(
sfs_fs
 *
sfs
, 
uio
 *uio)

50 
ªsu…
;

51 
åõs
=0;

53 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

55 
	`DEBUG
(
DB_SFS
, "sfs: %s %llu\n",

56 
uio
->
uio_rw
 =
UIO_READ
 ? "read" : "write",

57 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
);

59 
ªåy
:

60 
ªsu…
 = 
sfs
->
sfs_devi˚
->
	`d_io
(sfs->sfs_devi˚, 
uio
);

61 i‡(
ªsu…
 =
EINVAL
) {

67 
	`∑nic
("sfs: d_ioÑeturned EINVAL\n");

69 i‡(
ªsu…
 =
EIO
) {

70 i‡(
åõs
 == 0) {

71 
åõs
++;

72 
	`k¥ötf
("sfs: block %llu I/OÉrror,Ñetrying\n",

73 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
);

74 
ªåy
;

76 i‡(
åõs
 < 10) {

77 
åõs
++;

78 
ªåy
;

81 
	`k¥ötf
("sfs: block %llu I/OÉrror, giving upáfter "

83 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
, 
åõs
);

86  
ªsu…
;

87 
	}
}

90 
	$sfs_rblock
(
sfs_fs
 *
sfs
, *
d©a
, 
uöt32_t
 
block
)

92 
iovec
 
iov
;

93 
uio
 
ku
;

95 
	`SFSUIO
(&
iov
, &
ku
, 
d©a
, 
block
, 
UIO_READ
);

96  
	`sfs_rwblock
(
sfs
, &
ku
);

97 
	}
}

100 
	$sfs_wblock
(
sfs_fs
 *
sfs
, *
d©a
, 
uöt32_t
 
block
)

102 
iovec
 
iov
;

103 
uio
 
ku
;

105 
	`SFSUIO
(&
iov
, &
ku
, 
d©a
, 
block
, 
UIO_WRITE
);

106  
	`sfs_rwblock
(
sfs
, &
ku
);

107 
	}
}

	@os161/kern/fs/sfs/sfs_vnode.c

35 
	~<ty≥s.h
>

36 
	~<kîn/î∫o.h
>

37 
	~<kîn/f˙é.h
>

38 
	~<°©.h
>

39 
	~<lib.h
>

40 
	~<¨øy.h
>

41 
	~<bôm≠.h
>

42 
	~<uio.h
>

43 
	~<synch.h
>

44 
	~<vfs.h
>

45 
	~<devi˚.h
>

46 
	~<sfs.h
>

49 
sfs_lﬂdvnode
(
sfs_fs
 *
sfs
, 
uöt32_t
 
öo
, 
ty≥
,

50 
sfs_vnode
 **
ªt
);

59 
	$sfs_˛órblock
(
sfs_fs
 *
sfs
, 
uöt32_t
 
block
)

62 
zîos
[
SFS_BLOCKSIZE
];

63  
	`sfs_wblock
(
sfs
, 
zîos
, 
block
);

64 
	}
}

69 
	$sfs_sync_öode
(
sfs_vnode
 *
sv
)

71 i‡(
sv
->
sv_dúty
) {

72 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

73 
ªsu…
 = 
	`sfs_wblock
(
sfs
, &
sv
->
sv_i
, sv->
sv_öo
);

74 i‡(
ªsu…
) {

75  
ªsu…
;

77 
sv
->
sv_dúty
 = 
Ál£
;

80 
	}
}

91 
	$sfs_bÆloc
(
sfs_fs
 *
sfs
, 
uöt32_t
 *
diskblock
)

93 
ªsu…
;

95 
ªsu…
 = 
	`bôm≠_Æloc
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

96 i‡(
ªsu…
) {

97  
ªsu…
;

99 
sfs
->
sfs_‰ìm≠dúty
 = 
åue
;

101 i‡(*
diskblock
 >
sfs
->
sfs_su≥r
.
•_nblocks
) {

102 
	`∑nic
("sfs: bÆloc: invÆid block %u\n", *
diskblock
);

106  
	`sfs_˛órblock
(
sfs
, *
diskblock
);

107 
	}
}

114 
	$sfs_b‰ì
(
sfs_fs
 *
sfs
, 
uöt32_t
 
diskblock
)

116 
	`bôm≠_unm¨k
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

117 
sfs
->
sfs_‰ìm≠dúty
 = 
åue
;

118 
	}
}

125 
	$sfs_bu£d
(
sfs_fs
 *
sfs
, 
uöt32_t
 
diskblock
)

127 i‡(
diskblock
 >
sfs
->
sfs_su≥r
.
•_nblocks
) {

128 
	`∑nic
("sfs: sfs_bused called on out ofÑange block %u\n",

129 
diskblock
);

131  
	`bôm≠_is£t
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

132 
	}
}

146 
	$sfs_bm≠
(
sfs_vnode
 *
sv
, 
uöt32_t
 
fûeblock
, 
dﬂŒoc
,

147 
uöt32_t
 *
diskblock
)

156 
uöt32_t
 
idbuf
[
SFS_DBPERIDB
];

158 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

159 
uöt32_t
 
block
;

160 
uöt32_t
 
idblock
;

161 
uöt32_t
 
idnum
, 
idoff
;

162 
ªsu…
;

164 
	`KASSERT
((
idbuf
)==
SFS_BLOCKSIZE
);

169 i‡(
fûeblock
 < 
SFS_NDIRECT
) {

173 
block
 = 
sv
->
sv_i
.
sfi_dúe˘
[
fûeblock
];

178 i‡(
block
==0 && 
dﬂŒoc
) {

179 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
block
);

180 i‡(
ªsu…
) {

181  
ªsu…
;

185 
sv
->
sv_i
.
sfi_dúe˘
[
fûeblock
] = 
block
;

186 
sv
->
sv_dúty
 = 
åue
;

192 i‡(
block
 !0 && !
	`sfs_bu£d
(
sfs
, block)) {

193 
	`∑nic
("sfs: Data block %u (block %u of file %u) "

194 "m¨ked fªe\n", 
block
, 
fûeblock
, 
sv
->
sv_öo
);

196 *
diskblock
 = 
block
;

206 
fûeblock
 -
SFS_NDIRECT
;

209 
idnum
 = 
fûeblock
 / 
SFS_DBPERIDB
;

210 
idoff
 = 
fûeblock
 % 
SFS_DBPERIDB
;

216 i‡(
idnum
 > 0) {

217  
EFBIG
;

221 
idblock
 = 
sv
->
sv_i
.
sfi_ödúe˘
;

223 i‡(
idblock
==0 && !
dﬂŒoc
) {

229 *
diskblock
 = 0;

232 i‡(
idblock
==0) {

239 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
idblock
);

240 i‡(
ªsu…
) {

241  
ªsu…
;

245 
sv
->
sv_i
.
sfi_ödúe˘
 = 
idblock
;

248 
sv
->
sv_dúty
 = 
åue
;

251 
	`bzîo
(
idbuf
, (idbuf));

257 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
idbuf
, 
idblock
);

258 i‡(
ªsu…
) {

259  
ªsu…
;

264 
block
 = 
idbuf
[
idoff
];

267 i‡(
block
==0 && 
dﬂŒoc
) {

268 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
block
);

269 i‡(
ªsu…
) {

270  
ªsu…
;

274 
idbuf
[
idoff
] = 
block
;

277 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
idbuf
, 
idblock
);

278 i‡(
ªsu…
) {

279  
ªsu…
;

284 i‡(
block
 !0 && !
	`sfs_bu£d
(
sfs
, block)) {

285 
	`∑nic
("sfs: Data block %u (block %u of file %u) marked free\n",

286 
block
, 
fûeblock
, 
sv
->
sv_öo
);

288 *
diskblock
 = 
block
;

290 
	}
}

308 
	$sfs_∑πülio
(
sfs_vnode
 *
sv
, 
uio
 *uio,

309 
uöt32_t
 
skù°¨t
, uöt32_à
Àn
)

318 
iobuf
[
SFS_BLOCKSIZE
];

320 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

321 
uöt32_t
 
diskblock
;

322 
uöt32_t
 
fûeblock
;

323 
ªsu…
;

326 
dﬂŒoc
 = (
uio
->
uio_rw
==
UIO_WRITE
);

328 
	`KASSERT
(
skù°¨t
 + 
Àn
 <
SFS_BLOCKSIZE
);

331 
fûeblock
 = 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
;

334 
ªsu…
 = 
	`sfs_bm≠
(
sv
, 
fûeblock
, 
dﬂŒoc
, &
diskblock
);

335 i‡(
ªsu…
) {

336  
ªsu…
;

339 i‡(
diskblock
 == 0) {

344 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

345 
	`bzîo
(
iobuf
, (iobuf));

351 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
iobuf
, 
diskblock
);

352 i‡(
ªsu…
) {

353  
ªsu…
;

360 
ªsu…
 = 
	`uiomove
(
iobuf
+
skù°¨t
, 
Àn
, 
uio
);

361 i‡(
ªsu…
) {

362  
ªsu…
;

368 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

369 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
iobuf
, 
diskblock
);

370 i‡(
ªsu…
) {

371  
ªsu…
;

376 
	}
}

383 
	$sfs_blockio
(
sfs_vnode
 *
sv
, 
uio
 *uio)

385 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

386 
uöt32_t
 
diskblock
;

387 
uöt32_t
 
fûeblock
;

388 
ªsu…
;

389 
dﬂŒoc
 = (
uio
->
uio_rw
==
UIO_WRITE
);

390 
off_t
 
ßveoff
;

391 
off_t
 
diskoff
;

392 
off_t
 
ßvîes
;

393 
off_t
 
diskªs
;

396 
fûeblock
 = 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
;

399 
ªsu…
 = 
	`sfs_bm≠
(
sv
, 
fûeblock
, 
dﬂŒoc
, &
diskblock
);

400 i‡(
ªsu…
) {

401  
ªsu…
;

404 i‡(
diskblock
 == 0) {

411 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

412  
	`uiomovezîos
(
SFS_BLOCKSIZE
, 
uio
);

419 
ßveoff
 = 
uio
->
uio_off£t
;

420 
diskoff
 = 
diskblock
 * 
SFS_BLOCKSIZE
;

421 
uio
->
uio_off£t
 = 
diskoff
;

426 
	`KASSERT
(
uio
->
uio_ªsid
 >
SFS_BLOCKSIZE
);

427 
ßvîes
 = 
uio
->
uio_ªsid
;

428 
diskªs
 = 
SFS_BLOCKSIZE
;

429 
uio
->
uio_ªsid
 = 
diskªs
;

431 
ªsu…
 = 
	`sfs_rwblock
(
sfs
, 
uio
);

437 
uio
->
uio_off£t
 = (uio->uio_off£à- 
diskoff
Ë+ 
ßveoff
;

438 
uio
->
uio_ªsid
 = (uio->uio_ªsid - 
diskªs
Ë+ 
ßvîes
;

440  
ªsu…
;

441 
	}
}

448 
	$sfs_io
(
sfs_vnode
 *
sv
, 
uio
 *uio)

450 
uöt32_t
 
blkoff
;

451 
uöt32_t
 
nblocks
, 
i
;

452 
ªsu…
 = 0;

453 
uöt32_t
 
exå¨esid
 = 0;

460 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

461 
off_t
 
size
 = 
sv
->
sv_i
.
sfi_size
;

462 
off_t
 
ídpos
 = 
uio
->
uio_off£t
 + uio->
uio_ªsid
;

464 i‡(
uio
->
uio_off£t
 >
size
) {

469 i‡(
ídpos
 > 
size
) {

470 
exå¨esid
 = 
ídpos
 - 
size
;

471 
	`KASSERT
(
uio
->
uio_ªsid
 > 
exå¨esid
);

472 
uio
->
uio_ªsid
 -
exå¨esid
;

479 
blkoff
 = 
uio
->
uio_off£t
 % 
SFS_BLOCKSIZE
;

480 i‡(
blkoff
 != 0) {

482 
uöt32_t
 
skù
 = 
blkoff
;

485 
uöt32_t
 
Àn
 = 
SFS_BLOCKSIZE
 - 
blkoff
;

488 i‡(
Àn
 > 
uio
->
uio_ªsid
) {

489 
Àn
 = 
uio
->
uio_ªsid
;

493 
ªsu…
 = 
	`sfs_∑πülio
(
sv
, 
uio
, 
skù
, 
Àn
);

494 i‡(
ªsu…
) {

495 
out
;

500 i‡(
uio
->
uio_ªsid
==0) {

501 
out
;

507 
	`KASSERT
(
uio
->
uio_off£t
 % 
SFS_BLOCKSIZE
 == 0);

508 
nblocks
 = 
uio
->
uio_ªsid
 / 
SFS_BLOCKSIZE
;

509 
i
=0; i<
nblocks
; i++) {

510 
ªsu…
 = 
	`sfs_blockio
(
sv
, 
uio
);

511 i‡(
ªsu…
) {

512 
out
;

519 
	`KASSERT
(
uio
->
uio_ªsid
 < 
SFS_BLOCKSIZE
);

521 i‡(
uio
->
uio_ªsid
 > 0) {

522 
ªsu…
 = 
	`sfs_∑πülio
(
sv
, 
uio
, 0, uio->
uio_ªsid
);

523 i‡(
ªsu…
) {

524 
out
;

528 
out
:

531 i‡(
uio
->
uio_rw
 =
UIO_WRITE
 &&

532 
uio
->
uio_off£t
 > (
off_t
)
sv
->
sv_i
.
sfi_size
) {

533 
sv
->
sv_i
.
sfi_size
 = 
uio
->
uio_off£t
;

534 
sv
->
sv_dúty
 = 
åue
;

538 
uio
->
uio_ªsid
 +
exå¨esid
;

541  
ªsu…
;

542 
	}
}

554 
	$sfs_ªaddú
(
sfs_vnode
 *
sv
, 
sfs_dú
 *
sd
, 
¶Ÿ
)

556 
iovec
 
iov
;

557 
uio
 
ku
;

558 
off_t
 
a˘uÆpos
;

559 
ªsu…
;

562 
a˘uÆpos
 = 
¶Ÿ
 * (
sfs_dú
);

565 
	`uio_köô
(&
iov
, &
ku
, 
sd
, (
sfs_dú
), 
a˘uÆpos
, 
UIO_READ
);

568 
ªsu…
 = 
	`sfs_io
(
sv
, &
ku
);

569 i‡(
ªsu…
) {

570  
ªsu…
;

574 i‡(
ku
.
uio_ªsid
 > 0) {

575 
	`∑nic
("sfs:Ñóddú: Sh‹àíåy (öodê%u)\n", 
sv
->
sv_öo
);

580 
	}
}

588 
	$sfs_wrôedú
(
sfs_vnode
 *
sv
, 
sfs_dú
 *
sd
, 
¶Ÿ
)

590 
iovec
 
iov
;

591 
uio
 
ku
;

592 
off_t
 
a˘uÆpos
;

593 
ªsu…
;

596 
	`KASSERT
(
¶Ÿ
>=0);

597 
a˘uÆpos
 = 
¶Ÿ
 * (
sfs_dú
);

600 
	`uio_köô
(&
iov
, &
ku
, 
sd
, (
sfs_dú
), 
a˘uÆpos
, 
UIO_WRITE
);

603 
ªsu…
 = 
	`sfs_io
(
sv
, &
ku
);

604 i‡(
ªsu…
) {

605  
ªsu…
;

609 i‡(
ku
.
uio_ªsid
 > 0) {

610 
	`∑nic
("sfs: wrôedú: Sh‹àwrôê(öÿ%u)\n", 
sv
->
sv_öo
);

615 
	}
}

624 
	$sfs_dú_√¡rõs
(
sfs_vnode
 *
sv
)

626 
off_t
 
size
;

628 
	`KASSERT
(
sv
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_DIR
);

630 
size
 = 
sv
->
sv_i
.
sfi_size
;

631 i‡(
size
 % (
sfs_dú
) != 0) {

632 
	`∑nic
("sfs: directory %u: Invalid size %llu\n",

633 
sv
->
sv_öo
, 
size
);

636  
size
 / (
sfs_dú
);

637 
	}
}

647 
	$sfs_dú_föd«me
(
sfs_vnode
 *
sv
, c⁄° *
«me
,

648 
uöt32_t
 *
öo
, *
¶Ÿ
, *
em±y¶Ÿ
)

650 
sfs_dú
 
tsd
;

651 
found
 = 0;

652 
√¡rõs
 = 
	`sfs_dú_√¡rõs
(
sv
);

653 
i
, 
ªsu…
;

656 
i
=0; i<
√¡rõs
; i++) {

659 
ªsu…
 = 
	`sfs_ªaddú
(
sv
, &
tsd
, 
i
);

660 i‡(
ªsu…
) {

661  
ªsu…
;

663 i‡(
tsd
.
sfd_öo
 =
SFS_NOINO
) {

665 i‡(
em±y¶Ÿ
 !
NULL
) {

666 *
em±y¶Ÿ
 = 
i
;

671 
tsd
.
sfd_«me
[(tsd.sfd_name)-1] = 0;

672 i‡(!
	`°rcmp
(
tsd
.
sfd_«me
, 
«me
)) {

675 
	`KASSERT
(
found
==0);

677 
found
 = 1;

678 i‡(
¶Ÿ
 !
NULL
) {

679 *
¶Ÿ
 = 
i
;

681 i‡(
öo
 !
NULL
) {

682 *
öo
 = 
tsd
.
sfd_öo
;

688  
found
 ? 0 : 
ENOENT
;

689 
	}
}

697 
	$sfs_dú_lök
(
sfs_vnode
 *
sv
, c⁄° *
«me
, 
uöt32_t
 
öo
, *
¶Ÿ
)

699 
em±y¶Ÿ
 = -1;

700 
ªsu…
;

701 
sfs_dú
 
sd
;

704 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, 
NULL
, NULL, &
em±y¶Ÿ
);

705 i‡(
ªsu…
!=0 &&Ñesu…!=
ENOENT
) {

706  
ªsu…
;

708 i‡(
ªsu…
==0) {

709  
EEXIST
;

712 i‡(
	`°æí
(
«me
)+1 > (
sd
.
sfd_«me
)) {

713  
ENAMETOOLONG
;

717 i‡(
em±y¶Ÿ
 < 0) {

718 
em±y¶Ÿ
 = 
	`sfs_dú_√¡rõs
(
sv
);

722 
	`bzîo
(&
sd
, (sd));

723 
sd
.
sfd_öo
 = 
öo
;

724 
	`°r˝y
(
sd
.
sfd_«me
, 
«me
);

727 i‡(
¶Ÿ
) {

728 *
¶Ÿ
 = 
em±y¶Ÿ
;

732  
	`sfs_wrôedú
(
sv
, &
sd
, 
em±y¶Ÿ
);

734 
	}
}

741 
	$sfs_dú_u∆ök
(
sfs_vnode
 *
sv
, 
¶Ÿ
)

743 
sfs_dú
 
sd
;

746 
	`bzîo
(&
sd
, (sd));

747 
sd
.
sfd_öo
 = 
SFS_NOINO
;

750  
	`sfs_wrôedú
(
sv
, &
sd
, 
¶Ÿ
);

751 
	}
}

759 
	$sfs_look⁄˚
(
sfs_vnode
 *
sv
, c⁄° *
«me
,

760 
sfs_vnode
 **
ªt
,

761 *
¶Ÿ
)

763 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

764 
uöt32_t
 
öo
;

765 
ªsu…
;

767 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, &
öo
, 
¶Ÿ
, 
NULL
);

768 i‡(
ªsu…
) {

769  
ªsu…
;

772 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
SFS_TYPE_INVAL
, 
ªt
);

773 i‡(
ªsu…
) {

774  
ªsu…
;

777 i‡((*
ªt
)->
sv_i
.
sfi_lökcou¡
 == 0) {

778 
	`∑nic
("sfs: Link count of file %u found in dir %u is 0\n",

779 (*
ªt
)->
sv_öo
, 
sv
->sv_ino);

783 
	}
}

794 
	$sfs_makeobj
(
sfs_fs
 *
sfs
, 
ty≥
, 
sfs_vnode
 **
ªt
)

796 
uöt32_t
 
öo
;

797 
ªsu…
;

804 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
öo
);

805 i‡(
ªsu…
) {

806  
ªsu…
;

813  
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
ty≥
, 
ªt
);

814 
	}
}

825 
	$sfs_›í
(
vnode
 *
v
, 
›íÊags
)

835 i‡(
›íÊags
 & 
O_APPEND
) {

836  
EUNIMP
;

839 ()
v
;

842 
	}
}

850 
	$sfs_›ídú
(
vnode
 *
v
, 
›íÊags
)

852 
›íÊags
 & 
O_ACCMODE
) {

853 
O_RDONLY
:

855 
O_WRONLY
:

856 
O_RDWR
:

858  
EISDIR
;

860 i‡(
›íÊags
 & 
O_APPEND
) {

861  
EISDIR
;

864 ()
v
;

866 
	}
}

876 
	$sfs_˛o£
(
vnode
 *
v
)

879  
	`VOP_FSYNC
(
v
);

880 
	}
}

889 
	$sfs_ª˛aim
(
vnode
 *
v
)

891 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

892 
sfs_fs
 *
sfs
 = 
v
->
vn_fs
->
fs_d©a
;

893 
ix
, 
i
, 
num
;

894 
ªsu…
;

896 
	`vfs_biglock_acquúe
();

903 i‡(
v
->
vn_ªfcou¡
 != 1) {

906 
	`KASSERT
(
v
->
vn_ªfcou¡
>1);

907 
v
->
vn_ªfcou¡
--;

909 
	`vfs_biglock_ªÀa£
();

910  
EBUSY
;

914 i‡(
sv
->
sv_i
.
sfi_lökcou¡
==0) {

915 
ªsu…
 = 
	`VOP_TRUNCATE
(&
sv
->
sv_v
, 0);

916 i‡(
ªsu…
) {

917 
	`vfs_biglock_ªÀa£
();

918  
ªsu…
;

923 
ªsu…
 = 
	`sfs_sync_öode
(
sv
);

924 i‡(
ªsu…
) {

925 
	`vfs_biglock_ªÀa£
();

926  
ªsu…
;

930 i‡(
sv
->
sv_i
.
sfi_lökcou¡
==0) {

931 
	`sfs_b‰ì
(
sfs
, 
sv
->
sv_öo
);

935 
num
 = 
	`vnodóºay_num
(
sfs
->
sfs_vnodes
);

936 
ix
 = 
num
;

937 
i
=0; i<
num
; i++) {

938 
vnode
 *
v2
 = 
	`vnodóºay_gë
(
sfs
->
sfs_vnodes
, 
i
);

939 
sfs_vnode
 *
sv2
 = 
v2
->
vn_d©a
;

940 i‡(
sv2
 =
sv
) {

941 
ix
 = 
i
;

945 i‡(
ix
 =
num
) {

946 
	`∑nic
("sfs:Ñeclaim vnode %uÇot in vnodeÖool\n",

947 
sv
->
sv_öo
);

949 
	`vnodóºay_ªmove
(
sfs
->
sfs_vnodes
, 
ix
);

951 
	`VOP_CLEANUP
(&
sv
->
sv_v
);

953 
	`vfs_biglock_ªÀa£
();

956 
	`k‰ì
(
sv
);

960 
	}
}

967 
	$sfs_ªad
(
vnode
 *
v
, 
uio
 *uio)

969 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

970 
ªsu…
;

972 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

974 
	`vfs_biglock_acquúe
();

975 
ªsu…
 = 
	`sfs_io
(
sv
, 
uio
);

976 
	`vfs_biglock_ªÀa£
();

978  
ªsu…
;

979 
	}
}

986 
	$sfs_wrôe
(
vnode
 *
v
, 
uio
 *uio)

988 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

989 
ªsu…
;

991 
	`KASSERT
(
uio
->
uio_rw
==
UIO_WRITE
);

993 
	`vfs_biglock_acquúe
();

994 
ªsu…
 = 
	`sfs_io
(
sv
, 
uio
);

995 
	`vfs_biglock_ªÀa£
();

997  
ªsu…
;

998 
	}
}

1005 
	$sfs_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

1011 ()
v
;

1012 ()
›
;

1013 ()
d©a
;

1015  
EINVAL
;

1016 
	}
}

1023 
	$sfs_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

1025 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1026 
ªsu…
;

1029 
	`bzîo
(
°©buf
, (
°©
));

1031 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

1032 i‡(
ªsu…
) {

1033  
ªsu…
;

1036 
°©buf
->
°_size
 = 
sv
->
sv_i
.
sfi_size
;

1039 
°©buf
->
°_∆ök
 = 0;

1040 
°©buf
->
°_blocks
 = 0;

1045 
	}
}

1052 
	$sfs_gëty≥
(
vnode
 *
v
, 
uöt32_t
 *
ªt
)

1054 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1056 
	`vfs_biglock_acquúe
();

1058 
sv
->
sv_i
.
sfi_ty≥
) {

1059 
SFS_TYPE_FILE
:

1060 *
ªt
 = 
S_IFREG
;

1061 
	`vfs_biglock_ªÀa£
();

1063 
SFS_TYPE_DIR
:

1064 *
ªt
 = 
S_IFDIR
;

1065 
	`vfs_biglock_ªÀa£
();

1068 
	`∑nic
("sfs: gettype: Invalid inodeÅype (inode %u,Åype %u)\n",

1069 
sv
->
sv_öo
, sv->
sv_i
.
sfi_ty≥
);

1070  
EINVAL
;

1071 
	}
}

1082 
	$sfs_åy£ek
(
vnode
 *
v
, 
off_t
 
pos
)

1084 i‡(
pos
<0) {

1085  
EINVAL
;

1089 ()
v
;

1092 
	}
}

1100 
	$sfs_fsync
(
vnode
 *
v
)

1102 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1103 
ªsu…
;

1105 
	`vfs_biglock_acquúe
();

1106 
ªsu…
 = 
	`sfs_sync_öode
(
sv
);

1107 
	`vfs_biglock_ªÀa£
();

1109  
ªsu…
;

1110 
	}
}

1117 
	$sfs_mm≠
(
vnode
 *
v
 )

1119 ()
v
;

1120  
EUNIMP
;

1121 
	}
}

1128 
	$sfs_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

1137 
uöt32_t
 
idbuf
[
SFS_DBPERIDB
];

1139 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1140 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

1143 
uöt32_t
 
blockÀn
 = 
	`DIVROUNDUP
(
Àn
, 
SFS_BLOCKSIZE
);

1145 
uöt32_t
 
i
, 
j
, 
block
;

1146 
uöt32_t
 
idblock
, 
ba£block
, 
highblock
;

1147 
ªsu…
;

1148 
ha¢⁄zîo
, 
iddúty
;

1150 
	`KASSERT
((
idbuf
)==
SFS_BLOCKSIZE
);

1152 
	`vfs_biglock_acquúe
();

1158 
i
=0; i<
SFS_NDIRECT
; i++) {

1159 
block
 = 
sv
->
sv_i
.
sfi_dúe˘
[
i
];

1160 i‡(
i
 >
blockÀn
 && 
block
 != 0) {

1161 
	`sfs_b‰ì
(
sfs
, 
block
);

1162 
sv
->
sv_i
.
sfi_dúe˘
[
i
] = 0;

1163 
sv
->
sv_dúty
 = 
åue
;

1168 
idblock
 = 
sv
->
sv_i
.
sfi_ödúe˘
;

1171 
ba£block
 = 
SFS_NDIRECT
;

1174 
highblock
 = 
ba£block
 + 
SFS_DBPERIDB
 - 1;

1176 i‡(
blockÀn
 < 
highblock
 && 
idblock
 != 0) {

1180 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
idbuf
, 
idblock
);

1181 i‡(
ªsu…
) {

1182 
	`vfs_biglock_ªÀa£
();

1183  
ªsu…
;

1186 
ha¢⁄zîo
 = 0;

1187 
iddúty
 = 0;

1188 
j
=0; j<
SFS_DBPERIDB
; j++) {

1190 i‡(
blockÀn
 < 
ba£block
+
j
 && 
idbuf
[j] != 0) {

1191 
	`sfs_b‰ì
(
sfs
, 
idbuf
[
j
]);

1192 
idbuf
[
j
] = 0;

1193 
iddúty
 = 1;

1196 i‡(
idbuf
[
j
]!=0) {

1197 
ha¢⁄zîo
=1;

1201 i‡(!
ha¢⁄zîo
) {

1203 
	`sfs_b‰ì
(
sfs
, 
idblock
);

1204 
sv
->
sv_i
.
sfi_ödúe˘
 = 0;

1205 
sv
->
sv_dúty
 = 
åue
;

1207 i‡(
iddúty
) {

1209 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
idbuf
, 
idblock
);

1210 i‡(
ªsu…
) {

1211 
	`vfs_biglock_ªÀa£
();

1212  
ªsu…
;

1218 
sv
->
sv_i
.
sfi_size
 = 
Àn
;

1221 
sv
->
sv_dúty
 = 
åue
;

1223 
	`vfs_biglock_ªÀa£
();

1225 
	}
}

1235 
	$sfs_«mefûe
(
vnode
 *
vv
, 
uio
 *uio)

1237 
sfs_vnode
 *
sv
 = 
vv
->
vn_d©a
;

1238 
	`KASSERT
(
sv
->
sv_öo
 =
SFS_ROOT_LOCATION
);

1242 ()
uio
;

1245 
	}
}

1253 
	$sfs_¸ót
(
vnode
 *
v
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

1254 
vnode
 **
ªt
)

1256 
sfs_fs
 *
sfs
 = 
v
->
vn_fs
->
fs_d©a
;

1257 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1258 
sfs_vnode
 *
√wguy
;

1259 
uöt32_t
 
öo
;

1260 
ªsu…
;

1262 
	`vfs_biglock_acquúe
();

1265 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, &
öo
, 
NULL
, NULL);

1266 i‡(
ªsu…
!=0 &&Ñesu…!=
ENOENT
) {

1267 
	`vfs_biglock_ªÀa£
();

1268  
ªsu…
;

1272 i‡(
ªsu…
==0 && 
ex˛
) {

1273 
	`vfs_biglock_ªÀa£
();

1274  
EEXIST
;

1277 i‡(
ªsu…
==0) {

1279 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
SFS_TYPE_INVAL
, &
√wguy
);

1280 i‡(
ªsu…
) {

1281 
	`vfs_biglock_ªÀa£
();

1282  
ªsu…
;

1284 *
ªt
 = &
√wguy
->
sv_v
;

1285 
	`vfs_biglock_ªÀa£
();

1290 
ªsu…
 = 
	`sfs_makeobj
(
sfs
, 
SFS_TYPE_FILE
, &
√wguy
);

1291 i‡(
ªsu…
) {

1292 
	`vfs_biglock_ªÀa£
();

1293  
ªsu…
;

1297 ()
mode
;

1300 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
«me
, 
√wguy
->
sv_öo
, 
NULL
);

1301 i‡(
ªsu…
) {

1302 
	`VOP_DECREF
(&
√wguy
->
sv_v
);

1303 
	`vfs_biglock_ªÀa£
();

1304  
ªsu…
;

1308 
√wguy
->
sv_i
.
sfi_lökcou¡
++;

1311 
√wguy
->
sv_dúty
 = 
åue
;

1313 *
ªt
 = &
√wguy
->
sv_v
;

1315 
	`vfs_biglock_ªÀa£
();

1317 
	}
}

1326 
	$sfs_lök
(
vnode
 *
dú
, c⁄° *
«me
, vnodê*
fûe
)

1328 
sfs_vnode
 *
sv
 = 
dú
->
vn_d©a
;

1329 
sfs_vnode
 *
f
 = 
fûe
->
vn_d©a
;

1330 
ªsu…
;

1332 
	`KASSERT
(
fûe
->
vn_fs
 =
dú
->vn_fs);

1334 
	`vfs_biglock_acquúe
();

1337 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
«me
, 
f
->
sv_öo
, 
NULL
);

1338 i‡(
ªsu…
) {

1339 
	`vfs_biglock_ªÀa£
();

1340  
ªsu…
;

1344 
f
->
sv_i
.
sfi_lökcou¡
++;

1345 
f
->
sv_dúty
 = 
åue
;

1347 
	`vfs_biglock_ªÀa£
();

1349 
	}
}

1356 
	$sfs_ªmove
(
vnode
 *
dú
, c⁄° *
«me
)

1358 
sfs_vnode
 *
sv
 = 
dú
->
vn_d©a
;

1359 
sfs_vnode
 *
vi˘im
;

1360 
¶Ÿ
;

1361 
ªsu…
;

1363 
	`vfs_biglock_acquúe
();

1366 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
«me
, &
vi˘im
, &
¶Ÿ
);

1367 i‡(
ªsu…
) {

1368 
	`vfs_biglock_ªÀa£
();

1369  
ªsu…
;

1373 
ªsu…
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ
);

1374 i‡(
ªsu…
==0) {

1376 
	`KASSERT
(
vi˘im
->
sv_i
.
sfi_lökcou¡
 > 0);

1377 
vi˘im
->
sv_i
.
sfi_lökcou¡
--;

1378 
vi˘im
->
sv_dúty
 = 
åue
;

1382 
	`VOP_DECREF
(&
vi˘im
->
sv_v
);

1384 
	`vfs_biglock_ªÀa£
();

1385  
ªsu…
;

1386 
	}
}

1396 
	$sfs_ª«me
(
vnode
 *
d1
, c⁄° *
n1
,

1397 
vnode
 *
d2
, c⁄° *
n2
)

1399 
sfs_vnode
 *
sv
 = 
d1
->
vn_d©a
;

1400 
sfs_vnode
 *
g1
;

1401 
¶Ÿ1
, 
¶Ÿ2
;

1402 
ªsu…
, 
ªsu…2
;

1404 
	`vfs_biglock_acquúe
();

1406 
	`KASSERT
(
d1
==
d2
);

1407 
	`KASSERT
(
sv
->
sv_öo
 =
SFS_ROOT_LOCATION
);

1410 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
n1
, &
g1
, &
¶Ÿ1
);

1411 i‡(
ªsu…
) {

1412 
	`vfs_biglock_ªÀa£
();

1413  
ªsu…
;

1417 
	`KASSERT
(
g1
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_FILE
);

1427 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
n2
, 
g1
->
sv_öo
, &
¶Ÿ2
);

1428 i‡(
ªsu…
) {

1429 
puke
;

1433 
g1
->
sv_i
.
sfi_lökcou¡
++;

1434 
g1
->
sv_dúty
 = 
åue
;

1437 
ªsu…
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ1
);

1438 i‡(
ªsu…
) {

1439 
puke_h¨dî
;

1446 
	`KASSERT
(
g1
->
sv_i
.
sfi_lökcou¡
>0);

1447 
g1
->
sv_i
.
sfi_lökcou¡
--;

1448 
g1
->
sv_dúty
 = 
åue
;

1451 
	`VOP_DECREF
(&
g1
->
sv_v
);

1453 
	`vfs_biglock_ªÀa£
();

1456 
puke_h¨dî
:

1460 
ªsu…2
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ2
);

1461 i‡(
ªsu…2
) {

1462 
	`k¥ötf
("sfs:Ñíame: %s\n", 
	`°ªº‹
(
ªsu…
));

1463 
	`k¥ötf
("sfs:Ñename: while cleaning up: %s\n",

1464 
	`°ªº‹
(
ªsu…2
));

1465 
	`∑nic
("sfs:Ñename: CannotÑecover\n");

1467 
g1
->
sv_i
.
sfi_lökcou¡
--;

1468 
puke
:

1470 
	`VOP_DECREF
(&
g1
->
sv_v
);

1471 
	`vfs_biglock_ªÀa£
();

1472  
ªsu…
;

1473 
	}
}

1484 
	$sfs_look∑ª¡
(
vnode
 *
v
, *
∑th
, vnodê**
ªt
,

1485 *
buf
, 
size_t
 
buÊí
)

1487 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1489 
	`vfs_biglock_acquúe
();

1491 i‡(
sv
->
sv_i
.
sfi_ty≥
 !
SFS_TYPE_DIR
) {

1492 
	`vfs_biglock_ªÀa£
();

1493  
ENOTDIR
;

1496 i‡(
	`°æí
(
∑th
)+1 > 
buÊí
) {

1497 
	`vfs_biglock_ªÀa£
();

1498  
ENAMETOOLONG
;

1500 
	`°r˝y
(
buf
, 
∑th
);

1502 
	`VOP_INCREF
(&
sv
->
sv_v
);

1503 *
ªt
 = &
sv
->
sv_v
;

1505 
	`vfs_biglock_ªÀa£
();

1507 
	}
}

1517 
	$sfs_lookup
(
vnode
 *
v
, *
∑th
, vnodê**
ªt
)

1519 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1520 
sfs_vnode
 *
föÆ
;

1521 
ªsu…
;

1523 
	`vfs_biglock_acquúe
();

1525 i‡(
sv
->
sv_i
.
sfi_ty≥
 !
SFS_TYPE_DIR
) {

1526 
	`vfs_biglock_ªÀa£
();

1527  
ENOTDIR
;

1530 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
∑th
, &
föÆ
, 
NULL
);

1531 i‡(
ªsu…
) {

1532 
	`vfs_biglock_ªÀa£
();

1533  
ªsu…
;

1536 *
ªt
 = &
föÆ
->
sv_v
;

1538 
	`vfs_biglock_ªÀa£
();

1540 
	}
}

1546 
	$sfs_nŸdú
()

1548  
ENOTDIR
;

1549 
	}
}

1553 
	$sfs_isdú
()

1555  
EISDIR
;

1556 
	}
}

1560 
	$sfs_unimp
()

1562  
EUNIMP
;

1563 
	}
}

1571 
	#ISDIR
 ((*)
sfs_isdú
)

	)

1572 
	#NOTDIR
 ((*)
sfs_nŸdú
)

	)

1573 
	#UNIMP
 ((*)
sfs_unimp
)

	)

1578 c⁄° 
vnode_›s
 
	gsfs_fûe›s
 = {

1579 
VOP_MAGIC
,

1581 
sfs_›í
,

1582 
sfs_˛o£
,

1583 
sfs_ª˛aim
,

1585 
sfs_ªad
,

1586 
NOTDIR
,

1587 
NOTDIR
,

1588 
sfs_wrôe
,

1589 
sfs_io˘l
,

1590 
sfs_°©
,

1591 
sfs_gëty≥
,

1592 
sfs_åy£ek
,

1593 
sfs_fsync
,

1594 
sfs_mm≠
,

1595 
sfs_åunˇã
,

1596 
NOTDIR
,

1598 
NOTDIR
,

1599 
NOTDIR
,

1600 
NOTDIR
,

1601 
NOTDIR
,

1602 
NOTDIR
,

1603 
NOTDIR
,

1604 
NOTDIR
,

1606 
NOTDIR
,

1607 
NOTDIR
,

1613 c⁄° 
vnode_›s
 
	gsfs_dú›s
 = {

1614 
VOP_MAGIC
,

1616 
sfs_›ídú
,

1617 
sfs_˛o£
,

1618 
sfs_ª˛aim
,

1620 
ISDIR
,

1621 
ISDIR
,

1622 
UNIMP
,

1623 
ISDIR
,

1624 
sfs_io˘l
,

1625 
sfs_°©
,

1626 
sfs_gëty≥
,

1627 
UNIMP
,

1628 
sfs_fsync
,

1629 
ISDIR
,

1630 
ISDIR
,

1631 
sfs_«mefûe
,

1633 
sfs_¸ót
,

1634 
UNIMP
,

1635 
UNIMP
,

1636 
sfs_lök
,

1637 
sfs_ªmove
,

1638 
UNIMP
,

1639 
sfs_ª«me
,

1641 
sfs_lookup
,

1642 
sfs_look∑ª¡
,

1651 
	$sfs_lﬂdvnode
(
sfs_fs
 *
sfs
, 
uöt32_t
 
öo
, 
f‹˚ty≥
,

1652 
sfs_vnode
 **
ªt
)

1654 
vnode
 *
v
;

1655 
sfs_vnode
 *
sv
;

1656 c⁄° 
vnode_›s
 *
›s
 = 
NULL
;

1657 
i
, 
num
;

1658 
ªsu…
;

1661 
num
 = 
	`vnodóºay_num
(
sfs
->
sfs_vnodes
);

1664 
i
=0; i<
num
; i++) {

1665 
v
 = 
	`vnodóºay_gë
(
sfs
->
sfs_vnodes
, 
i
);

1666 
sv
 = 
v
->
vn_d©a
;

1669 i‡(!
	`sfs_bu£d
(
sfs
, 
sv
->
sv_öo
)) {

1670 
	`∑nic
("sfs: Found inode %u in unallocated block\n",

1671 
sv
->
sv_öo
);

1674 i‡(
sv
->
sv_öo
==
öo
) {

1678 
	`KASSERT
(
f‹˚ty≥
==
SFS_TYPE_INVAL
);

1680 
	`VOP_INCREF
(&
sv
->
sv_v
);

1681 *
ªt
 = 
sv
;

1688 
sv
 = 
	`kmÆloc
((
sfs_vnode
));

1689 i‡(
sv
==
NULL
) {

1690  
ENOMEM
;

1694 i‡(!
	`sfs_bu£d
(
sfs
, 
öo
)) {

1695 
	`∑nic
("sfs: TriedÅoÜoad inode %u from unallocated block\n",

1696 
öo
);

1700 
ªsu…
 = 
	`sfs_rblock
(
sfs
, &
sv
->
sv_i
, 
öo
);

1701 i‡(
ªsu…
) {

1702 
	`k‰ì
(
sv
);

1703  
ªsu…
;

1707 
sv
->
sv_dúty
 = 
Ál£
;

1714 i‡(
f‹˚ty≥
 !
SFS_TYPE_INVAL
) {

1715 
	`KASSERT
(
sv
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_INVAL
);

1716 
sv
->
sv_i
.
sfi_ty≥
 = 
f‹˚ty≥
;

1717 
sv
->
sv_dúty
 = 
åue
;

1723 
sv
->
sv_i
.
sfi_ty≥
) {

1724 
SFS_TYPE_FILE
:

1725 
›s
 = &
sfs_fûe›s
;

1727 
SFS_TYPE_DIR
:

1728 
›s
 = &
sfs_dú›s
;

1731 
	`∑nic
("sfs:Üoadvnode: Invalid inodeÅype "

1733 
öo
, 
sv
->
sv_i
.
sfi_ty≥
);

1737 
ªsu…
 = 
	`VOP_INIT
(&
sv
->
sv_v
, 
›s
, &
sfs
->
sfs_absfs
, sv);

1738 i‡(
ªsu…
) {

1739 
	`k‰ì
(
sv
);

1740  
ªsu…
;

1744 
sv
->
sv_öo
 = 
öo
;

1747 
ªsu…
 = 
	`vnodóºay_add
(
sfs
->
sfs_vnodes
, &
sv
->
sv_v
, 
NULL
);

1748 i‡(
ªsu…
) {

1749 
	`VOP_CLEANUP
(&
sv
->
sv_v
);

1750 
	`k‰ì
(
sv
);

1751  
ªsu…
;

1755 *
ªt
 = 
sv
;

1757 
	}
}

1763 
vnode
 *

1764 
	$sfs_gëroŸ
(
fs
 *fs)

1766 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

1767 
sfs_vnode
 *
sv
;

1768 
ªsu…
;

1770 
	`vfs_biglock_acquúe
();

1772 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
SFS_ROOT_LOCATION
, 
SFS_TYPE_INVAL
, &
sv
);

1773 i‡(
ªsu…
) {

1774 
	`∑nic
("sfs: getroot: CannotÜoadÑoot vnode\n");

1777 
	`vfs_biglock_ªÀa£
();

1779  &
sv
->
sv_v
;

1780 
	}
}

	@os161/kern/include/addrspace.h

30 #i‚de‡
_ADDRSPACE_H_


31 
	#_ADDRSPACE_H_


	)

38 
	~<vm.h
>

40 
	gvnode
;

50 
	saddr•a˚
 {

51 
vaddr_t
 
	mas_vba£1
;

52 
∑ddr_t
 
	mas_pba£1
;

53 
size_t
 
	mas_≈ages1
;

54 
vaddr_t
 
	mas_vba£2
;

55 
∑ddr_t
 
	mas_pba£2
;

56 
size_t
 
	mas_≈ages2
;

57 
∑ddr_t
 
	mas_°ackpba£
;

96 
addr•a˚
 *
as_¸óã
();

97 
as_c›y
(
addr•a˚
 *
§c
, addr•a˚ **
ªt
);

98 
as_a˘iv©e
();

99 
as_dó˘iv©e
();

100 
as_de°roy
(
addr•a˚
 *);

102 
as_deföe_ªgi⁄
(
addr•a˚
 *
as
,

103 
vaddr_t
 
vaddr
, 
size_t
 
sz
,

104 
ªadabÀ
,

105 
wrôóbÀ
,

106 
execuèbÀ
);

107 
as_¥ï¨e_lﬂd
(
addr•a˚
 *
as
);

108 
as_com∂ëe_lﬂd
(
addr•a˚
 *
as
);

109 
as_deföe_°ack
(
addr•a˚
 *
as
, 
vaddr_t
 *
öô°ack±r
);

119 
lﬂd_ñf
(
vnode
 *
v
, 
vaddr_t
 *
íåypoöt
);

	@os161/kern/include/array.h

30 #i‚de‡
_ARRAY_H_


31 
	#_ARRAY_H_


	)

33 #ifde‡
UW


34 
	~<lib.h
>

37 
	#ARRAYS_CHECKED


	)

39 #ifde‡
ARRAYS_CHECKED


40 
	#ARRAYASSERT
 
KASSERT


	)

42 
	#ARRAYASSERT
(
x
Ë(()(x))

	)

65 
	s¨øy
 {

66 **
	mv
;

67 
	mnum
, 
	mmax
;

70 
¨øy
 *
¨øy_¸óã
();

71 
¨øy_de°roy
(
¨øy
 *);

72 
¨øy_öô
(
¨øy
 *);

73 
¨øy_˛ónup
(
¨øy
 *);

74 
¨øy_num
(c⁄° 
¨øy
 *);

75 *
¨øy_gë
(c⁄° 
¨øy
 *, 
ödex
);

76 
¨øy_£t
(c⁄° 
¨øy
 *, 
ödex
, *
vÆ
);

77 
¨øy_£tsize
(
¨øy
 *, 
num
);

78 
¨øy_add
(
¨øy
 *, *
vÆ
, *
ödex_ªt
);

79 
¨øy_ªmove
(
¨øy
 *, 
ödex
);

85 #i‚de‡
ARRAYINLINE


86 
	#ARRAYINLINE
 
INLINE


	)

89 
ARRAYINLINE
 

90 
	$¨øy_num
(c⁄° 
¨øy
 *
a
)

92  
a
->
num
;

93 
	}
}

95 
ARRAYINLINE
 *

96 
	$¨øy_gë
(c⁄° 
¨øy
 *
a
, 
ödex
)

98 
	`ARRAYASSERT
(
ödex
 < 
a
->
num
);

99  
a
->
v
[
ödex
];

100 
	}
}

102 
ARRAYINLINE
 

103 
	$¨øy_£t
(c⁄° 
¨øy
 *
a
, 
ödex
, *
vÆ
)

105 
	`ARRAYASSERT
(
ödex
 < 
a
->
num
);

106 
a
->
v
[
ödex
] = 
vÆ
;

107 
	}
}

109 
ARRAYINLINE
 

110 
	$¨øy_add
(
¨øy
 *
a
, *
vÆ
, *
ödex_ªt
)

112 
ödex
;

113 
ªt
;

115 
ödex
 = 
a
->
num
;

116 
ªt
 = 
	`¨øy_£tsize
(
a
, 
ödex
+1);

117 i‡(
ªt
) {

118  
ªt
;

120 
a
->
v
[
ödex
] = 
vÆ
;

121 i‡(
ödex_ªt
 !
NULL
) {

122 *
ödex_ªt
 = 
ödex
;

125 
	}
}

166 
	#DECLARRAY_BYTYPE
(
ARRAY
, 
T
) \

167 
	sARRAY
 { \

168 
¨øy
 
¨r
; \

171 
ARRAY
 *ARRAY##
	`_¸óã
(); \

172 
ARRAY
##
	`_de°roy
(ARRAY *
a
); \

173 
ARRAY
##
	`_öô
(ARRAY *
a
); \

174 
ARRAY
##
	`_˛ónup
(ARRAY *
a
); \

175 
ARRAY
##
	`_num
(c⁄° ARRAY *
a
); \

176 
T
 *
ARRAY
##
	`_gë
(c⁄° ARRAY *
a
, 
ödex
); \

177 
ARRAY
##
	`_£t
(ARRAY *
a
, 
ödex
, 
T
 *
vÆ
); \

178 
ARRAY
##
	`_£tsize
(ARRAY *
a
, 
num
); \

179 
ARRAY
##
	`_add
(ARRAY *
a
, 
T
 *
vÆ
, *
ödex_ªt
); \

180 
ARRAY
##
	`_ªmove
(ARRAY *
a
, 
ödex
)

	)

182 
	#DEFARRAY_BYTYPE
(
ARRAY
, 
T
, 
INLINE
) \

183 
INLINE
 
ARRAY
 * \

184 
ARRAY
##
	`_¸óã
() \

186 
ARRAY
 *
a
 = 
	`kmÆloc
((*a)); \

187 i‡(
a
 =
NULL
) { \

188  
NULL
; \

190 
	`¨øy_öô
(&
a
->
¨r
); \

191  
a
; \

194 
INLINE
 \

195 
ARRAY
##
	`_de°roy
(ARRAY *
a
) \

197 
	`¨øy_˛ónup
(&
a
->
¨r
); \

198 
	`k‰ì
(
a
); \

201 
INLINE
 \

202 
ARRAY
##
	`_öô
(ARRAY *
a
) \

204 
	`¨øy_öô
(&
a
->
¨r
); \

207 
INLINE
 \

208 
ARRAY
##
	`_˛ónup
(ARRAY *
a
) \

210 
	`¨øy_˛ónup
(&
a
->
¨r
); \

213 
INLINE
 \

214 
ARRAY
##
	`_num
(c⁄° ARRAY *
a
) \

216  
	`¨øy_num
(&
a
->
¨r
); \

219 
INLINE
 
T
 * \

220 
ARRAY
##
	`_gë
(c⁄° ARRAY *
a
, 
ödex
) \

222  (
T
 *)
	`¨øy_gë
(&
a
->
¨r
, 
ödex
); \

225 
INLINE
 \

226 
ARRAY
##
	`_£t
(ARRAY *
a
, 
ödex
, 
T
 *
vÆ
) \

228 
	`¨øy_£t
(&
a
->
¨r
, 
ödex
, (*)
vÆ
); \

231 
INLINE
 \

232 
ARRAY
##
	`_£tsize
(ARRAY *
a
, 
num
) \

234  
	`¨øy_£tsize
(&
a
->
¨r
, 
num
); \

237 
INLINE
 \

238 
ARRAY
##
	`_add
(ARRAY *
a
, 
T
 *
vÆ
, *
ödex_ªt
) \

240  
	`¨øy_add
(&
a
->
¨r
, (*)
vÆ
, 
ödex_ªt
); \

243 
INLINE
 \

244 
ARRAY
##
	`_ªmove
(ARRAY *
a
, 
ödex
) \

246  
	`¨øy_ªmove
(&
a
->
¨r
, 
ödex
); \

247 }

	)

249 
	#DECLARRAY
(
T
Ë
	`DECLARRAY_BYTYPE
(T##
¨øy
, T)

	)

250 
	#DEFARRAY
(
T
, 
INLINE
Ë
	`DEFARRAY_BYTYPE
(T##
¨øy
, T, INLINE)

	)

256 
DECLARRAY_BYTYPE
(
°rög¨øy
, );

257 
DEFARRAY_BYTYPE
(
°rög¨øy
, , 
ARRAYINLINE
);

	@os161/kern/include/bitmap.h

30 #i‚de‡
_BITMAP_H_


31 
	#_BITMAP_H_


	)

48 
	gbôm≠
;

50 
bôm≠
 *
bôm≠_¸óã
(
nbôs
);

51 *
bôm≠_gëd©a
(
bôm≠
 *);

52 
bôm≠_Æloc
(
bôm≠
 *, *
ödex
);

53 
bôm≠_m¨k
(
bôm≠
 *, 
ödex
);

54 
bôm≠_unm¨k
(
bôm≠
 *, 
ödex
);

55 
bôm≠_is£t
(
bôm≠
 *, 
ödex
);

56 
bôm≠_de°roy
(
bôm≠
 *);

	@os161/kern/include/cdefs.h

30 #i‚de‡
_CDEFS_H_


31 
	#_CDEFS_H_


	)

42 
	#COMPILE_ASSERT
(
x
Ë(()(°ru˘ { : ((x)?1:-1); }))

	)

48 #ifde‡
__GNUC__


49 
	#__PF
(
a
,
b
Ë
	`__©åibuã__
((
	`__f‹m©__
(
__¥ötf__
,á, b)))

	)

51 
	#__PF
(
a
,
b
)

	)

114 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__GNUC_STDC_INLINE__
)

116 
	#INLINE
 
ölöe


	)

118 #ñi‡
deföed
(
__STDC__
Ë&& 
__STDC_VERSION__
 >= 199901L

120 
	#INLINE
 
ölöe


	)

124 
	#INLINE
 
ölöe


	)

	@os161/kern/include/clock.h

30 #i‚de‡
_CLOCK_H_


31 
	#_CLOCK_H_


	)

33 
	~"›t-synch¥obs.h
"

51 #i‡
OPT_SYNCHPROBS


53 
	#HZ
 10000

	)

56 
	#HZ
 100

	)

59 
h¨d˛ock_boŸ°øp
();

61 
h¨d˛ock
();

62 
timî˛ock
();

64 
gëtime
(
time_t
 *
£c⁄ds
, 
uöt32_t
 *
«no£c⁄ds
);

66 
gëöãrvÆ
(
time_t
 
£cs1
, 
uöt32_t
 
n£cs
,

67 
time_t
 
£cs2
, 
uöt32_t
 
n£cs2
,

68 
time_t
 *
r£cs
, 
uöt32_t
 *
∫£cs
);

74 
˛ock¶ìp
(
£c⁄ds
);

	@os161/kern/include/copyinout.h

30 #i‚de‡
_COPYINOUT_H_


31 
	#_COPYINOUT_H_


	)

67 
c›yö
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
);

68 
c›yout
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
);

69 
c›yö°r
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
, size_à*
gŸ
);

70 
c›yout°r
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
, size_à*
gŸ
);

	@os161/kern/include/cpu.h

30 #i‚de‡
_CPU_H_


31 
	#_CPU_H_


	)

34 
	~<•ölock.h
>

35 
	~<thªadli°.h
>

36 
	~<machöe/vm.h
>

49 
	s˝u
 {

53 
˝u
 *
	mc_£lf
;

54 
	mc_numbî
;

55 
	mc_h¨dw¨e_numbî
;

60 
thªad
 *
	mc_cuπhªad
;

61 
thªadli°
 
	mc_zombõs
;

62 
	mc_h¨d˛ocks
;

68 
boﬁ
 
	mc_isidÀ
;

69 
thªadli°
 
	mc_runqueue
;

70 
•ölock
 
	mc_runqueue_lock
;

86 
uöt32_t
 
	mc_ùi_≥ndög
;

87 
ébshoŸdown
 
	mc_shoŸdown
[
TLBSHOOTDOWN_MAX
];

88 
	mc_numshoŸdown
;

89 
•ölock
 
	mc_ùi_lock
;

92 
	#TLBSHOOTDOWN_ALL
 (-1)

	)

107 
˝u
 *
˝u_¸óã
(
h¨dw¨e_numbî
);

108 
˝u_machdï_öô
(
˝u
 *);

109  
˝u_°¨t_£c⁄d¨y
();

110 
˝u_h©ch
(
so·w¨e_numbî
);

115 c⁄° *
˝u_idítify
();

122 
˝u_úqoff
();

123 
˝u_úq⁄
();

139 
˝u_idÀ
();

140 
˝u_hÆt
();

161 
	#IPI_PANIC
 0

	)

162 
	#IPI_OFFLINE
 1

	)

163 
	#IPI_UNIDLE
 2

	)

164 
	#IPI_TLBSHOOTDOWN
 3

	)

166 
ùi_£nd
(
˝u
 *
èrgë
, 
code
);

167 
ùi_brﬂdˇ°
(
code
);

168 
ùi_ébshoŸdown
(
˝u
 *
èrgë
, c⁄° 
ébshoŸdown
 *
m≠pög
);

170 
öãΩro˚ss‹_öãºu±
();

	@os161/kern/include/current.h

30 #i‚de‡
_CURRENT_H_


31 
	#_CURRENT_H_


	)

42 
	~<machöe/cuºít.h
>

44 #i‡
deföed
(
__NEED_CURTHREAD
)

46 
	~<˝u.h
>

47 
	#cuπhªad
 
cur˝u
->
c_cuπhªad


	)

48 
	#CURCPU_EXISTS
(Ë(
cur˝u
 !
NULL
)

	)

52 #i‡
deföed
(
__NEED_CURCPU
)

54 
	~<thªad.h
>

55 
	#cur˝u
 
cuπhªad
->
t_˝u


	)

56 
	#CURCPU_EXISTS
(Ë(
cuπhªad
 !
NULL
)

	)

66 
	#cuΩroc
 (
cuπhªad
->
t_¥oc
)

	)

	@os161/kern/include/device.h

30 #i‚de‡
_DEVICE_H_


31 
	#_DEVICE_H_


	)

38 
	guio
;

44 
	sdevi˚
 {

45 (*
	md_›í
)(
	mdevi˚
 *, 
	mÊags_‰om_›í
);

46 (*
	md_˛o£
)(
	mdevi˚
 *);

47 (*
	md_io
)(
	mdevi˚
 *, 
	muio
 *);

48 (*
	md_io˘l
)(
	mdevi˚
 *, 
	m›
, 
u£Ωå_t
 
	md©a
);

50 
blk˙t_t
 
	md_blocks
;

51 
blksize_t
 
	md_blocksize
;

53 
dev_t
 
	md_devnumbî
;

55 *
	md_d©a
;

59 
vnode
 *
dev_¸óã_vnode
(
devi˚
 *
dev
);

63 
devnuŒ_¸óã
();

66 
dev_boŸ°øp
();

	@os161/kern/include/elf.h

30 #i‚de‡
_ELF_H_


31 
	#_ELF_H_


	)

44 
	~<machöe/ñf.h
>

50 
	#ELF_NIDENT
 16

	)

52 
	me_idít
[
ELF_NIDENT
];

53 
uöt16_t
 
	me_ty≥
;

54 
uöt16_t
 
	me_machöe
;

55 
uöt32_t
 
	me_vîsi⁄
;

56 
uöt32_t
 
	me_íåy
;

57 
uöt32_t
 
	me_phoff
;

58 
uöt32_t
 
	me_shoff
;

59 
uöt32_t
 
	me_Êags
;

60 
uöt16_t
 
	me_ehsize
;

61 
uöt16_t
 
	me_phítsize
;

62 
uöt16_t
 
	me_phnum
;

63 
uöt16_t
 
	me_shítsize
;

64 
uöt16_t
 
	me_shnum
;

65 
uöt16_t
 
	me_sh°∫dx
;

66 } 
	tElf32_Ehdr
;

69 
	#EI_MAG0
 0

	)

70 
	#EI_MAG1
 1

	)

71 
	#EI_MAG2
 2

	)

72 
	#EI_MAG3
 3

	)

73 
	#EI_CLASS
 4

	)

74 
	#EI_DATA
 5

	)

75 
	#EI_VERSION
 6

	)

76 
	#EI_OSABI
 7

	)

77 
	#EI_ABIVERSION
 8

	)

78 
	#EI_PAD
 9

	)

83 
	#ELFMAG0
 0x7f

	)

84 
	#ELFMAG1
 'E'

	)

85 
	#ELFMAG2
 'L'

	)

86 
	#ELFMAG3
 'F'

	)

89 
	#ELFCLASSNONE
 0

	)

90 
	#ELFCLASS32
 1

	)

91 
	#ELFCLASS64
 2

	)

94 
	#ELFDATANONE
 0

	)

95 
	#ELFDATA2LSB
 1

	)

96 
	#ELFDATA2MSB
 2

	)

99 
	#EV_NONE
 0

	)

100 
	#EV_CURRENT
 1

	)

103 
	#ELFOSABI_SYSV
 0

	)

104 
	#ELFOSABI_HPUX
 1

	)

105 
	#ELFOSABI_STANDALONE
 255

	)

111 
	#ET_NONE
 0

	)

112 
	#ET_REL
 1

	)

113 
	#ET_EXEC
 2

	)

114 
	#ET_DYN
 3

	)

115 
	#ET_CORE
 4

	)

116 
	#ET_NUM
 5

	)

121 
	#EM_NONE
 0

	)

122 
	#EM_M32
 1

	)

123 
	#EM_SPARC
 2

	)

124 
	#EM_386
 3

	)

125 
	#EM_68K
 4

	)

126 
	#EM_88K
 5

	)

127 
	#EM_486
 6

	)

128 
	#EM_860
 7

	)

129 
	#EM_MIPS
 8

	)

130 
	#EM_S370
 9

	)

131 
	#EM_MIPS_RS3_LE
 10

	)

132 
	#EM_RS6000
 11

	)

133 
	#EM_PARISC
 15

	)

134 
	#EM_NCUBE
 16

	)

135 
	#EM_VPP500
 17

	)

136 
	#EM_SPARC32PLUS
 18

	)

137 
	#EM_960
 19

	)

138 
	#EM_PPC
 20

	)

139 
	#EM_V800
 36

	)

140 
	#EM_FR20
 37

	)

141 
	#EM_RH32
 38

	)

142 
	#EM_RCE
 39

	)

143 
	#EM_ARM
 40

	)

144 
	#EM_ALPHA
 41

	)

145 
	#EM_SH
 42

	)

146 
	#EM_SPARCV9
 43

	)

147 
	#EM_TRICORE
 44

	)

148 
	#EM_ARC
 45

	)

149 
	#EM_H8_300
 46

	)

150 
	#EM_H8_300H
 47

	)

151 
	#EM_H8S
 48

	)

152 
	#EM_H8_500
 49

	)

153 
	#EM_IA_64
 50

	)

154 
	#EM_MIPS_X
 51

	)

155 
	#EM_COLDFIRE
 52

	)

156 
	#EM_68HC12
 53

	)

157 
	#EM_VAX
 75

	)

158 
	#EM_ALPHA_EXP
 36902

	)

159 
	#EM_NUM
 36903

	)

169 
uöt32_t
 
	mp_ty≥
;

170 
uöt32_t
 
	mp_off£t
;

171 
uöt32_t
 
	mp_vaddr
;

172 
uöt32_t
 
	mp_∑ddr
;

173 
uöt32_t
 
	mp_fûesz
;

174 
uöt32_t
 
	mp_memsz
;

175 
uöt32_t
 
	mp_Êags
;

176 
uöt32_t
 
	mp_Æign
;

177 } 
	tElf32_Phdr
;

180 
	#PT_NULL
 0

	)

181 
	#PT_LOAD
 1

	)

182 
	#PT_DYNAMIC
 2

	)

183 
	#PT_INTERP
 3

	)

184 
	#PT_NOTE
 4

	)

185 
	#PT_SHLIB
 5

	)

186 
	#PT_PHDR
 6

	)

187 
	#PT_NUM
 7

	)

188 
	#PT_MIPS_REGINFO
 0x70000000

	)

191 
	#PF_R
 0x4

	)

192 
	#PF_W
 0x2

	)

193 
	#PF_X
 0x1

	)

196 
Elf32_Ehdr
 
	tElf_Ehdr
;

197 
Elf32_Phdr
 
	tElf_Phdr
;

	@os161/kern/include/emufs.h

30 #i‚de‡
_EMUFS_H_


31 
	#_EMUFS_H_


	)

37 
	~<fs.h
>

38 
	~<vnode.h
>

44 
	semufs_vnode
 {

45 
vnode
 
	mev_v
;

46 
emu_so·c
 *
	mev_emu
;

47 
uöt32_t
 
	mev_h™dÀ
;

50 
	semufs_fs
 {

51 
fs
 
	mef_fs
;

52 
emu_so·c
 *
	mef_emu
;

53 
emufs_vnode
 *
	mef_roŸ
;

54 
vnodóºay
 *
	mef_vnodes
;

	@os161/kern/include/endian.h

30 #i‚de‡
_ENDIAN_H_


31 
	#_ENDIAN_H_


	)

33 
	~<kîn/ídün.h
>

39 
uöt16_t
 
bsw≠16
(uint16_t);

40 
uöt32_t
 
bsw≠32
(uint32_t);

41 
uöt64_t
 
bsw≠64
(uint64_t);

43 
uöt16_t
 
¡ohs
(uint16_t);

44 
uöt16_t
 
ht⁄s
(uint16_t);

45 
uöt32_t
 
¡ohl
(uint32_t);

46 
uöt32_t
 
ht⁄l
(uint32_t);

47 
uöt64_t
 
¡ohŒ
(uint64_t);

48 
uöt64_t
 
ht⁄Œ
(uint64_t);

51 
joö32to64
(
uöt32_t
 
x1
, uöt32_à
x2
, 
uöt64_t
 *
y2
);

52 
•lô64to32
(
uöt64_t
 
x
, 
uöt32_t
 *
y1
, uöt32_à*
y2
);

	@os161/kern/include/fs.h

30 #i‚de‡
_FS_H_


31 
	#_FS_H_


	)

64 
	sfs
 {

65 (*
	mfs_sync
)(
	mfs
 *);

66 c⁄° *(*
	mfs_gëvﬁ«me
)(
	mfs
 *);

67 
	mvnode
 *(*
	mfs_gëroŸ
)(
	mfs
 *);

68 (*
	mfs_unmou¡
)(
	mfs
 *);

70 *
	mfs_d©a
;

76 
	#FSOP_SYNC
(
fs
Ë((fs)->
	`fs_sync
(fs))

	)

77 
	#FSOP_GETVOLNAME
(
fs
Ë((fs)->
	`fs_gëvﬁ«me
(fs))

	)

78 
	#FSOP_GETROOT
(
fs
Ë((fs)->
	`fs_gëroŸ
(fs))

	)

79 
	#FSOP_UNMOUNT
(
fs
Ë((fs)->
	`fs_unmou¡
(fs))

	)

	@os161/kern/include/kern/endian.h

30 #i‚de‡
_KERN_ENDIAN_H_


31 
	#_KERN_ENDIAN_H_


	)

42 
	#_LITTLE_ENDIAN
 1234

	)

43 
	#_BIG_ENDIAN
 4321

	)

44 
	#_PDP_ENDIAN
 3412

	)

47 
	~<kîn/machöe/ídün.h
>

	@os161/kern/include/kern/errmsg.h

30 #i‚de‡
_KERN_ERRMSG_H_


31 
	#_KERN_ERRMSG_H_


	)

41 c⁄° *c⁄° 
	gsys_îæi°
[] = {

112 c⁄° 
	gsys_√º
 = (
sys_îæi°
)/(const *);

	@os161/kern/include/kern/errno.h

30 #i‚de‡
_KERN_ERRNO_H_


31 
	#_KERN_ERRNO_H_


	)

45 
	#ENOSYS
 1

	)

46 
	#EUNIMP
 2

	)

47 
	#ENOMEM
 3

	)

48 
	#EAGAIN
 4

	)

49 
	#EINTR
 5

	)

50 
	#EFAULT
 6

	)

51 
	#ENAMETOOLONG
 7

	)

52 
	#EINVAL
 8

	)

53 
	#EPERM
 9

	)

54 
	#EACCES
 10

	)

55 
	#EMPROC
 11

	)

56 
	#ENPROC
 12

	)

57 
	#ENOEXEC
 13

	)

58 
	#E2BIG
 14

	)

59 
	#ESRCH
 15

	)

60 
	#ECHILD
 16

	)

61 
	#ENOTDIR
 17

	)

62 
	#EISDIR
 18

	)

63 
	#ENOENT
 19

	)

64 
	#ELOOP
 20

	)

65 
	#ENOTEMPTY
 21

	)

66 
	#EEXIST
 22

	)

67 
	#EMLINK
 23

	)

68 
	#EXDEV
 24

	)

69 
	#ENODEV
 25

	)

70 
	#ENXIO
 26

	)

71 
	#EBUSY
 27

	)

72 
	#EMFILE
 28

	)

73 
	#ENFILE
 29

	)

74 
	#EBADF
 30

	)

75 
	#EIOCTL
 31

	)

76 
	#EIO
 32

	)

77 
	#ESPIPE
 33

	)

78 
	#EPIPE
 34

	)

79 
	#EROFS
 35

	)

80 
	#ENOSPC
 36

	)

81 
	#EDQUOT
 37

	)

82 
	#EFBIG
 38

	)

83 
	#EFTYPE
 39

	)

84 
	#EDOM
 40

	)

85 
	#ERANGE
 41

	)

86 
	#EILSEQ
 42

	)

87 
	#ENOTSOCK
 43

	)

88 
	#EISSOCK
 44

	)

89 
	#EISCONN
 45

	)

90 
	#ENOTCONN
 46

	)

91 
	#ESHUTDOWN
 47

	)

92 
	#EPFNOSUPPORT
 48

	)

93 
	#ESOCKTNOSUPPORT
 49

	)

94 
	#EPROTONOSUPPORT
 50

	)

95 
	#EPROTOTYPE
 51

	)

96 
	#EAFNOSUPPORT
 52

	)

97 
	#ENOPROTOOPT
 53

	)

98 
	#EADDRINUSE
 54

	)

99 
	#EADDRNOTAVAIL
 55

	)

100 
	#ENETDOWN
 56

	)

101 
	#ENETUNREACH
 57

	)

102 
	#EHOSTDOWN
 58

	)

103 
	#EHOSTUNREACH
 59

	)

104 
	#ECONNREFUSED
 60

	)

105 
	#ETIMEDOUT
 61

	)

106 
	#ECONNRESET
 62

	)

107 
	#EMSGSIZE
 63

	)

108 
	#ENOTSUP
 64

	)

	@os161/kern/include/kern/fcntl.h

30 #i‚de‡
_KERN_FCNTL_H_


31 
	#_KERN_FCNTL_H_


	)

43 
	#O_RDONLY
 0

	)

44 
	#O_WRONLY
 1

	)

45 
	#O_RDWR
 2

	)

47 
	#O_CREAT
 4

	)

48 
	#O_EXCL
 8

	)

49 
	#O_TRUNC
 16

	)

50 
	#O_APPEND
 32

	)

51 
	#O_NOCTTY
 64

	)

54 
	#O_ACCMODE
 3

	)

61 
	#LOCK_SH
 1

	)

62 
	#LOCK_EX
 2

	)

63 
	#LOCK_UN
 3

	)

64 
	#LOCK_NB
 4

	)

71 
	#F_DUPFD
 0

	)

72 
	#F_GETFD
 1

	)

73 
	#F_SETFD
 2

	)

74 
	#F_GETFL
 3

	)

75 
	#F_SETFL
 4

	)

76 
	#F_GETOWN
 5

	)

77 
	#F_SETOWN
 6

	)

78 
	#F_GETLK
 7

	)

79 
	#F_SETLK
 8

	)

80 
	#F_SETLKW
 9

	)

83 
	#FD_CLOEXEC
 1

	)

86 
	#F_RDLCK
 0

	)

87 
	#F_WRLCK
 1

	)

88 
	#F_UNLCK
 2

	)

91 
	sÊock
 {

92 
off_t
 
	ml_°¨t
;

93 
	ml_whí˚
;

94 
	ml_ty≥
;

95 
off_t
 
	ml_Àn
;

96 
pid_t
 
	ml_pid
;

	@os161/kern/include/kern/ioctl.h

30 #i‚de‡
_KERN_IOCTL_H_


31 
	#_KERN_IOCTL_H_


	)

	@os161/kern/include/kern/iovec.h

30 #i‚de‡
_KERN_IOVEC_H_


31 
	#_KERN_IOVEC_H_


	)

38 
	siovec
 {

57 #ifde‡
_KERNEL


59 
u£Ωå_t
 
	miov_uba£
;

60 *
	miov_kba£
;

63 *
	miov_ba£
;

65 
size_t
 
	miov_Àn
;

	@os161/kern/include/kern/limits.h

30 #i‚de‡
_KERN_LIMITS_H_


31 
	#_KERN_LIMITS_H_


	)

52 
	#__NAME_MAX
 255

	)

55 
	#__PATH_MAX
 1024

	)

58 
	#__ARG_MAX
 (64 * 1024)

	)

66 
	#__PID_MIN
 2

	)

69 
	#__PID_MAX
 32767

	)

72 
	#__PIPE_BUF
 512

	)

80 
	#__NGROUPS_MAX
 32

	)

83 
	#__LOGIN_NAME_MAX
 17

	)

94 
	#__OPEN_MAX
 128

	)

97 
	#__IOV_MAX
 1024

	)

	@os161/kern/include/kern/reboot.h

30 #i‚de‡
_KERN_REBOOT_H_


31 
	#_KERN_REBOOT_H_


	)

40 
	#RB_REBOOT
 0

	)

41 
	#RB_HALT
 1

	)

42 
	#RB_POWEROFF
 2

	)

	@os161/kern/include/kern/resource.h

30 #i‚de‡
_KERN_RESOURCE_H_


31 
	#_KERN_RESOURCE_H_


	)

41 
	#PRIO_MIN
 (-20)

	)

42 
	#PRIO_MAX
 20

	)

45 
	#PRIO_PROCESS
 0

	)

46 
	#PRIO_PGRP
 1

	)

47 
	#PRIO_USER
 2

	)

50 
	#RUSAGE_SELF
 0

	)

51 
	#RUSAGE_CHILDREN
 (-1)

	)

53 
	srußge
 {

54 
timevÆ
 
	mru_utime
;

55 
timevÆ
 
	mru_°ime
;

56 
__size_t
 
	mru_maxrss
;

57 
__cou¡î_t
 
	mru_ixrss
;

58 
__cou¡î_t
 
	mru_idrss
;

59 
__cou¡î_t
 
	mru_i§ss
;

60 
__cou¡î_t
 
	mru_möÊt
;

61 
__cou¡î_t
 
	mru_majÊt
;

62 
__cou¡î_t
 
	mru_nsw≠
;

63 
__cou¡î_t
 
	mru_öblock
;

64 
__cou¡î_t
 
	mru_oublock
;

65 
__cou¡î_t
 
	mru_msgrcv
;

66 
__cou¡î_t
 
	mru_msg¢d
;

67 
__cou¡î_t
 
	mru_nsig«ls
;

68 
__cou¡î_t
 
	mru_nvcsw
;

69 
__cou¡î_t
 
	mru_nivcsw
;

74 
	#RLIMIT_NPROC
 0

	)

75 
	#RLIMIT_NOFILE
 1

	)

76 
	#RLIMIT_CPU
 2

	)

77 
	#RLIMIT_DATA
 3

	)

78 
	#RLIMIT_STACK
 4

	)

79 
	#RLIMIT_MEMLOCK
 5

	)

80 
	#RLIMIT_RSS
 6

	)

81 
	#RLIMIT_CORE
 7

	)

82 
	#RLIMIT_FSIZE
 8

	)

83 
	#__RLIMIT_NUM
 9

	)

85 
	sæimô
 {

86 
__æim_t
 
	mæim_cur
;

87 
__æim_t
 
	mæim_max
;

90 
	#RLIM_INFINITY
 (~(
__æim_t
)0)

	)

	@os161/kern/include/kern/seek.h

30 #i‚de‡
_KERN_SEEK_H_


31 
	#_KERN_SEEK_H_


	)

42 
	#SEEK_SET
 0

	)

43 
	#SEEK_CUR
 1

	)

44 
	#SEEK_END
 2

	)

	@os161/kern/include/kern/sfs.h

30 #i‚de‡
_KERN_SFS_H_


31 
	#_KERN_SFS_H_


	)

39 
	#SFS_MAGIC
 0xabadf001

	)

40 
	#SFS_BLOCKSIZE
 512

	)

41 
	#SFS_VOLNAME_SIZE
 32

	)

42 
	#SFS_NDIRECT
 15

	)

43 
	#SFS_DBPERIDB
 128

	)

44 
	#SFS_NAMELEN
 60

	)

45 
	#SFS_SB_LOCATION
 0

	)

46 
	#SFS_ROOT_LOCATION
 1

	)

47 
	#SFS_MAP_LOCATION
 2

	)

48 
	#SFS_NOINO
 0

	)

51 
	#SFS_BLOCKBITS
 (
SFS_BLOCKSIZE
 * 
CHAR_BIT
)

	)

54 
	#SFS_ROUNDUP
(
a
,
b
Ë(((◊)+(b)-1)/(b))*b)

	)

57 
	#SFS_BITMAPSIZE
(
nblocks
Ë
	`SFS_ROUNDUP
“blocks, 
SFS_BLOCKBITS
)

	)

60 
	#SFS_BITBLOCKS
(
nblocks
Ë(
	`SFS_BITMAPSIZE
“blocks)/
SFS_BLOCKBITS
)

	)

63 
	#SFS_TYPE_INVAL
 0

	)

64 
	#SFS_TYPE_FILE
 1

	)

65 
	#SFS_TYPE_DIR
 2

	)

70 
	ssfs_su≥r
 {

71 
uöt32_t
 
	m•_magic
;

72 
uöt32_t
 
	m•_nblocks
;

73 
	m•_vﬁ«me
[
SFS_VOLNAME_SIZE
];

74 
uöt32_t
 
	mª£rved
[118];

80 
	ssfs_öode
 {

81 
uöt32_t
 
	msfi_size
;

82 
uöt16_t
 
	msfi_ty≥
;

83 
uöt16_t
 
	msfi_lökcou¡
;

84 
uöt32_t
 
	msfi_dúe˘
[
SFS_NDIRECT
];

85 
uöt32_t
 
	msfi_ödúe˘
;

86 
uöt32_t
 
	msfi_wa°e
[128-3-
SFS_NDIRECT
];

92 
	ssfs_dú
 {

93 
uöt32_t
 
	msfd_öo
;

94 
	msfd_«me
[
SFS_NAMELEN
];

	@os161/kern/include/kern/signal.h

37 #i‚de‡
_KERN_SIGNAL_H_


38 
	#_KERN_SIGNAL_H_


	)

56 
	#SIGHUP
 1

	)

57 
	#SIGINT
 2

	)

58 
	#SIGQUIT
 3

	)

59 
	#SIGILL
 4

	)

60 
	#SIGTRAP
 5

	)

61 
	#SIGABRT
 6

	)

62 
	#SIGEMT
 7

	)

63 
	#SIGFPE
 8

	)

64 
	#SIGKILL
 9

	)

65 
	#SIGBUS
 10

	)

66 
	#SIGSEGV
 11

	)

67 
	#SIGSYS
 12

	)

68 
	#SIGPIPE
 13

	)

69 
	#SIGALRM
 14

	)

70 
	#SIGTERM
 15

	)

71 
	#SIGURG
 16

	)

72 
	#SIGSTOP
 17

	)

73 
	#SIGTSTP
 18

	)

74 
	#SIGCONT
 19

	)

75 
	#SIGCHLD
 20

	)

76 
	#SIGTTIN
 21

	)

77 
	#SIGTTOU
 22

	)

78 
	#SIGIO
 23

	)

79 
	#SIGXCPU
 24

	)

80 
	#SIGXFSZ
 25

	)

81 
	#SIGVTALRM
 26

	)

82 
	#SIGPROF
 27

	)

83 
	#SIGWINCH
 28

	)

84 
	#SIGINFO
 29

	)

85 
	#SIGUSR1
 20

	)

86 
	#SIGUSR2
 31

	)

87 
	#SIGPWR
 32

	)

88 
	#_NSIG
 32

	)

92 
__u32
 
	tsig£t_t
;

95 
	#SA_ONSTACK
 1

	)

96 
	#SA_RESTART
 2

	)

97 
	#SA_RESETHAND
 4

	)

100 
	#SIG_BLOCK
 1

	)

101 
	#SIG_UNBLOCK
 2

	)

102 
	#SIG_SETMASK
 3

	)

105 (*
	t__sigfunc
)();

108 
	#SIG_DFL
 ((
__sigfunc
Ë0Ë

	)

109 
	#SIG_IGN
 ((
__sigfunc
Ë1Ë

	)

114 
	ssiga˘i⁄
 {

115 
__sigfunc
 
ß_h™dÀr
;

116 
sig£t_t
 
ß_mask
;

117 
ß_Êags
;

124 
	ssigÆt°ack
 {

125 *
ss_•
;

126 
size_t
 
ss_size
;

127 
ss_Êags
;

	@os161/kern/include/kern/socket.h

30 #i‚de‡
_KERN_SOCKET_H_


31 
	#_KERN_SOCKET_H_


	)

43 
	#SOCK_STREAM
 1

	)

44 
	#SOCK_DGRAM
 2

	)

45 
	#SOCK_RAW
 3

	)

48 
	#AF_UNSPEC
 0

	)

49 
	#AF_UNIX
 1

	)

50 
	#AF_INET
 2

	)

51 
	#AF_INET6
 3

	)

54 
	#PF_UNSPEC
 
AF_UNSPEC


	)

55 
	#PF_UNIX
 
AF_UNIX


	)

56 
	#PF_INET
 
AF_INET


	)

57 
	#PF_INET6
 
AF_INET6


	)

73 
	ssockaddr
 {

74 
__u8
 
	mß_Àn
;

75 
__u8
 
	mß_Ámûy
;

78 
	#_SS_SIZE
 128

	)

79 
	ssockaddr_°‹age
 {

80 
__u8
 
	mss_Àn
;

81 
__u8
 
	mss_Ámûy
;

82 
__u8
 
	m__ss_∑d1
;

83 
__u8
 
	m__ss_∑d2
;

84 
__u32
 
	m__ss_∑d3
;

85 
__u64
 
	m__ss_∑d4
;

86 
	m__ss_∑d5
[
_SS_SIZE
 - (
__u64
Ë- (
__u32
Ë- 4*(
__u8
)];

98 
	smsghdr
 {

99 *
	mmsg_«me
;

100 
sockÀn_t
 
	mmsg_«mñí
;

101 
iovec
 *
	mmsg_iov
;

102 
	mmsg_iovÀn
;

103 *
	mmsg_c⁄åﬁ
;

104 
sockÀn_t
 
	mmsg_c⁄åﬁÀn
;

105 
	mmsg_Êags
;

108 
	scmsghdr
 {

109 
sockÀn_t
 
	mcmsg_Àn
;

110 
	mcmsg_Àvñ
;

111 
	mcmsg_ty≥
;

	@os161/kern/include/kern/stat.h

30 #i‚de‡
_KERN_STAT_H_


31 
	#_KERN_STAT_H_


	)

42 
	s°©
 {

44 
off_t
 
	m°_size
;

45 
mode_t
 
	m°_mode
;

46 
∆ök_t
 
	m°_∆ök
;

47 
blk˙t_t
 
	m°_blocks
;

50 
dev_t
 
	m°_dev
;

51 
öo_t
 
	m°_öo
;

52 
dev_t
 
	m°_rdev
;

55 
time_t
 
	m°_©ime
;

56 
time_t
 
	m°_˘ime
;

57 
time_t
 
	m°_mtime
;

58 
__u32
 
	m°_©imí£c
;

59 
__u32
 
	m°_˘imí£c
;

60 
__u32
 
	m°_mtimí£c
;

63 
uid_t
 
	m°_uid
;

64 
gid_t
 
	m°_gid
;

67 
__u32
 
	m°_gí
;

68 
blksize_t
 
	m°_blksize
;

	@os161/kern/include/kern/stattypes.h

30 #i‚de‡
_KERN_STATTYPES_H_


31 
	#_KERN_STATTYPES_H_


	)

45 
	#_S_IFMT
 070000

	)

46 
	#_S_IFREG
 010000

	)

47 
	#_S_IFDIR
 020000

	)

48 
	#_S_IFLNK
 030000

	)

49 
	#_S_IFIFO
 040000

	)

50 
	#_S_IFSOCK
 050000

	)

51 
	#_S_IFCHR
 060000

	)

52 
	#_S_IFBLK
 070000

	)

	@os161/kern/include/kern/syscall.h

30 #i‚de‡
_KERN_SYSCALL_H_


31 
	#_KERN_SYSCALL_H_


	)

50 
	#SYS_f‹k
 0

	)

51 
	#SYS_vf‹k
 1

	)

52 
	#SYS_execv
 2

	)

53 
	#SYS__exô
 3

	)

54 
	#SYS_waôpid
 4

	)

55 
	#SYS_gëpid
 5

	)

56 
	#SYS_gëµid
 6

	)

58 
	#SYS_sbrk
 7

	)

59 
	#SYS_mm≠
 8

	)

60 
	#SYS_munm≠
 9

	)

61 
	#SYS_m¥Ÿe˘
 10

	)

69 
	#SYS_umask
 17

	)

70 
	#SYS_is£tugid
 18

	)

71 
	#SYS_gëªsuid
 19

	)

72 
	#SYS_£åesuid
 20

	)

73 
	#SYS_gëªsgid
 21

	)

74 
	#SYS_£åesgid
 22

	)

75 
	#SYS_gëgroups
 23

	)

76 
	#SYS_£tgroups
 24

	)

77 
	#SYS___gëlogö
 25

	)

78 
	#SYS___£éogö
 26

	)

80 
	#SYS_kûl
 27

	)

81 
	#SYS_siga˘i⁄
 28

	)

82 
	#SYS_sig≥ndög
 29

	)

83 
	#SYS_sig¥ocmask
 30

	)

84 
	#SYS_sigsu•íd
 31

	)

85 
	#SYS_sigªtu∫
 32

	)

105 
	#SYS_›í
 45

	)

106 
	#SYS_pùe
 46

	)

107 
	#SYS_dup
 47

	)

108 
	#SYS_dup2
 48

	)

109 
	#SYS_˛o£
 49

	)

110 
	#SYS_ªad
 50

	)

111 
	#SYS_¥ód
 51

	)

114 
	#SYS_gëdúíåy
 54

	)

115 
	#SYS_wrôe
 55

	)

116 
	#SYS_pwrôe
 56

	)

119 
	#SYS_l£ek
 59

	)

120 
	#SYS_Êock
 60

	)

121 
	#SYS_·runˇã
 61

	)

122 
	#SYS_fsync
 62

	)

123 
	#SYS_f˙é
 63

	)

124 
	#SYS_io˘l
 64

	)

125 
	#SYS_£À˘
 65

	)

126 
	#SYS_pﬁl
 66

	)

129 
	#SYS_lök
 67

	)

130 
	#SYS_ªmove
 68

	)

131 
	#SYS_mkdú
 69

	)

132 
	#SYS_rmdú
 70

	)

133 
	#SYS_mkfifo
 71

	)

134 
	#SYS_ª«me
 72

	)

135 
	#SYS_ac˚ss
 73

	)

137 
	#SYS_chdú
 74

	)

138 
	#SYS_fchdú
 75

	)

139 
	#SYS___gëcwd
 76

	)

141 
	#SYS_symlök
 77

	)

142 
	#SYS_ªadlök
 78

	)

144 
	#SYS_mou¡
 79

	)

145 
	#SYS_unmou¡
 80

	)

149 
	#SYS_°©
 81

	)

150 
	#SYS_f°©
 82

	)

151 
	#SYS_l°©
 83

	)

153 
	#SYS_utimes
 84

	)

154 
	#SYS_futimes
 85

	)

155 
	#SYS_lutimes
 86

	)

157 
	#SYS_chmod
 87

	)

158 
	#SYS_chown
 88

	)

159 
	#SYS_fchmod
 89

	)

160 
	#SYS_fchown
 90

	)

161 
	#SYS_lchmod
 91

	)

162 
	#SYS_lchown
 92

	)

172 
	#SYS_sockë
 98

	)

173 
	#SYS_böd
 99

	)

174 
	#SYS_c⁄√˘
 100

	)

175 
	#SYS_li°í
 101

	)

176 
	#SYS_ac˚±
 102

	)

178 
	#SYS_shutdown
 104

	)

179 
	#SYS_gësock«me
 105

	)

180 
	#SYS_gë≥î«me
 106

	)

181 
	#SYS_gësock›t
 107

	)

182 
	#SYS_£tsock›t
 108

	)

189 
	#SYS___time
 113

	)

190 
	#SYS___£âime
 114

	)

191 
	#SYS_«no¶ìp
 115

	)

196 
	#SYS_sync
 118

	)

197 
	#SYS_ªboŸ
 119

	)

	@os161/kern/include/kern/time.h

30 #i‚de‡
_KERN_TIME_H_


31 
	#_KERN_TIME_H_


	)

43 
	stimevÆ
 {

44 
__time_t
 
	mtv_£c
;

45 
__i32
 
	mtv_u£c
;

48 
	stime•ec
 {

49 
__time_t
 
	mtv_£c
;

50 
__i32
 
	mtv_n£c
;

59 
	#ITIMER_REAL
 0

	)

60 
	#ITIMER_VIRTUAL
 1

	)

61 
	#ITIMER_PROF
 2

	)

64 
	sôimîvÆ
 {

65 
timevÆ
 
	mô_öãrvÆ
;

66 
timevÆ
 
	mô_vÆue
;

	@os161/kern/include/kern/types.h

30 #i‚de‡
_KERN_TYPES_H_


31 
	#_KERN_TYPES_H_


	)

34 
	~<kîn/machöe/ty≥s.h
>

64 
__u32
 
	t__blk˙t_t
;

65 
__u32
 
	t__blksize_t
;

66 
__u64
 
	t__cou¡î_t
;

67 
__u32
 
	t__daddr_t
;

68 
__u32
 
	t__dev_t
;

69 
__u32
 
	t__fsid_t
;

70 
__i32
 
	t__gid_t
;

71 
__u32
 
	t__ö_addr_t
;

72 
__u32
 
	t__ö_p‹t_t
;

73 
__u32
 
	t__öo_t
;

74 
__u32
 
	t__mode_t
;

75 
__u16
 
	t__∆ök_t
;

76 
__i64
 
	t__off_t
;

77 
__i32
 
	t__pid_t
;

78 
__u64
 
	t__æim_t
;

79 
__u8
 
	t__ß_Ámûy_t
;

80 
__i64
 
	t__time_t
;

81 
__i32
 
	t__uid_t
;

83 
	t__nfds_t
;

84 
	t__sockÀn_t
;

87 #ifde‡
__GNUC__


88 
__buûtö_va_li°
 
	t__va_li°
;

	@os161/kern/include/kern/unistd.h

30 #i‚de‡
_KERN_UNISTD_H_


31 
	#_KERN_UNISTD_H_


	)

34 
	#STDIN_FILENO
 0

	)

35 
	#STDOUT_FILENO
 1

	)

36 
	#STDERR_FILENO
 2

	)

	@os161/kern/include/kern/wait.h

30 #i‚de‡
_KERN_WAIT_H_


31 
	#_KERN_WAIT_H_


	)

39 
	#WNOHANG
 1

	)

40 
	#WUNTRACED
 2

	)

43 
	#WAIT_ANY
 (-1Ë

	)

44 
	#WAIT_MYPGRP
 0

	)

54 
	#_WWHAT
(
x
Ë((x)&3Ë

	)

55 
	#_WVAL
(
x
Ë((x)>>2Ë

	)

56 
	#_MKWVAL
(
x
Ë((x)<<2Ë

	)

59 
	#__WEXITED
 0

	)

60 
	#__WSIGNALED
 1

	)

61 
	#__WCORED
 2

	)

62 
	#__WSTOPPED
 3

	)

65 
	#WIFEXITED
(
x
Ë(
	`_WWHAT
(x)==
__WEXITED
)

	)

66 
	#WIFSIGNALED
(
x
Ë(
	`_WWHAT
(x)==
__WSIGNALED
 || _WWHAT(x)==
__WCORED
)

	)

67 
	#WIFSTOPPED
(
x
Ë(
	`_WWHAT
(x)==
__WSTOPPED
)

	)

68 
	#WEXITSTATUS
(
x
Ë(
	`_WVAL
(x))

	)

69 
	#WTERMSIG
(
x
Ë(
	`_WVAL
(x))

	)

70 
	#WSTOPSIG
(
x
Ë(
	`_WVAL
(x))

	)

71 
	#WCOREDUMP
(
x
Ë(
	`_WWHAT
(x)==
__WCORED
)

	)

74 
	#_MKWAIT_EXIT
(
x
Ë(
	`_MKWVAL
(x)|
__WEXITED
)

	)

75 
	#_MKWAIT_SIG
(
x
Ë(
	`_MKWVAL
(x)|
__WSIGNALED
)

	)

76 
	#_MKWAIT_CORE
(
x
Ë(
	`_MKWVAL
(x)|
__WCORED
)

	)

77 
	#_MKWAIT_STOP
(
x
Ë(
	`_MKWVAL
(x)|
__WSTOPPED
)

	)

	@os161/kern/include/lib.h

30 #i‚de‡
_LIB_H_


31 
	#_LIB_H_


	)

41 
	~<cdefs.h
>

60 
	~"›t-nﬂs£πs.h
"

62 #i‡
OPT_NOASSERTS


63 
	#KASSERT
(
ex¥
Ë(()”x¥))

	)

65 
	#KASSERT
(
ex¥
) \

66 ((
ex¥
Ë? ()0 : 
	`badas£π
(#ex¥, 
__FILE__
, 
__LINE__
, 
__func__
))

	)

70 
	#DEBUGASSERT
(
ex¥
Ë(()”x¥))

	)

72 
	#DEBUGASSERT
(
ex¥
) \

73 ((
ex¥
Ë? ()0 : 
	`badas£π
(#ex¥, 
__FILE__
, 
__LINE__
, 
__func__
))

	)

79 
	#DB_LOCORE
 0x0001

	)

80 
	#DB_SYSCALL
 0x0002

	)

81 
	#DB_INTERRUPT
 0x0004

	)

82 
	#DB_DEVICE
 0x0008

	)

83 
	#DB_THREADS
 0x0010

	)

84 
	#DB_VM
 0x0020

	)

85 
	#DB_EXEC
 0x0040

	)

86 
	#DB_VFS
 0x0080

	)

87 
	#DB_SFS
 0x0100

	)

88 
	#DB_NET
 0x0200

	)

89 
	#DB_NETFS
 0x0400

	)

90 
	#DB_KMALLOC
 0x0800

	)

91 
	#DB_SYNCPROB
 0x1000

	)

93 
uöt32_t
 
dbÊags
;

111 
	#DEBUG
(
d
, ...Ë((
dbÊags
 & (d)Ë? 
	`k¥ötf
(
__VA_ARGS__
Ë: 0)

	)

118 
	#RANDOM_MAX
 (
	`øndmax
())

	)

119 
uöt32_t
 
øndmax
();

120 
uöt32_t
 
øndom
();

126 *
kmÆloc
(
size_t
 
size
);

127 
k‰ì
(*
±r
);

128 
khóp_¥öt°©s
();

136 
size_t
 
°æí
(c⁄° *
°r
);

137 
°rcmp
(c⁄° *
°r1
, c⁄° *
°r2
);

138 *
°r˝y
(*
de°
, c⁄° *
§c
);

139 *
°rˇt
(*
de°
, c⁄° *
§c
);

140 *
k°rdup
(c⁄° *
°r
);

141 *
°rchr
(c⁄° *
£¨ched
, 
£¨chf‹
);

142 *
°ºchr
(c⁄° *
£¨ched
, 
£¨chf‹
);

143 *
°πok_r
(*
buf
, c⁄° *
£ps
, **
c⁄ãxt
);

145 *
mem˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
Àn
);

146 *
memmove
(*
de°
, c⁄° *
§c
, 
size_t
 
Àn
);

147 
bzîo
(*
±r
, 
size_t
 
Àn
);

148 
©oi
(c⁄° *
°r
);

150 
	$¢¥ötf
(*
buf
, 
size_t
 
maxÀn
, c⁄° *
fmt
, ...Ë
	`__PF
(3,4);

152 c⁄° *
	`°ªº‹
(
îrcode
);

161 
	`putch
(
ch
);

162 
	`putch_¥ï¨e
();

163 
	`putch_com∂ëe
();

164 
	`gëch
();

165 
	`bìp
();

180 
	$k¥ötf
(c⁄° *
f‹m©
, ...Ë
	`__PF
(1,2);

181 
	$∑nic
(c⁄° *
f‹m©
, ...Ë
	`__PF
(1,2);

182 
	`badas£π
(c⁄° *
ex¥
, c⁄° *
fûe
, 
löe
, c⁄° *
func
);

184 
	`kgës
(*
buf
, 
size_t
 
maxbuÊí
);

186 
	`k¥ötf_boŸ°øp
();

192 
	#DIVROUNDUP
(
a
,
b
Ë((◊)+(b)-1)/(b))

	)

193 
	#ROUNDUP
(
a
,
b
Ë(
	`DIVROUNDUP
◊,b)*b)

	)

	@os161/kern/include/limits.h

30 #i‚de‡
_LIMITS_H_


31 
	#_LIMITS_H_


	)

38 
	~<kîn/limôs.h
>

41 
	#NAME_MAX
 
__NAME_MAX


	)

42 
	#PATH_MAX
 
__PATH_MAX


	)

43 
	#ARG_MAX
 
__ARG_MAX


	)

44 
	#PID_MIN
 
__PID_MIN


	)

45 
	#PID_MAX
 
__PID_MAX


	)

46 
	#PIPE_BUF
 
__PIPE_BUF


	)

47 
	#NGROUPS_MAX
 
__NGROUPS_MAX


	)

48 
	#LOGIN_NAME_MAX
 
__LOGIN_NAME_MAX


	)

49 
	#OPEN_MAX
 
__OPEN_MAX


	)

50 
	#IOV_MAX
 
__IOV_MAX


	)

	@os161/kern/include/mainbus.h

30 #i‚de‡
_MAINBUS_H_


31 
	#_MAINBUS_H_


	)

38 
	g˝u
;

39 
	gå≠‰ame
;

43 
maöbus_boŸ°øp
();

46 
maöbus_°¨t_˝us
();

49 
maöbus_öãºu±
(
å≠‰ame
 *);

53 
size_t
 
maöbus_ømsize
();

56 
maöbus_£nd_ùi
(
˝u
 *
èrgë
);

64 
maöbus_hÆt
();

65 
maöbus_powîoff
();

66 
maöbus_ªboŸ
();

67 
maöbus_∑nic
();

	@os161/kern/include/proc.h

30 #i‚de‡
_PROC_H_


31 
	#_PROC_H_


	)

39 
	~<•ölock.h
>

40 
	~<thªad.h
>

42 
	gaddr•a˚
;

43 
	gvnode
;

44 #ifde‡
UW


45 
	g£m≠h‹e
;

51 
	s¥oc
 {

52 *
	mp_«me
;

53 
•ölock
 
	mp_lock
;

54 
thªad¨øy
 
	mp_thªads
;

57 
addr•a˚
 *
	mp_addr•a˚
;

60 
vnode
 *
	mp_cwd
;

62 #ifde‡
UW


68 
vnode
 *
	mc⁄sﬁe
;

75 
¥oc
 *
k¥oc
;

78 #ifde‡
UW


79 
£m≠h‹e
 *
no_¥oc_£m
;

83 
¥oc_boŸ°øp
();

86 
¥oc
 *
¥oc_¸óã_ru≈rogøm
(c⁄° *
«me
);

89 
¥oc_de°roy
(
¥oc
 *proc);

92 
¥oc_addthªad
(
¥oc
 *¥oc, 
thªad
 *
t
);

95 
¥oc_ªmthªad
(
thªad
 *
t
);

98 
addr•a˚
 *
cuΩroc_gëas
();

101 
addr•a˚
 *
cuΩroc_£ès
(addrspace *);

	@os161/kern/include/queue.h

1 #i‚de‡
_QUEUE_H_


2 
	#_QUEUE_H_


	)

26 
	gqueue
;

28 
queue
 *
q_¸óã
(
size
);

29 
q_¥óŒoˇã
(
queue
 *, 
size
);

30 
q_em±y
(
queue
 *);

31 
q_addèû
(
queue
 *, *
±r
);

32 *
q_ªmhód
(
queue
 *);

33 
q_de°roy
(
queue
 *);

34 *
q_≥ek
(
queue
 *
q
);

35 
q_Àn
(
queue
 *
theq
);

57 
q_gë°¨t
(
queue
 *);

58 
q_gëíd
(
queue
 *);

59 
q_gësize
(
queue
 *);

60 *
q_gëguy
(
queue
 *, 
ödex
);

	@os161/kern/include/setjmp.h

30 #i‚de‡
_SETJMP_H_


31 
	#_SETJMP_H_


	)

38 
	~<kîn/machöe/£tjmp.h
>

40 
£tjmp
(
jmp_buf
 
jb
);

41 
l⁄gjmp
(
jmp_buf
 
jb
, 
ªtvÆ
);

	@os161/kern/include/sfs.h

30 #i‚de‡
_SFS_H_


31 
	#_SFS_H_


	)

42 
	~<fs.h
>

43 
	~<vnode.h
>

49 
	~<kîn/sfs.h
>

51 
	ssfs_vnode
 {

52 
vnode
 
	msv_v
;

53 
sfs_öode
 
	msv_i
;

54 
uöt32_t
 
	msv_öo
;

55 
boﬁ
 
	msv_dúty
;

58 
	ssfs_fs
 {

59 
fs
 
	msfs_absfs
;

60 
sfs_su≥r
 
	msfs_su≥r
;

61 
boﬁ
 
	msfs_su≥rdúty
;

62 
devi˚
 *
	msfs_devi˚
;

63 
vnodóºay
 *
	msfs_vnodes
;

64 
bôm≠
 *
	msfs_‰ìm≠
;

65 
boﬁ
 
	msfs_‰ìm≠dúty
;

71 
sfs_mou¡
(c⁄° *
devi˚
);

79 
	#SFSUIO
(
iov
, 
uio
, 
±r
, 
block
, 
rw
) \

80 
	`uio_köô
(
iov
, 
uio
, 
±r
, 
SFS_BLOCKSIZE
, ((
off_t
)(
block
))*SFS_BLOCKSIZE, 
rw
)

	)

83 
sfs_rwblock
(
sfs_fs
 *
sfs
, 
uio
 *uio);

84 
sfs_rblock
(
sfs_fs
 *
sfs
, *
d©a
, 
uöt32_t
 
block
);

85 
sfs_wblock
(
sfs_fs
 *
sfs
, *
d©a
, 
uöt32_t
 
block
);

88 
vnode
 *
sfs_gëroŸ
(
fs
 *fs);

	@os161/kern/include/signal.h

30 #i‚de‡
_SIGNAL_H_


31 
	#_SIGNAL_H_


	)

35 
	~<kîn/machöe/sig«l.h
>

36 
	~<kîn/sig«l.h
>

	@os161/kern/include/spinlock.h

30 #i‚de‡
_SPINLOCK_H_


31 
	#_SPINLOCK_H_


	)

38 
	~<cdefs.h
>

41 #i‚de‡
SPINLOCK_INLINE


42 
	#SPINLOCK_INLINE
 
INLINE


	)

46 
	~<machöe/•ölock.h
>

57 
	s•ölock
 {

58 vﬁ©ûê
•ölock_d©a_t
 
	mlk_lock
;

59 
˝u
 *
	mlk_hﬁdî
;

65 
	#SPINLOCK_INITIALIZER
 { 
SPINLOCK_DATA_INITIALIZER
, 
NULL
 }

	)

79 
•ölock_öô
(
•ölock
 *
lk
);

80 
•ölock_˛ónup
(
•ölock
 *
lk
);

82 
•ölock_acquúe
(
•ölock
 *
lk
);

83 
•ölock_ªÀa£
(
•ölock
 *
lk
);

85 
boﬁ
 
•ölock_do_i_hﬁd
(
•ölock
 *
lk
);

	@os161/kern/include/spl.h

30 #i‚de‡
_SPL_H_


31 
	#_SPL_H_


	)

33 
	~<cdefs.h
>

65 
•l0
();

66 
•lhigh
();

67 
•lx
();

72 
	#IPL_NONE
 0

	)

73 
	#IPL_HIGH
 1

	)

84 
•Ãai£
(
ﬁdùl
, 
√wùl
);

85 
•Œowî
(
ﬁdùl
, 
√wùl
);

90 #i‚de‡
SPL_INLINE


91 
	#SPL_INLINE
 
INLINE


	)

94 
SPL_INLINE


96 
	$•l0
()

98  
	`•lx
(
IPL_NONE
);

99 
	}
}

101 
SPL_INLINE


103 
	$•lhigh
()

105  
	`•lx
(
IPL_HIGH
);

106 
	}
}

	@os161/kern/include/stat.h

30 #i‚de‡
_STAT_H_


31 
	#_STAT_H_


	)

34 
	~<kîn/°©.h
>

37 
	~<kîn/°©ty≥s.h
>

40 
	#S_IFMT
 
_S_IFMT


	)

41 
	#S_IFREG
 
_S_IFREG


	)

42 
	#S_IFDIR
 
_S_IFDIR


	)

43 
	#S_IFLNK
 
_S_IFLNK


	)

44 
	#S_IFIFO
 
_S_IFIFO


	)

45 
	#S_IFSOCK
 
_S_IFSOCK


	)

46 
	#S_IFCHR
 
_S_IFCHR


	)

47 
	#S_IFBLK
 
_S_IFBLK


	)

	@os161/kern/include/stdarg.h

30 #i‚de‡
_STDARG_H_


31 
	#_STDARG_H_


	)

35 
	~<cdefs.h
>

43 #ifde‡
__GNUC__


44 
__va_li°
 
	tva_li°
;

46 
	#va_°¨t
(
≠
, 
fmt
Ë
	`__buûtö_°d¨g_°¨t
◊p, fmt)

	)

47 
	#va_¨g
(
≠
,
t
Ë
	`__buûtö_va_¨g
◊p,Å)

	)

48 
	#va_c›y
(
≠1
, 
≠2
Ë
	`__buûtö_va_c›y
◊p1,áp2)

	)

49 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

59 
	$vk¥ötf
(c⁄° *
fmt
, 
va_li°
 
≠
Ë
	`__PF
(1,0);

60 
	$v¢¥ötf
(*
buf
, 
size_t
 
maxÀn
, c⁄° *
fmt
, 
va_li°
 
≠
Ë
	`__PF
(3,0);

69 
	`__v¥ötf
((*
func
)(*
˛õ¡d©a
, c⁄° *
°r
, 
size_t
 
Àn
),

70 *
˛õ¡d©a
, c⁄° *
f‹m©
, 
va_li°
 
≠
Ë
	`__PF
(3,0);

	@os161/kern/include/synch.h

30 #i‚de‡
_SYNCH_H_


31 
	#_SYNCH_H_


	)

38 
	~<•ölock.h
>

46 
	s£m≠h‹e
 {

47 *
	m£m_«me
;

48 
wch™
 *
	m£m_wch™
;

49 
•ölock
 
	m£m_lock
;

50 vﬁ©ûê
	m£m_cou¡
;

53 
£m≠h‹e
 *
£m_¸óã
(c⁄° *
«me
, 
öôül_cou¡
);

54 
£m_de°roy
(
£m≠h‹e
 *);

62 
P
(
£m≠h‹e
 *);

63 
V
(
£m≠h‹e
 *);

75 
	slock
 {

76 *
	mlk_«me
;

77 
wch™
 *
	mlk_wch™
;

78 
•ölock
 
	mlk_lock
;

80 vﬁ©ûê
boﬁ
 
	mhñd
;

81 vﬁ©ûê
thªad
 *
	mhﬁdî
;

86 
lock
 *
lock_¸óã
(c⁄° *
«me
);

87 
lock_acquúe
(
lock
 *);

100 
lock_ªÀa£
(
lock
 *);

101 
boﬁ
 
lock_do_i_hﬁd
(
lock
 *);

102 
lock_de°roy
(
lock
 *);

119 
	scv
 {

120 *
	mcv_«me
;

121 
wch™
 *
	mcv_wch™
;

126 
cv
 *
cv_¸óã
(c⁄° *
«me
);

127 
cv_de°roy
(
cv
 *);

142 
cv_waô
(
cv
 *cv, 
lock
 *lock);

143 
cv_sig«l
(
cv
 *cv, 
lock
 *lock);

144 
cv_brﬂdˇ°
(
cv
 *cv, 
lock
 *lock);

	@os161/kern/include/synchprobs.h

1 #i‚de‡
_SYNCHPROBS_H_


2 
	#_SYNCHPROBS_H_


	)

6 
ˇt_bef‹e_ótög
(
bowl
);

7 
ˇt_a·î_ótög
(
bowl
);

8 
mou£_bef‹e_ótög
(
bowl
);

9 
mou£_a·î_ótög
(
bowl
);

10 
ˇtmou£_sync_öô
(
bowls
);

11 
ˇtmou£_sync_˛ónup
(
bowls
);

	@os161/kern/include/syscall.h

30 #i‚de‡
_SYSCALL_H_


31 
	#_SYSCALL_H_


	)

34 
	gå≠‰ame
;

40 
sysˇŒ
(
å≠‰ame
 *
tf
);

47 
íãr_f‹ked_¥o˚ss
(
å≠‰ame
 *
tf
);

50 
íãr_√w_¥o˚ss
(
¨gc
, 
u£Ωå_t
 
¨gv
, 
vaddr_t
 
°ack±r
,

51 
vaddr_t
 
íåypoöt
);

58 
sys_ªboŸ
(
code
);

59 
sys___time
(
u£Ωå_t
 
u£r_£c⁄ds
, u£Ωå_à
u£r_«no£c⁄ds
);

61 #ifde‡
UW


62 
sys_wrôe
(
fdesc
,
u£Ωå_t
 
ubuf
,
nbyãs
,*
ªtvÆ
);

63 
sys__exô
(
exôcode
);

64 
sys_gëpid
(
pid_t
 *
ªtvÆ
);

65 
sys_waôpid
(
pid_t
 
pid
, 
u£Ωå_t
 
°©us
, 
›ti⁄s
,Öid_à*
ªtvÆ
);

	@os161/kern/include/test.h

30 #i‚de‡
_TEST_H_


31 
	#_TEST_H_


	)

40 
whÆem©ög
(, **);

42 #ifde‡
UW


43 
ˇtmou£
(, **);

51 
¨øyã°
(, **);

52 
bôm≠ã°
(, **);

53 
queuëe°
(, **);

56 
thªadã°
(, **);

57 
thªadã°2
(, **);

58 
thªadã°3
(, **);

59 
£mã°
(, **);

60 
lockã°
(, **);

61 
cvã°
(, **);

64 
digôThªadTe°
(, **);

65 
unß„thªadcou¡î
(, **);

66 
lockthªadcou¡î
(, **);

67 
•ölockthªadcou¡î
(, **);

68 * 
gë¨gumíts
(, **);

69 #ifde‡
UW


71 
uwlockã°1
(, **);

73 
uwvm°©°e°
(, **);

77 
f°e°
(, **);

78 
ªad°ªss
(, **);

79 
wrôe°ªss
(, **);

80 
wrôe°ªss2
(, **);

81 
¸óã°ªss
(, **);

82 
¥ötfûe
(, **);

85 
mÆlo˘e°
(, **);

86 
mÆloc°ªss
(, **);

87 
√âe°
(, **);

90 
ru≈rogøm
(*
¥og«me
);

93 
míu
(*
¨g°r
);

96 
kmaö
(*
boŸ°rög
);

99 
hñlo
();

100 
¥ötLöe
(, **);

	@os161/kern/include/thread.h

30 #i‚de‡
_THREAD_H_


31 
	#_THREAD_H_


	)

39 
	~<¨øy.h
>

40 
	~<•ölock.h
>

41 
	~<thªadli°.h
>

43 
	g˝u
;

46 
	~<machöe/thªad.h
>

50 
	#STACK_SIZE
 4096

	)

53 
	#STACK_MASK
 (~(
vaddr_t
)(
STACK_SIZE
-1))

	)

56 
	#SAME_STACK
(
p1
, 
p2
Ë((’1Ë& 
STACK_MASK
Ë=(’2Ë& STACK_MASK))

	)

61 
	mS_RUN
,

62 
	mS_READY
,

63 
	mS_SLEEP
,

64 
	mS_ZOMBIE
,

65 } 
	tthªad°©e_t
;

68 
	sthªad
 {

73 *
	mt_«me
;

74 c⁄° *
	mt_wch™_«me
;

75 
thªad°©e_t
 
	mt_°©e
;

80 
thªad_machdï
 
	mt_machdï
;

81 
thªadli°node
 
	mt_li°node
;

82 *
	mt_°ack
;

83 
swôch‰ame
 *
	mt_c⁄ãxt
;

84 
˝u
 *
	mt_˝u
;

85 
¥oc
 *
	mt_¥oc
;

100 
boﬁ
 
	mt_ö_öãºu±
;

101 
	mt_cur•l
;

102 
	mt_ùlhigh_cou¡
;

114 #i‚de‡
THREADINLINE


115 
	#THREADINLINE
 
INLINE


	)

118 
DECLARRAY
(
thªad
);

119 
DEFARRAY
(
thªad
, 
THREADINLINE
);

122 
thªad_boŸ°øp
();

125 
thªad_°¨t_˝us
();

128 
thªad_∑nic
();

131 
thªad_shutdown
();

143 
thªad_f‹k
(c⁄° *
«me
, 
¥oc
 *proc,

144 (*
func
)(*, ),

145 *
d©a1
, 
d©a2
);

151 
	`thªad_exô
();

158 
	`thªad_yõld
();

163 
	`scheduÀ
();

169 
	`thªad_c⁄sidî_migøti⁄
();

	@os161/kern/include/threadlist.h

30 #i‚de‡
_THREADLIST_H_


31 
	#_THREADLIST_H_


	)

34 
	gthªad
;

53 
	sthªadli°node
 {

54 
thªadli°node
 *
	mén_¥ev
;

55 
thªadli°node
 *
	mén_√xt
;

56 
thªad
 *
	mén_£lf
;

59 
	sthªadli°
 {

60 
thªadli°node
 
	mé_hód
;

61 
thªadli°node
 
	mé_èû
;

62 
	mé_cou¡
;

66 
thªadli°node_öô
(
thªadli°node
 *
én
, 
thªad
 *
£lf
);

67 
thªadli°node_˛ónup
(
thªadli°node
 *
én
);

70 
thªadli°_öô
(
thªadli°
 *
é
);

71 
thªadli°_˛ónup
(
thªadli°
 *
é
);

74 
boﬁ
 
thªadli°_i£m±y
(
thªadli°
 *
é
);

77 
thªadli°_addhód
(
thªadli°
 *
é
, 
thªad
 *
t
);

78 
thªadli°_addèû
(
thªadli°
 *
é
, 
thªad
 *
t
);

79 
thªad
 *
thªadli°_ªmhód
(
thªadli°
 *
é
);

80 
thªad
 *
thªadli°_ªmèû
(
thªadli°
 *
é
);

83 
thªadli°_ö£πa·î
(
thªadli°
 *
é
,

84 
thªad
 *
⁄li°
, thªad *
addì
);

85 
thªadli°_ö£πbef‹e
(
thªadli°
 *
é
,

86 
thªad
 *
addì
, thªad *
⁄li°
);

87 
thªadli°_ªmove
(
thªadli°
 *
é
, 
thªad
 *
t
);

90 
	#THREADLIST_FORALL
(
ôîv¨
, 
é
) \

91 (
ôîv¨
Ë(
é
).
é_hód
.
én_√xt
->
én_£lf
; \

92 (
ôîv¨
)->
t_li°node
.
én_√xt
 !
NULL
; \

93 (
ôîv¨
Ë(ôîv¨)->
t_li°node
.
én_√xt
->
én_£lf
)

	)

95 
	#THREADLIST_FORALL_REV
(
ôîv¨
, 
é
) \

96 (
ôîv¨
Ë(
é
).
é_èû
.
én_¥ev
->
én_£lf
; \

97 (
ôîv¨
)->
t_li°node
.
én_¥ev
 !
NULL
; \

98 (
ôîv¨
Ë(ôîv¨)->
t_li°node
.
én_¥ev
->
én_£lf
)

	)

	@os161/kern/include/threadprivate.h

30 #i‚de‡
_THREADPRIVATE_H_


31 
	#_THREADPRIVATE_H_


	)

33 
	gthªad
;

34 
	gthªad_machdï
;

35 
	gswôch‰ame
;

55 
thªad_°¨tup
((*
íåypoöt
)(*
d©a1
, 
d©a2
),

56 *
d©a1
, 
d©a2
);

59 
	`thªad_machdï_öô
(
thªad_machdï
 *
tm
);

60 
	`thªad_machdï_˛ónup
(
thªad_machdï
 *
tm
);

70 
	`swôch‰ame_swôch
(
swôch‰ame
 **
¥ev
, swôch‰amê**
√xt
);

73 
	`swôch‰ame_öô
(
thªad
 *,

74 (*
íåypoöt
)(*
d©a1
, 
d©a2
),

75 *
d©a1
, 
d©a2
);

	@os161/kern/include/types.h

30 #i‚de‡
_TYPES_H_


31 
	#_TYPES_H_


	)

80 
	~<kîn/ty≥s.h
>

83 
	~<machöe/ty≥s.h
>

90 
	s__u£Ωå
 { 
	m_dummy
; };

91 
__u£Ωå
 *
	tu£Ωå_t
;

92 c⁄° 
	t__u£Ωå
 *
	tc⁄°_u£Ωå_t
;

100 
__i8
 
	töt8_t
;

101 
__i16
 
	töt16_t
;

102 
__i32
 
	töt32_t
;

103 
__i64
 
	töt64_t
;

104 
__u8
 
	tuöt8_t
;

105 
__u16
 
	tuöt16_t
;

106 
__u32
 
	tuöt32_t
;

107 
__u64
 
	tuöt64_t
;

108 
__size_t
 
	tsize_t
;

109 
__ssize_t
 
	tssize_t
;

110 
__öçå_t
 
	töçå_t
;

111 
__uöçå_t
 
	tuöçå_t
;

112 
__±rdiff_t
 
	t±rdiff_t
;

115 
__blk˙t_t
 
	tblk˙t_t
;

116 
__blksize_t
 
	tblksize_t
;

117 
__daddr_t
 
	tdaddr_t
;

118 
__dev_t
 
	tdev_t
;

119 
__fsid_t
 
	tfsid_t
;

120 
__gid_t
 
	tgid_t
;

121 
__ö_addr_t
 
	tö_addr_t
;

122 
__ö_p‹t_t
 
	tö_p‹t_t
;

123 
__öo_t
 
	töo_t
;

124 
__mode_t
 
	tmode_t
;

125 
__∆ök_t
 
	t∆ök_t
;

126 
__off_t
 
	toff_t
;

127 
__pid_t
 
	tpid_t
;

128 
__æim_t
 
	tæim_t
;

129 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

130 
__time_t
 
	ttime_t
;

131 
__uid_t
 
	tuid_t
;

133 
__nfds_t
 
	tnfds_t
;

134 
__sockÀn_t
 
	tsockÀn_t
;

140 
	#CHAR_BIT
 
__CHAR_BIT


	)

146 
	#NULL
 ((*)0)

	)

151 
_Boﬁ
 
	tboﬁ
;

152 
	#åue
 1

	)

153 
	#Ál£
 0

	)

	@os161/kern/include/uio.h

30 #i‚de‡
_UIO_H_


31 
	#_UIO_H_


	)

40 
	~<kîn/iovec.h
>

43 
	euio_rw
 {

44 
	mUIO_READ
,

45 
	mUIO_WRITE
,

49 
	euio_£g
 {

50 
	mUIO_USERISPACE
,

51 
	mUIO_USERSPACE
,

52 
	mUIO_SYSSPACE
,

55 
	suio
 {

56 
iovec
 *
	muio_iov
;

57 
	muio_iov˙t
;

58 
off_t
 
	muio_off£t
;

59 
size_t
 
	muio_ªsid
;

60 
uio_£g
 
	muio_£gÊg
;

61 
uio_rw
 
	muio_rw
;

62 
addr•a˚
 *
	muio_•a˚
;

100 
uiomove
(*
kbuf„r
, 
size_t
 
Àn
, 
uio
 *uio);

105 
uiomovezîos
(
size_t
 
Àn
, 
uio
 *uio);

119 
uio_köô
(
iovec
 *, 
uio
 *,

120 *
kbuf
, 
size_t
 
Àn
, 
off_t
 
pos
, 
uio_rw
 
rw
);

	@os161/kern/include/uw-vmstats.h

1 #i‚de‡
VM_STATS_H


2 
	#VM_STATS_H


	)

29 
	#VMSTAT_TLB_FAULT
 (0)

	)

30 
	#VMSTAT_TLB_FAULT_FREE
 (1)

	)

31 
	#VMSTAT_TLB_FAULT_REPLACE
 (2)

	)

32 
	#VMSTAT_TLB_INVALIDATE
 (3)

	)

33 
	#VMSTAT_TLB_RELOAD
 (4)

	)

34 
	#VMSTAT_PAGE_FAULT_ZERO
 (5)

	)

35 
	#VMSTAT_PAGE_FAULT_DISK
 (6)

	)

36 
	#VMSTAT_ELF_FILE_READ
 (7)

	)

37 
	#VMSTAT_SWAP_FILE_READ
 (8)

	)

38 
	#VMSTAT_SWAP_FILE_WRITE
 (9)

	)

39 
	#VMSTAT_COUNT
 (10)

	)

44 
vm°©s_öô
();

45 
_vm°©s_öô
();

52 
vm°©s_öc
(
ödex
);

53 
_vm°©s_öc
(
ödex
);

56 
vm°©s_¥öt
();

	@os161/kern/include/version.h

30 #i‚de‡
_VERSION_H_


31 
	#_VERSION_H_


	)

37 
	#BASE_VERSION
 "1.99.05"

	)

42 
	#GROUP_VERSION
 "0"

	)

	@os161/kern/include/vfs.h

30 #i‚de‡
_VFS_H_


31 
	#_VFS_H_


	)

34 
	~<¨øy.h
>

44 
	guio
;

45 
	gdevi˚
;

46 
	gfs
;

47 
	gvnode
;

62 
vfs_£tcurdú
(
vnode
 *
dú
);

63 
vfs_˛órcurdú
();

64 
vfs_gëcurdú
(
vnode
 **
ªtdú
);

65 
vfs_sync
();

66 
vfs_gëroŸ
(c⁄° *
dev«me
, 
vnode
 **
ªsu…
);

67 c⁄° *
vfs_gëdev«me
(
fs
 *fs);

80 
vfs_lookup
(*
∑th
, 
vnode
 **
ªsu…
);

81 
vfs_look∑ª¡
(*
∑th
, 
vnode
 **
ªsu…
,

82 *
buf
, 
size_t
 
buÊí
);

104 
vfs_›í
(*
∑th
, 
›íÊags
, 
mode_t
 
mode
, 
vnode
 **
ªt
);

105 
vfs_˛o£
(
vnode
 *
vn
);

106 
vfs_ªadlök
(*
∑th
, 
uio
 *
d©a
);

107 
vfs_symlök
(c⁄° *
c⁄ã¡s
, *
∑th
);

108 
vfs_mkdú
(*
∑th
, 
mode_t
 
mode
);

109 
vfs_lök
(*
ﬁd∑th
, *
√w∑th
);

110 
vfs_ªmove
(*
∑th
);

111 
vfs_rmdú
(*
∑th
);

112 
vfs_ª«me
(*
ﬁd∑th
, *
√w∑th
);

114 
vfs_chdú
(*
∑th
);

115 
vfs_gëcwd
(
uio
 *
buf
);

162 
vfs_boŸ°øp
();

164 
vfs_£tboŸfs
(c⁄° *
f¢ame
);

165 
vfs_˛órboŸfs
();

167 
vfs_adddev
(c⁄° *
dev«me
, 
devi˚
 *
dev
, 
mou¡abÀ
);

168 
vfs_addfs
(c⁄° *
dev«me
, 
fs
 *fs);

170 
vfs_mou¡
(c⁄° *
dev«me
, *
d©a
,

171 (*
mou¡func
)(*
d©a
,

172 
devi˚
 *
dev
,

173 
fs
 **
ªsu…
));

174 
	`vfs_unmou¡
(c⁄° *
dev«me
);

175 
	`vfs_unmou¡Æl
();

180 #i‚de‡
VFSINLINE


181 
	#VFSINLINE
 
INLINE


	)

184 
	`DECLARRAY
(
vnode
);

185 
	`DEFARRAY
(
vnode
, 
VFSINLINE
);

191 
	`vfs_biglock_acquúe
();

192 
	`vfs_biglock_ªÀa£
();

193 
boﬁ
 
	`vfs_biglock_do_i_hﬁd
();

	@os161/kern/include/vm.h

30 #i‚de‡
_VM_H_


31 
	#_VM_H_


	)

40 
	~<machöe/vm.h
>

43 
	#VM_FAULT_READ
 0

	)

44 
	#VM_FAULT_WRITE
 1

	)

45 
	#VM_FAULT_READONLY
 2

	)

49 
vm_boŸ°øp
();

52 
vm_Áu…
(
Áu…ty≥
, 
vaddr_t
 
Áu…addªss
);

55 
vaddr_t
 
Æloc_k∑ges
(
≈ages
);

56 
‰ì_k∑ges
(
vaddr_t
 
addr
);

59 
vm_ébshoŸdown_Æl
();

60 
vm_ébshoŸdown
(c⁄° 
ébshoŸdown
 *);

	@os161/kern/include/vnode.h

30 #i‚de‡
_VNODE_H_


31 
	#_VNODE_H_


	)

34 
	guio
;

35 
	g°©
;

54 
	svnode
 {

55 
	mvn_ªfcou¡
;

56 
	mvn_›ícou¡
;

58 
fs
 *
	mvn_fs
;

60 *
	mvn_d©a
;

62 c⁄° 
vnode_›s
 *
	mvn_›s
;

193 
	#VOP_MAGIC
 0xa2b3c4d5

	)

195 
	svnode_›s
 {

196 
	mv›_magic
;

198 (*
	mv›_›í
)(
vnode
 *
	mobje˘
, 
	mÊags_‰om_›í
);

199 (*
	mv›_˛o£
)(
vnode
 *
	mobje˘
);

200 (*
	mv›_ª˛aim
)(
vnode
 *
	mvnode
);

203 (*
	mv›_ªad
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

204 (*
	mv›_ªadlök
)(
vnode
 *
	mlök
, 
uio
 *
	muio
);

205 (*
	mv›_gëdúíåy
)(
vnode
 *
	mdú
, 
uio
 *
	muio
);

206 (*
	mv›_wrôe
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

207 (*
	mv›_io˘l
)(
vnode
 *
	mobje˘
, 
	m›
, 
u£Ωå_t
 
	md©a
);

208 (*
	mv›_°©
)(
vnode
 *
	mobje˘
, 
°©
 *
	m°©buf
);

209 (*
	mv›_gëty≥
)(
vnode
 *
	mobje˘
, 
mode_t
 *
	mªsu…
);

210 (*
	mv›_åy£ek
)(
vnode
 *
	mobje˘
, 
off_t
 
	mpos
);

211 (*
	mv›_fsync
)(
vnode
 *
	mobje˘
);

212 (*
	mv›_mm≠
)(
vnode
 *
	mfûe
 );

213 (*
	mv›_åunˇã
)(
vnode
 *
	mfûe
, 
off_t
 
	mÀn
);

214 (*
	mv›_«mefûe
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

217 (*
	mv›_¸ót
)(
vnode
 *
	mdú
,

218 c⁄° *
	m«me
, 
boﬁ
 
	mex˛
, 
mode_t
 
	mmode
,

219 
vnode
 **
	mªsu…
);

220 (*
	mv›_symlök
)(
vnode
 *
	mdú
,

221 c⁄° *
	mc⁄ã¡s
, c⁄° *
	m«me
);

222 (*
	mv›_mkdú
)(
vnode
 *
	m∑ª¡dú
,

223 c⁄° *
	m«me
, 
mode_t
 
	mmode
);

224 (*
	mv›_lök
)(
vnode
 *
	mdú
,

225 c⁄° *
	m«me
, 
vnode
 *
	mfûe
);

226 (*
	mv›_ªmove
)(
vnode
 *
	mdú
,

227 c⁄° *
	m«me
);

228 (*
	mv›_rmdú
)(
vnode
 *
	mdú
,

229 c⁄° *
	m«me
);

231 (*
	mv›_ª«me
)(
vnode
 *
	mvn1
, c⁄° *
	m«me1
,

232 
vnode
 *
	mvn2
, c⁄° *
	m«me2
);

235 (*
	mv›_lookup
)(
vnode
 *
	mdú
,

236 *
	m∑th«me
, 
vnode
 **
	mªsu…
);

237 (*
	mv›_look∑ª¡
)(
vnode
 *
	mdú
,

238 *
	m∑th«me
, 
vnode
 **
	mªsu…
,

239 *
	mbuf
, 
size_t
 
	mÀn
);

242 
	#__VOP
(
vn
, 
sym
Ë(
	`vnode_check
(vn, #sym), (vn)->
vn_›s
->
v›_
##sym)

	)

244 
	#VOP_OPEN
(
vn
, 
Êags
Ë(
	`__VOP
(vn, 
›í
)(vn, fœgs))

	)

245 
	#VOP_CLOSE
(
vn
Ë(
	`__VOP
(vn, 
˛o£
)(vn))

	)

246 
	#VOP_RECLAIM
(
vn
Ë(
	`__VOP
(vn, 
ª˛aim
)(vn))

	)

248 
	#VOP_READ
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
ªad
)(vn, uio))

	)

249 
	#VOP_READLINK
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
ªadlök
)(vn, uio))

	)

250 
	#VOP_GETDIRENTRY
(
vn
, 
uio
Ë(
	`__VOP
(vn,
gëdúíåy
)(vn, uio))

	)

251 
	#VOP_WRITE
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
wrôe
)(vn, uio))

	)

252 
	#VOP_IOCTL
(
vn
, 
code
, 
buf
Ë(
	`__VOP
(vn, 
io˘l
)(vn,code,buf))

	)

253 
	#VOP_STAT
(
vn
, 
±r
Ë(
	`__VOP
(vn, 
°©
)(vn,Öå))

	)

254 
	#VOP_GETTYPE
(
vn
, 
ªsu…
Ë(
	`__VOP
(vn, 
gëty≥
)(vn,Ñesu…))

	)

255 
	#VOP_TRYSEEK
(
vn
, 
pos
Ë(
	`__VOP
(vn, 
åy£ek
)(vn,Öos))

	)

256 
	#VOP_FSYNC
(
vn
Ë(
	`__VOP
(vn, 
fsync
)(vn))

	)

257 
	#VOP_MMAP
(
vn
 ) (
	`__VOP
(vn, 
mm≠
)(v¿ ))

	)

258 
	#VOP_TRUNCATE
(
vn
, 
pos
Ë(
	`__VOP
(vn, 
åunˇã
)(vn,Öos))

	)

259 
	#VOP_NAMEFILE
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
«mefûe
)(vn, uio))

	)

261 
	#VOP_CREAT
(
vn
,
nm
,
ex˛
,
mode
,
ªs
Ë(
	`__VOP
(vn, 
¸ót
)(vn,nm,ex˛,mode,ªs))

	)

262 
	#VOP_SYMLINK
(
vn
, 
«me
, 
c⁄ã¡
Ë(
	`__VOP
(vn, 
symlök
)(vn,Çame, c⁄ã¡))

	)

263 
	#VOP_MKDIR
(
vn
, 
«me
, 
mode
Ë(
	`__VOP
(vn, 
mkdú
)(vn,Çame, mode))

	)

264 
	#VOP_LINK
(
vn
, 
«me
, 
vn2
Ë(
	`__VOP
(vn, 
lök
)(vn,Çame, vn2))

	)

265 
	#VOP_REMOVE
(
vn
, 
«me
Ë(
	`__VOP
(vn, 
ªmove
)(vn,Çame))

	)

266 
	#VOP_RMDIR
(
vn
, 
«me
Ë(
	`__VOP
(vn, 
rmdú
)(vn,Çame))

	)

267 
	#VOP_RENAME
(
vn1
,
«me1
,
vn2
,
«me2
)(
	`__VOP
(vn1,
ª«me
)(vn1,«me1,vn2,«me2))

	)

269 
	#VOP_LOOKUP
(
vn
, 
«me
, 
ªs
Ë(
	`__VOP
(vn, 
lookup
)(vn,Çame,Ñes))

	)

270 
	#VOP_LOOKPARENT
(
vn
,
nm
,
ªs
,
bf
,
 
Ë(
	`__VOP
(vn,
look∑ª¡
)(vn,nm,ªs,bf, ))

	)

275 
vnode_check
(
vnode
 *, c⁄° *
›
);

280 
vnode_ö¸ef
(
vnode
 *);

281 
vnode_de¸ef
(
vnode
 *);

283 
	#VOP_INCREF
(
vn
Ë
	`vnode_ö¸ef
(vn)

	)

284 
	#VOP_DECREF
(
vn
Ë
	`vnode_de¸ef
(vn)

	)

292 
vnode_öc›í
(
vnode
 *);

293 
vnode_dec›í
(
vnode
 *);

295 
	#VOP_INCOPEN
(
vn
Ë
	`vnode_öc›í
(vn)

	)

296 
	#VOP_DECOPEN
(
vn
Ë
	`vnode_dec›í
(vn)

	)

302 
vnode_öô
(
vnode
 *, c⁄° 
vnode_›s
 *
›s
,

303 
fs
 *fs, *
fsd©a
);

305 
	#VOP_INIT
(
vn
, 
›s
, 
fs
, 
d©a
Ë
	`vnode_öô
(vn, ops, fs, d©a)

	)

311 
vnode_˛ónup
(
vnode
 *);

313 
	#VOP_CLEANUP
(
vn
Ë
	`vnode_˛ónup
(vn)

	)

	@os161/kern/include/wchan.h

30 #i‚de‡
_WCHAN_H_


31 
	#_WCHAN_H_


	)

38 
	gwch™
;

45 
wch™
 *
wch™_¸óã
(c⁄° *
«me
);

50 
wch™_de°roy
(
wch™
 *
wc
);

56 
boﬁ
 
wch™_i£m±y
(
wch™
 *
wc
);

61 
wch™_lock
(
wch™
 *
wc
);

62 
wch™_u∆ock
(
wch™
 *
wc
);

72 
wch™_¶ìp
(
wch™
 *
wc
);

81 
wch™_wake⁄e
(
wch™
 *
wc
);

82 
wch™_wakóŒ
(
wch™
 *
wc
);

	@os161/kern/lib/array.c

30 
	#ARRAYINLINE


	)

32 
	~<ty≥s.h
>

33 
	~<kîn/î∫o.h
>

34 
	~<lib.h
>

35 
	~<¨øy.h
>

37 
¨øy
 *

38 
	$¨øy_¸óã
()

40 
¨øy
 *
a
;

42 
a
 = 
	`kmÆloc
((*a));

43 i‡(
a
 !
NULL
) {

44 
	`¨øy_öô
(
a
);

46  
a
;

47 
	}
}

50 
	$¨øy_de°roy
(
¨øy
 *
a
)

52 
	`¨øy_˛ónup
(
a
);

53 
	`k‰ì
(
a
);

54 
	}
}

57 
	$¨øy_öô
(
¨øy
 *
a
)

59 
a
->
num
 =á->
max
 = 0;

60 
a
->
v
 = 
NULL
;

61 
	}
}

64 
	$¨øy_˛ónup
(
¨øy
 *
a
)

71 
	`ARRAYASSERT
(
a
->
num
 == 0);

72 
	`k‰ì
(
a
->
v
);

73 #ifde‡
ARRAYS_CHECKED


74 
a
->
v
 = 
NULL
;

76 
	}
}

79 
	$¨øy_£tsize
(
¨øy
 *
a
, 
num
)

81 **
√w±r
;

82 
√wmax
;

84 i‡(
num
 > 
a
->
max
) {

86 
√wmax
 = 
a
->
max
;

87 
num
 > 
√wmax
) {

88 
√wmax
 =Çewmax ?Çewmax*2 : 4;

98 
√w±r
 = 
	`kmÆloc
(
√wmax
*(*
a
->
v
));

99 i‡(
√w±r
 =
NULL
) {

100  
ENOMEM
;

102 
	`mem˝y
(
√w±r
, 
a
->
v
,á->
num
*(*a->v));

103 
	`k‰ì
(
a
->
v
);

104 
a
->
v
 = 
√w±r
;

105 
a
->
max
 = 
√wmax
;

107 
a
->
num
 =Çum;

110 
	}
}

113 
	$¨øy_ªmove
(
¨øy
 *
a
, 
ödex
)

115 
num_to_move
;

117 
	`ARRAYASSERT
(
a
->
num
 <a->
max
);

118 
	`ARRAYASSERT
(
ödex
 < 
a
->
num
);

120 
num_to_move
 = 
a
->
num
 - (
ödex
 + 1);

121 
	`memmove
(
a
->
v
 + 
ödex
,á->v + index+1, 
num_to_move
*(*));

122 
a
->
num
--;

123 
	}
}

	@os161/kern/lib/bitmap.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<lib.h
>

37 
	~<bôm≠.h
>

46 
	#BITS_PER_WORD
 (
CHAR_BIT
)

	)

47 
	#WORD_TYPE
 

	)

48 
	#WORD_ALLBITS
 (0xff)

	)

50 
	sbôm≠
 {

51 
	mnbôs
;

52 
WORD_TYPE
 *
	mv
;

56 
bôm≠
 *

57 
	$bôm≠_¸óã
(
nbôs
)

59 
bôm≠
 *
b
;

60 
w‹ds
;

62 
w‹ds
 = 
	`DIVROUNDUP
(
nbôs
, 
BITS_PER_WORD
);

63 
b
 = 
	`kmÆloc
((
bôm≠
));

64 i‡(
b
 =
NULL
) {

65  
NULL
;

67 
b
->
v
 = 
	`kmÆloc
(
w‹ds
*(
WORD_TYPE
));

68 i‡(
b
->
v
 =
NULL
) {

69 
	`k‰ì
(
b
);

70  
NULL
;

73 
	`bzîo
(
b
->
v
, 
w‹ds
*(
WORD_TYPE
));

74 
b
->
nbôs
 =Çbits;

77 i‡(
w‹ds
 > 
nbôs
 / 
BITS_PER_WORD
) {

78 
j
, 
ix
 = 
w‹ds
-1;

79 
ovîbôs
 = 
nbôs
 - 
ix
*
BITS_PER_WORD
;

81 
	`KASSERT
(
nbôs
 / 
BITS_PER_WORD
 =
w‹ds
-1);

82 
	`KASSERT
(
ovîbôs
 > 0 && ovîbô†< 
BITS_PER_WORD
);

84 
j
=
ovîbôs
; j<
BITS_PER_WORD
; j++) {

85 
b
->
v
[
ix
] |((
WORD_TYPE
)1 << 
j
);

89  
b
;

90 
	}
}

93 
	$bôm≠_gëd©a
(
bôm≠
 *
b
)

95  
b
->
v
;

96 
	}
}

99 
	$bôm≠_Æloc
(
bôm≠
 *
b
, *
ödex
)

101 
ix
;

102 
maxix
 = 
	`DIVROUNDUP
(
b
->
nbôs
, 
BITS_PER_WORD
);

103 
off£t
;

105 
ix
=0; ix<
maxix
; ix++) {

106 i‡(
b
->
v
[
ix
]!=
WORD_ALLBITS
) {

107 
off£t
 = 0; off£à< 
BITS_PER_WORD
; offset++) {

108 
WORD_TYPE
 
mask
 = ((WORD_TYPE)1Ë<< 
off£t
;

110 i‡((
b
->
v
[
ix
] & 
mask
)==0) {

111 
b
->
v
[
ix
] |
mask
;

112 *
ödex
 = (
ix
*
BITS_PER_WORD
)+
off£t
;

113 
	`KASSERT
(*
ödex
 < 
b
->
nbôs
);

117 
	`KASSERT
(0);

120  
ENOSPC
;

121 
	}
}

124 
ölöe


126 
	$bôm≠_å™¶©e
(
bôno
, *
ix
, 
WORD_TYPE
 *
mask
)

128 
off£t
;

129 *
ix
 = 
bôno
 / 
BITS_PER_WORD
;

130 
off£t
 = 
bôno
 % 
BITS_PER_WORD
;

131 *
mask
 = ((
WORD_TYPE
)1Ë<< 
off£t
;

132 
	}
}

135 
	$bôm≠_m¨k
(
bôm≠
 *
b
, 
ödex
)

137 
ix
;

138 
WORD_TYPE
 
mask
;

140 
	`KASSERT
(
ödex
 < 
b
->
nbôs
);

141 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

143 
	`KASSERT
((
b
->
v
[
ix
] & 
mask
)==0);

144 
b
->
v
[
ix
] |
mask
;

145 
	}
}

148 
	$bôm≠_unm¨k
(
bôm≠
 *
b
, 
ödex
)

150 
ix
;

151 
WORD_TYPE
 
mask
;

153 
	`KASSERT
(
ödex
 < 
b
->
nbôs
);

154 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

156 
	`KASSERT
((
b
->
v
[
ix
] & 
mask
)!=0);

157 
b
->
v
[
ix
] &~
mask
;

158 
	}
}

162 
	$bôm≠_is£t
(
bôm≠
 *
b
, 
ödex
)

164 
ix
;

165 
WORD_TYPE
 
mask
;

167 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

168  (
b
->
v
[
ix
] & 
mask
);

169 
	}
}

172 
	$bôm≠_de°roy
(
bôm≠
 *
b
)

174 
	`k‰ì
(
b
->
v
);

175 
	`k‰ì
(
b
);

176 
	}
}

	@os161/kern/lib/bswap.c

30 
	~<ty≥s.h
>

31 
	~<ídün.h
>

46 
uöt16_t


47 
	$bsw≠16
(
uöt16_t
 
vÆ
)

49  ((
vÆ
 & 0x00ff) << 8)

50 | ((
vÆ
 & 0xff00) >> 8);

51 
	}
}

53 
uöt32_t


54 
	$bsw≠32
(
uöt32_t
 
vÆ
)

56  ((
vÆ
 & 0x000000ff) << 24)

57 | ((
vÆ
 & 0x0000ff00) << 8)

58 | ((
vÆ
 & 0x00ff0000) >> 8)

59 | ((
vÆ
 & 0xff000000) >> 24);

60 
	}
}

62 
uöt64_t


63 
	$bsw≠64
(
uöt64_t
 
vÆ
)

65  ((
vÆ
 & 0x00000000000000ff) << 56)

66 | ((
vÆ
 & 0x000000000000ff00) << 40)

67 | ((
vÆ
 & 0x0000000000ff0000) << 24)

68 | ((
vÆ
 & 0x00000000ff000000) << 8)

69 | ((
vÆ
 & 0x000000ff00000000) << 8)

70 | ((
vÆ
 & 0x0000ff0000000000) << 24)

71 | ((
vÆ
 & 0x00ff000000000000) >> 40)

72 | ((
vÆ
 & 0xff00000000000000) >> 56);

73 
	}
}

94 #i‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


95 
	#TO
(
èg
, 
bôs
, 
ty≥
) \

96 
ty≥
 
¡oh
##
	`èg
—y≥ 
vÆ
Ë{  
bsw≠
##
	`bôs
(val); } \

97 
ty≥
 
ht⁄
##
	`èg
—y≥ 
vÆ
Ë{  
bsw≠
##
	`bôs
(vÆ); }

	)

105 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


106 
	#TO
(
èg
, 
bôs
, 
ty≥
) \

107 
ty≥
 
¡oh
##
	`èg
—y≥ 
vÆ
) {  val; } \

108 
ty≥
 
ht⁄
##
	`èg
—y≥ 
vÆ
Ë{  vÆ; }

	)

111 #i‡
_BYTE_ORDER
 =
_PDP_ENDIAN


115 #i‚de‡
TO


119 
	$TO
(
s
, 16, 
uöt16_t
)

120 
	$TO
(
l
, 32, 
uöt32_t
)

121 
	$TO
(
Œ
, 64, 
uöt64_t
)

138 
	$joö32to64
(
uöt32_t
 
x1
, uöt32_à
x2
, 
uöt64_t
 *
y2
)

140 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


141 *
y2
 = ((
uöt64_t
)
x1
 << 32Ë| (uöt64_t)
x2
;

142 #ñi‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


143 *
y2
 = (
uöt64_t
)
x1
 | ((uöt64_t)
x2
 << 32);

147 
	}
}

150 
	$•lô64to32
(
uöt64_t
 
x
, 
uöt32_t
 *
y1
, uöt32_à*
y2
)

152 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


153 *
y1
 = 
x
 >> 32;

154 *
y2
 = 
x
 & 0xffffffff;

155 #ñi‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


156 *
y1
 = 
x
 & 0xffffffff;

157 *
y2
 = 
x
 >> 32;

161 
	}
}

	@os161/kern/lib/kgets.c

31 
	~<ty≥s.h
>

32 
	~<lib.h
>

41 
	$back•
()

43 
	`putch
('\b');

44 
	`putch
(' ');

45 
	`putch
('\b');

46 
	}
}

54 
	$kgës
(*
buf
, 
size_t
 
maxÀn
)

56 
size_t
 
pos
 = 0;

57 
ch
;

60 
ch
 = 
	`gëch
();

61 i‡(
ch
=='\n' || ch=='\r') {

62 
	`putch
('\n');

67 i‡(
ch
>=32 && ch<127 && 
pos
 < 
maxÀn
-1) {

68 
	`putch
(
ch
);

69 
buf
[
pos
++] = 
ch
;

71 i‡((
ch
=='\b' || ch==127Ë&& 
pos
>0) {

73 
	`back•
();

74 
pos
--;

76 i‡(
ch
==3) {

78 
	`putch
('^');

79 
	`putch
('C');

80 
	`putch
('\n');

81 
pos
 = 0;

84 i‡(
ch
==18) {

86 
buf
[
pos
] = 0;

87 
	`k¥ötf
("^R\n%s", 
buf
);

89 i‡(
ch
==21) {

91 
pos
 > 0) {

92 
	`back•
();

93 
pos
--;

96 i‡(
ch
==23) {

98 
pos
 > 0 && 
buf
[pos-1]==' ') {

99 
	`back•
();

100 
pos
--;

102 
pos
 > 0 && 
buf
[pos-1]!=' ') {

103 
	`back•
();

104 
pos
--;

108 
	`bìp
();

112 
buf
[
pos
] = 0;

113 
	}
}

	@os161/kern/lib/kprintf.c

30 
	~<ty≥s.h
>

31 
	~<kîn/uni°d.h
>

32 
	~<°d¨g.h
>

33 
	~<lib.h
>

34 
	~<•l.h
>

35 
	~<thªad.h
>

36 
	~<cuºít.h
>

37 
	~<synch.h
>

38 
	~<maöbus.h
>

39 
	~<vfs.h
>

43 
uöt32_t
 
	gdbÊags
 = 0;

46 
lock
 *
	gk¥ötf_lock
;

49 
•ölock
 
	gk¥ötf_•ölock
;

63 
	$k¥ötf_boŸ°øp
()

65 
	`KASSERT
(
k¥ötf_lock
 =
NULL
);

67 
k¥ötf_lock
 = 
	`lock_¸óã
("kprintf_lock");

68 i‡(
k¥ötf_lock
 =
NULL
) {

69 
	`∑nic
("CouldÇot create kprintf_lock\n");

71 
	`•ölock_öô
(&
k¥ötf_•ölock
);

72 
	}
}

79 
	$c⁄sﬁe_£nd
(*
junk
, c⁄° *
d©a
, 
size_t
 
Àn
)

81 
size_t
 
i
;

83 ()
junk
;

85 
i
=0; i<
Àn
; i++) {

86 
	`putch
(
d©a
[
i
]);

88 
	}
}

94 
	$k¥ötf
(c⁄° *
fmt
, ...)

96 
ch¨s
;

97 
va_li°
 
≠
;

98 
boﬁ
 
dﬁock
;

100 
dﬁock
 = 
k¥ötf_lock
 !
NULL


101 && 
cuπhªad
->
t_ö_öãºu±
 =
Ál£


102 && 
cuπhªad
->
t_ùlhigh_cou¡
 == 0;

104 i‡(
dﬁock
) {

105 
	`lock_acquúe
(
k¥ötf_lock
);

108 
	`•ölock_acquúe
(&
k¥ötf_•ölock
);

110 
	`putch_¥ï¨e
();

112 
	`va_°¨t
(
≠
, 
fmt
);

113 
ch¨s
 = 
	`__v¥ötf
(
c⁄sﬁe_£nd
, 
NULL
, 
fmt
, 
≠
);

114 
	`va_íd
(
≠
);

116 
	`putch_com∂ëe
();

117 i‡(
dﬁock
) {

118 
	`lock_ªÀa£
(
k¥ötf_lock
);

121 
	`•ölock_ªÀa£
(&
k¥ötf_•ölock
);

124  
ch¨s
;

125 
	}
}

133 
	$∑nic
(c⁄° *
fmt
, ...)

135 
va_li°
 
≠
;

148 vﬁ©ûê
evû
;

150 i‡(
evû
 == 0) {

151 
evû
 = 1;

159 
	`•lhigh
();

162 i‡(
evû
 == 1) {

163 
evû
 = 2;

166 
	`thªad_∑nic
();

169 i‡(
evû
 == 2) {

170 
evû
 = 3;

173 
	`k¥ötf
("panic: ");

174 
	`putch_¥ï¨e
();

175 
	`va_°¨t
(
≠
, 
fmt
);

176 
	`__v¥ötf
(
c⁄sﬁe_£nd
, 
NULL
, 
fmt
, 
≠
);

177 
	`va_íd
(
≠
);

178 
	`putch_com∂ëe
();

181 i‡(
evû
 == 3) {

182 
evû
 = 4;

185 
	`vfs_sync
();

188 i‡(
evû
 == 4) {

189 
evû
 = 5;

192 
	`maöbus_∑nic
();

200 
	}
}

206 
	$badas£π
(c⁄° *
ex¥
, c⁄° *
fûe
, 
löe
, c⁄° *
func
)

208 
	`∑nic
("Assertion failed: %s,át %s:%d (%s)\n",

209 
ex¥
, 
fûe
, 
löe
, 
func
);

210 
	}
}

	@os161/kern/lib/misc.c

30 
	~<ty≥s.h
>

31 
	~<kîn/îrmsg.h
>

32 
	~<lib.h
>

38 
	$k°rdup
(c⁄° *
s
)

40 *
z
;

42 
z
 = 
	`kmÆloc
(
	`°æí
(
s
)+1);

43 i‡(
z
 =
NULL
) {

44  
NULL
;

46 
	`°r˝y
(
z
, 
s
);

47  
z
;

48 
	}
}

55 
	$°ªº‹
(
îrcode
)

57 i‡(
îrcode
>=0 &&Éºcodê< 
sys_√º
) {

58  
sys_îæi°
[
îrcode
];

60 
	`∑nic
("InvÆidÉº‹ codê%d\n", 
îrcode
);

61  
NULL
;

62 
	}
}

	@os161/kern/lib/queue.c

5 
	~<ty≥s.h
>

6 
	~<kîn/î∫o.h
>

7 
	~<lib.h
>

8 
	~<queue.h
>

10 
	squeue
 {

11 
	msize
;

12 
	m√xtwrôe
;

13 
	m√xåód
;

14 **
	md©a
;

19 
	$q_grow
(
queue
 *
q
, 
èrgësize
)

21 **
ﬁdd©a
 = 
q
->
d©a
;

22 
⁄r
 = 
q
->
√xåód
;

23 
⁄w
 = 
q
->
√xtwrôe
;

24 
osize
 = 
q
->
size
;

26 
nsize
;

27 **
nd©a
;

29 
i
, 
ªsu…
;

31 
nsize
 = 
q
->
size
;

32 
nsize
 < 
èrgësize
) {

33 
nsize
 *= 2;

35 
	`KASSERT
(
nsize
 > 0);

37 
nd©a
 = 
	`kmÆloc
(
nsize
 * (*));

38 i‡(
nd©a
 =
NULL
) {

39  
ENOMEM
;

41 
q
->
size
 = 
nsize
;

42 
q
->
d©a
 = 
nd©a
;

43 
q
->
√xåód
 = q->
√xtwrôe
 = 0;

45 
i
=
⁄r
; i!=
⁄w
; i = (i+1)%
osize
) {

46 
ªsu…
 = 
	`q_addèû
(
q
, 
ﬁdd©a
[
i
]);

47 
	`KASSERT
(
ªsu…
==0);

49 
	`k‰ì
(
ﬁdd©a
);

51 
	}
}

53 
queue
 *

54 
	$q_¸óã
(
size
)

56 
queue
 *
q
 = 
	`kmÆloc
((queue));

57 i‡(
q
==
NULL
) {

58  
NULL
;

60 
q
->
size
 = size;

61 
q
->
d©a
 = 
	`kmÆloc
(
size
 * (*));

62 i‡(
q
->
d©a
==
NULL
) {

63 
	`k‰ì
(
q
);

64  
NULL
;

66 
q
->
√xåód
 = q->
√xtwrôe
 = 0;

67  
q
;

68 
	}
}

71 
	$q_¥óŒoˇã
(
queue
 *
q
, 
size
)

73 
ªsu…
 = 0;

75 
	`KASSERT
(
q
->
size
 > 0);

77 i‡(
size
 > 
q
->size) {

78 
ªsu…
 = 
	`q_grow
(
q
, 
size
);

80  
ªsu…
;

81 
	}
}

83 
ölöe


85 
	$q_em±y
(
queue
 *
q
)

87  
q
->
√xtwrôe
 =q->
√xåód
;

88 
	}
}

91 
	$q_addèû
(
queue
 *
q
, *
±r
)

93 
√xäext
, 
ªsu…
;

95 
	`KASSERT
(
q
->
size
 > 0);

97 
√xäext
 = (
q
->
√xtwrôe
+1Ë% q->
size
;

98 i‡(
√xäext
==
q
->
√xåód
) {

99 
ªsu…
 = 
	`q_grow
(
q
, q->
size
+1);

100 i‡(
ªsu…
) {

101  
ªsu…
;

103 
√xäext
 = (
q
->
√xtwrôe
+1Ë% q->
size
;

105 
q
->
d©a
[q->
√xtwrôe
] = 
±r
;

106 
q
->
√xtwrôe
 = 
√xäext
;

108 
	}
}

111 
	$q_ªmhód
(
queue
 *
q
)

113 *
ªt
;

115 
	`KASSERT
(
q
->
size
 > 0);

117 
	`KASSERT
(!
	`q_em±y
(
q
));

118 
ªt
 = 
q
->
d©a
[q->
√xåód
];

119 
q
->
√xåód
 = (q->√xåód+1)%q->
size
;

120  
ªt
;

121 
	}
}

124 
	$q_de°roy
(
queue
 *
q
)

126 
	`KASSERT
(
	`q_em±y
(
q
));

127 
	`k‰ì
(
q
->
d©a
);

128 
	`k‰ì
(
q
);

129 
	}
}

133 
	$q_gë°¨t
(
queue
 *
q
)

135  
q
->
√xåód
;

136 
	}
}

139 
	$q_gëíd
(
queue
 *
q
)

141  
q
->
√xtwrôe
;

142 
	}
}

145 
	$q_gësize
(
queue
 *
q
)

147  
q
->
size
;

148 
	}
}

151 
	$q_gëguy
(
queue
 *
q
, 
ödex
)

156 
	`KASSERT
(
ödex
>=0 && index<
q
->
size
);

157  
q
->
d©a
[
ödex
];

158 
	}
}

161 
	$q_≥ek
(
queue
 *
q
)

163 *
ªt
;

165 
	`KASSERT
(
q
);

166 
	`KASSERT
(
q
->
size
 > 0);

168 i‡(
	`q_em±y
(
q
)) {

169 
ªt
 = 0;

171 
ªt
 = 
q
->
d©a
[q->
√xåód
];

173  
ªt
;

174 
	}
}

177 
	$q_Àn
(
queue
 *
theq
)

179 
cou¡
 = 0;

180 
tmp
 = 
theq
->
√xåód
;

181 
tmp
 !
theq
->
√xtwrôe
) {

182 
tmp
 = (tmp+1Ë% 
theq
->
size
;

183 
cou¡
++;

185  
cou¡
;

186 
	}
}

	@os161/kern/lib/stpdprog.c

1 
	~<°dio.h
>

3 
	sgªë_≠i
 {

4 (*
	mßy_hñlo
)(*
	m«me
);

5 (*
	mßy_goodbye
)();

8 
	$ßy_hñlo_‚
(*
«me
) {

9 
	`¥ötf
("Hñlÿ%s\n", 
«me
);

11 
	}
}

13 
	$ßy_goodbye_‚
() {

14 
	`¥ötf
("Goodbye\n");

16 
	}
}

18 
gªë_≠i
 
	ggªë_≠i
 = {

19 .
ßy_hñlo
 = 
ßy_hñlo_‚
,

20 .
	gßy_goodbye
 = 
ßy_goodbye_‚


23 
	$maö
(
¨gc
, *
¨gv
[]) {

24 
gªë_≠i
.
	`ßy_hñlo
(
¨gv
[1]);

25 
gªë_≠i
.
	`ßy_goodbye
();

27 
	`¥ötf
("%p, %p, %p\n", 
gªë_≠i
.
ßy_hñlo
, 
ßy_hñlo_‚
, &say_hello_fn);

29 
	`exô
(0);

30 
	}
}

	@os161/kern/lib/uio.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<uio.h
>

33 
	~<¥oc.h
>

34 
	~<cuºít.h
>

35 
	~<c›yöout.h
>

42 
	$uiomove
(*
±r
, 
size_t
 
n
, 
uio
 *uio)

44 
iovec
 *
iov
;

45 
size_t
 
size
;

46 
ªsu…
;

48 i‡(
uio
->
uio_rw
 !
UIO_READ
 && uio->uio_rw !
UIO_WRITE
) {

49 
	`∑nic
("uiomove: InvÆid uio_rw %d\n", (Ë
uio
->
uio_rw
);

51 i‡(
uio
->
uio_£gÊg
==
UIO_SYSSPACE
) {

52 
	`KASSERT
(
uio
->
uio_•a˚
 =
NULL
);

55 
	`KASSERT
(
uio
->
uio_•a˚
 =
	`cuΩroc_gëas
());

58 
n
 > 0 && 
uio
->
uio_ªsid
 > 0) {

60 
iov
 = 
uio
->
uio_iov
;

61 
size
 = 
iov
->
iov_Àn
;

63 i‡(
size
 > 
n
) {

64 
size
 = 
n
;

67 i‡(
size
 == 0) {

69 
uio
->
uio_iov
++;

70 
uio
->
uio_iov˙t
--;

71 i‡(
uio
->
uio_iov˙t
 == 0) {

78 
	`∑nic
("uiomove:Ñan out of buffers\n");

83 
uio
->
uio_£gÊg
) {

84 
UIO_SYSSPACE
:

85 
ªsu…
 = 0;

86 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

87 
	`memmove
(
iov
->
iov_kba£
, 
±r
, 
size
);

90 
	`memmove
(
±r
, 
iov
->
iov_kba£
, 
size
);

92 
iov
->
iov_kba£
 = ((*)iov->iov_kba£+
size
);

94 
UIO_USERSPACE
:

95 
UIO_USERISPACE
:

96 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

97 
ªsu…
 = 
	`c›yout
(
±r
, 
iov
->
iov_uba£
,
size
);

100 
ªsu…
 = 
	`c›yö
(
iov
->
iov_uba£
, 
±r
, 
size
);

102 i‡(
ªsu…
) {

103  
ªsu…
;

105 
iov
->
iov_uba£
 +
size
;

108 
	`∑nic
("uiomove: Invalid uio_segflg %d\n",

109 ()
uio
->
uio_£gÊg
);

112 
iov
->
iov_Àn
 -
size
;

113 
uio
->
uio_ªsid
 -
size
;

114 
uio
->
uio_off£t
 +
size
;

115 
±r
 = ((*Ìå + 
size
);

116 
n
 -
size
;

120 
	}
}

123 
	$uiomovezîos
(
size_t
 
n
, 
uio
 *uio)

126 
zîos
[16];

127 
size_t
 
amt
;

128 
ªsu…
;

131 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

133 
n
 > 0) {

134 
amt
 = (
zîos
);

135 i‡(
amt
 > 
n
) {

136 
amt
 = 
n
;

138 
ªsu…
 = 
	`uiomove
(
zîos
, 
amt
, 
uio
);

139 i‡(
ªsu…
) {

140  
ªsu…
;

142 
n
 -
amt
;

146 
	}
}

153 
	$uio_köô
(
iovec
 *
iov
, 
uio
 *
u
,

154 *
kbuf
, 
size_t
 
Àn
, 
off_t
 
pos
, 
uio_rw
 
rw
)

156 
iov
->
iov_kba£
 = 
kbuf
;

157 
iov
->
iov_Àn
 = 
Àn
;

158 
u
->
uio_iov
 = 
iov
;

159 
u
->
uio_iov˙t
 = 1;

160 
u
->
uio_off£t
 = 
pos
;

161 
u
->
uio_ªsid
 = 
Àn
;

162 
u
->
uio_£gÊg
 = 
UIO_SYSSPACE
;

163 
u
->
uio_rw
 = 
rw
;

164 
u
->
uio_•a˚
 = 
NULL
;

165 
	}
}

	@os161/kern/proc/proc.c

45 
	~<ty≥s.h
>

46 
	~<¥oc.h
>

47 
	~<cuºít.h
>

48 
	~<addr•a˚.h
>

49 
	~<vnode.h
>

50 
	~<vfs.h
>

51 
	~<synch.h
>

52 
	~<kîn/f˙é.h
>

57 
¥oc
 *
	gk¥oc
;

62 #ifde‡
UW


64 
	g¥oc_cou¡
;

67 
£m≠h‹e
 *
	g¥oc_cou¡_muãx
;

69 
£m≠h‹e
 *
	gno_¥oc_£m
;

78 
¥oc
 *

79 
	$¥oc_¸óã
(c⁄° *
«me
)

81 
¥oc
 *proc;

83 
¥oc
 = 
	`kmÆloc
((*proc));

84 i‡(
¥oc
 =
NULL
) {

85  
NULL
;

87 
¥oc
->
p_«me
 = 
	`k°rdup
(
«me
);

88 i‡(
¥oc
->
p_«me
 =
NULL
) {

89 
	`k‰ì
(
¥oc
);

90  
NULL
;

93 
	`thªad¨øy_öô
(&
¥oc
->
p_thªads
);

94 
	`•ölock_öô
(&
¥oc
->
p_lock
);

97 
¥oc
->
p_addr•a˚
 = 
NULL
;

100 
¥oc
->
p_cwd
 = 
NULL
;

102 #ifde‡
UW


103 
¥oc
->
c⁄sﬁe
 = 
NULL
;

106  
¥oc
;

107 
	}
}

113 
	$¥oc_de°roy
(
¥oc
 *proc)

124 
	`KASSERT
(
¥oc
 !
NULL
);

125 
	`KASSERT
(
¥oc
 !
k¥oc
);

134 i‡(
¥oc
->
p_cwd
) {

135 
	`VOP_DECREF
(
¥oc
->
p_cwd
);

136 
¥oc
->
p_cwd
 = 
NULL
;

140 #i‚de‡
UW


141 i‡(
¥oc
->
p_addr•a˚
) {

152 
addr•a˚
 *
as
;

154 
	`as_dó˘iv©e
();

155 
as
 = 
	`cuΩroc_£ès
(
NULL
);

156 
	`as_de°roy
(
as
);

160 #ifde‡
UW


161 i‡(
¥oc
->
c⁄sﬁe
) {

162 
	`vfs_˛o£
(
¥oc
->
c⁄sﬁe
);

166 
	`thªad¨øy_˛ónup
(&
¥oc
->
p_thªads
);

167 
	`•ölock_˛ónup
(&
¥oc
->
p_lock
);

169 
	`k‰ì
(
¥oc
->
p_«me
);

170 
	`k‰ì
(
¥oc
);

172 #ifde‡
UW


177 
	`P
(
¥oc_cou¡_muãx
);

178 
	`KASSERT
(
¥oc_cou¡
 > 0);

179 
¥oc_cou¡
--;

181 i‡(
¥oc_cou¡
 == 0) {

182 
	`V
(
no_¥oc_£m
);

184 
	`V
(
¥oc_cou¡_muãx
);

188 
	}
}

194 
	$¥oc_boŸ°øp
()

196 
k¥oc
 = 
	`¥oc_¸óã
("[kernel]");

197 i‡(
k¥oc
 =
NULL
) {

198 
	`∑nic
("proc_create for kproc failed\n");

200 #ifde‡
UW


201 
¥oc_cou¡
 = 0;

202 
¥oc_cou¡_muãx
 = 
	`£m_¸óã
("proc_count_mutex",1);

203 i‡(
¥oc_cou¡_muãx
 =
NULL
) {

204 
	`∑nic
("couldÇot createÖroc_count_mutex semaphore\n");

206 
no_¥oc_£m
 = 
	`£m_¸óã
("no_proc_sem",0);

207 i‡(
no_¥oc_£m
 =
NULL
) {

208 
	`∑nic
("couldÇot createÇo_proc_sem semaphore\n");

211 
	}
}

219 
¥oc
 *

220 
	$¥oc_¸óã_ru≈rogøm
(c⁄° *
«me
)

222 
¥oc
 *proc;

223 *
c⁄sﬁe_∑th
;

225 
¥oc
 = 
	`¥oc_¸óã
(
«me
);

226 i‡(
¥oc
 =
NULL
) {

227  
NULL
;

230 #ifde‡
UW


232 
c⁄sﬁe_∑th
 = 
	`k°rdup
("con:");

233 i‡(
c⁄sﬁe_∑th
 =
NULL
) {

234 
	`∑nic
("unableÅo copy consoleÖathÇame duringÖrocess creation\n");

236 i‡(
	`vfs_›í
(
c⁄sﬁe_∑th
,
O_WRONLY
,0,&(
¥oc
->
c⁄sﬁe
))) {

237 
	`∑nic
("unableÅo openÅhe console duringÖrocess creation\n");

239 
	`k‰ì
(
c⁄sﬁe_∑th
);

244 
¥oc
->
p_addr•a˚
 = 
NULL
;

248 #ifde‡
UW


252 i‡(
cuΩroc
->
p_cwd
 !
NULL
) {

253 
	`VOP_INCREF
(
cuΩroc
->
p_cwd
);

254 
¥oc
->
p_cwd
 = 
cuΩroc
->p_cwd;

257 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

258 i‡(
cuΩroc
->
p_cwd
 !
NULL
) {

259 
	`VOP_INCREF
(
cuΩroc
->
p_cwd
);

260 
¥oc
->
p_cwd
 = 
cuΩroc
->p_cwd;

262 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

265 #ifde‡
UW


269 
	`P
(
¥oc_cou¡_muãx
);

270 
¥oc_cou¡
++;

271 
	`V
(
¥oc_cou¡_muãx
);

274  
¥oc
;

275 
	}
}

282 
	$¥oc_addthªad
(
¥oc
 *¥oc, 
thªad
 *
t
)

284 
ªsu…
;

286 
	`KASSERT
(
t
->
t_¥oc
 =
NULL
);

288 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

289 
ªsu…
 = 
	`thªad¨øy_add
(&
¥oc
->
p_thªads
, 
t
, 
NULL
);

290 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

291 i‡(
ªsu…
) {

292  
ªsu…
;

294 
t
->
t_¥oc
 = 
¥oc
;

296 
	}
}

303 
	$¥oc_ªmthªad
(
thªad
 *
t
)

305 
¥oc
 *proc;

306 
i
, 
num
;

308 
¥oc
 = 
t
->
t_¥oc
;

309 
	`KASSERT
(
¥oc
 !
NULL
);

311 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

313 
num
 = 
	`thªad¨øy_num
(&
¥oc
->
p_thªads
);

314 
i
=0; i<
num
; i++) {

315 i‡(
	`thªad¨øy_gë
(&
¥oc
->
p_thªads
, 
i
Ë=
t
) {

316 
	`thªad¨øy_ªmove
(&
¥oc
->
p_thªads
, 
i
);

317 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

318 
t
->
t_¥oc
 = 
NULL
;

323 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

324 
	`∑nic
("Thªad (%pËha†esˇ≥d from it†¥o˚s†(%p)\n", 
t
, 
¥oc
);

325 
	}
}

332 
addr•a˚
 *

333 
	$cuΩroc_gëas
()

335 
addr•a˚
 *
as
;

336 #ifde‡
UW


340 i‡(
cuΩroc
 =
NULL
) {

341  
NULL
;

345 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

346 
as
 = 
cuΩroc
->
p_addr•a˚
;

347 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

348  
as
;

349 
	}
}

355 
addr•a˚
 *

356 
	$cuΩroc_£ès
(
addr•a˚
 *
√was
)

358 
addr•a˚
 *
ﬁdas
;

359 
¥oc
 *¥o¯
cuΩroc
;

361 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

362 
ﬁdas
 = 
¥oc
->
p_addr•a˚
;

363 
¥oc
->
p_addr•a˚
 = 
√was
;

364 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

365  
ﬁdas
;

366 
	}
}

	@os161/kern/startup/hello.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<ã°.h
>

5 
	$hñlo
() {

6 
	`k¥ötf
("Hello World\n");

7 
	}
}

	@os161/kern/startup/main.c

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<kîn/ªboŸ.h
>

39 
	~<kîn/uni°d.h
>

40 
	~<lib.h
>

41 
	~<•l.h
>

42 
	~<˛ock.h
>

43 
	~<thªad.h
>

44 
	~<¥oc.h
>

45 
	~<cuºít.h
>

46 
	~<synch.h
>

47 
	~<vm.h
>

48 
	~<maöbus.h
>

49 
	~<vfs.h
>

50 
	~<devi˚.h
>

51 
	~<sysˇŒ.h
>

52 
	~<ã°.h
>

53 
	~<vîsi⁄.h
>

54 
	~"autoc⁄f.h
"

66 c⁄° 
buûdvîsi⁄
;

67 c⁄° 
buûdc⁄fig
[];

72 c⁄° 
	gh¨v¨d_c›yright
[] =

82 
	$boŸ
()

101 
	`k¥ötf
("\n");

102 
	`k¥ötf
("OS/161 ba£ sy°em vîsi⁄ %s\n", 
BASE_VERSION
);

103 
	`k¥ötf
("%s", 
h¨v¨d_c›yright
);

104 
	`k¥ötf
("\n");

106 
	`k¥ötf
("Put-your-group-name-here's system version %s (%s #%d)\n",

107 
GROUP_VERSION
, 
buûdc⁄fig
, 
buûdvîsi⁄
);

108 
	`k¥ötf
("\n");

111 
	`hñlo
();

113 
	`øm_boŸ°øp
();

114 
	`¥oc_boŸ°øp
();

115 
	`thªad_boŸ°øp
();

116 
	`h¨d˛ock_boŸ°øp
();

117 
	`vfs_boŸ°øp
();

120 
	`k¥ötf
("DeviceÖrobe...\n");

121 
	`KASSERT
(
cuπhªad
->
t_cur•l
 > 0);

122 
	`maöbus_boŸ°øp
();

123 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

125 
	`p£udoc⁄fig
();

126 
	`k¥ötf
("\n");

129 
	`vm_boŸ°øp
();

130 
	`k¥ötf_boŸ°øp
();

131 
	`thªad_°¨t_˝us
();

134 
	`vfs_£tboŸfs
("emu0");

140 
	`COMPILE_ASSERT
((
u£Ωå_t
) == (*));

141 
	`COMPILE_ASSERT
((*(
u£Ωå_t
)0) == ());

142 
	}
}

149 
	$shutdown
()

152 
	`k¥ötf
("Shutting down.\n");

154 
	`vfs_˛órboŸfs
();

155 
	`vfs_˛órcurdú
();

156 
	`vfs_unmou¡Æl
();

158 
	`thªad_shutdown
();

160 
	`•lhigh
();

161 
	}
}

173 
	$sys_ªboŸ
(
code
)

175 
code
) {

176 
RB_REBOOT
:

177 
RB_HALT
:

178 
RB_POWEROFF
:

181  
EINVAL
;

184 
	`shutdown
();

186 
code
) {

187 
RB_HALT
:

188 
	`k¥ötf
("The system is halted.\n");

189 
	`maöbus_hÆt
();

191 
RB_REBOOT
:

192 
	`k¥ötf
("Rebooting...\n");

193 
	`maöbus_ªboŸ
();

195 
RB_POWEROFF
:

196 
	`k¥ötf
("The system is halted.\n");

197 
	`maöbus_powîoff
();

201 
	`∑nic
("reboot operation failed\n");

203 
	}
}

210 
	$kmaö
(*
¨gumíts
)

212 
	`boŸ
();

214 
	`míu
(
¨gumíts
);

217 
	}
}

	@os161/kern/startup/menu.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/ªboŸ.h
>

33 
	~<kîn/uni°d.h
>

34 
	~<limôs.h
>

35 
	~<lib.h
>

36 
	~<uio.h
>

37 
	~<˛ock.h
>

38 
	~<thªad.h
>

39 
	~<¥oc.h
>

40 
	~<synch.h
>

41 
	~<vfs.h
>

42 
	~<sfs.h
>

43 
	~<sysˇŒ.h
>

44 
	~<ã°.h
>

45 
	~"›t-synch¥obs.h
"

46 
	~"›t-sfs.h
"

47 
	~"›t-√t.h
"

53 
	#_PATH_SHELL
 "/bö/sh"

	)

55 
	#MAXMENUARGS
 16

	)

59 
	$gëöãrvÆ
(
time_t
 
s1
, 
uöt32_t
 
ns1
,Åime_à
s2
, uöt32_à
ns2
,

60 
time_t
 *
rs
, 
uöt32_t
 *
∫s
)

62 i‡(
ns2
 < 
ns1
) {

63 
ns2
 += 1000000000;

64 
s2
--;

67 *
∫s
 = 
ns2
 - 
ns1
;

68 *
rs
 = 
s2
 - 
s1
;

69 
	}
}

88 
	$cmd_¥ogthªad
(*
±r
, 
«rgs
)

90 **
¨gs
 = 
±r
;

91 
¥og«me
[128];

92 
ªsu…
;

94 
	`KASSERT
(
«rgs
 >= 1);

96 i‡(
«rgs
 > 2) {

97 
	`k¥ötf
("Warning:árgumentÖassing from menuÇot supported\n");

101 
	`KASSERT
(
	`°æí
(
¨gs
[0]Ë< (
¥og«me
));

103 
	`°r˝y
(
¥og«me
, 
¨gs
[0]);

105 
ªsu…
 = 
	`ru≈rogøm
(
¥og«me
);

106 i‡(
ªsu…
) {

107 
	`k¥ötf
("Ru¬ögÖrogøm %†Áûed: %s\n", 
¨gs
[0],

108 
	`°ªº‹
(
ªsu…
));

113 
	}
}

129 
	$comm⁄_¥og
(
«rgs
, **
¨gs
)

131 
¥oc
 *proc;

132 
ªsu…
;

134 #i‡
OPT_SYNCHPROBS


135 
	`k¥ötf
("Warning:ÅhisÖrobably won't work withá "

140 
¥oc
 = 
	`¥oc_¸óã_ru≈rogøm
(
¨gs
[0] );

141 i‡(
¥oc
 =
NULL
) {

142  
ENOMEM
;

145 
ªsu…
 = 
	`thªad_f‹k
(
¨gs
[0] ,

146 
¥oc
 ,

147 
cmd_¥ogthªad
 ,

148 
¨gs
 , 
«rgs
 );

149 i‡(
ªsu…
) {

150 
	`k¥ötf
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

151 
	`¥oc_de°roy
(
¥oc
);

152  
ªsu…
;

155 #ifde‡
UW


158 
	`P
(
no_¥oc_£m
);

162 
	}
}

169 
	$cmd_¥og
(
«rgs
, **
¨gs
)

171 i‡(
«rgs
 < 2) {

172 
	`k¥ötf
("Usage:ÖÖrogram [arguments]\n");

173  
EINVAL
;

177 
¨gs
++;

178 
«rgs
--;

180  
	`comm⁄_¥og
(
«rgs
, 
¨gs
);

181 
	}
}

188 
	$cmd_shñl
(
«rgs
, **
¨gs
)

190 ()
¨gs
;

191 i‡(
«rgs
 != 1) {

192 
	`k¥ötf
("Usage: s\n");

193  
EINVAL
;

196 
¨gs
[0] = (*)
_PATH_SHELL
;

198  
	`comm⁄_¥og
(
«rgs
, 
¨gs
);

199 
	}
}

206 
	$cmd_chdú
(
«rgs
, **
¨gs
)

208 i‡(
«rgs
 != 2) {

209 
	`k¥ötf
("Usage: cd directory\n");

210  
EINVAL
;

213  
	`vfs_chdú
(
¨gs
[1]);

214 
	}
}

221 
	$cmd_pwd
(
«rgs
, **
¨gs
)

223 
buf
[
PATH_MAX
+1];

224 
ªsu…
;

225 
iovec
 
iov
;

226 
uio
 
ku
;

228 ()
«rgs
;

229 ()
¨gs
;

231 
	`uio_köô
(&
iov
, &
ku
, 
buf
, (buf)-1, 0, 
UIO_READ
);

232 
ªsu…
 = 
	`vfs_gëcwd
(&
ku
);

233 i‡(
ªsu…
) {

234 
	`k¥ötf
("vfs_gëcwd faûed (%s)\n", 
	`°ªº‹
(
ªsu…
));

235  
ªsu…
;

239 
buf
[(buf)-1-
ku
.
uio_ªsid
] = 0;

242 
	`k¥ötf
("%s\n", 
buf
);

245 
	}
}

252 
	$cmd_sync
(
«rgs
, **
¨gs
)

254 ()
«rgs
;

255 ()
¨gs
;

257 
	`vfs_sync
();

260 
	}
}

267 
	$cmd_∑nic
(
«rgs
, **
¨gs
)

269 ()
«rgs
;

270 ()
¨gs
;

272 
	`∑nic
("UserÑequestedÖanic\n");

274 
	}
}

281 
	$cmd_quô
(
«rgs
, **
¨gs
)

283 ()
«rgs
;

284 ()
¨gs
;

286 
	`vfs_sync
();

287 
	`sys_ªboŸ
(
RB_POWEROFF
);

288 
	`thªad_exô
();

290 
	}
}

298 c⁄° *
	m«me
;

299 (*
	mfunc
)(c⁄° *
	mdevi˚
);

300 } 
	gmou¡èbÀ
[] = {

301 #i‡
OPT_SFS


302 { "sfs", 
sfs_mou¡
 },

304 { 
NULL
, NULL }

309 
	$cmd_mou¡
(
«rgs
, **
¨gs
)

311 *
f°y≥
;

312 *
devi˚
;

313 
i
;

315 i‡(
«rgs
 != 3) {

316 
	`k¥ötf
("Usage: mount fstype device:\n");

317  
EINVAL
;

320 
f°y≥
 = 
¨gs
[1];

321 
devi˚
 = 
¨gs
[2];

324 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

325 
devi˚
[
	`°æí
(device)-1] = 0;

328 
i
=0; 
mou¡èbÀ
[i].
«me
; i++) {

329 i‡(!
	`°rcmp
(
mou¡èbÀ
[
i
].
«me
, 
f°y≥
)) {

330  
mou¡èbÀ
[
i
].
	`func
(
devi˚
);

333 
	`k¥ötf
("Unknow¿fûesy°emÅy≥ %s\n", 
f°y≥
);

334  
EINVAL
;

335 
	}
}

339 
	$cmd_unmou¡
(
«rgs
, **
¨gs
)

341 *
devi˚
;

343 i‡(
«rgs
 != 2) {

344 
	`k¥ötf
("Usage: unmount device:\n");

345  
EINVAL
;

348 
devi˚
 = 
¨gs
[1];

351 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

352 
devi˚
[
	`°æí
(device)-1] = 0;

355  
	`vfs_unmou¡
(
devi˚
);

356 
	}
}

368 
	$cmd_boŸfs
(
«rgs
, **
¨gs
)

370 *
devi˚
;

372 i‡(
«rgs
 != 2) {

373 
	`k¥ötf
("Usage: bootfs device\n");

374  
EINVAL
;

377 
devi˚
 = 
¨gs
[1];

380 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

381 
devi˚
[
	`°æí
(device)-1] = 0;

384  
	`vfs_£tboŸfs
(
devi˚
);

385 
	}
}

389 
	$cmd_khóp°©s
(
«rgs
, **
¨gs
)

391 ()
«rgs
;

392 ()
¨gs
;

394 
	`khóp_¥öt°©s
();

397 
	}
}

405 
	$showmíu
(c⁄° *
«me
, c⁄° *
x
[])

407 
˘
, 
hÆf
, 
i
;

409 
	`k¥ötf
("\n");

410 
	`k¥ötf
("%s\n", 
«me
);

412 
i
=
˘
=0; 
x
[i]; i++) {

413 
˘
++;

415 
hÆf
 = (
˘
+1)/2;

417 
i
=0; i<
hÆf
; i++) {

418 
	`k¥ötf
(" %-36s", 
x
[
i
]);

419 i‡(
i
+
hÆf
 < 
˘
) {

420 
	`k¥ötf
("%s", 
x
[
i
+
hÆf
]);

422 
	`k¥ötf
("\n");

425 
	`k¥ötf
("\n");

426 
	}
}

428 c⁄° *
	g›smíu
[] = {

440 
NULL


445 
	$cmd_›smíu
(
n
, **
a
)

447 ()
n
;

448 ()
a
;

450 
	`showmíu
("OS/161 o≥øti⁄†míu", 
›smíu
);

452 
	}
}

454 c⁄° *
	gã°míu
[] = {

467 #i‡
OPT_NET


473 #ifde‡
UW


482 
NULL


487 
	$cmd_ã°míu
(
n
, **
a
)

489 ()
n
;

490 ()
a
;

492 
	`showmíu
("OS/161Åe°†míu", 
ã°míu
);

493 
	`k¥ötf
(" (1) TheseÅests will fail until you finishÅhe "

495 
	`k¥ötf
(" (4) TheseÅests may fail until you finishÅhe "

497 
	`k¥ötf
("\n");

500 
	}
}

502 c⁄° *
	gmaömíu
[] = {

505 #i‡
OPT_SYNCHPROBS


507 #ifde‡
UW


513 
NULL


518 
	$cmd_maömíu
(
n
, **
a
)

520 ()
n
;

521 ()
a
;

523 
	`showmíu
("OS/161 kî√»míu", 
maömíu
);

525 
	}
}

532 c⁄° *
	m«me
;

533 (*
	mfunc
)(
	m«rgs
, **
	m¨gs
);

534 } 
	gcmdèbÀ
[] = {

536 { "?", 
cmd_maömíu
 },

537 { "h", 
cmd_maömíu
 },

538 { "hñp", 
cmd_maömíu
 },

539 { "?o", 
cmd_›smíu
 },

540 { "?t", 
cmd_ã°míu
 },

543 { "s", 
cmd_shñl
 },

544 { "p", 
cmd_¥og
 },

545 { "mou¡", 
cmd_mou¡
 },

546 { "unmou¡", 
cmd_unmou¡
 },

547 { "boŸfs", 
cmd_boŸfs
 },

548 { "pf", 
¥ötfûe
 },

549 { "cd", 
cmd_chdú
 },

550 { "pwd", 
cmd_pwd
 },

551 { "sync", 
cmd_sync
 },

552 { "∑nic", 
cmd_∑nic
 },

553 { "q", 
cmd_quô
 },

554 { "exô", 
cmd_quô
 },

555 { "hÆt", 
cmd_quô
 },

557 #i‡
OPT_SYNCHPROBS


559 { "•1", 
whÆem©ög
 },

560 #ifde‡
UW


561 { "•2", 
ˇtmou£
 },

566 { "kh", 
cmd_khóp°©s
 },

569 { "©", 
¨øyã°
 },

570 { "bt", 
bôm≠ã°
 },

571 { "km1", 
mÆlo˘e°
 },

572 { "km2", 
mÆloc°ªss
 },

573 { "˛p", 
¥ötLöe
 },

574 #i‡
OPT_NET


575 { "√t", 
√âe°
 },

577 { "â1", 
thªadã°
 },

578 { "â2", 
thªadã°2
 },

579 { "â3", 
thªadã°3
 },

580 { "fdt", 
digôThªadTe°
 },

581 { "u°", 
unß„thªadcou¡î
 },

582 { "°t", 
lockthªadcou¡î
 },

583 { "¶t", 
•ölockthªadcou¡î
},

584 { "sy1", 
£mã°
 },

587 { "sy2", 
lockã°
 },

588 { "sy3", 
cvã°
 },

589 #ifde‡
UW


590 { "uw1", 
uwlockã°1
 },

591 { "uw2", 
uwvm°©°e°
 },

595 { "fs1", 
f°e°
 },

596 { "fs2", 
ªad°ªss
 },

597 { "fs3", 
wrôe°ªss
 },

598 { "fs4", 
wrôe°ªss2
 },

599 { "fs5", 
¸óã°ªss
 },

601 { 
NULL
, NULL }

609 
	$cmd_di•©ch
(*
cmd
)

611 
time_t
 
bef‹e£cs
, 
a·î£cs
, 
£cs
;

612 
uöt32_t
 
bef‹í£cs
, 
a·în£cs
, 
n£cs
;

613 *
¨gs
[
MAXMENUARGS
];

614 
«rgs
=0;

615 *
w‹d
;

616 *
c⁄ãxt
;

617 
i
, 
ªsu…
;

619 
w‹d
 = 
	`°πok_r
(
cmd
, " \t", &
c⁄ãxt
);

620 
w‹d
 !
NULL
;

621 
w‹d
 = 
	`°πok_r
(
NULL
, " \t", &
c⁄ãxt
)) {

623 i‡(
«rgs
 >
MAXMENUARGS
) {

624 
	`k¥ötf
("CommandÜine hasÅoo many words\n");

625  
E2BIG
;

627 
¨gs
[
«rgs
++] = 
w‹d
;

630 i‡(
«rgs
==0) {

634 
i
=0; 
cmdèbÀ
[i].
«me
; i++) {

635 i‡(*
cmdèbÀ
[
i
].
«me
 && !
	`°rcmp
(
¨gs
[0], cmdtable[i].name)) {

636 
	`KASSERT
(
cmdèbÀ
[
i
].
func
!=
NULL
);

638 
	`gëtime
(&
bef‹e£cs
, &
bef‹í£cs
);

640 
ªsu…
 = 
cmdèbÀ
[
i
].
	`func
(
«rgs
, 
¨gs
);

642 
	`gëtime
(&
a·î£cs
, &
a·în£cs
);

643 
	`gëöãrvÆ
(
bef‹e£cs
, 
bef‹í£cs
,

644 
a·î£cs
, 
a·în£cs
,

645 &
£cs
, &
n£cs
);

647 
	`k¥ötf
("OperationÅook %lu.%09lu seconds\n",

648 (Ë
£cs
,

649 (Ë
n£cs
);

651  
ªsu…
;

655 
	`k¥ötf
("%s: Comm™dÇŸ found\n", 
¨gs
[0]);

656  
EINVAL
;

657 
	}
}

668 
	$míu_execuã
(*
löe
, 
ißrgs
)

670 *
comm™d
;

671 *
c⁄ãxt
;

672 
ªsu…
;

674 
comm™d
 = 
	`°πok_r
(
löe
, ";", &
c⁄ãxt
);

675 
comm™d
 !
NULL
;

676 
comm™d
 = 
	`°πok_r
(
NULL
, ";", &
c⁄ãxt
)) {

678 i‡(
ißrgs
) {

679 
	`k¥ötf
("OS/161 kî√l: %s\n", 
comm™d
);

682 
ªsu…
 = 
	`cmd_di•©ch
(
comm™d
);

683 i‡(
ªsu…
) {

684 
	`k¥ötf
("Míu comm™d faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

685 i‡(
ißrgs
) {

686 
	`∑nic
("FailureÖrocessing kernelárguments\n");

690 
	}
}

710 
	$míu
(*
¨gs
)

712 
buf
[64];

714 
	`míu_execuã
(
¨gs
, 1);

717 
	`k¥ötf
("OS/161 kernel [? for menu]: ");

718 
	`kgës
(
buf
, (buf));

719 
	`míu_execuã
(
buf
, 0);

721 
	}
}

	@os161/kern/startup/stpdprgrm.c

1 
	~<°dio.h
>

4 
	sgªë_≠i


6 (*
	mßy_hñlo
)(*
	m«me
);

7 (*
	mßy_goodbye
)();

11 
	$ßy_hñlo_‚
(*
«me
)

13 
	`¥ötf
("Hñlÿ%s\n", 
«me
);

15 
	}
}

18 
	$ßy_goodbye_‚
()

20 
	`¥ötf
("Goodbye\n");

22 
	}
}

25 
gªë_≠i
 
	ggªë_≠i
 =

27 .
ßy_hñlo
 = 
ßy_hñlo_‚
,

28 .
	gßy_goodbye
 = 
ßy_goodbye_‚


33 
	$maö
(
¨gc
, *
¨gv
[])

35 
gªë_≠i
.
	`ßy_hñlo
(
¨gv
[1]);

36 
gªë_≠i
.
	`ßy_goodbye
();

38 
	`¥ötf
("%p, %p, %p\n", 
gªë_≠i
.
ßy_hñlo
, 
ßy_hñlo_‚
, &say_hello_fn);

40 
	`exô
(0);

41 
	}
}

	@os161/kern/synchprobs/catmouse.c

29 
	~<ty≥s.h
>

30 
	~<lib.h
>

31 
	~<ã°.h
>

32 
	~<˛ock.h
>

33 
	~<thªad.h
>

34 
	~<synch.h
>

35 
	~<synch¥obs.h
>

38 
öôülize_bowls
();

39 
˛ónup_bowls
();

40 
ˇt_ót
(
bow umbî
, 
ót_time
);

41 
ˇt_¶ìp
(
¶ìp_time
);

42 
mou£_ót
(
bow umbî
, 
ót_time
);

43 
mou£_¶ìp
(
¶ìp_time
);

44 
ˇt_simuœti⁄
(*
±r
, 
ˇäumbî
);

45 
mou£_simuœti⁄
(*
±r
, 
mou£numbî
);

61 
	gNumBowls
;

62 
	gNumC©s
;

63 
	gNumMi˚
;

64 
	gNumLo›s
;

66 
	gC©E©Time
 = 1;

67 
	gC©SÀïTime
 = 2;

68 
	gMou£E©Time
 = 1;

69 
	gMou£SÀïTime
 = 2;

76 
£m≠h‹e
 *
	gC©Mou£Waô
;

95 vﬁ©ûê*
	gbowls
;

100 vﬁ©ûê
	gótög_ˇts_cou¡
;

105 vﬁ©ûê
	gótög_mi˚_cou¡
;

112 
£m≠h‹e
 *
	gmuãx
;

115 vﬁ©ûê
time_t
 
	gˇt_tŸÆ_waô_£cs
;

116 vﬁ©ûê
uöt32_t
 
	gˇt_tŸÆ_waô_n£cs
;

117 vﬁ©ûê
	gˇt_waô_cou¡
;

118 vﬁ©ûê
time_t
 
	gmou£_tŸÆ_waô_£cs
;

119 vﬁ©ûê
uöt32_t
 
	gmou£_tŸÆ_waô_n£cs
;

120 vﬁ©ûê
	gmou£_waô_cou¡
;

123 
£m≠h‹e
 *
	g≥rf_muãx
;

140 
	$öôülize_bowls
()

142 
i
;

144 
	`KASSERT
(
NumBowls
 > 0);

146 
bowls
 = 
	`kmÆloc
(
NumBowls
*());

147 i‡(
bowls
 =
NULL
) {

148 
	`∑nic
("öôülize_bowls: u«bÀÅÿÆloˇã s∑˚ f‹ %d bowls\n",
NumBowls
);

151 
i
=0;i<
NumBowls
;i++) {

152 
bowls
[
i
] = '-';

154 
ótög_ˇts_cou¡
 = 
ótög_mi˚_cou¡
 = 0;

157 
muãx
 = 
	`£m_¸óã
("bowl mutex",1);

158 i‡(
muãx
 =
NULL
) {

159 
	`∑nic
("initialize_bowls: couldÇot create mutex\n");

162 
≥rf_muãx
 = 
	`£m_¸óã
("stats mutex",1);

163 i‡(
≥rf_muãx
 =
NULL
) {

164 
	`∑nic
("initialize_bowls: couldÇot createÖerf_mutex\n");

167 
ˇt_tŸÆ_waô_£cs
 = 0;

168 
ˇt_tŸÆ_waô_n£cs
 = 0;

169 
ˇt_waô_cou¡
 = 0;

170 
mou£_tŸÆ_waô_£cs
 = 0;

171 
mou£_tŸÆ_waô_n£cs
 = 0;

172 
mou£_waô_cou¡
 = 0;

175 
	}
}

192 
	$˛ónup_bowls
()

194 i‡(
muãx
 !
NULL
) {

195 
	`£m_de°roy
–
muãx
 );

196 
muãx
 = 
NULL
;

198 i‡(
≥rf_muãx
 !
NULL
) {

199 
	`£m_de°roy
–
≥rf_muãx
 );

200 
≥rf_muãx
 = 
NULL
;

202 i‡(
bowls
 !
NULL
) {

203 
	`k‰ì
–(*Ë
bowls
 );

204 
bowls
 = 
NULL
;

206 
	}
}

260 
	$ˇt_ót
(
bow umbî
, 
ót_time
)

264 
	`KASSERT
(
bow umbî
 > 0);

265 
	`KASSERT
(()
bow umbî
 <
NumBowls
);

269 
	`P
(
muãx
);

273 i‡(
bowls
[
bow umbî
-1] == 'c') {

275 
	`∑nic
("ˇt_ót:áâem±Åÿmakêtwÿˇt†óà‰om bow»%d!\n",
bow umbî
);

277 i‡(
ótög_mi˚_cou¡
 > 0) {

279 
	`∑nic
("cat_eat:áttemptÅo makeá catÉat while miceáreÉating!\n");

281 
	`KASSERT
(
bowls
[
bow umbî
-1]=='-');

282 
	`KASSERT
(
ótög_mi˚_cou¡
 == 0);

285 
ótög_ˇts_cou¡
 += 1;

286 
bowls
[
bow umbî
-1] = 'c';

288 
	`DEBUG
(
DB_SYNCPROB
,"cat startsÅoÉatát bowl %d [%d:%d]\n",

289 
bow umbî
,
ótög_ˇts_cou¡
,
ótög_mi˚_cou¡
);

290 
	`V
(
muãx
);

294 
	`˛ock¶ìp
(
ót_time
);

298 
	`P
(
muãx
);

299 
	`KASSERT
(
ótög_ˇts_cou¡
 > 0);

300 
	`KASSERT
(
bowls
[
bow umbî
-1]=='c');

301 
ótög_ˇts_cou¡
 -= 1;

302 
bowls
[
bow umbî
-1]='-';

304 
	`DEBUG
(
DB_SYNCPROB
,"cat finishedÉatingát bowl %d [%d:%d]\n",

305 
bow umbî
,
ótög_ˇts_cou¡
,
ótög_mi˚_cou¡
);

306 
	`V
(
muãx
);

309 
	}
}

323 
	$ˇt_¶ìp
(
¶ìp_time
)

326 
	`˛ock¶ìp
(
¶ìp_time
);

328 
	}
}

348 
	$mou£_ót
(
bow umbî
, 
ót_time
)

351 
	`KASSERT
(
bow umbî
 > 0);

352 
	`KASSERT
(()
bow umbî
 <
NumBowls
);

356 
	`P
(
muãx
);

360 i‡(
bowls
[
bow umbî
-1] == 'm') {

362 
	`∑nic
("mou£_ót:áâem±Åÿmakêtwÿmi˚É© from bow»%d!\n",
bow umbî
);

364 i‡(
ótög_ˇts_cou¡
 > 0) {

366 
	`∑nic
("mouse_eat:áttemptÅo makeá mouseÉat while catsáreÉating!\n");

368 
	`KASSERT
(
bowls
[
bow umbî
-1]=='-');

369 
	`KASSERT
(
ótög_ˇts_cou¡
 == 0);

372 
ótög_mi˚_cou¡
 += 1;

373 
bowls
[
bow umbî
-1] = 'm';

375 
	`DEBUG
(
DB_SYNCPROB
,"mouse startsÅoÉatát bowl %d [%d:%d]\n",

376 
bow umbî
,
ótög_ˇts_cou¡
,
ótög_mi˚_cou¡
);

377 
	`V
(
muãx
);

381 
	`˛ock¶ìp
(
ót_time
);

385 
	`P
(
muãx
);

387 
	`KASSERT
(
ótög_mi˚_cou¡
 > 0);

388 
ótög_mi˚_cou¡
 -= 1;

389 
	`KASSERT
(
bowls
[
bow umbî
-1]=='m');

390 
bowls
[
bow umbî
-1]='-';

392 
	`DEBUG
(
DB_SYNCPROB
,"mouse finishesÉatingát bowl %d [%d:%d]\n",

393 
bow umbî
,
ótög_ˇts_cou¡
,
ótög_mi˚_cou¡
);

394 
	`V
(
muãx
);

396 
	}
}

410 
	$mou£_¶ìp
(
¶ìp_time
)

413 
	`˛ock¶ìp
(
¶ìp_time
);

415 
	}
}

434 
	$ˇt_simuœti⁄
(* 
unu£dpoöãr
,

435 
ˇäumbî
)

437 
i
;

438 
bowl
;

439 
time_t
 
bef‹e_£c
, 
a·î_£c
, 
waô_£c
;

440 
uöt32_t
 
bef‹e_n£c
, 
a·î_n£c
, 
waô_n£c
;

443 (Ë
unu£dpoöãr
;

444 (Ë
ˇäumbî
;

447 
i
=0;i<
NumLo›s
;i++) {

450 
	`ˇt_¶ìp
(
C©SÀïTime
);

453 
bowl
 = (()
	`øndom
(Ë% 
NumBowls
) + 1;

455 
	`gëtime
(&
bef‹e_£c
,&
bef‹e_n£c
);

456 
	`ˇt_bef‹e_ótög
(
bowl
);

457 
	`gëtime
(&
a·î_£c
,&
a·î_n£c
);

460 
	`ˇt_ót
(
bowl
, 
C©E©Time
);

462 
	`ˇt_a·î_ótög
(
bowl
);

465 
	`gëöãrvÆ
(
bef‹e_£c
,
bef‹e_n£c
,
a·î_£c
,
a·î_n£c
,&
waô_£c
,&
waô_n£c
);

466 
	`P
(
≥rf_muãx
);

467 
ˇt_tŸÆ_waô_£cs
 +
waô_£c
;

468 
ˇt_tŸÆ_waô_n£cs
 +
waô_n£c
;

469 i‡(
ˇt_tŸÆ_waô_n£cs
 > 1000000000) {

470 
ˇt_tŸÆ_waô_n£cs
 -= 1000000000;

471 
ˇt_tŸÆ_waô_£cs
 ++;

473 
ˇt_waô_cou¡
++;

474 
	`V
(
≥rf_muãx
);

478 
	`V
(
C©Mou£Waô
);

479 
	}
}

498 
	$mou£_simuœti⁄
(* 
unu£dpoöãr
,

499 
mou£numbî
)

501 
i
;

502 
bowl
;

503 
time_t
 
bef‹e_£c
, 
a·î_£c
, 
waô_£c
;

504 
uöt32_t
 
bef‹e_n£c
, 
a·î_n£c
, 
waô_n£c
;

507 (Ë
unu£dpoöãr
;

508 (Ë
mou£numbî
;

510 
i
=0;i<
NumLo›s
;i++) {

513 
	`mou£_¶ìp
(
Mou£SÀïTime
);

516 
bowl
 = (()
	`øndom
(Ë% 
NumBowls
) + 1;

518 
	`gëtime
(&
bef‹e_£c
,&
bef‹e_n£c
);

519 
	`mou£_bef‹e_ótög
(
bowl
);

520 
	`gëtime
(&
a·î_£c
,&
a·î_n£c
);

523 
	`mou£_ót
(
bowl
, 
Mou£E©Time
);

525 
	`mou£_a·î_ótög
(
bowl
);

528 
	`gëöãrvÆ
(
bef‹e_£c
,
bef‹e_n£c
,
a·î_£c
,
a·î_n£c
,&
waô_£c
,&
waô_n£c
);

529 
	`P
(
≥rf_muãx
);

530 
mou£_tŸÆ_waô_£cs
 +
waô_£c
;

531 
mou£_tŸÆ_waô_n£cs
 +
waô_n£c
;

532 i‡(
mou£_tŸÆ_waô_n£cs
 > 1000000000) {

533 
mou£_tŸÆ_waô_n£cs
 -= 1000000000;

534 
mou£_tŸÆ_waô_£cs
 ++;

536 
mou£_waô_cou¡
++;

537 
	`V
(
≥rf_muãx
);

541 
	`V
(
C©Mou£Waô
);

542 
	}
}

568 
	$ˇtmou£
(
«rgs
,

569 ** 
¨gs
)

571 
ˇtödex
, 
mou£ödex
, 
îr‹
;

572 
i
;

573 
món_ˇt_waô_u£cs
, 
món_mou£_waô_u£cs
;

574 
time_t
 
bef‹e_£c
, 
a·î_£c
, 
waô_£c
;

575 
uöt32_t
 
bef‹e_n£c
, 
a·î_n£c
, 
waô_n£c
;

576 
tŸÆ_bowl_mûli£c⁄ds
, 
tŸÆ_ótög_mûli£c⁄ds
, 
utûiz©i⁄_≥r˚¡
;

579 i‡((
«rgs
 != 9) && (nargs != 5)) {

580 
	`k¥ötf
("Usage: <command> NUM_BOWLS NUM_CATS NUM_MICE NUM_LOOPS\n");

581 
	`k¥ötf
("or\n");

582 
	`k¥ötf
("Usage: <command> NUM_BOWLS NUM_CATS NUM_MICE NUM_LOOPS ");

583 
	`k¥ötf
("CAT_EATING_TIME CAT_SLEEPING_TIME MOUSE_EATING_TIME MOUSE_SLEEPING_TIME\n");

588 
NumBowls
 = 
	`©oi
(
¨gs
[1]);

589 i‡(
NumBowls
 <= 0) {

590 
	`k¥ötf
("ˇtmou£: invÆidÇumbî o‡bowls: %d\n",
NumBowls
);

593 
NumC©s
 = 
	`©oi
(
¨gs
[2]);

594 i‡(
NumC©s
 < 0) {

595 
	`k¥ötf
("ˇtmou£: invÆidÇumbî o‡ˇts: %d\n",
NumC©s
);

598 
NumMi˚
 = 
	`©oi
(
¨gs
[3]);

599 i‡(
NumMi˚
 < 0) {

600 
	`k¥ötf
("ˇtmou£: invÆidÇumbî o‡mi˚: %d\n",
NumMi˚
);

603 
NumLo›s
 = 
	`©oi
(
¨gs
[4]);

604 i‡(
NumLo›s
 <= 0) {

605 
	`k¥ötf
("ˇtmou£: invÆidÇumbî o‡lo›s: %d\n",
NumLo›s
);

609 i‡(
«rgs
 == 9) {

610 
C©E©Time
 = 
	`©oi
(
¨gs
[5]);

611 i‡(
C©E©Time
 < 0) {

612 
	`k¥ötf
("ˇtmou£: invÆid c©É©ögÅime: %d\n",
C©E©Time
);

616 
C©SÀïTime
 = 
	`©oi
(
¨gs
[6]);

617 i‡(
C©SÀïTime
 < 0) {

618 
	`k¥ötf
("ˇtmou£: invÆid c© sÀïögÅime: %d\n",
C©SÀïTime
);

622 
Mou£E©Time
 = 
	`©oi
(
¨gs
[7]);

623 i‡(
Mou£E©Time
 < 0) {

624 
	`k¥ötf
("ˇtmou£: invÆid mou£É©ögÅime: %d\n",
Mou£E©Time
);

628 
Mou£SÀïTime
 = 
	`©oi
(
¨gs
[8]);

629 i‡(
Mou£SÀïTime
 < 0) {

630 
	`k¥ötf
("ˇtmou£: invÆid mou£ sÀïögÅime: %d\n",
Mou£SÀïTime
);

635 
	`k¥ötf
("Using %d bowls, %d cats,ánd %d mice. Looping %dÅimes.\n",

636 
NumBowls
,
NumC©s
,
NumMi˚
,
NumLo›s
);

637 
	`k¥ötf
("Usög c©É©ögÅimê%d, c© sÀïögÅimê%d\n", 
C©E©Time
, 
C©SÀïTime
);

638 
	`k¥ötf
("Usög mou£É©ögÅimê%d, mou£ sÀïögÅimê%d\n", 
Mou£E©Time
, 
Mou£SÀïTime
);

642 
C©Mou£Waô
 = 
	`£m_¸óã
("CatMouseWait",0);

643 i‡(
C©Mou£Waô
 =
NULL
) {

644 
	`∑nic
("catmouse: couldÇot create semaphore\n");

648 
	`öôülize_bowls
();

651 
	`ˇtmou£_sync_öô
(
NumBowls
);

654 
	`gëtime
(&
bef‹e_£c
,&
bef‹e_n£c
);

660 
ˇtödex
 = 0; c©ödex < 
NumC©s
; catindex++) {

661 
îr‹
 = 
	`thªad_f‹k
("ˇt_simuœti⁄Åhªad", 
NULL
, 
ˇt_simuœti⁄
, NULL, 
ˇtödex
);

662 i‡(
îr‹
) {

663 
	`∑nic
("ˇt_simuœti⁄:Åhªad_f‹k faûed: %s\n", 
	`°ªº‹
(
îr‹
));

665 i‡(
ˇtödex
 < 
NumMi˚
) {

666 
îr‹
 = 
	`thªad_f‹k
("mou£_simuœti⁄Åhªad", 
NULL
, 
mou£_simuœti⁄
, NULL, 
ˇtödex
);

667 i‡(
îr‹
) {

668 
	`∑nic
("mou£_simuœti⁄:Åhªad_f‹k faûed: %s\n",
	`°ªº‹
(
îr‹
));

673 
mou£ödex
 = 
ˇtödex
; mou£ödex < 
NumMi˚
; mouseindex++) {

674 
îr‹
 = 
	`thªad_f‹k
("mou£_simuœti⁄Åhªad", 
NULL
, 
mou£_simuœti⁄
, NULL, 
mou£ödex
);

675 i‡(
îr‹
) {

676 
	`∑nic
("mou£_simuœti⁄:Åhªad_f‹k faûed: %s\n",
	`°ªº‹
(
îr‹
));

682 
i
=0;i<(
NumC©s
+
NumMi˚
);i++) {

683 
	`P
(
C©Mou£Waô
);

687 
	`gëtime
(&
a·î_£c
,&
a·î_n£c
);

689 
	`gëöãrvÆ
(
bef‹e_£c
,
bef‹e_n£c
,
a·î_£c
,
a·î_n£c
,&
waô_£c
,&
waô_n£c
);

691 
tŸÆ_bowl_mûli£c⁄ds
 = (
waô_£c
*1000 + 
waô_n£c
/1000000)*
NumBowls
;

692 
tŸÆ_ótög_mûli£c⁄ds
 = (
NumC©s
*
C©E©Time
 + 
NumMi˚
*
Mou£E©Time
)*
NumLo›s
*1000;

693 i‡(
tŸÆ_bowl_mûli£c⁄ds
 > 0) {

694 
utûiz©i⁄_≥r˚¡
 = 
tŸÆ_ótög_mûli£c⁄ds
*100/
tŸÆ_bowl_mûli£c⁄ds
;

695 
	`k¥ötf
("Bow»utûiz©i⁄: %d%%\n",
utûiz©i⁄_≥r˚¡
);

699 
	`£m_de°roy
(
C©Mou£Waô
);

702 
	`ˇtmou£_sync_˛ónup
(
NumBowls
);

705 
	`˛ónup_bowls
();

707 i‡(
ˇt_waô_cou¡
 > 0) {

709 
món_ˇt_waô_u£cs
 = (
ˇt_tŸÆ_waô_£cs
*1000000+
ˇt_tŸÆ_waô_n£cs
/1000)/
ˇt_waô_cou¡
;

710 
	`k¥ötf
("Mó¿ˇàwaôögÅime: %d.%d sec⁄ds\n",
món_ˇt_waô_u£cs
/1000000,mean_cat_wait_usecs%1000000);

712 i‡(
mou£_waô_cou¡
 > 0) {

714 
món_mou£_waô_u£cs
 = (
mou£_tŸÆ_waô_£cs
*1000000+
mou£_tŸÆ_waô_n£cs
/1000)/
mou£_waô_cou¡
;

715 
	`k¥ötf
("Mó¿mou£ waôögÅime: %d.%d sec⁄ds\n",
món_mou£_waô_u£cs
/1000000,mean_mouse_wait_usecs%1000000);

719 
	}
}

	@os161/kern/synchprobs/catmouse_synch.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<synch¥obs.h
>

4 
	~<synch.h
>

22 
£m≠h‹e
 *
	gglobÆC©Mou£Sem
;

34 
	$ˇtmou£_sync_öô
(
bowls
)

38 ()
bowls
;

39 
globÆC©Mou£Sem
 = 
	`£m_¸óã
("globalCatMouseSem",1);

40 i‡(
globÆC©Mou£Sem
 =
NULL
) {

41 
	`∑nic
("couldÇot create global CatMouse synchronization semaphore");

44 
	}
}

55 
	$ˇtmou£_sync_˛ónup
(
bowls
)

58 ()
bowls
;

59 
	`KASSERT
(
globÆC©Mou£Sem
 !
NULL
);

60 
	`£m_de°roy
(
globÆC©Mou£Sem
);

61 
	}
}

77 
	$ˇt_bef‹e_ótög
(
bowl
)

80 ()
bowl
;

81 
	`KASSERT
(
globÆC©Mou£Sem
 !
NULL
);

82 
	`P
(
globÆC©Mou£Sem
);

83 
	}
}

99 
	$ˇt_a·î_ótög
(
bowl
)

102 ()
bowl
;

103 
	`KASSERT
(
globÆC©Mou£Sem
 !
NULL
);

104 
	`V
(
globÆC©Mou£Sem
);

105 
	}
}

120 
	$mou£_bef‹e_ótög
(
bowl
)

123 ()
bowl
;

124 
	`KASSERT
(
globÆC©Mou£Sem
 !
NULL
);

125 
	`P
(
globÆC©Mou£Sem
);

126 
	}
}

142 
	$mou£_a·î_ótög
(
bowl
)

145 ()
bowl
;

146 
	`KASSERT
(
globÆC©Mou£Sem
 !
NULL
);

147 
	`V
(
globÆC©Mou£Sem
);

148 
	}
}

	@os161/kern/synchprobs/whalemating.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<thªad.h
>

36 
	~<ã°.h
>

38 
	#NMATING
 10

	)

42 
	$mÆe
(*
p
, 
which
)

44 ()
p
;

45 
	`k¥ötf
("mÆêwhÆê#%ld sèπög\n", 
which
);

48 
	}
}

52 
	$„mÆe
(*
p
, 
which
)

54 ()
p
;

55 
	`k¥ötf
("„mÆêwhÆê#%ld sèπög\n", 
which
);

58 
	}
}

62 
	$m©chmakî
(*
p
, 
which
)

64 ()
p
;

65 
	`k¥ötf
("m©chmakî whÆê#%ld sèπög\n", 
which
);

68 
	}
}

73 
	$whÆem©ög
(
«rgs
, **
¨gs
)

76 
i
, 
j
, 
îr
=0;

78 ()
«rgs
;

79 ()
¨gs
;

81 
i
 = 0; i < 3; i++) {

82 
j
 = 0; j < 
NMATING
; j++) {

83 #ifde‡
UW


84 
i
) {

86 
îr
 = 
	`thªad_f‹k
("MÆêWhÆêThªad", 
NULL
,

87 
mÆe
, 
NULL
, 
j
);

90 
îr
 = 
	`thªad_f‹k
("FemÆêWhÆêThªad", 
NULL
,

91 
„mÆe
, 
NULL
, 
j
);

94 
îr
 = 
	`thªad_f‹k
("M©chmakî WhÆêThªad", 
NULL
,

95 
m©chmakî
, 
NULL
, 
j
);

99 
i
) {

101 
îr
 = 
	`thªad_f‹k
("Male Whale Thread",

102 
mÆe
, 
NULL
, 
j
, NULL);

105 
îr
 = 
	`thªad_f‹k
("Female Whale Thread",

106 
„mÆe
, 
NULL
, 
j
, NULL);

109 
îr
 = 
	`thªad_f‹k
("Matchmaker Whale Thread",

110 
m©chmakî
, 
NULL
, 
j
, NULL);

114 i‡(
îr
) {

115 
	`∑nic
("whalemating:Åhread_fork failed: %s)\n",

116 
	`°ªº‹
(
îr
));

122 
	}
}

	@os161/kern/syscall/file_syscalls.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<kîn/uni°d.h
>

4 
	~<lib.h
>

5 
	~<uio.h
>

6 
	~<sysˇŒ.h
>

7 
	~<vnode.h
>

8 
	~<vfs.h
>

9 
	~<cuºít.h
>

10 
	~<¥oc.h
>

24 
	$sys_wrôe
(
fdesc
,
u£Ωå_t
 
ubuf
,
nbyãs
,*
ªtvÆ
)

26 
iovec
 
iov
;

27 
uio
 
u
;

28 
ªs
;

30 
	`DEBUG
(
DB_SYSCALL
,"SysˇŒ: wrôe(%d,%x,%d)\n",
fdesc
,()
ubuf
,
nbyãs
);

33 i‡(!((
fdesc
==
STDOUT_FILENO
)||(fdesc==
STDERR_FILENO
))) {

34  
EUNIMP
;

36 
	`KASSERT
(
cuΩroc
 !
NULL
);

37 
	`KASSERT
(
cuΩroc
->
c⁄sﬁe
 !
NULL
);

38 
	`KASSERT
(
cuΩroc
->
p_addr•a˚
 !
NULL
);

41 
iov
.
iov_uba£
 = 
ubuf
;

42 
iov
.
iov_Àn
 = 
nbyãs
;

43 
u
.
uio_iov
 = &
iov
;

44 
u
.
uio_iov˙t
 = 1;

45 
u
.
uio_off£t
 = 0;

46 
u
.
uio_ªsid
 = 
nbyãs
;

47 
u
.
uio_£gÊg
 = 
UIO_USERSPACE
;

48 
u
.
uio_rw
 = 
UIO_WRITE
;

49 
u
.
uio_•a˚
 = 
cuΩroc
->
p_addr•a˚
;

51 
ªs
 = 
	`VOP_WRITE
(
cuΩroc
->
c⁄sﬁe
,&
u
);

52 i‡(
ªs
) {

53  
ªs
;

57 *
ªtvÆ
 = 
nbyãs
 - 
u
.
uio_ªsid
;

58 
	`KASSERT
(*
ªtvÆ
 >= 0);

60 
	}
}

	@os161/kern/syscall/loadelf.c

53 
	~<ty≥s.h
>

54 
	~<kîn/î∫o.h
>

55 
	~<lib.h
>

56 
	~<uio.h
>

57 
	~<¥oc.h
>

58 
	~<cuºít.h
>

59 
	~<addr•a˚.h
>

60 
	~<vnode.h
>

61 
	~<ñf.h
>

79 
	$lﬂd_£gmít
(
addr•a˚
 *
as
, 
vnode
 *
v
,

80 
off_t
 
off£t
, 
vaddr_t
 
vaddr
,

81 
size_t
 
memsize
, size_à
fûesize
,

82 
is_execuèbÀ
)

84 
iovec
 
iov
;

85 
uio
 
u
;

86 
ªsu…
;

88 i‡(
fûesize
 > 
memsize
) {

89 
	`k¥ötf
("ELF: warning: segment filesize > segment memsize\n");

90 
fûesize
 = 
memsize
;

93 
	`DEBUG
(
DB_EXEC
, "ELF: Loading %lu bytesÅo 0x%lx\n",

94 (Ë
fûesize
, (Ë
vaddr
);

96 
iov
.
iov_uba£
 = (
u£Ωå_t
)
vaddr
;

97 
iov
.
iov_Àn
 = 
memsize
;

98 
u
.
uio_iov
 = &
iov
;

99 
u
.
uio_iov˙t
 = 1;

100 
u
.
uio_ªsid
 = 
fûesize
;

101 
u
.
uio_off£t
 = 
off£t
;

102 
u
.
uio_£gÊg
 = 
is_execuèbÀ
 ? 
UIO_USERISPACE
 : 
UIO_USERSPACE
;

103 
u
.
uio_rw
 = 
UIO_READ
;

104 
u
.
uio_•a˚
 = 
as
;

106 
ªsu…
 = 
	`VOP_READ
(
v
, &
u
);

107 i‡(
ªsu…
) {

108  
ªsu…
;

111 i‡(
u
.
uio_ªsid
 != 0) {

113 
	`k¥ötf
("ELF: shortÑead on segment - fileÅruncated?\n");

114  
ENOEXEC
;

133 
size_t
 
fûœmt
;

135 
fûœmt
 = 
memsize
 - 
fûesize
;

136 i‡(
fûœmt
 > 0) {

137 
	`DEBUG
(
DB_EXEC
, "ELF: Zero-filling %lu more bytes\n",

138 (Ë
fûœmt
);

139 
u
.
uio_ªsid
 +
fûœmt
;

140 
ªsu…
 = 
	`uiomovezîos
(
fûœmt
, &
u
);

145  
ªsu…
;

146 
	}
}

154 
	$lﬂd_ñf
(
vnode
 *
v
, 
vaddr_t
 *
íåypoöt
)

156 
Elf_Ehdr
 
eh
;

157 
Elf_Phdr
 
ph
;

158 
ªsu…
, 
i
;

159 
iovec
 
iov
;

160 
uio
 
ku
;

161 
addr•a˚
 *
as
;

163 
as
 = 
	`cuΩroc_gëas
();

169 
	`uio_köô
(&
iov
, &
ku
, &
eh
, ”h), 0, 
UIO_READ
);

170 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

171 i‡(
ªsu…
) {

172  
ªsu…
;

175 i‡(
ku
.
uio_ªsid
 != 0) {

177 
	`k¥ötf
("ELF: shortÑead on header - fileÅruncated?\n");

178  
ENOEXEC
;

192 i‡(
eh
.
e_idít
[
EI_MAG0
] !
ELFMAG0
 ||

193 
eh
.
e_idít
[
EI_MAG1
] !
ELFMAG1
 ||

194 
eh
.
e_idít
[
EI_MAG2
] !
ELFMAG2
 ||

195 
eh
.
e_idít
[
EI_MAG3
] !
ELFMAG3
 ||

196 
eh
.
e_idít
[
EI_CLASS
] !
ELFCLASS32
 ||

197 
eh
.
e_idít
[
EI_DATA
] !
ELFDATA2MSB
 ||

198 
eh
.
e_idít
[
EI_VERSION
] !
EV_CURRENT
 ||

199 
eh
.
e_vîsi⁄
 !
EV_CURRENT
 ||

200 
eh
.
e_ty≥
!=
ET_EXEC
 ||

201 
eh
.
e_machöe
!=
EM_MACHINE
) {

202  
ENOEXEC
;

220 
i
=0; i<
eh
.
e_phnum
; i++) {

221 
off_t
 
off£t
 = 
eh
.
e_phoff
 + 
i
*eh.
e_phítsize
;

222 
	`uio_köô
(&
iov
, &
ku
, &
ph
, ’h), 
off£t
, 
UIO_READ
);

224 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

225 i‡(
ªsu…
) {

226  
ªsu…
;

229 i‡(
ku
.
uio_ªsid
 != 0) {

231 
	`k¥ötf
("ELF: shortÑead onÖhdr - fileÅruncated?\n");

232  
ENOEXEC
;

235 
ph
.
p_ty≥
) {

236 
PT_NULL
: ;

237 
PT_PHDR
: ;

238 
PT_MIPS_REGINFO
: ;

239 
PT_LOAD
: ;

241 
	`k¥ötf
("loadelf: unknown segmentÅype %d\n",

242 
ph
.
p_ty≥
);

243  
ENOEXEC
;

246 
ªsu…
 = 
	`as_deföe_ªgi⁄
(
as
,

247 
ph
.
p_vaddr
,Öh.
p_memsz
,

248 
ph
.
p_Êags
 & 
PF_R
,

249 
ph
.
p_Êags
 & 
PF_W
,

250 
ph
.
p_Êags
 & 
PF_X
);

251 i‡(
ªsu…
) {

252  
ªsu…
;

256 
ªsu…
 = 
	`as_¥ï¨e_lﬂd
(
as
);

257 i‡(
ªsu…
) {

258  
ªsu…
;

265 
i
=0; i<
eh
.
e_phnum
; i++) {

266 
off_t
 
off£t
 = 
eh
.
e_phoff
 + 
i
*eh.
e_phítsize
;

267 
	`uio_köô
(&
iov
, &
ku
, &
ph
, ’h), 
off£t
, 
UIO_READ
);

269 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

270 i‡(
ªsu…
) {

271  
ªsu…
;

274 i‡(
ku
.
uio_ªsid
 != 0) {

276 
	`k¥ötf
("ELF: shortÑead onÖhdr - fileÅruncated?\n");

277  
ENOEXEC
;

280 
ph
.
p_ty≥
) {

281 
PT_NULL
: ;

282 
PT_PHDR
: ;

283 
PT_MIPS_REGINFO
: ;

284 
PT_LOAD
: ;

286 
	`k¥ötf
("loadelf: unknown segmentÅype %d\n",

287 
ph
.
p_ty≥
);

288  
ENOEXEC
;

291 
ªsu…
 = 
	`lﬂd_£gmít
(
as
, 
v
, 
ph
.
p_off£t
,Öh.
p_vaddr
,

292 
ph
.
p_memsz
,Öh.
p_fûesz
,

293 
ph
.
p_Êags
 & 
PF_X
);

294 i‡(
ªsu…
) {

295  
ªsu…
;

299 
ªsu…
 = 
	`as_com∂ëe_lﬂd
(
as
);

300 i‡(
ªsu…
) {

301  
ªsu…
;

304 *
íåypoöt
 = 
eh
.
e_íåy
;

307 
	}
}

	@os161/kern/syscall/proc_syscalls.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<kîn/uni°d.h
>

4 
	~<kîn/waô.h
>

5 
	~<lib.h
>

6 
	~<sysˇŒ.h
>

7 
	~<cuºít.h
>

8 
	~<¥oc.h
>

9 
	~<thªad.h
>

10 
	~<addr•a˚.h
>

11 
	~<c›yöout.h
>

16 
	$sys__exô
(
exôcode
) {

18 
addr•a˚
 *
as
;

19 
¥oc
 *
p
 = 
cuΩroc
;

22 ()
exôcode
;

24 
	`DEBUG
(
DB_SYSCALL
,"SysˇŒ: _exô(%d)\n",
exôcode
);

26 
	`KASSERT
(
cuΩroc
->
p_addr•a˚
 !
NULL
);

27 
	`as_dó˘iv©e
();

35 
as
 = 
	`cuΩroc_£ès
(
NULL
);

36 
	`as_de°roy
(
as
);

40 
	`¥oc_ªmthªad
(
cuπhªad
);

44 
	`¥oc_de°roy
(
p
);

46 
	`thªad_exô
();

48 
	`∑nic
("return fromÅhread_exit in sys_exit\n");

49 
	}
}

54 
	$sys_gëpid
(
pid_t
 *
ªtvÆ
)

58 *
ªtvÆ
 = 1;

60 
	}
}

65 
	$sys_waôpid
(
pid_t
 
pid
,

66 
u£Ωå_t
 
°©us
,

67 
›ti⁄s
,

68 
pid_t
 *
ªtvÆ
)

70 
exô°©us
;

71 
ªsu…
;

82 i‡(
›ti⁄s
 != 0) {

83 (
EINVAL
);

86 
exô°©us
 = 0;

87 
ªsu…
 = 
	`c›yout
((*)&
exô°©us
,
°©us
,());

88 i‡(
ªsu…
) {

89 (
ªsu…
);

91 *
ªtvÆ
 = 
pid
;

93 
	}
}

	@os161/kern/syscall/runprogram.c

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<kîn/f˙é.h
>

39 
	~<lib.h
>

40 
	~<¥oc.h
>

41 
	~<cuºít.h
>

42 
	~<addr•a˚.h
>

43 
	~<vm.h
>

44 
	~<vfs.h
>

45 
	~<sysˇŒ.h
>

46 
	~<ã°.h
>

55 
	$ru≈rogøm
(*
¥og«me
)

57 
addr•a˚
 *
as
;

58 
vnode
 *
v
;

59 
vaddr_t
 
íåypoöt
, 
°ack±r
;

60 
ªsu…
;

63 
ªsu…
 = 
	`vfs_›í
(
¥og«me
, 
O_RDONLY
, 0, &
v
);

64 i‡(
ªsu…
) {

65  
ªsu…
;

69 
	`KASSERT
(
	`cuΩroc_gëas
(Ë=
NULL
);

72 
as
 = 
	`as_¸óã
();

73 i‡(
as
 ==
NULL
) {

74 
	`vfs_˛o£
(
v
);

75  
ENOMEM
;

79 
	`cuΩroc_£ès
(
as
);

80 
	`as_a˘iv©e
();

83 
ªsu…
 = 
	`lﬂd_ñf
(
v
, &
íåypoöt
);

84 i‡(
ªsu…
) {

86 
	`vfs_˛o£
(
v
);

87  
ªsu…
;

91 
	`vfs_˛o£
(
v
);

94 
ªsu…
 = 
	`as_deföe_°ack
(
as
, &
°ack±r
);

95 i‡(
ªsu…
) {

97  
ªsu…
;

101 
	`íãr_√w_¥o˚ss
(0 , 
NULL
 ,

102 
°ack±r
, 
íåypoöt
);

105 
	`∑nic
("enter_new_processÑeturned\n");

106  
EINVAL
;

107 
	}
}

	@os161/kern/syscall/time_syscalls.c

30 
	~<ty≥s.h
>

31 
	~<˛ock.h
>

32 
	~<c›yöout.h
>

33 
	~<sysˇŒ.h
>

39 
	$sys___time
(
u£Ωå_t
 
u£r_£c⁄ds_±r
, u£Ωå_à
u£r_«no£c⁄ds_±r
)

41 
time_t
 
£c⁄ds
;

42 
uöt32_t
 
«no£c⁄ds
;

43 
ªsu…
;

45 
	`gëtime
(&
£c⁄ds
, &
«no£c⁄ds
);

47 
ªsu…
 = 
	`c›yout
(&
£c⁄ds
, 
u£r_£c⁄ds_±r
, (
time_t
));

48 i‡(
ªsu…
) {

49  
ªsu…
;

52 
ªsu…
 = 
	`c›yout
(&
«no£c⁄ds
, 
u£r_«no£c⁄ds_±r
, (
uöt32_t
));

53 i‡(
ªsu…
) {

54  
ªsu…
;

58 
	}
}

	@os161/kern/test/arraytest.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<¨øy.h
>

33 
	~<ã°.h
>

35 
	#TESTSIZE
 73

	)

39 
	$ã°a
(
¨øy
 *
a
)

41 
ã°¨øy
[
TESTSIZE
];

42 
i
, 
j
, 
n
, 
r
, *
p
;

44 
i
=0; i<
TESTSIZE
; i++) {

45 
ã°¨øy
[
i
]=i;

48 
n
 = 
	`¨øy_num
(
a
);

49 
	`KASSERT
(
n
==0);

51 
i
=0; i<
TESTSIZE
; i++) {

52 
r
 = 
	`¨øy_add
(
a
, &
ã°¨øy
[
i
], 
NULL
);

53 
	`KASSERT
(
r
==0);

54 
n
 = 
	`¨øy_num
(
a
);

55 
	`KASSERT
(
n
==
i
+1);

57 
n
 = 
	`¨øy_num
(
a
);

58 
	`KASSERT
(
n
==
TESTSIZE
);

60 
i
=0; i<
TESTSIZE
; i++) {

61 
p
 = 
	`¨øy_gë
(
a
, 
i
);

62 
	`KASSERT
(*
p
 =
i
);

64 
n
 = 
	`¨øy_num
(
a
);

65 
	`KASSERT
(
n
==
TESTSIZE
);

67 
j
=0; j<
TESTSIZE
*4; j++) {

68 
i
 = 
	`øndom
()%
TESTSIZE
;

69 
p
 = 
	`¨øy_gë
(
a
, 
i
);

70 
	`KASSERT
(*
p
 =
i
);

72 
n
 = 
	`¨øy_num
(
a
);

73 
	`KASSERT
(
n
==
TESTSIZE
);

75 
i
=0; i<
TESTSIZE
; i++) {

76 
	`¨øy_£t
(
a
, 
i
, &
ã°¨øy
[
TESTSIZE
-i-1]);

79 
i
=0; i<
TESTSIZE
; i++) {

80 
p
 = 
	`¨øy_gë
(
a
, 
i
);

81 
	`KASSERT
(*
p
 =
TESTSIZE
-
i
-1);

84 
r
 = 
	`¨øy_£tsize
(
a
, 
TESTSIZE
/2);

85 
	`KASSERT
(
r
==0);

87 
i
=0; i<
TESTSIZE
/2; i++) {

88 
p
 = 
	`¨øy_gë
(
a
, 
i
);

89 
	`KASSERT
(*
p
 =
TESTSIZE
-
i
-1);

92 
	`¨øy_ªmove
(
a
, 1);

94 
i
=1; i<
TESTSIZE
/2 - 1; i++) {

95 
p
 = 
	`¨øy_gë
(
a
, 
i
);

96 
	`KASSERT
(*
p
 =
TESTSIZE
-
i
-2);

98 
p
 = 
	`¨øy_gë
(
a
, 0);

99 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

101 
	`¨øy_£tsize
(
a
, 2);

102 
p
 = 
	`¨øy_gë
(
a
, 0);

103 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

104 
p
 = 
	`¨øy_gë
(
a
, 1);

105 
	`KASSERT
(*
p
 =
TESTSIZE
-3);

107 
	`¨øy_£t
(
a
, 1, 
NULL
);

108 
	`¨øy_£tsize
(
a
, 2);

109 
p
 = 
	`¨øy_gë
(
a
, 0);

110 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

111 
p
 = 
	`¨øy_gë
(
a
, 1);

112 
	`KASSERT
(
p
==
NULL
);

114 
	`¨øy_£tsize
(
a
, 
TESTSIZE
*10);

115 
p
 = 
	`¨øy_gë
(
a
, 0);

116 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

117 
p
 = 
	`¨øy_gë
(
a
, 1);

118 
	`KASSERT
(
p
==
NULL
);

119 
	}
}

122 
	$¨øyã°
(
«rgs
, **
¨gs
)

124 
¨øy
 *
a
;

126 ()
«rgs
;

127 ()
¨gs
;

129 
	`k¥ötf
("BeginningárrayÅest...\n");

130 
a
 = 
	`¨øy_¸óã
();

131 
	`KASSERT
(
a
 !
NULL
);

133 
	`ã°a
(
a
);

135 
	`¨øy_£tsize
(
a
, 0);

137 
	`ã°a
(
a
);

139 
	`¨øy_£tsize
(
a
, 0);

140 
	`¨øy_de°roy
(
a
);

142 
	`k¥ötf
("ArrayÅest complete\n");

144 
	}
}

	@os161/kern/test/bitmaptest.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<bôm≠.h
>

33 
	~<ã°.h
>

35 
	#TESTSIZE
 533

	)

38 
	$bôm≠ã°
(
«rgs
, **
¨gs
)

40 
bôm≠
 *
b
;

41 
d©a
[
TESTSIZE
];

42 
uöt32_t
 
x
;

43 
i
;

45 ()
«rgs
;

46 ()
¨gs
;

48 
	`k¥ötf
("Starting bitmapÅest...\n");

50 
i
=0; i<
TESTSIZE
; i++) {

51 
d©a
[
i
] = 
	`øndom
()%2;

54 
b
 = 
	`bôm≠_¸óã
(
TESTSIZE
);

55 
	`KASSERT
(
b
 !
NULL
);

57 
i
=0; i<
TESTSIZE
; i++) {

58 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
)==0);

61 
i
=0; i<
TESTSIZE
; i++) {

62 i‡(
d©a
[
i
]) {

63 
	`bôm≠_m¨k
(
b
, 
i
);

66 
i
=0; i<
TESTSIZE
; i++) {

67 i‡(
d©a
[
i
]) {

68 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
));

71 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
)==0);

75 
i
=0; i<
TESTSIZE
; i++) {

76 i‡(
d©a
[
i
]) {

77 
	`bôm≠_unm¨k
(
b
, 
i
);

80 
	`bôm≠_m¨k
(
b
, 
i
);

83 
i
=0; i<
TESTSIZE
; i++) {

84 i‡(
d©a
[
i
]) {

85 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
)==0);

88 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
));

92 
	`bôm≠_Æloc
(
b
, &
x
)==0) {

93 
	`KASSERT
(
x
 < 
TESTSIZE
);

94 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
x
));

95 
	`KASSERT
(
d©a
[
x
]==1);

96 
d©a
[
x
] = 0;

99 
i
=0; i<
TESTSIZE
; i++) {

100 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
));

101 
	`KASSERT
(
d©a
[
i
]==0);

104 
	`k¥ötf
("BitmapÅest complete\n");

106 
	}
}

	@os161/kern/test/cmdreader.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<ã°.h
>

5 
	$¥ötLöe
(
¨gc
, **
¨gv
)

7 
i
 = 1; i < 
¨gc
; i++)

9 
	`k¥ötf
("%†", 
¨gv
[
i
]);

11 
	`k¥ötf
("\n");

13 
	}
}

	@os161/kern/test/fstest.c

41 
	~<ty≥s.h
>

42 
	~<kîn/î∫o.h
>

43 
	~<kîn/f˙é.h
>

44 
	~<lib.h
>

45 
	~<uio.h
>

46 
	~<thªad.h
>

47 
	~<synch.h
>

48 
	~<vfs.h
>

49 
	~<fs.h
>

50 
	~<vnode.h
>

51 
	~<ã°.h
>

53 
	#SLOGAN
 "HODIE MIHI - CRAS TIBI\n"

	)

54 
	#FILENAME
 "f°e°.tmp"

	)

55 
	#NCHUNKS
 720

	)

56 
	#NTHREADS
 12

	)

57 
	#NCREATES
 32

	)

59 
£m≠h‹e
 *
	gthªad£m
 = 
NULL
;

63 
	$öô_thªad£m
()

65 i‡(
thªad£m
==
NULL
) {

66 
thªad£m
 = 
	`£m_¸óã
("fstestsem", 0);

67 i‡(
thªad£m
 =
NULL
) {

68 
	`∑nic
("fstest: sem_create failed\n");

71 
	}
}

79 
	$rŸ©e
(*
°r
, 
amt
)

81 
i
, 
ch
;

83 
amt
 = (amt+2600)%26;

84 
	`KASSERT
(
amt
>=0);

86 
i
=0; 
°r
[i]; i++) {

87 
ch
 = 
°r
[
i
];

88 i‡(
ch
>='A' && ch<='Z') {

89 
ch
 = ch - 'A';

90 
ch
 +
amt
;

91 
ch
 %= 26;

92 
ch
 = ch + 'A';

93 
	`KASSERT
(
ch
>='A' && ch<='Z');

95 
°r
[
i
] = 
ch
;

97 
	}
}

103 
	$f°e°_makíame
(*
buf
, 
size_t
 
buÊí
,

104 c⁄° *
fs
, c⁄° *
«mesuffix
)

106 
	`¢¥ötf
(
buf
, 
buÊí
, "%s:%s%s", 
fs
, 
FILENAME
, 
«mesuffix
);

107 
	`KASSERT
(
	`°æí
(
buf
Ë< 
buÊí
);

108 
	}
}

110 
	#MAKENAME
(Ë
	`f°e°_makíame
(
«me
, “ame), 
fs
, 
«mesuffix
)

	)

114 
	$f°e°_ªmove
(c⁄° *
fs
, c⁄° *
«mesuffix
)

116 
«me
[32];

117 
buf
[32];

118 
îr
;

120 
	`MAKENAME
();

122 
	`°r˝y
(
buf
, 
«me
);

123 
îr
 = 
	`vfs_ªmove
(
buf
);

124 i‡(
îr
) {

125 
	`k¥ötf
("CouldÇŸÑemovê%s: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

130 
	}
}

134 
	$f°e°_wrôe
(c⁄° *
fs
, c⁄° *
«mesuffix
,

135 
°ridesize
, 
°ridïos
)

137 
vnode
 *
vn
;

138 
îr
;

139 
i
;

140 
size_t
 
shouldbyãs
=0;

141 
size_t
 
byãs
=0;

142 
off_t
 
pos
=0;

143 
«me
[32];

144 
buf
[32];

145 
iovec
 
iov
;

146 
uio
 
ku
;

147 
Êags
;

149 
	`KASSERT
((
buf
Ë> 
	`°æí
(
SLOGAN
));

151 
	`MAKENAME
();

153 
Êags
 = 
O_WRONLY
|
O_CREAT
;

154 i‡(
°ridesize
 == 1) {

155 
Êags
 |
O_TRUNC
;

159 
	`°r˝y
(
buf
, 
«me
);

160 
îr
 = 
	`vfs_›í
(
buf
, 
Êags
, 0664, &
vn
);

161 i‡(
îr
) {

162 
	`k¥ötf
("CouldÇot open %s for write: %s\n",

163 
«me
, 
	`°ªº‹
(
îr
));

167 
i
=0; i<
NCHUNKS
; i++) {

168 i‡(
i
 % 
°ridesize
 !
°ridïos
) {

169 
pos
 +
	`°æí
(
SLOGAN
);

172 
	`°r˝y
(
buf
, 
SLOGAN
);

173 
	`rŸ©e
(
buf
, 
i
);

174 
	`uio_köô
(&
iov
, &
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 
pos
, 
UIO_WRITE
);

175 
îr
 = 
	`VOP_WRITE
(
vn
, &
ku
);

176 i‡(
îr
) {

177 
	`k¥ötf
("%s: Wrôêîr‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

178 
	`vfs_˛o£
(
vn
);

179 
	`vfs_ªmove
(
«me
);

183 i‡(
ku
.
uio_ªsid
 > 0) {

184 
	`k¥ötf
("%s: Short write: %lu bytesÜeft over\n",

185 
«me
, (Ë
ku
.
uio_ªsid
);

186 
	`vfs_˛o£
(
vn
);

187 
	`vfs_ªmove
(
«me
);

191 
byãs
 +(
ku
.
uio_off£t
 - 
pos
);

192 
shouldbyãs
 +
	`°æí
(
SLOGAN
);

193 
pos
 = 
ku
.
uio_off£t
;

196 
	`vfs_˛o£
(
vn
);

198 i‡(
byãs
 !
shouldbyãs
) {

199 
	`k¥ötf
("%s: %lu bytes written, should have been %lu!\n",

200 
«me
, (Ë
byãs
,

201 (Ë(
NCHUNKS
*
	`°æí
(
SLOGAN
)));

202 
	`vfs_ªmove
(
«me
);

205 
	`k¥ötf
("%s: %lu byã†wrôãn\n", 
«me
, (Ë
byãs
);

208 
	}
}

212 
	$f°e°_ªad
(c⁄° *
fs
, c⁄° *
«mesuffix
)

214 
vnode
 *
vn
;

215 
îr
;

216 
i
;

217 
size_t
 
byãs
=0;

218 
«me
[32];

219 
buf
[32];

220 
iovec
 
iov
;

221 
uio
 
ku
;

223 
	`MAKENAME
();

226 
	`°r˝y
(
buf
, 
«me
);

227 
îr
 = 
	`vfs_›í
(
buf
, 
O_RDONLY
, 0664, &
vn
);

228 i‡(
îr
) {

229 
	`k¥ötf
("CouldÇot openÅest file forÑead: %s\n",

230 
	`°ªº‹
(
îr
));

234 
i
=0; i<
NCHUNKS
; i++) {

235 
	`uio_köô
(&
iov
, &
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 
byãs
, 
UIO_READ
);

236 
îr
 = 
	`VOP_READ
(
vn
, &
ku
);

237 i‡(
îr
) {

238 
	`k¥ötf
("%s: RódÉº‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

239 
	`vfs_˛o£
(
vn
);

243 i‡(
ku
.
uio_ªsid
 > 0) {

244 
	`k¥ötf
("%s: Sh‹àªad: %lu byã†À· ovî\n", 
«me
,

245 (Ë
ku
.
uio_ªsid
);

246 
	`vfs_˛o£
(
vn
);

249 
buf
[
	`°æí
(
SLOGAN
)] = 0;

250 
	`rŸ©e
(
buf
, -
i
);

251 i‡(
	`°rcmp
(
buf
, 
SLOGAN
)) {

252 
	`k¥ötf
("%s: Test failed:Üine %d mismatched: %s\n",

253 
«me
, 
i
+1, 
buf
);

254 
	`vfs_˛o£
(
vn
);

258 
byãs
 = 
ku
.
uio_off£t
;

261 
	`vfs_˛o£
(
vn
);

263 i‡(
byãs
 !
NCHUNKS
*
	`°æí
(
SLOGAN
)) {

264 
	`k¥ötf
("%s: %lu bytesÑead, should have been %lu!\n",

265 
«me
, (Ë
byãs
,

266 (Ë(
NCHUNKS
*
	`°æí
(
SLOGAN
)));

269 
	`k¥ötf
("%s: %lu byã†ªad\n", 
«me
, (Ë
byãs
);

271 
	}
}

277 
	$dof°e°
(c⁄° *
fûesys
)

279 
	`k¥ötf
("*** Sèπög fûesy°emÅe° o¿%s:\n", 
fûesys
);

281 i‡(
	`f°e°_wrôe
(
fûesys
, "", 1, 0)) {

282 
	`k¥ötf
("*** Test failed\n");

286 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

287 
	`k¥ötf
("*** Test failed\n");

291 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

292 
	`k¥ötf
("*** Test failed\n");

296 
	`k¥ötf
("*** FilesystemÅest done\n");

297 
	}
}

303 
	$ªad°ªss_thªad
(*
fs
, 
num
)

305 c⁄° *
fûesys
 = 
fs
;

306 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

307 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

309 
	`V
(
thªad£m
);

310 
	}
}

314 
	$d‹ód°ªss
(c⁄° *
fûesys
)

316 
i
, 
îr
;

318 
	`öô_thªad£m
();

320 
	`k¥ötf
("*** Sèπög f†ªad såes†ã° o¿%s:\n", 
fûesys
);

322 i‡(
	`f°e°_wrôe
(
fûesys
, "", 1, 0)) {

323 
	`k¥ötf
("*** Test failed\n");

327 
i
=0; i<
NTHREADS
; i++) {

328 
îr
 = 
	`thªad_f‹k
("ªad°ªss", 
NULL
,

329 
ªad°ªss_thªad
, (*)
fûesys
, 
i
);

330 i‡(
îr
) {

331 
	`∑nic
("readstress:Åhread_fork failed: %s\n",

332 
	`°ªº‹
(
îr
));

336 
i
=0; i<
NTHREADS
; i++) {

337 
	`P
(
thªad£m
);

340 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

341 
	`k¥ötf
("*** Test failed\n");

345 
	`k¥ötf
("*** fsÑead stressÅest done\n");

346 
	}
}

352 
	$wrôe°ªss_thªad
(*
fs
, 
num
)

354 c⁄° *
fûesys
 = 
fs
;

355 
num°r
[8];

356 
	`¢¥ötf
(
num°r
, “um°r), "%lu", 
num
);

358 i‡(
	`f°e°_wrôe
(
fûesys
, 
num°r
, 1, 0)) {

359 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

360 
	`V
(
thªad£m
);

364 i‡(
	`f°e°_ªad
(
fûesys
, 
num°r
)) {

365 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

366 
	`V
(
thªad£m
);

370 i‡(
	`f°e°_ªmove
(
fûesys
, 
num°r
)) {

371 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

374 
	`k¥ötf
("*** Thªad %lu: d⁄e\n", 
num
);

376 
	`V
(
thªad£m
);

377 
	}
}

381 
	$dowrôe°ªss
(c⁄° *
fûesys
)

383 
i
, 
îr
;

385 
	`öô_thªad£m
();

387 
	`k¥ötf
("*** Sèπög f†wrôê°ªs†ã° o¿%s:\n", 
fûesys
);

389 
i
=0; i<
NTHREADS
; i++) {

390 
îr
 = 
	`thªad_f‹k
("wrôe°ªss", 
NULL
,

391 
wrôe°ªss_thªad
, (*)
fûesys
, 
i
);

392 i‡(
îr
) {

393 
	`∑nic
("thªad_f‹k faûed %s\n", 
	`°ªº‹
(
îr
));

397 
i
=0; i<
NTHREADS
; i++) {

398 
	`P
(
thªad£m
);

401 
	`k¥ötf
("*** fs write stressÅest done\n");

402 
	}
}

408 
	$wrôe°ªss2_thªad
(*
fs
, 
num
)

410 c⁄° *
fûesys
 = 
fs
;

412 i‡(
	`f°e°_wrôe
(
fûesys
, "", 
NTHREADS
, 
num
)) {

413 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

414 
	`V
(
thªad£m
);

418 
	`V
(
thªad£m
);

419 
	}
}

423 
	$dowrôe°ªss2
(c⁄° *
fûesys
)

425 
i
, 
îr
;

426 
«me
[32];

427 
vnode
 *
vn
;

429 
	`öô_thªad£m
();

431 
	`k¥ötf
("*** Sèπög f†wrôê°ªs†ã° 2 o¿%s:\n", 
fûesys
);

434 
	`f°e°_makíame
(
«me
, “ame), 
fûesys
, "");

435 
îr
 = 
	`vfs_›í
(
«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664, &
vn
);

436 i‡(
îr
) {

437 
	`k¥ötf
("CouldÇŸ cª©êã° fûe: %s\n", 
	`°ªº‹
(
îr
));

438 
	`k¥ötf
("*** Test failed\n");

441 
	`vfs_˛o£
(
vn
);

443 
i
=0; i<
NTHREADS
; i++) {

444 
îr
 = 
	`thªad_f‹k
("wrôe°ªss2", 
NULL
,

445 
wrôe°ªss2_thªad
, (*)
fûesys
, 
i
);

446 i‡(
îr
) {

447 
	`∑nic
("writestress2:Åhread_fork failed: %s\n",

448 
	`°ªº‹
(
îr
));

452 
i
=0; i<
NTHREADS
; i++) {

453 
	`P
(
thªad£m
);

456 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

457 
	`k¥ötf
("*** Test failed\n");

461 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

462 
	`k¥ötf
("*** Test failed\n");

466 
	`k¥ötf
("*** fs write stressÅest 2 done\n");

467 
	}
}

473 
	$¸óã°ªss_thªad
(*
fs
, 
num
)

475 c⁄° *
fûesys
 = 
fs
;

476 
i
;

477 
num°r
[16];

479 
i
=0; i<
NCREATES
; i++) {

481 
	`¢¥ötf
(
num°r
, “um°r), "%lu-%d", 
num
, 
i
);

483 i‡(
	`f°e°_wrôe
(
fûesys
, 
num°r
, 1, 0)) {

484 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

485 
	`V
(
thªad£m
);

489 i‡(
	`f°e°_ªad
(
fûesys
, 
num°r
)) {

490 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

491 
	`V
(
thªad£m
);

495 i‡(
	`f°e°_ªmove
(
fûesys
, 
num°r
)) {

496 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

497 
	`V
(
thªad£m
);

503 
	`V
(
thªad£m
);

504 
	}
}

508 
	$do¸óã°ªss
(c⁄° *
fûesys
)

510 
i
, 
îr
;

512 
	`öô_thªad£m
();

514 
	`k¥ötf
("*** Sèπög f†¸óã såes†ã° o¿%s:\n", 
fûesys
);

516 
i
=0; i<
NTHREADS
; i++) {

517 #ifde‡
UW


518 
îr
 = 
	`thªad_f‹k
("¸óã°ªss", 
NULL
,

519 
¸óã°ªss_thªad
, (*)
fûesys
, 
i
);

521 
îr
 = 
	`thªad_f‹k
("createstress",

522 
¸óã°ªss_thªad
, (*)
fûesys
, 
i
,

523 
NULL
);

525 i‡(
îr
) {

526 
	`∑nic
("createstress:Åhread_fork failed %s\n",

527 
	`°ªº‹
(
îr
));

531 
i
=0; i<
NTHREADS
; i++) {

532 
	`P
(
thªad£m
);

535 
	`k¥ötf
("*** fs create stressÅest done\n");

536 
	}
}

542 
	$checkfûesy°em
(
«rgs
, **
¨gs
)

544 *
devi˚
;

546 i‡(
«rgs
 != 2) {

547 
	`k¥ötf
("Usage: fs[12345] filesystem:\n");

548  
EINVAL
;

551 
devi˚
 = 
¨gs
[1];

554 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

555 
devi˚
[
	`°æí
(device)-1] = 0;

559 
	}
}

561 
	#DEFTEST
(
ã°«me
) \

563 
	`ã°«me
(
«rgs
, **
¨gs
) \

565 
ªsu…
; \

566 
ªsu…
 = 
	`checkfûesy°em
(
«rgs
, 
¨gs
); \

567 i‡(
ªsu…
) { \

568  
ªsu…
; \

570 do##
	`ã°«me
(
¨gs
[1]); \

572 }

	)

574 
DEFTEST
(
f°e°
);

575 
DEFTEST
(
ªad°ªss
);

576 
DEFTEST
(
wrôe°ªss
);

577 
DEFTEST
(
wrôe°ªss2
);

578 
DEFTEST
(
¸óã°ªss
);

583 
	$¥ötfûe
(
«rgs
, **
¨gs
)

585 
vnode
 *
rv
, *
wv
;

586 
iovec
 
iov
;

587 
uio
 
ku
;

588 
off_t
 
Ωos
=0, 
wpos
=0;

589 
buf
[128];

590 
outfûe
[16];

591 
ªsu…
;

592 
d⁄e
=0;

594 i‡(
«rgs
 != 2) {

595 
	`k¥ötf
("Usage:Öf filename\n");

596  
EINVAL
;

600 
	`°r˝y
(
outfûe
, "con:");

602 
ªsu…
 = 
	`vfs_›í
(
¨gs
[1], 
O_RDONLY
, 0664, &
rv
);

603 i‡(
ªsu…
) {

604 
	`k¥ötf
("¥ötfûe: %s\n", 
	`°ªº‹
(
ªsu…
));

605  
ªsu…
;

608 
ªsu…
 = 
	`vfs_›í
(
outfûe
, 
O_WRONLY
, 0664, &
wv
);

609 i‡(
ªsu…
) {

610 
	`k¥ötf
("¥ötfûe: ouçut: %s\n", 
	`°ªº‹
(
ªsu…
));

611 
	`vfs_˛o£
(
rv
);

612  
ªsu…
;

615 !
d⁄e
) {

616 
	`uio_köô
(&
iov
, &
ku
, 
buf
, (buf), 
Ωos
, 
UIO_READ
);

617 
ªsu…
 = 
	`VOP_READ
(
rv
, &
ku
);

618 i‡(
ªsu…
) {

619 
	`k¥ötf
("RódÉº‹: %s\n", 
	`°ªº‹
(
ªsu…
));

622 
Ωos
 = 
ku
.
uio_off£t
;

624 i‡(
ku
.
uio_ªsid
 > 0) {

625 
d⁄e
 = 1;

628 
	`uio_köô
(&
iov
, &
ku
, 
buf
, (buf)-ku.
uio_ªsid
, 
wpos
,

629 
UIO_WRITE
);

630 
ªsu…
 = 
	`VOP_WRITE
(
wv
, &
ku
);

631 i‡(
ªsu…
) {

632 
	`k¥ötf
("Wrôêîr‹: %s\n", 
	`°ªº‹
(
ªsu…
));

635 
wpos
 = 
ku
.
uio_off£t
;

637 i‡(
ku
.
uio_ªsid
 > 0) {

638 
	`k¥ötf
("Warning: short write\n");

642 
	`vfs_˛o£
(
wv
);

643 
	`vfs_˛o£
(
rv
);

646 
	}
}

	@os161/kern/test/malloctest.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<thªad.h
>

36 
	~<synch.h
>

37 
	~<ã°.h
>

50 
	#NTRIES
 1200

	)

51 
	#ITEMSIZE
 997

	)

52 
	#NTHREADS
 8

	)

56 
	$mÆlo˘hªad
(*
sm
, 
num
)

58 
£m≠h‹e
 *
£m
 = 
sm
;

59 *
±r
;

60 *
ﬁd±r
=
NULL
;

61 *
ﬁd±r2
=
NULL
;

62 
i
;

64 
i
=0; i<
NTRIES
; i++) {

65 
±r
 = 
	`kmÆloc
(
ITEMSIZE
);

66 i‡(
±r
==
NULL
) {

67 i‡(
£m
) {

68 
	`k¥ötf
("thread %lu: kmallocÑeturned NULL\n",

69 
num
);

70 
	`V
(
£m
);

73 
	`k¥ötf
("kmallocÑeturnedÇull;Åest failed.\n");

76 i‡(
ﬁd±r2
) {

77 
	`k‰ì
(
ﬁd±r2
);

79 
ﬁd±r2
 = 
ﬁd±r
;

80 
ﬁd±r
 = 
±r
;

82 i‡(
ﬁd±r2
) {

83 
	`k‰ì
(
ﬁd±r2
);

85 i‡(
ﬁd±r
) {

86 
	`k‰ì
(
ﬁd±r
);

88 i‡(
£m
) {

89 
	`V
(
£m
);

91 
	}
}

94 
	$mÆlo˘e°
(
«rgs
, **
¨gs
)

96 ()
«rgs
;

97 ()
¨gs
;

99 
	`k¥ötf
("Starting kmallocÅest...\n");

100 
	`mÆlo˘hªad
(
NULL
, 0);

101 
	`k¥ötf
("kmallocÅest done\n");

104 
	}
}

107 
	$mÆloc°ªss
(
«rgs
, **
¨gs
)

109 
£m≠h‹e
 *
£m
;

110 
i
, 
ªsu…
;

112 ()
«rgs
;

113 ()
¨gs
;

115 
£m
 = 
	`£m_¸óã
("mallocstress", 0);

116 i‡(
£m
 =
NULL
) {

117 
	`∑nic
("mallocstress: sem_create failed\n");

120 
	`k¥ötf
("Starting kmalloc stressÅest...\n");

122 
i
=0; i<
NTHREADS
; i++) {

123 
ªsu…
 = 
	`thªad_f‹k
("mÆloc°ªss", 
NULL
,

124 
mÆlo˘hªad
, 
£m
, 
i
);

125 i‡(
ªsu…
) {

126 
	`∑nic
("mallocstress:Åhread_fork failed: %s\n",

127 
	`°ªº‹
(
ªsu…
));

131 
i
=0; i<
NTHREADS
; i++) {

132 
	`P
(
£m
);

135 
	`£m_de°roy
(
£m
);

136 
	`k¥ötf
("kmalloc stressÅest done\n");

139 
	}
}

	@os161/kern/test/nettest.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<ã°.h
>

38 
	$√âe°
(
«rgs
, **
¨gs
)

40 ()
«rgs
;

41 ()
¨gs
;

42 
	`k¥ötf
("NoÇetwork supportávailable\n");

44 
	}
}

	@os161/kern/test/synchtest.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<˛ock.h
>

37 
	~<thªad.h
>

38 
	~<synch.h
>

39 
	~<ã°.h
>

41 
	#NSEMLOOPS
 63

	)

42 
	#NLOCKLOOPS
 120

	)

43 
	#NCVLOOPS
 5

	)

44 
	#NTHREADS
 32

	)

46 vﬁ©ûê
	gã°vÆ1
;

47 vﬁ©ûê
	gã°vÆ2
;

48 vﬁ©ûê
	gã°vÆ3
;

49 #ifde‡
UW


50 
£m≠h‹e
 *
	gã°£m
 = 0;

51 
lock
 *
	gã°lock
 = 0;

52 
cv
 *
	gã°cv
 = 0;

53 
£m≠h‹e
 *
	gd⁄e£m
 = 0;

55 
£m≠h‹e
 *
	gã°£m
;

56 
lock
 *
	gã°lock
;

57 
cv
 *
	gã°cv
;

58 
£m≠h‹e
 *
	gd⁄e£m
;

61 #ifde‡
UW


64 
	$˛ónôems
()

66 
	`k¥ötf
("cleanitems: Destroying sems,Üocks,ánd cvs\n");

67 
	`£m_de°roy
(
ã°£m
);

68 
	`lock_de°roy
(
ã°lock
);

69 
	`cv_de°roy
(
ã°cv
);

70 
	`£m_de°roy
(
d⁄e£m
);

71 
	}
}

76 
	$öôôems
()

78 i‡(
ã°£m
==
NULL
) {

79 
ã°£m
 = 
	`£m_¸óã
("testsem", 2);

80 i‡(
ã°£m
 =
NULL
) {

81 
	`∑nic
("synchtest: sem_create failed\n");

84 i‡(
ã°lock
==
NULL
) {

85 
ã°lock
 = 
	`lock_¸óã
("testlock");

86 i‡(
ã°lock
 =
NULL
) {

87 
	`∑nic
("synchtest:Üock_create failed\n");

90 i‡(
ã°cv
==
NULL
) {

91 #ifde‡
UW


92 
ã°cv
 = 
	`cv_¸óã
("testcv");

94 
ã°cv
 = 
	`cv_¸óã
("testlock");

96 i‡(
ã°cv
 =
NULL
) {

97 
	`∑nic
("synchtest: cv_create failed\n");

100 i‡(
d⁄e£m
==
NULL
) {

101 
d⁄e£m
 = 
	`£m_¸óã
("donesem", 0);

102 i‡(
d⁄e£m
 =
NULL
) {

103 
	`∑nic
("synchtest: sem_create failed\n");

106 
	}
}

110 
	$£mã°thªad
(*
junk
, 
num
)

112 
i
;

113 ()
junk
;

118 
	`P
(
ã°£m
);

119 
	`k¥ötf
("Thªad %2lu: ", 
num
);

120 
i
=0; i<
NSEMLOOPS
; i++) {

121 
	`k¥ötf
("%c", ()
num
+64);

123 
	`k¥ötf
("\n");

124 
	`V
(
d⁄e£m
);

125 #ifde‡
UW


126 
	`thªad_exô
();

128 
	}
}

131 
	$£mã°
(
«rgs
, **
¨gs
)

133 
i
, 
ªsu…
;

135 ()
«rgs
;

136 ()
¨gs
;

138 
	`öôôems
();

139 
	`k¥ötf
("Starting semaphoreÅest...\n");

140 
	`k¥ötf
("IfÅhis hangs, it's broken: ");

141 
	`P
(
ã°£m
);

142 
	`P
(
ã°£m
);

143 
	`k¥ötf
("ok\n");

145 
i
=0; i<
NTHREADS
; i++) {

146 
ªsu…
 = 
	`thªad_f‹k
("£mã°", 
NULL
, 
£mã°thªad
, NULL, 
i
);

147 i‡(
ªsu…
) {

148 
	`∑nic
("semtest:Åhread_fork failed: %s\n",

149 
	`°ªº‹
(
ªsu…
));

153 
i
=0; i<
NTHREADS
; i++) {

154 
	`V
(
ã°£m
);

155 
	`P
(
d⁄e£m
);

159 
	`V
(
ã°£m
);

160 
	`V
(
ã°£m
);

162 #ifde‡
UW


163 
	`˛ónôems
();

165 
	`k¥ötf
("SemaphoreÅest done.\n");

167 
	}
}

171 
	$Áû
(
num
, c⁄° *
msg
)

173 
	`k¥ötf
("thªad %lu: Mism©ch o¿%s\n", 
num
, 
msg
);

174 
	`k¥ötf
("Test failed\n");

176 
	`lock_ªÀa£
(
ã°lock
);

178 
	`V
(
d⁄e£m
);

179 
	`thªad_exô
();

180 
	}
}

184 
	$lockã°thªad
(*
junk
, 
num
)

186 
i
;

187 ()
junk
;

189 
i
=0; i<
NLOCKLOOPS
; i++) {

190 
	`lock_acquúe
(
ã°lock
);

191 
ã°vÆ1
 = 
num
;

192 
ã°vÆ2
 = 
num
*num;

193 
ã°vÆ3
 = 
num
%3;

195 i‡(
ã°vÆ2
 !
ã°vÆ1
*testval1) {

196 
	`Áû
(
num
, "testval2/testval1");

199 i‡(
ã°vÆ2
%3 !(
ã°vÆ3
*testval3)%3) {

200 
	`Áû
(
num
, "testval2/testval3");

203 i‡(
ã°vÆ3
 !
ã°vÆ1
%3) {

204 
	`Áû
(
num
, "testval3/testval1");

207 i‡(
ã°vÆ1
 !
num
) {

208 
	`Áû
(
num
, "testval1/num");

211 i‡(
ã°vÆ2
 !
num
*num) {

212 
	`Áû
(
num
, "testval2/num");

215 i‡(
ã°vÆ3
 !
num
%3) {

216 
	`Áû
(
num
, "testval3/num");

219 
	`lock_ªÀa£
(
ã°lock
);

221 
	`V
(
d⁄e£m
);

222 #ifde‡
UW


223 
	`thªad_exô
();

225 
	}
}

229 
	$lockã°
(
«rgs
, **
¨gs
)

231 
i
, 
ªsu…
;

233 ()
«rgs
;

234 ()
¨gs
;

236 
	`öôôems
();

237 
	`k¥ötf
("StartingÜockÅest...\n");

239 
i
=0; i<
NTHREADS
; i++) {

240 
ªsu…
 = 
	`thªad_f‹k
("synchã°", 
NULL
, 
lockã°thªad
,

241 
NULL
, 
i
);

242 i‡(
ªsu…
) {

243 
	`∑nic
("locktest:Åhread_fork failed: %s\n",

244 
	`°ªº‹
(
ªsu…
));

247 
i
=0; i<
NTHREADS
; i++) {

248 
	`P
(
d⁄e£m
);

251 #ifde‡
UW


252 
	`˛ónôems
();

254 
	`k¥ötf
("LockÅest done.\n");

257 
	}
}

261 
	$cvã°thªad
(*
junk
, 
num
)

263 
i
;

264 vﬁ©ûê
j
;

265 
time_t
 
£cs1
, 
£cs2
;

266 
uöt32_t
 
n£cs1
, 
n£cs2
;

268 ()
junk
;

270 
i
=0; i<
NCVLOOPS
; i++) {

271 
	`lock_acquúe
(
ã°lock
);

272 
ã°vÆ1
 !
num
) {

273 
	`gëtime
(&
£cs1
, &
n£cs1
);

274 
	`cv_waô
(
ã°cv
, 
ã°lock
);

275 
	`gëtime
(&
£cs2
, &
n£cs2
);

277 i‡(
n£cs2
 < 
n£cs1
) {

278 
£cs2
--;

279 
n£cs2
 += 1000000000;

282 
n£cs2
 -
n£cs1
;

283 
£cs2
 -
£cs1
;

286 i‡(
£cs2
==0 && 
n£cs2
 < 40*2000) {

287 
	`k¥ötf
("cv_waôÅook o∆y %uÇs\n", 
n£cs2
);

288 
	`k¥ötf
("That'sÅoo fast... you must be "

290 
	`V
(
d⁄e£m
);

291 
	`thªad_exô
();

295 
	`k¥ötf
("Thªad %lu\n", 
num
);

296 
ã°vÆ1
 = (ã°vÆ1 + 
NTHREADS
 - 1)%NTHREADS;

302 
j
=0; j<3000; j++);

304 
	`cv_brﬂdˇ°
(
ã°cv
, 
ã°lock
);

305 
	`lock_ªÀa£
(
ã°lock
);

307 
	`V
(
d⁄e£m
);

308 #ifde‡
UW


309 
	`thªad_exô
();

311 
	}
}

314 
	$cvã°
(
«rgs
, **
¨gs
)

317 
i
, 
ªsu…
;

319 ()
«rgs
;

320 ()
¨gs
;

322 
	`öôôems
();

323 
	`k¥ötf
("Starting CVÅest...\n");

324 #ifde‡
UW


325 
	`k¥ötf
("%dÅhªad†shouldÖröàouàöÑevî£ ordî %dÅimes.\n", 
NTHREADS
, 
NCVLOOPS
);

327 
	`k¥ötf
("Threads shouldÖrint out inÑeverse order.\n");

330 
ã°vÆ1
 = 
NTHREADS
-1;

332 
i
=0; i<
NTHREADS
; i++) {

333 
ªsu…
 = 
	`thªad_f‹k
("synchã°", 
NULL
, 
cvã°thªad
, NULL, 
i
);

334 i‡(
ªsu…
) {

335 
	`∑nic
("cvtest:Åhread_fork failed: %s\n",

336 
	`°ªº‹
(
ªsu…
));

339 
i
=0; i<
NTHREADS
; i++) {

340 
	`P
(
d⁄e£m
);

343 #ifde‡
UW


344 
	`˛ónôems
();

346 
	`k¥ötf
("CVÅest done\n");

349 
	}
}

	@os161/kern/test/threadfun.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<thªad.h
>

4 
	~<synch.h
>

5 
	~<ã°.h
>

6 
	~<•ölock.h
>

7 
£m≠h‹e
 *
	gt£m
 = 
NULL
;

8 
lock
 *
	glock
 = 
NULL
;

9 
•ölock
 
	g•l
;

10 
	gcou¡î
 = 0;

11 
	gthªadcou¡
 = 0;

17 
	$öô_ôems
()

19 i‡(
t£m
 =
NULL
) {

20 
t£m
 = 
	`£m_¸óã
("tsem", 0);

21 i‡(
t£m
 =
NULL
) {

22 
	`∑nic
("threadfun: sem_create failed\n");

25 i‡(
lock
 =
NULL
) {

26 
lock
 = 
	`lock_¸óã
("lock");

27 i‡(
lock
 =
NULL
) {

28 
	`∑nic
("threadfun:Üock_create failed\n");

31 
	`•ölock_öô
(&
•l
);

32 
	}
}

40 
	$¥ötDigôs
(*
junk
, 
num
)

42 ()
junk
;

43 ()
num
;

45 
	`k¥ötf
("%d ", 
cou¡î
);

47 
	`lock_acquúe
(
lock
);

48 
cou¡î
++;

49 
	`lock_ªÀa£
(
lock
);

51 
	`V
(
t£m
);

52 
thªadcou¡
--;

53 
	}
}

59 
	$unß„thªad
(* 
junk
, 
num
)

61 ()
junk
;

64 
i
 = 0; i < ()
num
; i++)

66 
cou¡î
++;

69 
	`V
(
t£m
);

70 
thªadcou¡
--;

71 
	}
}

75 
	$ß„thªad
(* 
junk
, 
num
)

77 ()
junk
;

79 
i
 = 0; i < ()
num
; i++)

81 
	`lock_acquúe
(
lock
);

82 
	`k¥ötf
("hi\n");

83 
cou¡î
++;

84 
	`lock_ªÀa£
(
lock
);

87 
	`V
(
t£m
);

88 
thªadcou¡
--;

89 
	}
}

93 
	$•ölockthªad
(* 
junk
, 
num
)

95 ()
junk
;

97 
i
 = 0; i < ()
num
; i++)

99 
	`•ölock_acquúe
(&
•l
);

100 
cou¡î
++;

101 
	`•ölock_ªÀa£
(&
•l
);

104 
	`V
(
t£m
);

105 
thªadcou¡
--;

107 
	}
}

110 * 
	$gë¨gumíts
(
«rgs
, **
¨gs
)

112 ()
«rgs
;

113 
vÆues
[2];

114 *
ãm∑rgs
 = 
¨gs
[1];

116 
vÆues
[0] = 
	`©oi
(
ãm∑rgs
);

117 
ãm∑rgs
 = 
¨gs
[2];

118 
vÆues
[1] = 
	`©oi
(
ãm∑rgs
);

120 
	`k¥ötf
("\nVÆuê1: %d\nVÆuê2: %d\n", 
vÆues
[0], values[1]);

122  
vÆues
;

123 
	}
}

130 
	$ru¡hªads
(
cou¡
, 
ö¸cou¡
, 
ã°choi˚
)

132 
«me
[16];

133 
t£mde¸
, 
ªsu…
;

134 
thªads¸óãd
 = 0;

135 
boﬁ
 
purge
 = 
Ál£
;

137 (*
myfunc
)();

140 i‡(
ã°choi˚
 == 0)

142 
myfunc
 = 
¥ötDigôs
;

144 i‡(
ã°choi˚
 == 1)

146 
myfunc
 = 
unß„thªad
;

148 i‡(
ã°choi˚
 == 2)

150 
myfunc
 = 
ß„thªad
;

154 
myfunc
 = 
•ölockthªad
;

157 
thªads¸óãd
 !
cou¡
)

163 i‡(
thªadcou¡
 < 44 && !
purge
)

165 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
myfunc
, NULL, 
ö¸cou¡
);

166 i‡(
ªsu…
)

168 
	`∑nic
("thªadfun:Åhªad_f‹k faûed %s)\n", 
	`°ªº‹
(
ªsu…
));

170 
thªadcou¡
++;

171 
thªads¸óãd
++;

178 i‡(
thªadcou¡
 =0 && 
purge
)

180 
purge
 = 
Ál£
;

190 
purge
 = 
åue
;

196 
t£mde¸
 = 0;

197 
t£mde¸
 <
thªads¸óãd
 - 1)

199 
	`P
(
t£m
);

200 
t£mde¸
++;

203 
	`k¥ötf
("\nNumbî i†now: %d\n\n", 
cou¡î
);

204 
cou¡î
 = 0;

212 
	}
}

224 
	$digôThªadTe°
(
«rgs
, **
¨gs
)

226 ()
«rgs
;

227 
cou¡
;

229 *
vÆues
 = 
	`gë¨gumíts
(
«rgs
, 
¨gs
);

230 
cou¡
 = 
vÆues
[0];

232 
	`k¥ötf
("Num should be: %d\n", 
cou¡
);

233 
	`k¥ötf
("\nStart Fun Thread.\n");

235 
	`öô_ôems
();

236 
	`ru¡hªads
(
cou¡
, 0, 0);

238 
	`k¥ötf
("\nFunÅhread done.\n");

242 
	}
}

245 
	$unß„thªadcou¡î
(
«rgs
, **
¨gs
)

247 ()
«rgs
;

248 
cou¡
;

249 
öˇrg
;

251 *
vÆues
 = 
	`gë¨gumíts
(
«rgs
, 
¨gs
);

253 
cou¡
 = 
vÆues
[0];

254 
öˇrg
 = 
vÆues
[1];

256 
	`k¥ötf
("Num should be: %d\n", (
cou¡
 * 
öˇrg
));

258 
	`öô_ôems
();

259 
	`ru¡hªads
(
cou¡
, 
öˇrg
, 1);

262 
	}
}

266 
	$lockthªadcou¡î
(
«rgs
, **
¨gs
)

268 ()
«rgs
;

270 
cou¡
;

271 
öˇrg
;

272 *
vÆues
 = 
	`gë¨gumíts
(
«rgs
, 
¨gs
);

274 
cou¡
 = 
vÆues
[0];

275 
öˇrg
 = 
vÆues
[1];

277 
	`k¥ötf
("Num should be: %d\n", (
cou¡
 * 
öˇrg
));

279 
	`öô_ôems
();

280 
	`ru¡hªads
(
cou¡
, 
öˇrg
, 2);

283 
	}
}

286 
	$•ölockthªadcou¡î
(
«rgs
, **
¨gs
)

288 ()
«rgs
;

289 
cou¡
;

290 
öˇrg
;

292 *
vÆues
 = 
	`gë¨gumíts
(
«rgs
, 
¨gs
);

294 
cou¡
 = 
vÆues
[0];

295 
öˇrg
 = 
vÆues
[1];

297 
	`k¥ötf
("Num should be: %d\n", (
cou¡
 * 
öˇrg
));

299 
	`öô_ôems
();

300 
	`ru¡hªads
(
cou¡
, 
öˇrg
, 3);

303 
	}
}

	@os161/kern/test/threadtest.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<thªad.h
>

36 
	~<synch.h
>

37 
	~<ã°.h
>

39 
	#NTHREADS
 8

	)

41 
£m≠h‹e
 *
	gt£m
 = 
NULL
;

45 
	$öô_£m
()

47 i‡(
t£m
==
NULL
) {

48 
t£m
 = 
	`£m_¸óã
("tsem", 0);

49 i‡(
t£m
 =
NULL
) {

50 
	`∑nic
("threadtest: sem_create failed\n");

53 
	}
}

57 
	$loudthªad
(*
junk
, 
num
)

59 
ch
 = '0' + 
num
;

60 
i
;

62 ()
junk
;

64 
i
=0; i<120; i++) {

65 
	`putch
(
ch
);

67 
	`V
(
t£m
);

68 
	}
}

82 
	$quõâhªad
(*
junk
, 
num
)

84 
ch
 = '0' + 
num
;

85 vﬁ©ûê
i
;

87 ()
junk
;

89 
	`putch
(
ch
);

90 
i
=0; i<200000; i++);

91 
	`putch
(
ch
);

93 
	`V
(
t£m
);

94 
	}
}

98 
	$ru¡hªads
(
dﬁoud
)

100 
«me
[16];

101 
i
, 
ªsu…
;

103 
i
=0; i<
NTHREADS
; i++) {

104 
	`¢¥ötf
(
«me
, “ame), "thªadã°%d", 
i
);

105 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
,

106 
dﬁoud
 ? 
loudthªad
 : 
quõâhªad
,

107 
NULL
, 
i
);

108 i‡(
ªsu…
) {

109 
	`∑nic
("threadtest:Åhread_fork failed %s)\n",

110 
	`°ªº‹
(
ªsu…
));

114 
i
=0; i<
NTHREADS
; i++) {

115 
	`P
(
t£m
);

117 
	}
}

121 
	$thªadã°
(
«rgs
, **
¨gs
)

123 ()
«rgs
;

124 ()
¨gs
;

126 
	`öô_£m
();

127 
	`k¥ötf
("StartingÅhreadÅest...\n");

128 
	`ru¡hªads
(1);

129 
	`k¥ötf
("\nThreadÅest done.\n");

132 
	}
}

135 
	$thªadã°2
(
«rgs
, **
¨gs
)

137 ()
«rgs
;

138 ()
¨gs
;

140 
	`öô_£m
();

141 
	`k¥ötf
("StartingÅhreadÅest 2...\n");

142 
	`ru¡hªads
(0);

143 
	`k¥ötf
("\nThreadÅest 2 done.\n");

146 
	}
}

	@os161/kern/test/tt3.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<wch™.h
>

36 
	~<thªad.h
>

37 
	~<synch.h
>

38 
	~<ã°.h
>

40 
	~"›t-synch¥obs.h
"

44 #i‡
OPT_SYNCHPROBS


45 
	#DIM
 10

	)

47 
	#DIM
 70

	)

51 
	#SLEEPALOT_PRINTS
 20

	)

52 
	#SLEEPALOT_ITERS
 4

	)

54 
	#WAKER_WAKES
 100

	)

56 
	#COMPUTE_ITERS
 10

	)

58 
	#NWAITCHANS
 12

	)

59 
wch™
 *
	gwaôch™s
[
NWAITCHANS
];

61 vﬁ©ûê
	gwakîd⁄e
;

62 
£m≠h‹e
 *
	gwakî£m
;

63 
£m≠h‹e
 *
	gd⁄e£m
;

67 
	$£tup
()

69 
tmp
[16];

70 
i
;

72 i‡(
wakî£m
 =
NULL
) {

73 
wakî£m
 = 
	`£m_¸óã
("wakersem", 1);

74 
d⁄e£m
 = 
	`£m_¸óã
("donesem", 0);

75 
i
=0; i<
NWAITCHANS
; i++) {

76 
	`¢¥ötf
(
tmp
, —mp), "wc%d", 
i
);

77 
waôch™s
[
i
] = 
	`wch™_¸óã
(
	`k°rdup
(
tmp
));

80 
wakîd⁄e
 = 0;

81 
	}
}

85 
	$¶ì∑lŸ_thªad
(*
junk
, 
num
)

87 
i
, 
j
;

89 ()
junk
;

91 
i
=0; i<
SLEEPALOT_PRINTS
; i++) {

92 
j
=0; j<
SLEEPALOT_ITERS
; j++) {

93 
wch™
 *
w
;

95 
w
 = 
waôch™s
[
	`øndom
()%
NWAITCHANS
];

96 
	`wch™_lock
(
w
);

97 
	`wch™_¶ìp
(
w
);

99 
	`k¥ötf
("[%lu]", 
num
);

101 
	`V
(
d⁄e£m
);

102 
	}
}

106 
	$wakî_thªad
(*
junk1
, 
junk2
)

108 
i
, 
d⁄e
;

110 ()
junk1
;

111 ()
junk2
;

114 
	`P
(
wakî£m
);

115 
d⁄e
 = 
wakîd⁄e
;

116 
	`V
(
wakî£m
);

117 i‡(
d⁄e
) {

121 
i
=0; i<
WAKER_WAKES
; i++) {

122 
wch™
 *
w
;

124 
w
 = 
waôch™s
[
	`øndom
()%
NWAITCHANS
];

125 
	`wch™_wakóŒ
(
w
);

127 
	`thªad_yõld
();

130 
	`V
(
d⁄e£m
);

131 
	}
}

135 
	$make_¶ì∑lŸs
(
howm™y
)

137 
«me
[16];

138 
i
, 
ªsu…
;

140 
i
=0; i<
howm™y
; i++) {

141 
	`¢¥ötf
(
«me
, “ame), "¶ì∑lŸ%d", 
i
);

142 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
¶ì∑lŸ_thªad
, NULL, 
i
);

143 i‡(
ªsu…
) {

144 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

147 
ªsu…
 = 
	`thªad_f‹k
("wakî", 
NULL
, 
wakî_thªad
, NULL, 0);

148 i‡(
ªsu…
) {

149 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

151 
	}
}

155 
	$compuã_thªad
(*
junk1
, 
num
)

157 
	sm©rix
 {

158 
m
[
DIM
][DIM];

160 
m©rix
 *
m1
, *
m2
, *
m3
;

161 
tŸ
;

162 
i
, 
j
, 
k
, 
m
;

163 
uöt32_t
 
ønd
;

165 ()
junk1
;

167 
m1
 = 
	`kmÆloc
((
m©rix
));

168 
	`KASSERT
(
m1
 !
NULL
);

169 
m2
 = 
	`kmÆloc
((
m©rix
));

170 
	`KASSERT
(
m2
 !
NULL
);

171 
m3
 = 
	`kmÆloc
((
m©rix
));

172 
	`KASSERT
(
m3
 !
NULL
);

174 
m
=0; m<
COMPUTE_ITERS
; m++) {

176 
i
=0; i<
DIM
; i++) {

177 
j
=0; j<
DIM
; j++) {

178 
ønd
 = 
	`øndom
();

179 
m1
->
m
[
i
][
j
] = 
ønd
 >> 16;

180 
m2
->
m
[
i
][
j
] = 
ønd
 & 0xffff;

184 
i
=0; i<
DIM
; i++) {

185 
j
=0; j<
DIM
; j++) {

186 
tŸ
 = 0;

187 
k
=0; k<
DIM
; k++) {

188 
tŸ
 +
m1
->
m
[
i
][
k
] * 
m2
->m[k][
j
];

190 
m3
->
m
[
i
][
j
] = 
tŸ
;

194 
tŸ
 = 0;

195 
i
=0; i<
DIM
; i++) {

196 
tŸ
 +
m3
->
m
[
i
][i];

199 
	`k¥ötf
("{%lu: %u}", 
num
, (Ë
tŸ
);

200 
	`thªad_yõld
();

203 
	`k‰ì
(
m1
);

204 
	`k‰ì
(
m2
);

205 
	`k‰ì
(
m3
);

207 
	`V
(
d⁄e£m
);

208 
	}
}

212 
	$make_compuãs
(
howm™y
)

214 
«me
[16];

215 
i
, 
ªsu…
;

217 
i
=0; i<
howm™y
; i++) {

218 
	`¢¥ötf
(
«me
, “ame), "compuã%d", 
i
);

219 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
compuã_thªad
, NULL, 
i
);

220 i‡(
ªsu…
) {

221 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

224 
	}
}

228 
	$föish
(
howm™ytŸÆ
)

230 
i
;

231 
i
=0; i<
howm™ytŸÆ
; i++) {

232 
	`P
(
d⁄e£m
);

234 
	`P
(
wakî£m
);

235 
wakîd⁄e
 = 1;

236 
	`V
(
wakî£m
);

237 
	`P
(
d⁄e£m
);

238 
	}
}

242 
	$ru¡e°3
(
n¶ìps
, 
ncompuãs
)

244 
	`£tup
();

245 
	`k¥ötf
("StartingÅhreadÅest 3 (%d [sleepalots], %d {computes}, "

247 
n¶ìps
, 
ncompuãs
);

248 
	`make_¶ì∑lŸs
(
n¶ìps
);

249 
	`make_compuãs
(
ncompuãs
);

250 
	`föish
(
n¶ìps
+
ncompuãs
);

251 
	`k¥ötf
("\nThreadÅest 3 done\n");

252 
	}
}

255 
	$thªadã°3
(
«rgs
, **
¨gs
)

257 i‡(
«rgs
==1) {

258 
	`ru¡e°3
(5, 2);

260 i‡(
«rgs
==3) {

261 
	`ru¡e°3
(
	`©oi
(
¨gs
[1]),átoi(args[2]));

264 
	`k¥ötf
("Usage:Åt3 [sleepthreads computethreads]\n");

268 
	}
}

	@os161/kern/test/uw-tests.c

9 
	~<ty≥s.h
>

10 
	~<synch.h
>

12 
	~<thªad.h
>

13 
	~<ã°.h
>

14 
	~<uw-vm°©s.h
>

16 
	#NAME_LEN
 (30)

	)

18 
lock
 *
	gã°lock
 = 
NULL
;

19 
£m≠h‹e
 *
	gd⁄e£m
 = 
NULL
;

21 
	#NTESTLOOPS
 (5000Ë

	)

22 
	#NTESTTHREADS
 (8)

	)

23 
	#START_VALUE
 (0)

	)

24 vﬁ©ûê
	gã°_vÆue
 = 
START_VALUE
;

25 
	gu£_locks
 = 1;

29 
	$˛ónôems
()

31 
	`k¥ötf
("cleanitems: Destroying semsándÜocks\n");

32 
	`lock_de°roy
(
ã°lock
);

33 
ã°lock
 = 
NULL
;

34 
	`£m_de°roy
(
d⁄e£m
);

35 
d⁄e£m
 = 
NULL
;

36 
ã°_vÆue
 = 
START_VALUE
;

37 
	}
}

41 
	$öôôems
()

43 i‡(
ã°lock
==
NULL
) {

44 
ã°lock
 = 
	`lock_¸óã
("testlock");

45 i‡(
ã°lock
 =
NULL
) {

46 
	`∑nic
("synchtest:Üock_create failed\n");

50 i‡(
d⁄e£m
==
NULL
) {

51 
d⁄e£m
 = 
	`£m_¸óã
("donesem", 0);

52 i‡(
d⁄e£m
 =
NULL
) {

53 
	`∑nic
("synchtest: sem_create failed\n");

56 
	}
}

61 
	$add_thªad
(*
junk
, 
num
)

63 
i
;

64 (Ë
num
;

65 (Ë
junk
;

67 
i
=0; i<
NTESTLOOPS
; i++) {

68 i‡(
u£_locks
) {

69 
	`lock_acquúe
(
ã°lock
);

76 
ã°_vÆue
 =Åest_value + 1;

77 
ã°_vÆue
 =Åest_value + 1;

78 
ã°_vÆue
 =Åest_value + 1;

79 
ã°_vÆue
 =Åest_value + 1;

80 
ã°_vÆue
 =Åest_value + 1;

82 i‡(
u£_locks
) {

83 
	`lock_ªÀa£
(
ã°lock
);

87 
	`V
(
d⁄e£m
);

88 
	`thªad_exô
();

89 
	}
}

94 
	$sub_thªad
(*
junk
, 
num
)

96 
i
;

97 ()
num
;

98 ()
junk
;

100 
i
=0; i<
NTESTLOOPS
; i++) {

101 i‡(
u£_locks
) {

102 
	`lock_acquúe
(
ã°lock
);

109 
ã°_vÆue
 =Åest_value - 1;

110 
ã°_vÆue
 =Åest_value - 1;

111 
ã°_vÆue
 =Åest_value - 1;

112 
ã°_vÆue
 =Åest_value - 1;

113 
ã°_vÆue
 =Åest_value - 1;

115 i‡(
u£_locks
) {

116 
	`lock_ªÀa£
(
ã°lock
);

120 
	`V
(
d⁄e£m
);

121 
	`thªad_exô
();

122 
	}
}

125 
	$uwlockã°1
(
«rgs
, **
¨gs
)

127 
i
, 
ªsu…
;

128 
«me
[
NAME_LEN
];

130 ()
«rgs
;

131 ()
¨gs
;

133 
	`öôôems
();

134 
	`k¥ötf
("Starting uwlocktest1...\n");

136 
i
=0; i<
NTESTTHREADS
; i++) {

137 
	`¢¥ötf
(
«me
, 
NAME_LEN
, "add_thªad %d", 
i
);

138 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
add_thªad
, NULL, 
i
);

139 i‡(
ªsu…
) {

140 
	`∑nic
("uwlocktest1:Åhread_fork failed: %s\n",

141 
	`°ªº‹
(
ªsu…
));

145 
i
=0; i<
NTESTTHREADS
; i++) {

146 
	`¢¥ötf
(
«me
, 
NAME_LEN
, "sub_thªad %d", 
i
);

147 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
sub_thªad
, NULL, 
i
);

148 i‡(
ªsu…
) {

149 
	`∑nic
("uwlocktest1:Åhread_fork failed: %s\n",

150 
	`°ªº‹
(
ªsu…
));

154 
i
=0; i<
NTESTTHREADS
*2; i++) {

155 
	`P
(
d⁄e£m
);

158 
	`k¥ötf
("vÆuêo‡ã°_vÆuê%d should bê%d\n", 
ã°_vÆue
, 
START_VALUE
);

159 i‡(
ã°_vÆue
 =
START_VALUE
) {

160 
	`k¥ötf
("TEST SUCCEEDED\n");

162 
	`k¥ötf
("TEST FAILED\n");

164 
	`KASSERT
(
ã°_vÆue
 =
START_VALUE
);

166 
	`˛ónôems
();

167 
	`k¥ötf
("uwlocktest1 done.\n");

170 
	}
}

177 
	$vm°©s_thªad
(*
junk
, 
num
)

179 
i
;

180 
j
;

181 ()
num
;

182 ()
junk
;

184 
i
=0; i<
NTESTLOOPS
; i++) {

185 
j
=0; j<
VMSTAT_COUNT
; j++) {

189 
j
) {

191 
VMSTAT_TLB_FAULT
:

192 
	`vm°©s_öc
(
j
);

193 
	`vm°©s_öc
(
j
);

196 
VMSTAT_TLB_FAULT_FREE
:

197 
	`vm°©s_öc
(
j
);

200 
VMSTAT_TLB_FAULT_REPLACE
:

201 
	`vm°©s_öc
(
j
);

205 
VMSTAT_TLB_INVALIDATE
:

206 i‡(
i
 % 2 == 0) {

207 
	`vm°©s_öc
(
j
);

211 
VMSTAT_TLB_RELOAD
:

212 
	`vm°©s_öc
(
j
);

216 
VMSTAT_PAGE_FAULT_ZERO
:

217 i‡(
i
 % 2 == 0) {

218 
	`vm°©s_öc
(
j
);

223 
VMSTAT_PAGE_FAULT_DISK
:

224 i‡(
i
 % 2 == 0) {

225 
	`vm°©s_öc
(
j
);

229 
VMSTAT_ELF_FILE_READ
:

230 i‡(
i
 % 4 == 0) {

231 
	`vm°©s_öc
(
j
);

235 
VMSTAT_SWAP_FILE_READ
:

236 i‡(
i
 % 4 == 0) {

237 
	`vm°©s_öc
(
j
);

241 
VMSTAT_SWAP_FILE_WRITE
:

242 i‡(
i
 % 8 == 0) {

243 
	`vm°©s_öc
(
j
);

248 
	`k¥ötf
("Unknow¿°© %d\n", 
j
);

254 
	`V
(
d⁄e£m
);

255 
	`thªad_exô
();

256 
	}
}

259 
	$uwvm°©°e°
(
«rgs
, **
¨gs
)

261 
i
, 
ªsu…
;

262 
«me
[
NAME_LEN
];

264 ()
«rgs
;

265 ()
¨gs
;

267 
	`öôôems
();

268 
	`k¥ötf
("Starting uwvmstatstest...\n");

270 
	`k¥ötf
("Initializing vmstats\n");

271 
	`vm°©s_öô
();

273 
i
=0; i<
NTESTTHREADS
; i++) {

274 
	`¢¥ötf
(
«me
, 
NAME_LEN
, "vm°©°hªad %d", 
i
);

275 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
vm°©s_thªad
, NULL, 
i
);

276 i‡(
ªsu…
) {

277 
	`∑nic
("uwvmstatstest:Åhread_fork failed: %s\n",

278 
	`°ªº‹
(
ªsu…
));

282 
i
=0; i<
NTESTTHREADS
; i++) {

283 
	`P
(
d⁄e£m
);

286 
	`vm°©s_¥öt
();

288 
	`˛ónôems
();

289 
	`k¥ötf
("uwvmstatstest done.\n");

292 
	}
}

	@os161/kern/thread/clock.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<˝u.h
>

33 
	~<wch™.h
>

34 
	~<˛ock.h
>

35 
	~<thªad.h
>

36 
	~<cuºít.h
>

53 
	#SCHEDULE_HARDCLOCKS
 4

	)

54 
	#MIGRATE_HARDCLOCKS
 16

	)

59 
wch™
 *
	glbﬁt
;

65 
	$h¨d˛ock_boŸ°øp
()

67 
lbﬁt
 = 
	`wch™_¸óã
("lbolt");

68 i‡(
lbﬁt
 =
NULL
) {

69 
	`∑nic
("Couldn't createÜbolt\n");

71 
	}
}

78 
	$timî˛ock
()

81 
	`wch™_wakóŒ
(
lbﬁt
);

82 
	}
}

89 
	$h¨d˛ock
()

95 
cur˝u
->
c_h¨d˛ocks
++;

96 i‡((
cur˝u
->
c_h¨d˛ocks
 % 
SCHEDULE_HARDCLOCKS
) == 0) {

97 
	`scheduÀ
();

99 i‡((
cur˝u
->
c_h¨d˛ocks
 % 
MIGRATE_HARDCLOCKS
) == 0) {

100 
	`thªad_c⁄sidî_migøti⁄
();

102 
	`thªad_yõld
();

103 
	}
}

109 
	$˛ock¶ìp
(
num_£cs
)

111 
num_£cs
 > 0) {

112 
	`wch™_lock
(
lbﬁt
);

113 
	`wch™_¶ìp
(
lbﬁt
);

114 
num_£cs
--;

116 
	}
}

	@os161/kern/thread/spinlock.c

31 
	#SPINLOCK_INLINE


	)

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<˝u.h
>

36 
	~<•l.h
>

37 
	~<•ölock.h
>

38 
	~<cuºít.h
>

49 
	$•ölock_öô
(
•ölock
 *
lk
)

51 
	`•ölock_d©a_£t
(&
lk
->
lk_lock
, 0);

52 
lk
->
lk_hﬁdî
 = 
NULL
;

53 
	}
}

59 
	$•ölock_˛ónup
(
•ölock
 *
lk
)

61 
	`KASSERT
(
lk
->
lk_hﬁdî
 =
NULL
);

62 
	`KASSERT
(
	`•ölock_d©a_gë
(&
lk
->
lk_lock
) == 0);

63 
	}
}

73 
	$•ölock_acquúe
(
•ölock
 *
lk
)

75 
˝u
 *
my˝u
;

77 
	`•Ãai£
(
IPL_NONE
, 
IPL_HIGH
);

80 i‡(
	`CURCPU_EXISTS
()) {

81 
my˝u
 = 
cur˝u
->
c_£lf
;

82 i‡(
lk
->
lk_hﬁdî
 =
my˝u
) {

83 
	`∑nic
("Dódlock o¿•ölock %p\n", 
lk
);

87 
my˝u
 = 
NULL
;

101 i‡(
	`•ölock_d©a_gë
(&
lk
->
lk_lock
) != 0) {

104 i‡(
	`•ölock_d©a_ã°™d£t
(&
lk
->
lk_lock
) != 0) {

110 
lk
->
lk_hﬁdî
 = 
my˝u
;

111 
	}
}

117 
	$•ölock_ªÀa£
(
•ölock
 *
lk
)

120 i‡(
	`CURCPU_EXISTS
()) {

121 
	`KASSERT
(
lk
->
lk_hﬁdî
 =
cur˝u
->
c_£lf
);

124 
lk
->
lk_hﬁdî
 = 
NULL
;

125 
	`•ölock_d©a_£t
(&
lk
->
lk_lock
, 0);

126 
	`•Œowî
(
IPL_HIGH
, 
IPL_NONE
);

127 
	}
}

132 
boﬁ


133 
	$•ölock_do_i_hﬁd
(
•ölock
 *
lk
)

135 i‡(!
	`CURCPU_EXISTS
()) {

136  
åue
;

140  (
lk
->
lk_hﬁdî
 =
cur˝u
->
c_£lf
);

141 
	}
}

	@os161/kern/thread/spl.c

31 
	#SPL_INLINE


	)

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<˝u.h
>

36 
	~<•l.h
>

37 
	~<thªad.h
>

38 
	~<cuºít.h
>

87 
	$•Ãai£
(
ﬁd•l
, 
√w•l
)

89 
thªad
 *
cur
 = 
cuπhªad
;

92 
	`KASSERT
(
ﬁd•l
 =
IPL_NONE
);

93 
	`KASSERT
(
√w•l
 =
IPL_HIGH
);

95 i‡(!
	`CURCPU_EXISTS
()) {

100 i‡(
cur
->
t_ùlhigh_cou¡
 == 0) {

101 
	`˝u_úqoff
();

103 
cur
->
t_ùlhigh_cou¡
++;

104 
	}
}

107 
	$•Œowî
(
ﬁd•l
, 
√w•l
)

109 
thªad
 *
cur
 = 
cuπhªad
;

112 
	`KASSERT
(
ﬁd•l
 =
IPL_HIGH
);

113 
	`KASSERT
(
√w•l
 =
IPL_NONE
);

115 i‡(!
	`CURCPU_EXISTS
()) {

120 
cur
->
t_ùlhigh_cou¡
--;

121 i‡(
cur
->
t_ùlhigh_cou¡
 == 0) {

122 
	`˝u_úq⁄
();

124 
	}
}

132 
	$•lx
(
•l
)

134 
thªad
 *
cur
 = 
cuπhªad
;

135 
ªt
;

137 i‡(
cur
->
t_cur•l
 < 
•l
) {

139 
	`•Ãai£
(
cur
->
t_cur•l
, 
•l
);

140 
ªt
 = 
cur
->
t_cur•l
;

141 
cur
->
t_cur•l
 = 
•l
;

143 i‡(
cur
->
t_cur•l
 > 
•l
) {

145 
ªt
 = 
cur
->
t_cur•l
;

146 
cur
->
t_cur•l
 = 
•l
;

147 
	`•Œowî
(
ªt
, 
•l
);

151 
ªt
 = 
•l
;

154  
ªt
;

155 
	}
}

	@os161/kern/thread/synch.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<•ölock.h
>

38 
	~<wch™.h
>

39 
	~<thªad.h
>

40 
	~<cuºít.h
>

41 
	~<synch.h
>

46 
£m≠h‹e
 *

47 
	$£m_¸óã
(c⁄° *
«me
, 
öôül_cou¡
)

49 
£m≠h‹e
 *
£m
;

51 
	`KASSERT
(
öôül_cou¡
 >= 0);

53 
£m
 = 
	`kmÆloc
((
£m≠h‹e
));

54 i‡(
£m
 =
NULL
) {

55  
NULL
;

58 
£m
->
£m_«me
 = 
	`k°rdup
(
«me
);

59 i‡(
£m
->
£m_«me
 =
NULL
) {

60 
	`k‰ì
(
£m
);

61  
NULL
;

64 
£m
->
£m_wch™
 = 
	`wch™_¸óã
(£m->
£m_«me
);

65 i‡(
£m
->
£m_wch™
 =
NULL
) {

66 
	`k‰ì
(
£m
->
£m_«me
);

67 
	`k‰ì
(
£m
);

68  
NULL
;

71 
	`•ölock_öô
(&
£m
->
£m_lock
);

72 
£m
->
£m_cou¡
 = 
öôül_cou¡
;

74  
£m
;

75 
	}
}

78 
	$£m_de°roy
(
£m≠h‹e
 *
£m
)

80 
	`KASSERT
(
£m
 !
NULL
);

83 
	`•ölock_˛ónup
(&
£m
->
£m_lock
);

84 
	`wch™_de°roy
(
£m
->
£m_wch™
);

85 
	`k‰ì
(
£m
->
£m_«me
);

86 
	`k‰ì
(
£m
);

87 
	}
}

90 
	$P
(
£m≠h‹e
 *
£m
)

92 
	`KASSERT
(
£m
 !
NULL
);

100 
	`KASSERT
(
cuπhªad
->
t_ö_öãºu±
 =
Ál£
);

102 
	`•ölock_acquúe
(&
£m
->
£m_lock
);

103 
£m
->
£m_cou¡
 == 0) {

120 
	`wch™_lock
(
£m
->
£m_wch™
);

121 
	`•ölock_ªÀa£
(&
£m
->
£m_lock
);

122 
	`wch™_¶ìp
(
£m
->
£m_wch™
);

124 
	`•ölock_acquúe
(&
£m
->
£m_lock
);

126 
	`KASSERT
(
£m
->
£m_cou¡
 > 0);

127 
£m
->
£m_cou¡
--;

128 
	`•ölock_ªÀa£
(&
£m
->
£m_lock
);

129 
	}
}

132 
	$V
(
£m≠h‹e
 *
£m
)

134 
	`KASSERT
(
£m
 !
NULL
);

136 
	`•ölock_acquúe
(&
£m
->
£m_lock
);

138 
£m
->
£m_cou¡
++;

139 
	`KASSERT
(
£m
->
£m_cou¡
 > 0);

140 
	`wch™_wake⁄e
(
£m
->
£m_wch™
);

142 
	`•ölock_ªÀa£
(&
£m
->
£m_lock
);

143 
	}
}

149 
lock
 *

150 
	$lock_¸óã
(c⁄° *
«me
)

152 
lock
 *lock;

154 
lock
 = 
	`kmÆloc
((lock));

155 i‡(
lock
 =
NULL
) {

156  
NULL
;

159 
lock
->
lk_«me
 = 
	`k°rdup
(
«me
);

160 i‡(
lock
->
lk_«me
 =
NULL
) {

161 
	`k‰ì
(
lock
);

162  
NULL
;

167 
lock
->
lk_wch™
 = 
	`wch™_¸óã
÷ock->
lk_«me
);

168 i‡(
lock
->
lk_wch™
 =
NULL
) {

169 
	`k‰ì
(
lock
->
lk_«me
);

170 
	`k‰ì
(
lock
);

171  
NULL
;

173 
	`•ölock_öô
(&
lock
->
lk_lock
);

174 
lock
->
hñd
 = 
Ál£
;

175 
lock
->
hﬁdî
=
NULL
;

177  
lock
;

178 
	}
}

181 
	$lock_de°roy
(
lock
 *lock)

183 
	`KASSERT
(
lock
 !
NULL
);

186 
	`•ölock_˛ónup
(&
lock
->
lk_lock
);

187 
	`wch™_de°roy
(
lock
->
lk_wch™
);

188 
lock
->
hﬁdî
=
NULL
;

189 
	`k‰ì
(
lock
->
lk_«me
);

190 
	`k‰ì
(
lock
);

192 
	}
}

195 
	$lock_acquúe
(
lock
 *lock)

199 
	`KASSERT
(
lock
 !
NULL
);

200 
	`KASSERT
(
cuπhªad
->
t_ö_öãºu±
 =
Ál£
);

202 
	`•ölock_acquúe
(&
lock
->
lk_lock
);

203 
lock
 -> 
hñd
)

205 
	`wch™_lock
(
lock
->
lk_wch™
);

206 
	`•ölock_ªÀa£
(&
lock
->
lk_lock
);

207 
	`wch™_¶ìp
(
lock
->
lk_wch™
);

208 
	`•ölock_acquúe
(&
lock
->
lk_lock
);

210 
	`KASSERT
(!
lock
->
hñd
);

211 
lock
 -> 
hﬁdî
 = 
cuπhªad
;

212 
lock
 -> 
hñd
 = 
åue
;

213 
	`•ölock_ªÀa£
(&
lock
->
lk_lock
);

216 
	}
}

219 
	$lock_ªÀa£
(
lock
 *lock)

223 
	`KASSERT
(
lock
 !
NULL
);

224 
	`•ölock_acquúe
(&
lock
->
lk_lock
);

225 if(
	`lock_do_i_hﬁd
(
lock
))

227 
lock
->
hñd
 = 
Ál£
;

228 
	`wch™_wake⁄e
(
lock
->
lk_wch™
);

230 
	`•ölock_ªÀa£
(&
lock
->
lk_lock
);

232 
	}
}

234 
boﬁ


235 
	$lock_do_i_hﬁd
(
lock
 *lock)

239 i‡(
lock
->
hﬁdî
 =
cuπhªad
)

241  
åue
;

245  
Ál£
;

251 
	}
}

258 
cv
 *

259 
	$cv_¸óã
(c⁄° *
«me
)

261 
cv
 *cv;

263 
cv
 = 
	`kmÆloc
((cv));

264 i‡(
cv
 =
NULL
) {

265  
NULL
;

268 
cv
->
cv_«me
 = 
	`k°rdup
(
«me
);

269 i‡(
cv
->
cv_«me
==
NULL
) {

270 
	`k‰ì
(
cv
);

271  
NULL
;

276 
cv
 -> 
cv_wch™
 = 
	`wch™_¸óã
(cv->
cv_«me
);

277 i‡(
cv
 -> 
cv_wch™
 =
NULL
) {

278 
	`k‰ì
(
cv
 -> 
cv_«me
);

279 
	`k‰ì
(
cv
);

280  
NULL
;

282  
cv
;

283 
	}
}

286 
	$cv_de°roy
(
cv
 *cv)

288 
	`KASSERT
(
cv
 !
NULL
);

291 
	`wch™_de°roy
(
cv
->
cv_wch™
);

292 
	`k‰ì
(
cv
->
cv_«me
);

293 
	`k‰ì
(
cv
);

294 
	}
}

297 
	$cv_waô
(
cv
 *cv, 
lock
 *lock)

300 
	`KASSERT
(
cv
 !
NULL
);

301 
	`KASSERT
(
lock
 !
NULL
);

303 if(
	`lock_do_i_hﬁd
(
lock
)) {

304 
	`wch™_lock
(
cv
 -> 
cv_wch™
);

305 
	`lock_ªÀa£
(
lock
);

306 
	`wch™_¶ìp
(
cv
 -> 
cv_wch™
);

307 
	`lock_acquúe
(
lock
);

311 
	}
}

314 
	$cv_sig«l
(
cv
 *cv, 
lock
 *lock)

317 
	`KASSERT
(
cv
 !
NULL
);

318 
	`KASSERT
(
lock
 !
NULL
);

319 if(
	`lock_do_i_hﬁd
(
lock
)) {

320 
	`wch™_wake⁄e
(
cv
 -> 
cv_wch™
);

324 
	}
}

327 
	$cv_brﬂdˇ°
(
cv
 *cv, 
lock
 *lock)

330 
	`KASSERT
(
cv
 !
NULL
);

331 
	`KASSERT
(
lock
 !
NULL
);

332 if(
	`lock_do_i_hﬁd
(
lock
)) {

333 
	`wch™_wakóŒ
(
cv
 -> 
cv_wch™
);

337 
	}
}

	@os161/kern/thread/thread.c

34 
	#THREADINLINE


	)

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<lib.h
>

39 
	~<¨øy.h
>

40 
	~<˝u.h
>

41 
	~<•l.h
>

42 
	~<•ölock.h
>

43 
	~<wch™.h
>

44 
	~<thªad.h
>

45 
	~<thªadli°.h
>

46 
	~<thªad¥iv©e.h
>

47 
	~<¥oc.h
>

48 
	~<cuºít.h
>

49 
	~<synch.h
>

50 
	~<addr•a˚.h
>

51 
	~<maöbus.h
>

52 
	~<vnode.h
>

54 
	~"›t-synch¥obs.h
"

58 
	#THREAD_STACK_MAGIC
 0xbØdf00d

	)

61 
	swch™
 {

62 c⁄° *
	mwc_«me
;

63 
thªadli°
 
	mwc_thªads
;

64 
•ölock
 
	mwc_lock
;

68 
DECLARRAY
(
˝u
);

69 
DEFARRAY
(
˝u
, );

70 
˝u¨øy
 
	gÆl˝us
;

73 
£m≠h‹e
 *
	g˝u_°¨tup_£m
;

84 
	$thªad_check°ack_öô
(
thªad
 *thread)

86 ((
uöt32_t
 *)
thªad
->
t_°ack
)[0] = 
THREAD_STACK_MAGIC
;

87 ((
uöt32_t
 *)
thªad
->
t_°ack
)[1] = 
THREAD_STACK_MAGIC
;

88 ((
uöt32_t
 *)
thªad
->
t_°ack
)[2] = 
THREAD_STACK_MAGIC
;

89 ((
uöt32_t
 *)
thªad
->
t_°ack
)[3] = 
THREAD_STACK_MAGIC
;

90 
	}
}

104 
	$thªad_check°ack
(
thªad
 *thread)

106 i‡(
thªad
->
t_°ack
 !
NULL
) {

107 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[0] =
THREAD_STACK_MAGIC
);

108 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[1] =
THREAD_STACK_MAGIC
);

109 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[2] =
THREAD_STACK_MAGIC
);

110 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[3] =
THREAD_STACK_MAGIC
);

112 
	}
}

119 
thªad
 *

120 
	$thªad_¸óã
(c⁄° *
«me
)

122 
thªad
 *thread;

124 
	`DEBUGASSERT
(
«me
 !
NULL
);

126 
thªad
 = 
	`kmÆloc
((*thread));

127 i‡(
thªad
 =
NULL
) {

128  
NULL
;

131 
thªad
->
t_«me
 = 
	`k°rdup
(
«me
);

132 i‡(
thªad
->
t_«me
 =
NULL
) {

133 
	`k‰ì
(
thªad
);

134  
NULL
;

136 
thªad
->
t_wch™_«me
 = "NEW";

137 
thªad
->
t_°©e
 = 
S_READY
;

140 
	`thªad_machdï_öô
(&
thªad
->
t_machdï
);

141 
	`thªadli°node_öô
(&
thªad
->
t_li°node
,Åhread);

142 
thªad
->
t_°ack
 = 
NULL
;

143 
thªad
->
t_c⁄ãxt
 = 
NULL
;

144 
thªad
->
t_˝u
 = 
NULL
;

145 
thªad
->
t_¥oc
 = 
NULL
;

148 
thªad
->
t_ö_öãºu±
 = 
Ál£
;

149 
thªad
->
t_cur•l
 = 
IPL_HIGH
;

150 
thªad
->
t_ùlhigh_cou¡
 = 1;

154  
thªad
;

155 
	}
}

165 
˝u
 *

166 
	$˝u_¸óã
(
h¨dw¨e_numbî
)

168 
˝u
 *
c
;

169 
ªsu…
;

170 
«mebuf
[16];

172 
c
 = 
	`kmÆloc
((*c));

173 i‡(
c
 =
NULL
) {

174 
	`∑nic
("cpu_create: Out of memory\n");

177 
c
->
c_£lf
 = c;

178 
c
->
c_h¨dw¨e_numbî
 = 
h¨dw¨e_numbî
;

180 
c
->
c_cuπhªad
 = 
NULL
;

181 
	`thªadli°_öô
(&
c
->
c_zombõs
);

182 
c
->
c_h¨d˛ocks
 = 0;

184 
c
->
c_isidÀ
 = 
Ál£
;

185 
	`thªadli°_öô
(&
c
->
c_runqueue
);

186 
	`•ölock_öô
(&
c
->
c_runqueue_lock
);

188 
c
->
c_ùi_≥ndög
 = 0;

189 
c
->
c_numshoŸdown
 = 0;

190 
	`•ölock_öô
(&
c
->
c_ùi_lock
);

192 
ªsu…
 = 
	`˝u¨øy_add
(&
Æl˝us
, 
c
, &c->
c_numbî
);

193 i‡(
ªsu…
 != 0) {

194 
	`∑nic
("˝u_¸óã:áºay_add: %s\n", 
	`°ªº‹
(
ªsu…
));

197 
	`¢¥ötf
(
«mebuf
, “amebuf), "<boŸ #%d>", 
c
->
c_numbî
);

198 
c
->
c_cuπhªad
 = 
	`thªad_¸óã
(
«mebuf
);

199 i‡(
c
->
c_cuπhªad
 =
NULL
) {

200 
	`∑nic
("cpu_create:Åhread_create failed\n");

202 
ªsu…
 = 
	`¥oc_addthªad
(
k¥oc
, 
c
->
c_cuπhªad
);

203 i‡(
ªsu…
) {

204 
	`∑nic
("˝u_¸óã:Öroc_addthªad:: %s\n", 
	`°ªº‹
(
ªsu…
));

207 i‡(
c
->
c_numbî
 == 0) {

217 
c
->
c_cuπhªad
->
t_°ack
 = 
	`kmÆloc
(
STACK_SIZE
);

218 i‡(
c
->
c_cuπhªad
->
t_°ack
 =
NULL
) {

219 
	`∑nic
("cpu_create: couldn'tállocate stack");

221 
	`thªad_check°ack_öô
(
c
->
c_cuπhªad
);

223 
c
->
c_cuπhªad
->
t_˝u
 = c;

225 
	`˝u_machdï_öô
(
c
);

227  
c
;

228 
	}
}

240 
	$thªad_de°roy
(
thªad
 *thread)

242 
	`KASSERT
(
thªad
 !
cuπhªad
);

243 
	`KASSERT
(
thªad
->
t_°©e
 !
S_RUN
);

251 
	`KASSERT
(
thªad
->
t_¥oc
 =
NULL
);

252 i‡(
thªad
->
t_°ack
 !
NULL
) {

253 
	`k‰ì
(
thªad
->
t_°ack
);

255 
	`thªadli°node_˛ónup
(&
thªad
->
t_li°node
);

256 
	`thªad_machdï_˛ónup
(&
thªad
->
t_machdï
);

259 
thªad
->
t_wch™_«me
 = "DESTROYED";

261 
	`k‰ì
(
thªad
->
t_«me
);

262 
	`k‰ì
(
thªad
);

263 
	}
}

273 
	$ex‹ci£
()

275 
thªad
 *
z
;

277 (
z
 = 
	`thªadli°_ªmhód
(&
cur˝u
->
c_zombõs
)Ë!
NULL
) {

278 
	`KASSERT
(
z
 !
cuπhªad
);

279 
	`KASSERT
(
z
->
t_°©e
 =
S_ZOMBIE
);

280 
	`thªad_de°roy
(
z
);

282 
	}
}

290 
	$thªad_∑nic
()

297 
	`ùi_brﬂdˇ°
(
IPI_PANIC
);

306 
cur˝u
->
c_runqueue
.
é_cou¡
 = 0;

307 
cur˝u
->
c_runqueue
.
é_hód
.
én_√xt
 = 
NULL
;

308 
cur˝u
->
c_runqueue
.
é_èû
.
én_¥ev
 = 
NULL
;

326 
	}
}

332 
	$thªad_shutdown
()

340 
	`ùi_brﬂdˇ°
(
IPI_OFFLINE
);

341 
	}
}

347 
	$thªad_boŸ°øp
()

349 
˝u
 *
boŸ˝u
;

350 
thªad
 *
boŸthªad
;

352 
	`˝u¨øy_öô
(&
Æl˝us
);

362 
boŸ˝u
 = 
	`˝u_¸óã
(0);

363 
boŸthªad
 = 
boŸ˝u
->
c_cuπhªad
;

370 
	`INIT_CURCPU
(
boŸ˝u
, 
boŸthªad
);

377 
cuπhªad
->
t_˝u
 = 
cur˝u
;

378 
cur˝u
->
c_cuπhªad
 = 
cuπhªad
;

381 
	`KASSERT
(
cuπhªad
->
t_¥oc
 !
NULL
);

384 
	}
}

395 
	$˝u_h©ch
(
so·w¨e_numbî
)

397 
	`KASSERT
(
cur˝u
 !
NULL
);

398 
	`KASSERT
(
cuπhªad
 !
NULL
);

399 
	`KASSERT
(
cur˝u
->
c_numbî
 =
so·w¨e_numbî
);

401 
	`•l0
();

403 
	`k¥ötf
("˝u%u: %s\n", 
so·w¨e_numbî
, 
	`˝u_idítify
());

405 
	`V
(
˝u_°¨tup_£m
);

406 
	`thªad_exô
();

407 
	}
}

413 
	$thªad_°¨t_˝us
()

415 
i
;

417 
	`k¥ötf
("˝u0: %s\n", 
	`˝u_idítify
());

419 
˝u_°¨tup_£m
 = 
	`£m_¸óã
("cpu_hatch", 0);

420 
	`maöbus_°¨t_˝us
();

422 
i
=0; i<
	`˝u¨øy_num
(&
Æl˝us
) - 1; i++) {

423 
	`P
(
˝u_°¨tup_£m
);

425 
	`£m_de°roy
(
˝u_°¨tup_£m
);

426 
˝u_°¨tup_£m
 = 
NULL
;

427 
	}
}

436 
	$thªad_make_ru¬abÀ
(
thªad
 *
èrgë
, 
boﬁ
 
Æªady_have_lock
)

438 
˝u
 *
èrgë˝u
;

439 
boﬁ
 
isidÀ
;

442 
èrgë˝u
 = 
èrgë
->
t_˝u
;

444 i‡(
Æªady_have_lock
) {

446 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
èrgë˝u
->
c_runqueue_lock
));

449 
	`•ölock_acquúe
(&
èrgë˝u
->
c_runqueue_lock
);

452 
isidÀ
 = 
èrgë˝u
->
c_isidÀ
;

453 
	`thªadli°_addèû
(&
èrgë˝u
->
c_runqueue
, 
èrgë
);

454 i‡(
isidÀ
) {

459 
	`ùi_£nd
(
èrgë˝u
, 
IPI_UNIDLE
);

462 i‡(!
Æªady_have_lock
) {

463 
	`•ölock_ªÀa£
(&
èrgë˝u
->
c_runqueue_lock
);

465 
	}
}

478 
thªad_f‹k
(c⁄° *
«me
,

479 
¥oc
 *proc,

480 (*
íåypoöt
)(*
d©a1
, 
d©a2
),

481 *
d©a1
, 
d©a2
)

483 
thªad
 *
√wthªad
;

484 
ªsu…
;

486 #ifde‡
UW


487 
	`DEBUG
(
DB_THREADS
,"F‹kögÅhªad: %s\n",
«me
);

490 
√wthªad
 = 
	`thªad_¸óã
(
«me
);

491 i‡(
√wthªad
 =
NULL
) {

492  
ENOMEM
;

496 
√wthªad
->
t_°ack
 = 
	`kmÆloc
(
STACK_SIZE
);

497 i‡(
√wthªad
->
t_°ack
 =
NULL
) {

498 
	`thªad_de°roy
(
√wthªad
);

499  
ENOMEM
;

501 
	`thªad_check°ack_öô
(
√wthªad
);

508 
√wthªad
->
t_˝u
 = 
cuπhªad
->t_cpu;

511 i‡(
¥oc
 =
NULL
) {

512 
¥oc
 = 
cuπhªad
->
t_¥oc
;

514 
ªsu…
 = 
	`¥oc_addthªad
(
¥oc
, 
√wthªad
);

515 i‡(
ªsu…
) {

517 
	`thªad_de°roy
(
√wthªad
);

518  
ªsu…
;

526 
√wthªad
->
t_ùlhigh_cou¡
++;

529 
	`swôch‰ame_öô
(
√wthªad
, 
íåypoöt
, 
d©a1
, 
d©a2
);

532 
	`thªad_make_ru¬abÀ
(
√wthªad
, 
Ál£
);

535 
	}
}

548 
	$thªad_swôch
(
thªad°©e_t
 
√w°©e
, 
wch™
 *
wc
)

550 
thªad
 *
cur
, *
√xt
;

551 
•l
;

553 
	`DEBUGASSERT
(
cur˝u
->
c_cuπhªad
 =
cuπhªad
);

554 
	`DEBUGASSERT
(
cuπhªad
->
t_˝u
 =
cur˝u
->
c_£lf
);

557 
•l
 = 
	`•lhigh
();

559 
cur
 = 
cuπhªad
;

565 i‡(
cur˝u
->
c_isidÀ
) {

566 
	`•lx
(
•l
);

571 
	`thªad_check°ack
(
cur
);

574 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

577 i‡(
√w°©e
 =
S_READY
 && 
	`thªadli°_i£m±y
(&
cur˝u
->
c_runqueue
)) {

578 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

579 
	`•lx
(
•l
);

584 
√w°©e
) {

585 
S_RUN
:

586 
	`∑nic
("Illegal S_RUN inÅhread_switch\n");

587 
S_READY
:

588 
	`thªad_make_ru¬abÀ
(
cur
, 
åue
 );

590 
S_SLEEP
:

591 
cur
->
t_wch™_«me
 = 
wc
->
wc_«me
;

605 
	`thªadli°_addèû
(&
wc
->
wc_thªads
, 
cur
);

606 
	`wch™_u∆ock
(
wc
);

608 
S_ZOMBIE
:

609 
cur
->
t_wch™_«me
 = "ZOMBIE";

610 
	`thªadli°_addèû
(&
cur˝u
->
c_zombõs
, 
cur
);

613 
cur
->
t_°©e
 = 
√w°©e
;

633 
cur˝u
->
c_isidÀ
 = 
åue
;

635 
√xt
 = 
	`thªadli°_ªmhód
(&
cur˝u
->
c_runqueue
);

636 i‡(
√xt
 =
NULL
) {

637 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

638 
	`˝u_idÀ
();

639 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

641 } 
√xt
 =
NULL
);

642 
cur˝u
->
c_isidÀ
 = 
Ál£
;

651 
cur˝u
->
c_cuπhªad
 = 
√xt
;

652 
cuπhªad
 = 
√xt
;

655 
	`swôch‰ame_swôch
(&
cur
->
t_c⁄ãxt
, &
√xt
->t_context);

705 
cur
->
t_wch™_«me
 = 
NULL
;

706 
cur
->
t_°©e
 = 
S_RUN
;

709 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

712 
	`as_a˘iv©e
();

715 
	`ex‹ci£
();

718 
	`•lx
(
•l
);

719 
	}
}

730 
thªad_°¨tup
((*
íåypoöt
)(*
d©a1
, 
d©a2
),

731 *
d©a1
, 
d©a2
)

733 
thªad
 *
cur
;

735 
cur
 = 
cuπhªad
;

738 
cur
->
t_wch™_«me
 = 
NULL
;

739 
cur
->
t_°©e
 = 
S_RUN
;

742 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

745 
	`as_a˘iv©e
();

748 
	`ex‹ci£
();

751 
	`•l0
();

753 #i‡
OPT_SYNCHPROBS


756 
i
, 
n
;

757 
n
 = 
	`øndom
()%161 +Ñandom()%161;

758 
i
=0; i<
n
; i++) {

759 
	`thªad_yõld
();

765 
	`íåypoöt
(
d©a1
, 
d©a2
);

768 
	`thªad_exô
();

769 
	}
}

781 
	$thªad_exô
()

783 
thªad
 *
cur
;

785 
cur
 = 
cuπhªad
;

787 #ifde‡
UW


790 
	`KASSERT
(
cuΩroc
 =
k¥oc
 || cuΩro¯=
NULL
);

792 i‡(
cuΩroc
 =
k¥oc
) {

793 
	`¥oc_ªmthªad
(
cur
);

796 
	`¥oc_ªmthªad
(
cur
);

800 
	`KASSERT
(
cur
->
t_¥oc
 =
NULL
);

803 
	`thªad_check°ack
(
cur
);

806 
	`•lhigh
();

807 
	`thªad_swôch
(
S_ZOMBIE
, 
NULL
);

808 
	`∑nic
("The zombie walks!\n");

809 
	}
}

815 
	$thªad_yõld
()

817 
	`thªad_swôch
(
S_READY
, 
NULL
);

818 
	}
}

830 
	$scheduÀ
()

836 
	}
}

856 
	$thªad_c⁄sidî_migøti⁄
()

858 
my_cou¡
, 
tŸÆ_cou¡
, 
⁄e_sh¨e
, 
to_£nd
;

859 
i
, 
num˝us
;

860 
˝u
 *
c
;

861 
thªadli°
 
vi˘ims
;

862 
thªad
 *
t
;

864 
my_cou¡
 = 
tŸÆ_cou¡
 = 0;

865 
num˝us
 = 
	`˝u¨øy_num
(&
Æl˝us
);

866 
i
=0; i<
num˝us
; i++) {

867 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

868 
	`•ölock_acquúe
(&
c
->
c_runqueue_lock
);

869 
tŸÆ_cou¡
 +
c
->
c_runqueue
.
é_cou¡
;

870 i‡(
c
 =
cur˝u
->
c_£lf
) {

871 
my_cou¡
 = 
c
->
c_runqueue
.
é_cou¡
;

873 
	`•ölock_ªÀa£
(&
c
->
c_runqueue_lock
);

876 
⁄e_sh¨e
 = 
	`DIVROUNDUP
(
tŸÆ_cou¡
, 
num˝us
);

877 i‡(
my_cou¡
 < 
⁄e_sh¨e
) {

881 
to_£nd
 = 
my_cou¡
 - 
⁄e_sh¨e
;

882 
	`thªadli°_öô
(&
vi˘ims
);

883 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

884 
i
=0; i<
to_£nd
; i++) {

885 
t
 = 
	`thªadli°_ªmèû
(&
cur˝u
->
c_runqueue
);

886 
	`thªadli°_addhód
(&
vi˘ims
, 
t
);

888 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

890 
i
=0; i < 
num˝us
 && 
to_£nd
 > 0; i++) {

891 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

892 i‡(
c
 =
cur˝u
->
c_£lf
) {

895 
	`•ölock_acquúe
(&
c
->
c_runqueue_lock
);

896 
c
->
c_runqueue
.
é_cou¡
 < 
⁄e_sh¨e
 && 
to_£nd
 > 0) {

897 
t
 = 
	`thªadli°_ªmhód
(&
vi˘ims
);

920 i‡(
t
 =
cuπhªad
) {

921 
	`thªadli°_addèû
(&
vi˘ims
, 
t
);

922 
to_£nd
--;

926 
t
->
t_˝u
 = 
c
;

927 
	`thªadli°_addèû
(&
c
->
c_runqueue
, 
t
);

928 
	`DEBUG
(
DB_THREADS
,

930 
t
->
t_«me
, 
cur˝u
->
c_numbî
, 
c
->c_number);

931 
to_£nd
--;

932 i‡(
c
->
c_isidÀ
) {

937 
	`ùi_£nd
(
c
, 
IPI_UNIDLE
);

940 
	`•ölock_ªÀa£
(&
c
->
c_runqueue_lock
);

948 i‡(!
	`thªadli°_i£m±y
(&
vi˘ims
)) {

949 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

950 (
t
 = 
	`thªadli°_ªmhód
(&
vi˘ims
)Ë!
NULL
) {

951 
	`thªadli°_addèû
(&
cur˝u
->
c_runqueue
, 
t
);

953 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

956 
	`KASSERT
(
	`thªadli°_i£m±y
(&
vi˘ims
));

957 
	`thªadli°_˛ónup
(&
vi˘ims
);

958 
	}
}

974 
wch™
 *

975 
	$wch™_¸óã
(c⁄° *
«me
)

977 
wch™
 *
wc
;

979 
wc
 = 
	`kmÆloc
((*wc));

980 i‡(
wc
 =
NULL
) {

981  
NULL
;

983 
	`•ölock_öô
(&
wc
->
wc_lock
);

984 
	`thªadli°_öô
(&
wc
->
wc_thªads
);

985 
wc
->
wc_«me
 = 
«me
;

986  
wc
;

987 
	}
}

994 
	$wch™_de°roy
(
wch™
 *
wc
)

996 
	`•ölock_˛ónup
(&
wc
->
wc_lock
);

997 
	`thªadli°_˛ónup
(&
wc
->
wc_thªads
);

998 
	`k‰ì
(
wc
);

999 
	}
}

1005 
	$wch™_lock
(
wch™
 *
wc
)

1007 
	`•ölock_acquúe
(&
wc
->
wc_lock
);

1008 
	}
}

1011 
	$wch™_u∆ock
(
wch™
 *
wc
)

1013 
	`•ölock_ªÀa£
(&
wc
->
wc_lock
);

1014 
	}
}

1023 
	$wch™_¶ìp
(
wch™
 *
wc
)

1026 
	`KASSERT
(!
cuπhªad
->
t_ö_öãºu±
);

1028 
	`thªad_swôch
(
S_SLEEP
, 
wc
);

1029 
	}
}

1035 
	$wch™_wake⁄e
(
wch™
 *
wc
)

1037 
thªad
 *
èrgë
;

1040 
	`•ölock_acquúe
(&
wc
->
wc_lock
);

1041 
èrgë
 = 
	`thªadli°_ªmhód
(&
wc
->
wc_thªads
);

1046 
	`•ölock_ªÀa£
(&
wc
->
wc_lock
);

1048 i‡(
èrgë
 =
NULL
) {

1053 
	`thªad_make_ru¬abÀ
(
èrgë
, 
Ál£
);

1054 
	}
}

1060 
	$wch™_wakóŒ
(
wch™
 *
wc
)

1062 
thªad
 *
èrgë
;

1063 
thªadli°
 
li°
;

1065 
	`thªadli°_öô
(&
li°
);

1071 
	`•ölock_acquúe
(&
wc
->
wc_lock
);

1072 (
èrgë
 = 
	`thªadli°_ªmhód
(&
wc
->
wc_thªads
)Ë!
NULL
) {

1073 
	`thªadli°_addèû
(&
li°
, 
èrgë
);

1079 
	`•ölock_ªÀa£
(&
wc
->
wc_lock
);

1086 (
èrgë
 = 
	`thªadli°_ªmhód
(&
li°
)Ë!
NULL
) {

1087 
	`thªad_make_ru¬abÀ
(
èrgë
, 
Ál£
);

1090 
	`thªadli°_˛ónup
(&
li°
);

1091 
	}
}

1097 
boﬁ


1098 
	$wch™_i£m±y
(
wch™
 *
wc
)

1100 
boﬁ
 
ªt
;

1102 
	`•ölock_acquúe
(&
wc
->
wc_lock
);

1103 
ªt
 = 
	`thªadli°_i£m±y
(&
wc
->
wc_thªads
);

1104 
	`•ölock_ªÀa£
(&
wc
->
wc_lock
);

1106  
ªt
;

1107 
	}
}

1119 
	$ùi_£nd
(
˝u
 *
èrgë
, 
code
)

1121 
	`KASSERT
(
code
 >= 0 && code < 32);

1123 
	`•ölock_acquúe
(&
èrgë
->
c_ùi_lock
);

1124 
èrgë
->
c_ùi_≥ndög
 |(
uöt32_t
)1 << 
code
;

1125 
	`maöbus_£nd_ùi
(
èrgë
);

1126 
	`•ölock_ªÀa£
(&
èrgë
->
c_ùi_lock
);

1127 
	}
}

1130 
	$ùi_brﬂdˇ°
(
code
)

1132 
i
;

1133 
˝u
 *
c
;

1135 
i
=0; i < 
	`˝u¨øy_num
(&
Æl˝us
); i++) {

1136 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

1137 i‡(
c
 !
cur˝u
->
c_£lf
) {

1138 
	`ùi_£nd
(
c
, 
code
);

1141 
	}
}

1144 
	$ùi_ébshoŸdown
(
˝u
 *
èrgë
, c⁄° 
ébshoŸdown
 *
m≠pög
)

1146 
n
;

1148 
	`•ölock_acquúe
(&
èrgë
->
c_ùi_lock
);

1150 
n
 = 
èrgë
->
c_numshoŸdown
;

1151 i‡(
n
 =
TLBSHOOTDOWN_MAX
) {

1152 
èrgë
->
c_numshoŸdown
 = 
TLBSHOOTDOWN_ALL
;

1155 
èrgë
->
c_shoŸdown
[
n
] = *
m≠pög
;

1156 
èrgë
->
c_numshoŸdown
 = 
n
+1;

1159 
èrgë
->
c_ùi_≥ndög
 |(
uöt32_t
)1 << 
IPI_TLBSHOOTDOWN
;

1160 
	`maöbus_£nd_ùi
(
èrgë
);

1162 
	`•ölock_ªÀa£
(&
èrgë
->
c_ùi_lock
);

1163 
	}
}

1166 
	$öãΩro˚ss‹_öãºu±
()

1168 
uöt32_t
 
bôs
;

1169 
i
;

1171 
	`•ölock_acquúe
(&
cur˝u
->
c_ùi_lock
);

1172 
bôs
 = 
cur˝u
->
c_ùi_≥ndög
;

1174 i‡(
bôs
 & (1U << 
IPI_PANIC
)) {

1176 
	`˝u_hÆt
();

1178 i‡(
bôs
 & (1U << 
IPI_OFFLINE
)) {

1180 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

1181 i‡(!
cur˝u
->
c_isidÀ
) {

1182 
	`k¥ötf
("cpu%d: offline: warning:Çot idle\n",

1183 
cur˝u
->
c_numbî
);

1185 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

1186 
	`k¥ötf
("˝u%d: ofÊöe.\n", 
cur˝u
->
c_numbî
);

1187 
	`˝u_hÆt
();

1189 i‡(
bôs
 & (1U << 
IPI_UNIDLE
)) {

1195 i‡(
bôs
 & (1U << 
IPI_TLBSHOOTDOWN
)) {

1196 i‡(
cur˝u
->
c_numshoŸdown
 =
TLBSHOOTDOWN_ALL
) {

1197 
	`vm_ébshoŸdown_Æl
();

1200 
i
=0; i<
cur˝u
->
c_numshoŸdown
; i++) {

1201 
	`vm_ébshoŸdown
(&
cur˝u
->
c_shoŸdown
[
i
]);

1204 
cur˝u
->
c_numshoŸdown
 = 0;

1207 
cur˝u
->
c_ùi_≥ndög
 = 0;

1208 
	`•ölock_ªÀa£
(&
cur˝u
->
c_ùi_lock
);

1209 
	}
}

	@os161/kern/thread/threadlist.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<thªad.h
>

37 
	~<thªadli°.h
>

40 
	$thªadli°node_öô
(
thªadli°node
 *
én
, 
thªad
 *
t
)

42 
	`DEBUGASSERT
(
én
 !
NULL
);

43 
	`KASSERT
(
t
 !
NULL
);

45 
én
->
én_√xt
 = 
NULL
;

46 
én
->
én_¥ev
 = 
NULL
;

47 
én
->
én_£lf
 = 
t
;

48 
	}
}

51 
	$thªadli°node_˛ónup
(
thªadli°node
 *
én
)

53 
	`DEBUGASSERT
(
én
 !
NULL
);

55 
	`KASSERT
(
én
->
én_√xt
 =
NULL
);

56 
	`KASSERT
(
én
->
én_¥ev
 =
NULL
);

57 
	`KASSERT
(
én
->
én_£lf
 !
NULL
);

58 
	}
}

61 
	$thªadli°_öô
(
thªadli°
 *
é
)

63 
	`DEBUGASSERT
(
é
 !
NULL
);

65 
é
->
é_hód
.
én_√xt
 = &é->
é_èû
;

66 
é
->
é_hód
.
én_¥ev
 = 
NULL
;

67 
é
->
é_èû
.
én_√xt
 = 
NULL
;

68 
é
->
é_èû
.
én_¥ev
 = &é->
é_hód
;

69 
é
->
é_hód
.
én_£lf
 = 
NULL
;

70 
é
->
é_èû
.
én_£lf
 = 
NULL
;

71 
é
->
é_cou¡
 = 0;

72 
	}
}

75 
	$thªadli°_˛ónup
(
thªadli°
 *
é
)

77 
	`DEBUGASSERT
(
é
 !
NULL
);

78 
	`DEBUGASSERT
(
é
->
é_hód
.
én_√xt
 =&é->
é_èû
);

79 
	`DEBUGASSERT
(
é
->
é_hód
.
én_¥ev
 =
NULL
);

80 
	`DEBUGASSERT
(
é
->
é_èû
.
én_√xt
 =
NULL
);

81 
	`DEBUGASSERT
(
é
->
é_èû
.
én_¥ev
 =&é->
é_hód
);

82 
	`DEBUGASSERT
(
é
->
é_hód
.
én_£lf
 =
NULL
);

83 
	`DEBUGASSERT
(
é
->
é_èû
.
én_£lf
 =
NULL
);

85 
	`KASSERT
(
	`thªadli°_i£m±y
(
é
));

86 
	`KASSERT
(
é
->
é_cou¡
 == 0);

89 
	}
}

91 
boﬁ


92 
	$thªadli°_i£m±y
(
thªadli°
 *
é
)

94 
	`DEBUGASSERT
(
é
 !
NULL
);

96  (
é
->
é_cou¡
 == 0);

97 
	}
}

107 
	$thªadli°_ö£πa·înode
(
thªadli°node
 *
⁄li°
, 
thªad
 *
t
)

109 
thªadli°node
 *
addì
;

111 
addì
 = &
t
->
t_li°node
;

113 
	`DEBUGASSERT
(
addì
->
én_¥ev
 =
NULL
);

114 
	`DEBUGASSERT
(
addì
->
én_√xt
 =
NULL
);

116 
addì
->
én_¥ev
 = 
⁄li°
;

117 
addì
->
én_√xt
 = 
⁄li°
->tln_next;

118 
addì
->
én_¥ev
->
én_√xt
 =áddee;

119 
addì
->
én_√xt
->
én_¥ev
 =áddee;

120 
	}
}

127 
	$thªadli°_ö£πbef‹íode
(
thªad
 *
t
, 
thªadli°node
 *
⁄li°
)

129 
thªadli°node
 *
addì
;

131 
addì
 = &
t
->
t_li°node
;

133 
	`DEBUGASSERT
(
addì
->
én_¥ev
 =
NULL
);

134 
	`DEBUGASSERT
(
addì
->
én_√xt
 =
NULL
);

136 
addì
->
én_¥ev
 = 
⁄li°
->tln_prev;

137 
addì
->
én_√xt
 = 
⁄li°
;

138 
addì
->
én_¥ev
->
én_√xt
 =áddee;

139 
addì
->
én_√xt
->
én_¥ev
 =áddee;

140 
	}
}

147 
	$thªadli°_ªmovíode
(
thªadli°node
 *
én
)

149 
	`DEBUGASSERT
(
én
 !
NULL
);

150 
	`DEBUGASSERT
(
én
->
én_¥ev
 !
NULL
);

151 
	`DEBUGASSERT
(
én
->
én_√xt
 !
NULL
);

153 
én
->
én_¥ev
->
én_√xt
 =Åln->tln_next;

154 
én
->
én_√xt
->
én_¥ev
 =Åln->tln_prev;

155 
én
->
én_¥ev
 = 
NULL
;

156 
én
->
én_√xt
 = 
NULL
;

157 
	}
}

163 
	$thªadli°_addhód
(
thªadli°
 *
é
, 
thªad
 *
t
)

165 
	`DEBUGASSERT
(
é
 !
NULL
);

166 
	`DEBUGASSERT
(
t
 !
NULL
);

168 
	`thªadli°_ö£πa·înode
(&
é
->
é_hód
, 
t
);

169 
é
->
é_cou¡
++;

170 
	}
}

173 
	$thªadli°_addèû
(
thªadli°
 *
é
, 
thªad
 *
t
)

175 
	`DEBUGASSERT
(
é
 !
NULL
);

176 
	`DEBUGASSERT
(
t
 !
NULL
);

178 
	`thªadli°_ö£πbef‹íode
(
t
, &
é
->
é_èû
);

179 
é
->
é_cou¡
++;

180 
	}
}

182 
thªad
 *

183 
	$thªadli°_ªmhód
(
thªadli°
 *
é
)

185 
thªadli°node
 *
én
;

187 
	`DEBUGASSERT
(
é
 !
NULL
);

189 
én
 = 
é
->
é_hód
.
én_√xt
;

190 i‡(
én
->
én_√xt
 =
NULL
) {

192  
NULL
;

194 
	`thªadli°_ªmovíode
(
én
);

195 
	`DEBUGASSERT
(
é
->
é_cou¡
 > 0);

196 
é
->
é_cou¡
--;

197  
én
->
én_£lf
;

198 
	}
}

200 
thªad
 *

201 
	$thªadli°_ªmèû
(
thªadli°
 *
é
)

203 
thªadli°node
 *
én
;

205 
	`DEBUGASSERT
(
é
 !
NULL
);

207 
én
 = 
é
->
é_èû
.
én_¥ev
;

208 i‡(
én
->
én_¥ev
 =
NULL
) {

210  
NULL
;

212 
	`thªadli°_ªmovíode
(
én
);

213 
	`DEBUGASSERT
(
é
->
é_cou¡
 > 0);

214 
é
->
é_cou¡
--;

215  
én
->
én_£lf
;

216 
	}
}

219 
	$thªadli°_ö£πa·î
(
thªadli°
 *
é
,

220 
thªad
 *
⁄li°
, thªad *
addì
)

222 
	`thªadli°_ö£πa·înode
(&
⁄li°
->
t_li°node
, 
addì
);

223 
é
->
é_cou¡
++;

224 
	}
}

227 
	$thªadli°_ö£πbef‹e
(
thªadli°
 *
é
,

228 
thªad
 *
addì
, thªad *
⁄li°
)

230 
	`thªadli°_ö£πbef‹íode
(
addì
, &
⁄li°
->
t_li°node
);

231 
é
->
é_cou¡
++;

232 
	}
}

235 
	$thªadli°_ªmove
(
thªadli°
 *
é
, 
thªad
 *
t
)

237 
	`thªadli°_ªmovíode
(&
t
->
t_li°node
);

238 
	`DEBUGASSERT
(
é
->
é_cou¡
 > 0);

239 
é
->
é_cou¡
--;

240 
	}
}

	@os161/kern/thread/threadlocks.c

34 
	#THREADINLINE


	)

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<lib.h
>

39 
	~<¨øy.h
>

40 
	~<˝u.h
>

41 
	~<•l.h
>

42 
	~<•ölock.h
>

43 
	~<wch™.h
>

44 
	~<thªad.h
>

45 
	~<thªadli°.h
>

46 
	~<thªad¥iv©e.h
>

47 
	~<¥oc.h
>

48 
	~<cuºít.h
>

49 
	~<synch.h
>

50 
	~<addr•a˚.h
>

51 
	~<maöbus.h
>

52 
	~<vnode.h
>

54 
	~"›t-synch¥obs.h
"

58 
	#THREAD_STACK_MAGIC
 0xbØdf00d

	)

61 
	swch™
 {

62 c⁄° *
	mwc_«me
;

63 
thªadli°
 
	mwc_thªads
;

64 
•ölock
 
	mwc_lock
;

68 
DECLARRAY
(
˝u
);

69 
DEFARRAY
(
˝u
, );

70 
˝u¨øy
 
	gÆl˝us
;

73 
£m≠h‹e
 *
	g˝u_°¨tup_£m
;

84 
	$thªad_check°ack_öô
(
thªad
 *thread)

86 ((
uöt32_t
 *)
thªad
->
t_°ack
)[0] = 
THREAD_STACK_MAGIC
;

87 ((
uöt32_t
 *)
thªad
->
t_°ack
)[1] = 
THREAD_STACK_MAGIC
;

88 ((
uöt32_t
 *)
thªad
->
t_°ack
)[2] = 
THREAD_STACK_MAGIC
;

89 ((
uöt32_t
 *)
thªad
->
t_°ack
)[3] = 
THREAD_STACK_MAGIC
;

90 
	}
}

104 
	$thªad_check°ack
(
thªad
 *thread)

106 i‡(
thªad
->
t_°ack
 !
NULL
) {

107 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[0] =
THREAD_STACK_MAGIC
);

108 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[1] =
THREAD_STACK_MAGIC
);

109 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[2] =
THREAD_STACK_MAGIC
);

110 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[3] =
THREAD_STACK_MAGIC
);

112 
	}
}

119 
thªad
 *

120 
	$thªad_¸óã
(c⁄° *
«me
)

122 
thªad
 *thread;

124 
	`DEBUGASSERT
(
«me
 !
NULL
);

126 
thªad
 = 
	`kmÆloc
((*thread));

127 i‡(
thªad
 =
NULL
) {

128  
NULL
;

131 
thªad
->
t_«me
 = 
	`k°rdup
(
«me
);

132 i‡(
thªad
->
t_«me
 =
NULL
) {

133 
	`k‰ì
(
thªad
);

134  
NULL
;

136 
thªad
->
t_wch™_«me
 = "NEW";

137 
thªad
->
t_°©e
 = 
S_READY
;

140 
	`thªad_machdï_öô
(&
thªad
->
t_machdï
);

141 
	`thªadli°node_öô
(&
thªad
->
t_li°node
,Åhread);

142 
thªad
->
t_°ack
 = 
NULL
;

143 
thªad
->
t_c⁄ãxt
 = 
NULL
;

144 
thªad
->
t_˝u
 = 
NULL
;

145 
thªad
->
t_¥oc
 = 
NULL
;

148 
thªad
->
t_ö_öãºu±
 = 
Ál£
;

149 
thªad
->
t_cur•l
 = 
IPL_HIGH
;

150 
thªad
->
t_ùlhigh_cou¡
 = 1;

154  
thªad
;

155 
	}
}

165 
˝u
 *

166 
	$˝u_¸óã
(
h¨dw¨e_numbî
)

168 
˝u
 *
c
;

169 
ªsu…
;

170 
«mebuf
[16];

172 
c
 = 
	`kmÆloc
((*c));

173 i‡(
c
 =
NULL
) {

174 
	`∑nic
("cpu_create: Out of memory\n");

177 
c
->
c_£lf
 = c;

178 
c
->
c_h¨dw¨e_numbî
 = 
h¨dw¨e_numbî
;

180 
c
->
c_cuπhªad
 = 
NULL
;

181 
	`thªadli°_öô
(&
c
->
c_zombõs
);

182 
c
->
c_h¨d˛ocks
 = 0;

184 
c
->
c_isidÀ
 = 
Ál£
;

185 
	`thªadli°_öô
(&
c
->
c_runqueue
);

186 
	`•ölock_öô
(&
c
->
c_runqueue_lock
);

188 
c
->
c_ùi_≥ndög
 = 0;

189 
c
->
c_numshoŸdown
 = 0;

190 
	`•ölock_öô
(&
c
->
c_ùi_lock
);

192 
ªsu…
 = 
	`˝u¨øy_add
(&
Æl˝us
, 
c
, &c->
c_numbî
);

193 i‡(
ªsu…
 != 0) {

194 
	`∑nic
("˝u_¸óã:áºay_add: %s\n", 
	`°ªº‹
(
ªsu…
));

197 
	`¢¥ötf
(
«mebuf
, “amebuf), "<boŸ #%d>", 
c
->
c_numbî
);

198 
c
->
c_cuπhªad
 = 
	`thªad_¸óã
(
«mebuf
);

199 i‡(
c
->
c_cuπhªad
 =
NULL
) {

200 
	`∑nic
("cpu_create:Åhread_create failed\n");

202 
ªsu…
 = 
	`¥oc_addthªad
(
k¥oc
, 
c
->
c_cuπhªad
);

203 i‡(
ªsu…
) {

204 
	`∑nic
("˝u_¸óã:Öroc_addthªad:: %s\n", 
	`°ªº‹
(
ªsu…
));

207 i‡(
c
->
c_numbî
 == 0) {

217 
c
->
c_cuπhªad
->
t_°ack
 = 
	`kmÆloc
(
STACK_SIZE
);

218 i‡(
c
->
c_cuπhªad
->
t_°ack
 =
NULL
) {

219 
	`∑nic
("cpu_create: couldn'tállocate stack");

221 
	`thªad_check°ack_öô
(
c
->
c_cuπhªad
);

223 
c
->
c_cuπhªad
->
t_˝u
 = c;

225 
	`˝u_machdï_öô
(
c
);

227  
c
;

228 
	}
}

240 
	$thªad_de°roy
(
thªad
 *thread)

242 
	`KASSERT
(
thªad
 !
cuπhªad
);

243 
	`KASSERT
(
thªad
->
t_°©e
 !
S_RUN
);

251 
	`KASSERT
(
thªad
->
t_¥oc
 =
NULL
);

252 i‡(
thªad
->
t_°ack
 !
NULL
) {

253 
	`k‰ì
(
thªad
->
t_°ack
);

255 
	`thªadli°node_˛ónup
(&
thªad
->
t_li°node
);

256 
	`thªad_machdï_˛ónup
(&
thªad
->
t_machdï
);

259 
thªad
->
t_wch™_«me
 = "DESTROYED";

261 
	`k‰ì
(
thªad
->
t_«me
);

262 
	`k‰ì
(
thªad
);

263 
	}
}

273 
	$ex‹ci£
()

275 
thªad
 *
z
;

277 (
z
 = 
	`thªadli°_ªmhód
(&
cur˝u
->
c_zombõs
)Ë!
NULL
) {

278 
	`KASSERT
(
z
 !
cuπhªad
);

279 
	`KASSERT
(
z
->
t_°©e
 =
S_ZOMBIE
);

280 
	`thªad_de°roy
(
z
);

282 
	}
}

290 
	$thªad_∑nic
()

297 
	`ùi_brﬂdˇ°
(
IPI_PANIC
);

306 
cur˝u
->
c_runqueue
.
é_cou¡
 = 0;

307 
cur˝u
->
c_runqueue
.
é_hód
.
én_√xt
 = 
NULL
;

308 
cur˝u
->
c_runqueue
.
é_èû
.
én_¥ev
 = 
NULL
;

326 
	}
}

332 
	$thªad_shutdown
()

340 
	`ùi_brﬂdˇ°
(
IPI_OFFLINE
);

341 
	}
}

347 
	$thªad_boŸ°øp
()

349 
˝u
 *
boŸ˝u
;

350 
thªad
 *
boŸthªad
;

352 
	`˝u¨øy_öô
(&
Æl˝us
);

362 
boŸ˝u
 = 
	`˝u_¸óã
(0);

363 
boŸthªad
 = 
boŸ˝u
->
c_cuπhªad
;

370 
	`INIT_CURCPU
(
boŸ˝u
, 
boŸthªad
);

377 
cuπhªad
->
t_˝u
 = 
cur˝u
;

378 
cur˝u
->
c_cuπhªad
 = 
cuπhªad
;

381 
	`KASSERT
(
cuπhªad
->
t_¥oc
 !
NULL
);

384 
	}
}

395 
	$˝u_h©ch
(
so·w¨e_numbî
)

397 
	`KASSERT
(
cur˝u
 !
NULL
);

398 
	`KASSERT
(
cuπhªad
 !
NULL
);

399 
	`KASSERT
(
cur˝u
->
c_numbî
 =
so·w¨e_numbî
);

401 
	`•l0
();

403 
	`k¥ötf
("˝u%u: %s\n", 
so·w¨e_numbî
, 
	`˝u_idítify
());

405 
	`V
(
˝u_°¨tup_£m
);

406 
	`thªad_exô
();

407 
	}
}

413 
	$thªad_°¨t_˝us
()

415 
i
;

417 
	`k¥ötf
("˝u0: %s\n", 
	`˝u_idítify
());

419 
˝u_°¨tup_£m
 = 
	`£m_¸óã
("cpu_hatch", 0);

420 
	`maöbus_°¨t_˝us
();

422 
i
=0; i<
	`˝u¨øy_num
(&
Æl˝us
) - 1; i++) {

423 
	`P
(
˝u_°¨tup_£m
);

425 
	`£m_de°roy
(
˝u_°¨tup_£m
);

426 
˝u_°¨tup_£m
 = 
NULL
;

427 
	}
}

436 
	$thªad_make_ru¬abÀ
(
thªad
 *
èrgë
, 
boﬁ
 
Æªady_have_lock
)

438 
˝u
 *
èrgë˝u
;

439 
boﬁ
 
isidÀ
;

442 
èrgë˝u
 = 
èrgë
->
t_˝u
;

444 i‡(
Æªady_have_lock
) {

446 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
èrgë˝u
->
c_runqueue_lock
));

449 
	`•ölock_acquúe
(&
èrgë˝u
->
c_runqueue_lock
);

452 
isidÀ
 = 
èrgë˝u
->
c_isidÀ
;

453 
	`thªadli°_addèû
(&
èrgë˝u
->
c_runqueue
, 
èrgë
);

454 i‡(
isidÀ
) {

459 
	`ùi_£nd
(
èrgë˝u
, 
IPI_UNIDLE
);

462 i‡(!
Æªady_have_lock
) {

463 
	`•ölock_ªÀa£
(&
èrgë˝u
->
c_runqueue_lock
);

465 
	}
}

478 
thªad_f‹k
(c⁄° *
«me
,

479 
¥oc
 *proc,

480 (*
íåypoöt
)(*
d©a1
, 
d©a2
),

481 *
d©a1
, 
d©a2
)

483 
thªad
 *
√wthªad
;

484 
ªsu…
;

486 #ifde‡
UW


487 
	`DEBUG
(
DB_THREADS
,"F‹kögÅhªad: %s\n",
«me
);

490 
√wthªad
 = 
	`thªad_¸óã
(
«me
);

491 i‡(
√wthªad
 =
NULL
) {

492  
ENOMEM
;

496 
√wthªad
->
t_°ack
 = 
	`kmÆloc
(
STACK_SIZE
);

497 i‡(
√wthªad
->
t_°ack
 =
NULL
) {

498 
	`thªad_de°roy
(
√wthªad
);

499  
ENOMEM
;

501 
	`thªad_check°ack_öô
(
√wthªad
);

508 
√wthªad
->
t_˝u
 = 
cuπhªad
->t_cpu;

511 i‡(
¥oc
 =
NULL
) {

512 
¥oc
 = 
cuπhªad
->
t_¥oc
;

514 
ªsu…
 = 
	`¥oc_addthªad
(
¥oc
, 
√wthªad
);

515 i‡(
ªsu…
) {

517 
	`thªad_de°roy
(
√wthªad
);

518  
ªsu…
;

526 
√wthªad
->
t_ùlhigh_cou¡
++;

529 
	`swôch‰ame_öô
(
√wthªad
, 
íåypoöt
, 
d©a1
, 
d©a2
);

532 
	`thªad_make_ru¬abÀ
(
√wthªad
, 
Ál£
);

535 
	}
}

548 
	$thªad_swôch
(
thªad°©e_t
 
√w°©e
, 
wch™
 *
wc
)

550 
thªad
 *
cur
, *
√xt
;

551 
•l
;

553 
	`DEBUGASSERT
(
cur˝u
->
c_cuπhªad
 =
cuπhªad
);

554 
	`DEBUGASSERT
(
cuπhªad
->
t_˝u
 =
cur˝u
->
c_£lf
);

557 
•l
 = 
	`•lhigh
();

559 
cur
 = 
cuπhªad
;

565 i‡(
cur˝u
->
c_isidÀ
) {

566 
	`•lx
(
•l
);

571 
	`thªad_check°ack
(
cur
);

574 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

577 i‡(
√w°©e
 =
S_READY
 && 
	`thªadli°_i£m±y
(&
cur˝u
->
c_runqueue
)) {

578 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

579 
	`•lx
(
•l
);

584 
√w°©e
) {

585 
S_RUN
:

586 
	`∑nic
("Illegal S_RUN inÅhread_switch\n");

587 
S_READY
:

588 
	`thªad_make_ru¬abÀ
(
cur
, 
åue
 );

590 
S_SLEEP
:

591 
cur
->
t_wch™_«me
 = 
wc
->
wc_«me
;

605 
	`thªadli°_addèû
(&
wc
->
wc_thªads
, 
cur
);

606 
	`wch™_u∆ock
(
wc
);

608 
S_ZOMBIE
:

609 
cur
->
t_wch™_«me
 = "ZOMBIE";

610 
	`thªadli°_addèû
(&
cur˝u
->
c_zombõs
, 
cur
);

613 
cur
->
t_°©e
 = 
√w°©e
;

633 
cur˝u
->
c_isidÀ
 = 
åue
;

635 
√xt
 = 
	`thªadli°_ªmhód
(&
cur˝u
->
c_runqueue
);

636 i‡(
√xt
 =
NULL
) {

637 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

638 
	`˝u_idÀ
();

639 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

641 } 
√xt
 =
NULL
);

642 
cur˝u
->
c_isidÀ
 = 
Ál£
;

651 
cur˝u
->
c_cuπhªad
 = 
√xt
;

652 
cuπhªad
 = 
√xt
;

655 
	`swôch‰ame_swôch
(&
cur
->
t_c⁄ãxt
, &
√xt
->t_context);

705 
cur
->
t_wch™_«me
 = 
NULL
;

706 
cur
->
t_°©e
 = 
S_RUN
;

709 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

712 
	`as_a˘iv©e
();

715 
	`ex‹ci£
();

718 
	`•lx
(
•l
);

719 
	}
}

730 
thªad_°¨tup
((*
íåypoöt
)(*
d©a1
, 
d©a2
),

731 *
d©a1
, 
d©a2
)

733 
thªad
 *
cur
;

735 
cur
 = 
cuπhªad
;

738 
cur
->
t_wch™_«me
 = 
NULL
;

739 
cur
->
t_°©e
 = 
S_RUN
;

742 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

745 
	`as_a˘iv©e
();

748 
	`ex‹ci£
();

751 
	`•l0
();

753 #i‡
OPT_SYNCHPROBS


756 
i
, 
n
;

757 
n
 = 
	`øndom
()%161 +Ñandom()%161;

758 
i
=0; i<
n
; i++) {

759 
	`thªad_yõld
();

765 
	`íåypoöt
(
d©a1
, 
d©a2
);

768 
	`thªad_exô
();

769 
	}
}

781 
	$thªad_exô
()

783 
thªad
 *
cur
;

785 
cur
 = 
cuπhªad
;

787 #ifde‡
UW


790 
	`KASSERT
(
cuΩroc
 =
k¥oc
 || cuΩro¯=
NULL
);

792 i‡(
cuΩroc
 =
k¥oc
) {

793 
	`¥oc_ªmthªad
(
cur
);

796 
	`¥oc_ªmthªad
(
cur
);

800 
	`KASSERT
(
cur
->
t_¥oc
 =
NULL
);

803 
	`thªad_check°ack
(
cur
);

806 
	`•lhigh
();

807 
	`thªad_swôch
(
S_ZOMBIE
, 
NULL
);

808 
	`∑nic
("The zombie walks!\n");

809 
	}
}

815 
	$thªad_yõld
()

817 
	`thªad_swôch
(
S_READY
, 
NULL
);

818 
	}
}

830 
	$scheduÀ
()

836 
	}
}

856 
	$thªad_c⁄sidî_migøti⁄
()

858 
my_cou¡
, 
tŸÆ_cou¡
, 
⁄e_sh¨e
, 
to_£nd
;

859 
i
, 
num˝us
;

860 
˝u
 *
c
;

861 
thªadli°
 
vi˘ims
;

862 
thªad
 *
t
;

864 
my_cou¡
 = 
tŸÆ_cou¡
 = 0;

865 
num˝us
 = 
	`˝u¨øy_num
(&
Æl˝us
);

866 
i
=0; i<
num˝us
; i++) {

867 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

868 
	`•ölock_acquúe
(&
c
->
c_runqueue_lock
);

869 
tŸÆ_cou¡
 +
c
->
c_runqueue
.
é_cou¡
;

870 i‡(
c
 =
cur˝u
->
c_£lf
) {

871 
my_cou¡
 = 
c
->
c_runqueue
.
é_cou¡
;

873 
	`•ölock_ªÀa£
(&
c
->
c_runqueue_lock
);

876 
⁄e_sh¨e
 = 
	`DIVROUNDUP
(
tŸÆ_cou¡
, 
num˝us
);

877 i‡(
my_cou¡
 < 
⁄e_sh¨e
) {

881 
to_£nd
 = 
my_cou¡
 - 
⁄e_sh¨e
;

882 
	`thªadli°_öô
(&
vi˘ims
);

883 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

884 
i
=0; i<
to_£nd
; i++) {

885 
t
 = 
	`thªadli°_ªmèû
(&
cur˝u
->
c_runqueue
);

886 
	`thªadli°_addhód
(&
vi˘ims
, 
t
);

888 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

890 
i
=0; i < 
num˝us
 && 
to_£nd
 > 0; i++) {

891 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

892 i‡(
c
 =
cur˝u
->
c_£lf
) {

895 
	`•ölock_acquúe
(&
c
->
c_runqueue_lock
);

896 
c
->
c_runqueue
.
é_cou¡
 < 
⁄e_sh¨e
 && 
to_£nd
 > 0) {

897 
t
 = 
	`thªadli°_ªmhód
(&
vi˘ims
);

920 i‡(
t
 =
cuπhªad
) {

921 
	`thªadli°_addèû
(&
vi˘ims
, 
t
);

922 
to_£nd
--;

926 
t
->
t_˝u
 = 
c
;

927 
	`thªadli°_addèû
(&
c
->
c_runqueue
, 
t
);

928 
	`DEBUG
(
DB_THREADS
,

930 
t
->
t_«me
, 
cur˝u
->
c_numbî
, 
c
->c_number);

931 
to_£nd
--;

932 i‡(
c
->
c_isidÀ
) {

937 
	`ùi_£nd
(
c
, 
IPI_UNIDLE
);

940 
	`•ölock_ªÀa£
(&
c
->
c_runqueue_lock
);

948 i‡(!
	`thªadli°_i£m±y
(&
vi˘ims
)) {

949 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

950 (
t
 = 
	`thªadli°_ªmhód
(&
vi˘ims
)Ë!
NULL
) {

951 
	`thªadli°_addèû
(&
cur˝u
->
c_runqueue
, 
t
);

953 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

956 
	`KASSERT
(
	`thªadli°_i£m±y
(&
vi˘ims
));

957 
	`thªadli°_˛ónup
(&
vi˘ims
);

958 
	}
}

974 
wch™
 *

975 
	$wch™_¸óã
(c⁄° *
«me
)

977 
wch™
 *
wc
;

979 
wc
 = 
	`kmÆloc
((*wc));

980 i‡(
wc
 =
NULL
) {

981  
NULL
;

983 
	`•ölock_öô
(&
wc
->
wc_lock
);

984 
	`thªadli°_öô
(&
wc
->
wc_thªads
);

985 
wc
->
wc_«me
 = 
«me
;

986  
wc
;

987 
	}
}

994 
	$wch™_de°roy
(
wch™
 *
wc
)

996 
	`•ölock_˛ónup
(&
wc
->
wc_lock
);

997 
	`thªadli°_˛ónup
(&
wc
->
wc_thªads
);

998 
	`k‰ì
(
wc
);

999 
	}
}

1005 
	$wch™_lock
(
wch™
 *
wc
)

1007 
	`•ölock_acquúe
(&
wc
->
wc_lock
);

1008 
	}
}

1011 
	$wch™_u∆ock
(
wch™
 *
wc
)

1013 
	`•ölock_ªÀa£
(&
wc
->
wc_lock
);

1014 
	}
}

1023 
	$wch™_¶ìp
(
wch™
 *
wc
)

1026 
	`KASSERT
(!
cuπhªad
->
t_ö_öãºu±
);

1028 
	`thªad_swôch
(
S_SLEEP
, 
wc
);

1029 
	}
}

1035 
	$wch™_wake⁄e
(
wch™
 *
wc
)

1037 
thªad
 *
èrgë
;

1040 
	`•ölock_acquúe
(&
wc
->
wc_lock
);

1041 
èrgë
 = 
	`thªadli°_ªmhód
(&
wc
->
wc_thªads
);

1046 
	`•ölock_ªÀa£
(&
wc
->
wc_lock
);

1048 i‡(
èrgë
 =
NULL
) {

1053 
	`thªad_make_ru¬abÀ
(
èrgë
, 
Ál£
);

1054 
	}
}

1060 
	$wch™_wakóŒ
(
wch™
 *
wc
)

1062 
thªad
 *
èrgë
;

1063 
thªadli°
 
li°
;

1065 
	`thªadli°_öô
(&
li°
);

1071 
	`•ölock_acquúe
(&
wc
->
wc_lock
);

1072 (
èrgë
 = 
	`thªadli°_ªmhód
(&
wc
->
wc_thªads
)Ë!
NULL
) {

1073 
	`thªadli°_addèû
(&
li°
, 
èrgë
);

1079 
	`•ölock_ªÀa£
(&
wc
->
wc_lock
);

1086 (
èrgë
 = 
	`thªadli°_ªmhód
(&
li°
)Ë!
NULL
) {

1087 
	`thªad_make_ru¬abÀ
(
èrgë
, 
Ál£
);

1090 
	`thªadli°_˛ónup
(&
li°
);

1091 
	}
}

1097 
boﬁ


1098 
	$wch™_i£m±y
(
wch™
 *
wc
)

1100 
boﬁ
 
ªt
;

1102 
	`•ölock_acquúe
(&
wc
->
wc_lock
);

1103 
ªt
 = 
	`thªadli°_i£m±y
(&
wc
->
wc_thªads
);

1104 
	`•ölock_ªÀa£
(&
wc
->
wc_lock
);

1106  
ªt
;

1107 
	}
}

1119 
	$ùi_£nd
(
˝u
 *
èrgë
, 
code
)

1121 
	`KASSERT
(
code
 >= 0 && code < 32);

1123 
	`•ölock_acquúe
(&
èrgë
->
c_ùi_lock
);

1124 
èrgë
->
c_ùi_≥ndög
 |(
uöt32_t
)1 << 
code
;

1125 
	`maöbus_£nd_ùi
(
èrgë
);

1126 
	`•ölock_ªÀa£
(&
èrgë
->
c_ùi_lock
);

1127 
	}
}

1130 
	$ùi_brﬂdˇ°
(
code
)

1132 
i
;

1133 
˝u
 *
c
;

1135 
i
=0; i < 
	`˝u¨øy_num
(&
Æl˝us
); i++) {

1136 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

1137 i‡(
c
 !
cur˝u
->
c_£lf
) {

1138 
	`ùi_£nd
(
c
, 
code
);

1141 
	}
}

1144 
	$ùi_ébshoŸdown
(
˝u
 *
èrgë
, c⁄° 
ébshoŸdown
 *
m≠pög
)

1146 
n
;

1148 
	`•ölock_acquúe
(&
èrgë
->
c_ùi_lock
);

1150 
n
 = 
èrgë
->
c_numshoŸdown
;

1151 i‡(
n
 =
TLBSHOOTDOWN_MAX
) {

1152 
èrgë
->
c_numshoŸdown
 = 
TLBSHOOTDOWN_ALL
;

1155 
èrgë
->
c_shoŸdown
[
n
] = *
m≠pög
;

1156 
èrgë
->
c_numshoŸdown
 = 
n
+1;

1159 
èrgë
->
c_ùi_≥ndög
 |(
uöt32_t
)1 << 
IPI_TLBSHOOTDOWN
;

1160 
	`maöbus_£nd_ùi
(
èrgë
);

1162 
	`•ölock_ªÀa£
(&
èrgë
->
c_ùi_lock
);

1163 
	}
}

1166 
	$öãΩro˚ss‹_öãºu±
()

1168 
uöt32_t
 
bôs
;

1169 
i
;

1171 
	`•ölock_acquúe
(&
cur˝u
->
c_ùi_lock
);

1172 
bôs
 = 
cur˝u
->
c_ùi_≥ndög
;

1174 i‡(
bôs
 & (1U << 
IPI_PANIC
)) {

1176 
	`˝u_hÆt
();

1178 i‡(
bôs
 & (1U << 
IPI_OFFLINE
)) {

1180 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

1181 i‡(!
cur˝u
->
c_isidÀ
) {

1182 
	`k¥ötf
("cpu%d: offline: warning:Çot idle\n",

1183 
cur˝u
->
c_numbî
);

1185 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

1186 
	`k¥ötf
("˝u%d: ofÊöe.\n", 
cur˝u
->
c_numbî
);

1187 
	`˝u_hÆt
();

1189 i‡(
bôs
 & (1U << 
IPI_UNIDLE
)) {

1195 i‡(
bôs
 & (1U << 
IPI_TLBSHOOTDOWN
)) {

1196 i‡(
cur˝u
->
c_numshoŸdown
 =
TLBSHOOTDOWN_ALL
) {

1197 
	`vm_ébshoŸdown_Æl
();

1200 
i
=0; i<
cur˝u
->
c_numshoŸdown
; i++) {

1201 
	`vm_ébshoŸdown
(&
cur˝u
->
c_shoŸdown
[
i
]);

1204 
cur˝u
->
c_numshoŸdown
 = 0;

1207 
cur˝u
->
c_ùi_≥ndög
 = 0;

1208 
	`•ölock_ªÀa£
(&
cur˝u
->
c_ùi_lock
);

1209 
	}
}

	@os161/kern/vfs/device.c

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<kîn/f˙é.h
>

39 
	~<°©.h
>

40 
	~<lib.h
>

41 
	~<uio.h
>

42 
	~<synch.h
>

43 
	~<vnode.h
>

44 
	~<devi˚.h
>

53 
	$dev_›í
(
vnode
 *
v
, 
Êags
)

55 
devi˚
 *
d
 = 
v
->
vn_d©a
;

57 i‡(
Êags
 & (
O_CREAT
 | 
O_TRUNC
 | 
O_EXCL
 | 
O_APPEND
)) {

58  
EINVAL
;

61  
d
->
	`d_›í
(d, 
Êags
);

62 
	}
}

70 
	$dev_˛o£
(
vnode
 *
v
)

72 
devi˚
 *
d
 = 
v
->
vn_d©a
;

73  
d
->
	`d_˛o£
(d);

74 
	}
}

82 
	$dev_ª˛aim
(
vnode
 *
v
)

84 ()
v
;

87 
	}
}

94 
	$dev_ªad
(
vnode
 *
v
, 
uio
 *uio)

96 
devi˚
 *
d
 = 
v
->
vn_d©a
;

97 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

98  
d
->
	`d_io
(d, 
uio
);

99 
	}
}

107 
	$nuŒ_io
(
vnode
 *
v
, 
uio
 *uio)

109 ()
v
;

110 ()
uio
;

111  
EINVAL
;

112 
	}
}

119 
	$dev_wrôe
(
vnode
 *
v
, 
uio
 *uio)

121 
devi˚
 *
d
 = 
v
->
vn_d©a
;

122 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_WRITE
);

123  
d
->
	`d_io
(d, 
uio
);

124 
	}
}

131 
	$dev_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

133 
devi˚
 *
d
 = 
v
->
vn_d©a
;

134  
d
->
	`d_io˘l
(d, 
›
, 
d©a
);

135 
	}
}

144 
	$dev_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

146 
devi˚
 *
d
 = 
v
->
vn_d©a
;

147 
ªsu…
;

149 
	`bzîo
(
°©buf
, (
°©
));

151 i‡(
d
->
d_blocks
 > 0) {

152 
°©buf
->
°_size
 = 
d
->
d_blocks
 * d->
d_blocksize
;

153 
°©buf
->
°_blksize
 = 
d
->
d_blocksize
;

156 
°©buf
->
°_size
 = 0;

159 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

160 i‡(
ªsu…
) {

161  
ªsu…
;

164 
°©buf
->
°_mode
 |= 0600;

166 
°©buf
->
°_∆ök
 = 1;

167 
°©buf
->
°_blocks
 = 
d
->
d_blocks
;

170 
°©buf
->
°_dev
 = 0;

173 
°©buf
->
°_rdev
 = 
d
->
d_devnumbî
;

176 
	}
}

185 
	$dev_gëty≥
(
vnode
 *
v
, 
mode_t
 *
ªt
)

187 
devi˚
 *
d
 = 
v
->
vn_d©a
;

188 i‡(
d
->
d_blocks
 > 0) {

189 *
ªt
 = 
S_IFBLK
;

192 *
ªt
 = 
S_IFCHR
;

195 
	}
}

204 
	$dev_åy£ek
(
vnode
 *
v
, 
off_t
 
pos
)

206 
devi˚
 *
d
 = 
v
->
vn_d©a
;

207 i‡(
d
->
d_blocks
 > 0) {

208 i‡((
pos
 % 
d
->
d_blocksize
)!=0) {

210  
EINVAL
;

212 i‡(
pos
 < 0) {

219  
EINVAL
;

221 i‡(
pos
 / 
d
->
d_blocksize
 >d->
d_blocks
) {

223  
EINVAL
;

227  
ESPIPE
;

230 
	}
}

237 
	$nuŒ_fsync
(
vnode
 *
v
)

239 ()
v
;

241 
	}
}

249 
	$dev_mm≠
(
vnode
 *
v
 )

251 ()
v
;

252  
EUNIMP
;

253 
	}
}

260 
	$dev_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

262 
devi˚
 *
d
 = 
v
->
vn_d©a
;

267 i‡(
d
->
d_blocks
 > 0 && (
off_t
)(d->d_blocks*d->
d_blocksize
Ë=
Àn
) {

271  
EINVAL
;

272 
	}
}

282 
	$dev_«mefûe
(
vnode
 *
v
, 
uio
 *uio)

290 ()
v
;

291 ()
uio
;

294 
	}
}

302 
	$nuŒ_¸ót
(
vnode
 *
v
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

303 
vnode
 **
ªsu…
)

305 ()
v
;

306 ()
«me
;

307 ()
ex˛
;

308 ()
mode
;

309 ()
ªsu…
;

310  
ENOTDIR
;

311 
	}
}

315 
	$nuŒ_mkdú
(
vnode
 *
v
, c⁄° *
«me
, 
mode_t
 
mode
)

317 ()
v
;

318 ()
«me
;

319 ()
mode
;

320  
ENOTDIR
;

321 
	}
}

325 
	$nuŒ_symlök
(
vnode
 *
v
, c⁄° *
c⁄ã¡s
, c⁄° *
«me
)

327 ()
v
;

328 ()
c⁄ã¡s
;

329 ()
«me
;

330  
ENOTDIR
;

331 
	}
}

335 
	$nuŒ_«me›
(
vnode
 *
v
, c⁄° *
«me
)

337 ()
v
;

338 ()
«me
;

339  
ENOTDIR
;

340 
	}
}

344 
	$nuŒ_lök
(
vnode
 *
v
, c⁄° *
«me
, vnodê*
fûe
)

346 ()
v
;

347 ()
«me
;

348 ()
fûe
;

349  
ENOTDIR
;

350 
	}
}

354 
	$nuŒ_ª«me
(
vnode
 *
v
, c⁄° *
n1
, vnodê*
v2
, c⁄° *
n2
)

356 ()
v
;

357 ()
n1
;

358 ()
v2
;

359 ()
n2
;

360  
ENOTDIR
;

361 
	}
}

378 
	$dev_lookup
(
vnode
 *
dú
,

379 *
∑th«me
, 
vnode
 **
ªsu…
)

386 i‡(
	`°æí
(
∑th«me
)>0) {

387  
ENOENT
;

389 
	`VOP_INCREF
(
dú
);

390 *
ªsu…
 = 
dú
;

392 
	}
}

396 
	$dev_look∑ª¡
(
vnode
 *
dú
,

397 *
∑th«me
, 
vnode
 **
ªsu…
,

398 *
«mebuf
, 
size_t
 
buÊí
)

403 ()
dú
;

404 ()
∑th«me
;

405 ()
ªsu…
;

406 ()
«mebuf
;

407 ()
buÊí
;

409  
ENOTDIR
;

410 
	}
}

415 c⁄° 
vnode_›s
 
	gdev_vnode_›s
 = {

416 
VOP_MAGIC
,

418 
dev_›í
,

419 
dev_˛o£
,

420 
dev_ª˛aim
,

421 
dev_ªad
,

422 
nuŒ_io
,

423 
nuŒ_io
,

424 
dev_wrôe
,

425 
dev_io˘l
,

426 
dev_°©
,

427 
dev_gëty≥
,

428 
dev_åy£ek
,

429 
nuŒ_fsync
,

430 
dev_mm≠
,

431 
dev_åunˇã
,

432 
dev_«mefûe
,

433 
nuŒ_¸ót
,

434 
nuŒ_symlök
,

435 
nuŒ_mkdú
,

436 
nuŒ_lök
,

437 
nuŒ_«me›
,

438 
nuŒ_«me›
,

439 
nuŒ_ª«me
,

440 
dev_lookup
,

441 
dev_look∑ª¡
,

447 
vnode
 *

448 
	$dev_¸óã_vnode
(
devi˚
 *
dev
)

450 
ªsu…
;

451 
vnode
 *
v
;

453 
v
 = 
	`kmÆloc
((
vnode
));

454 i‡(
v
==
NULL
) {

455  
NULL
;

458 
ªsu…
 = 
	`VOP_INIT
(
v
, &
dev_vnode_›s
, 
NULL
, 
dev
);

459 i‡(
ªsu…
 != 0) {

460 
	`∑nic
("While creating vnode for device: VOP_INIT: %s\n",

461 
	`°ªº‹
(
ªsu…
));

464  
v
;

465 
	}
}

	@os161/kern/vfs/devnull.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<lib.h
>

37 
	~<uio.h
>

38 
	~<vfs.h
>

39 
	~<devi˚.h
>

44 
	$nuŒ›í
(
devi˚
 *
dev
, 
›íÊags
)

46 ()
dev
;

47 ()
›íÊags
;

50 
	}
}

55 
	$nuŒ˛o£
(
devi˚
 *
dev
)

57 ()
dev
;

59 
	}
}

64 
	$nuŒio
(
devi˚
 *
dev
, 
uio
 *uio)

71 ()
dev
;

73 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

74 
uio
->
uio_ªsid
 = 0;

78 
	}
}

83 
	$nuŒio˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

89 ()
dev
;

90 ()
›
;

91 ()
d©a
;

93  
EINVAL
;

94 
	}
}

100 
	$devnuŒ_¸óã
()

102 
ªsu…
;

103 
devi˚
 *
dev
;

105 
dev
 = 
	`kmÆloc
((*dev));

106 i‡(
dev
==
NULL
) {

107 
	`∑nic
("CouldÇotáddÇull device: out of memory\n");

111 
dev
->
d_›í
 = 
nuŒ›í
;

112 
dev
->
d_˛o£
 = 
nuŒ˛o£
;

113 
dev
->
d_io
 = 
nuŒio
;

114 
dev
->
d_io˘l
 = 
nuŒio˘l
;

116 
dev
->
d_blocks
 = 0;

117 
dev
->
d_blocksize
 = 1;

119 
dev
->
d_devnumbî
 = 0;

121 
dev
->
d_d©a
 = 
NULL
;

123 
ªsu…
 = 
	`vfs_adddev
("nuŒ", 
dev
, 0);

124 i‡(
ªsu…
) {

125 
	`∑nic
("CouldÇŸáddÇuŒ devi˚: %s\n", 
	`°ªº‹
(
ªsu…
));

127 
	}
}

	@os161/kern/vfs/vfscwd.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<°©.h
>

37 
	~<lib.h
>

38 
	~<uio.h
>

39 
	~<¥oc.h
>

40 
	~<cuºít.h
>

41 
	~<vfs.h
>

42 
	~<fs.h
>

43 
	~<vnode.h
>

49 
	$vfs_gëcurdú
(
vnode
 **
ªt
)

51 
rv
 = 0;

53 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

54 i‡(
cuΩroc
->
p_cwd
!=
NULL
) {

55 
	`VOP_INCREF
(
cuΩroc
->
p_cwd
);

56 *
ªt
 = 
cuΩroc
->
p_cwd
;

59 
rv
 = 
ENOENT
;

61 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

63  
rv
;

64 
	}
}

71 
	$vfs_£tcurdú
(
vnode
 *
dú
)

73 
vnode
 *
ﬁd
;

74 
mode_t
 
vty≥
;

75 
ªsu…
;

77 
ªsu…
 = 
	`VOP_GETTYPE
(
dú
, &
vty≥
);

78 i‡(
ªsu…
) {

79  
ªsu…
;

81 i‡(
vty≥
 !
S_IFDIR
) {

82  
ENOTDIR
;

85 
	`VOP_INCREF
(
dú
);

87 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

88 
ﬁd
 = 
cuΩroc
->
p_cwd
;

89 
cuΩroc
->
p_cwd
 = 
dú
;

90 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

92 i‡(
ﬁd
!=
NULL
) {

93 
	`VOP_DECREF
(
ﬁd
);

97 
	}
}

103 
	$vfs_˛órcurdú
()

105 
vnode
 *
ﬁd
;

107 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

108 
ﬁd
 = 
cuΩroc
->
p_cwd
;

109 
cuΩroc
->
p_cwd
 = 
NULL
;

110 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

112 i‡(
ﬁd
!=
NULL
) {

113 
	`VOP_DECREF
(
ﬁd
);

117 
	}
}

124 
	$vfs_chdú
(*
∑th
)

126 
vnode
 *
vn
;

127 
ªsu…
;

129 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

130 i‡(
ªsu…
) {

131  
ªsu…
;

133 
ªsu…
 = 
	`vfs_£tcurdú
(
vn
);

134 
	`VOP_DECREF
(
vn
);

135  
ªsu…
;

136 
	}
}

144 
	$vfs_gëcwd
(
uio
 *uio)

146 
vnode
 *
cwd
;

147 
ªsu…
;

148 c⁄° *
«me
;

149 
cﬁ⁄
=':';

151 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

153 
ªsu…
 = 
	`vfs_gëcurdú
(&
cwd
);

154 i‡(
ªsu…
) {

155  
ªsu…
;

159 
	`KASSERT
(
cwd
->
vn_fs
 !
NULL
);

161 
«me
 = 
	`FSOP_GETVOLNAME
(
cwd
->
vn_fs
);

162 i‡(
«me
==
NULL
) {

163 
	`vfs_biglock_acquúe
();

164 
«me
 = 
	`vfs_gëdev«me
(
cwd
->
vn_fs
);

165 
	`vfs_biglock_ªÀa£
();

167 
	`KASSERT
(
«me
 !
NULL
);

169 
ªsu…
 = 
	`uiomove
((*)
«me
, 
	`°æí
“ame), 
uio
);

170 i‡(
ªsu…
) {

171 
out
;

173 
ªsu…
 = 
	`uiomove
(&
cﬁ⁄
, 1, 
uio
);

174 i‡(
ªsu…
) {

175 
out
;

178 
ªsu…
 = 
	`VOP_NAMEFILE
(
cwd
, 
uio
);

180 
out
:

182 
	`VOP_DECREF
(
cwd
);

183  
ªsu…
;

184 
	}
}

	@os161/kern/vfs/vfslist.c

35 
	#VFSINLINE


	)

37 
	~<ty≥s.h
>

38 
	~<kîn/î∫o.h
>

39 
	~<lib.h
>

40 
	~<¨øy.h
>

41 
	~<synch.h
>

42 
	~<vfs.h
>

43 
	~<fs.h
>

44 
	~<vnode.h
>

45 
	~<devi˚.h
>

77 
	sknowndev
 {

78 *
	mkd_«me
;

79 *
	mkd_øw«me
;

80 
devi˚
 *
	mkd_devi˚
;

81 
vnode
 *
	mkd_vnode
;

82 
fs
 *
	mkd_fs
;

85 
DECLARRAY
(
knowndev
);

86 
DEFARRAY
(
knowndev
, );

88 
knowndev¨øy
 *
	gknowndevs
;

91 
lock
 *
	gvfs_biglock
;

92 
	gvfs_biglock_dïth
;

99 
	$vfs_boŸ°øp
()

101 
knowndevs
 = 
	`knowndev¨øy_¸óã
();

102 i‡(
knowndevs
==
NULL
) {

103 
	`∑nic
("vfs: CouldÇot create knowndevsárray\n");

106 
vfs_biglock
 = 
	`lock_¸óã
("vfs_biglock");

107 i‡(
vfs_biglock
==
NULL
) {

108 
	`∑nic
("vfs: CouldÇot create vfs bigÜock\n");

110 
vfs_biglock_dïth
 = 0;

112 
	`devnuŒ_¸óã
();

113 
	}
}

123 
	$vfs_biglock_acquúe
()

125 i‡(!
	`lock_do_i_hﬁd
(
vfs_biglock
)) {

126 
	`lock_acquúe
(
vfs_biglock
);

128 
vfs_biglock_dïth
++;

129 
	}
}

132 
	$vfs_biglock_ªÀa£
()

134 
	`KASSERT
(
	`lock_do_i_hﬁd
(
vfs_biglock
));

135 
	`KASSERT
(
vfs_biglock_dïth
 > 0);

136 
vfs_biglock_dïth
--;

137 i‡(
vfs_biglock_dïth
 == 0) {

138 
	`lock_ªÀa£
(
vfs_biglock
);

140 
	}
}

142 
boﬁ


143 
	$vfs_biglock_do_i_hﬁd
()

145  
	`lock_do_i_hﬁd
(
vfs_biglock
);

146 
	}
}

152 
	$vfs_sync
()

154 
knowndev
 *
dev
;

155 
i
, 
num
;

157 
	`vfs_biglock_acquúe
();

159 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

160 
i
=0; i<
num
; i++) {

161 
dev
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

162 i‡(
dev
->
kd_fs
 !
NULL
) {

163  
	`FSOP_SYNC
(
dev
->
kd_fs
);

167 
	`vfs_biglock_ªÀa£
();

170 
	}
}

177 
	$vfs_gëroŸ
(c⁄° *
dev«me
, 
vnode
 **
ªsu…
)

179 
knowndev
 *
kd
;

180 
i
, 
num
;

182 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

184 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

185 
i
=0; i<
num
; i++) {

186 
kd
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

197 i‡(
kd
->
kd_fs
!=
NULL
) {

198 c⁄° *
vﬁ«me
;

199 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
kd
->
kd_fs
);

201 i‡(!
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
) ||

202 (
vﬁ«me
!=
NULL
 && !
	`°rcmp
(vﬁ«me, 
dev«me
))) {

203 *
ªsu…
 = 
	`FSOP_GETROOT
(
kd
->
kd_fs
);

208 i‡(
kd
->
kd_øw«me
!=
NULL
 &&

209 !
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
)) {

210  
ENXIO
;

219 i‡(!
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
)) {

220 
	`KASSERT
(
kd
->
kd_fs
==
NULL
);

221 
	`KASSERT
(
kd
->
kd_øw«me
==
NULL
);

222 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

223 
	`VOP_INCREF
(
kd
->
kd_vnode
);

224 *
ªsu…
 = 
kd
->
kd_vnode
;

232 i‡(
kd
->
kd_øw«me
!=
NULL
 && !
	`°rcmp
(kd->kd_øw«me, 
dev«me
)) {

233 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

234 
	`VOP_INCREF
(
kd
->
kd_vnode
);

235 *
ªsu…
 = 
kd
->
kd_vnode
;

250  
ENODEV
;

251 
	}
}

257 
	$vfs_gëdev«me
(
fs
 *fs)

259 
knowndev
 *
kd
;

260 
i
, 
num
;

262 
	`KASSERT
(
fs
 !
NULL
);

264 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

266 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

267 
i
=0; i<
num
; i++) {

268 
kd
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

270 i‡(
kd
->
kd_fs
 =
fs
) {

277  
kd
->
kd_«me
;

281  
NULL
;

282 
	}
}

289 
	$mkøw«me
(c⁄° *
«me
)

291 *
s
 = 
	`kmÆloc
(
	`°æí
(
«me
)+3+1);

292 i‡(!
s
) {

293  
NULL
;

295 
	`°r˝y
(
s
, 
«me
);

296 
	`°rˇt
(
s
, "raw");

297  
s
;

298 
	}
}

306 
ölöe


308 
	$ßme°rög
(c⁄° *
a
, c⁄° *
b
)

310 i‡(
a
==
NULL
 || 
b
==NULL) {

313  !
	`°rcmp
(
a
, 
b
);

314 
	}
}

321 
ölöe


323 
	$ßme°rög3
(c⁄° *
a
, c⁄° *
b
, c⁄° *
c
, c⁄° *
d
)

325  
	`ßme°rög
(
a
,
b
Ë|| same°rög◊,
c
Ë|| same°rög◊,
d
);

326 
	}
}

335 
	$bad«mes
(c⁄° *
n1
, c⁄° *
n2
, c⁄° *
n3
)

337 c⁄° *
vﬁ«me
;

338 
i
, 
num
;

339 
knowndev
 *
kd
;

341 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

343 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

344 
i
=0; i<
num
; i++) {

345 
kd
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

347 i‡(
kd
->
kd_fs
) {

348 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
kd
->
kd_fs
);

349 i‡(
	`ßme°rög3
(
vﬁ«me
, 
n1
, 
n2
, 
n3
)) {

354 i‡(
	`ßme°rög3
(
kd
->
kd_øw«me
, 
n1
, 
n2
, 
n3
) ||

355 
	`ßme°rög3
(
kd
->
kd_«me
, 
n1
, 
n2
, 
n3
)) {

361 
	}
}

372 
	$vfs_dﬂdd
(c⁄° *
d«me
, 
mou¡abÀ
, 
devi˚
 *
dev
, 
fs
 *fs)

374 *
«me
=
NULL
, *
øw«me
=NULL;

375 
knowndev
 *
kd
=
NULL
;

376 
vnode
 *vnode=
NULL
;

377 c⁄° *
vﬁ«me
=
NULL
;

378 
ödex
;

379 
ªsu…
;

381 
	`vfs_biglock_acquúe
();

383 
«me
 = 
	`k°rdup
(
d«me
);

384 i‡(
«me
==
NULL
) {

385 
nomem
;

387 i‡(
mou¡abÀ
) {

388 
øw«me
 = 
	`mkøw«me
(
«me
);

389 i‡(
øw«me
==
NULL
) {

390 
nomem
;

394 
vnode
 = 
	`dev_¸óã_vnode
(
dev
);

395 i‡(
vnode
==
NULL
) {

396 
nomem
;

399 
kd
 = 
	`kmÆloc
((
knowndev
));

400 i‡(
kd
==
NULL
) {

401 
nomem
;

404 
kd
->
kd_«me
 = 
«me
;

405 
kd
->
kd_øw«me
 = 
øw«me
;

406 
kd
->
kd_devi˚
 = 
dev
;

407 
kd
->
kd_vnode
 = 
vnode
;

408 
kd
->
kd_fs
 = 
fs
;

410 i‡(
fs
!=
NULL
) {

411 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
fs
);

414 i‡(
	`bad«mes
(
«me
, 
øw«me
, 
vﬁ«me
)) {

415 
	`vfs_biglock_ªÀa£
();

416  
EEXIST
;

419 
ªsu…
 = 
	`knowndev¨øy_add
(
knowndevs
, 
kd
, &
ödex
);

421 i‡(
ªsu…
 =0 && 
dev
 !
NULL
) {

423 
dev
->
d_devnumbî
 = 
ödex
+1;

426 
	`vfs_biglock_ªÀa£
();

427  
ªsu…
;

429 
nomem
:

431 i‡(
«me
) {

432 
	`k‰ì
(
«me
);

434 i‡(
øw«me
) {

435 
	`k‰ì
(
øw«me
);

437 i‡(
vnode
) {

438 
	`k‰ì
(
vnode
);

440 i‡(
kd
) {

441 
	`k‰ì
(
kd
);

444 
	`vfs_biglock_ªÀa£
();

445  
ENOMEM
;

446 
	}
}

453 
	$vfs_adddev
(c⁄° *
dev«me
, 
devi˚
 *
dev
, 
mou¡abÀ
)

455  
	`vfs_dﬂdd
(
dev«me
, 
mou¡abÀ
, 
dev
, 
NULL
);

456 
	}
}

464 
	$vfs_addfs
(c⁄° *
dev«me
, 
fs
 *fs)

466  
	`vfs_dﬂdd
(
dev«me
, 0, 
NULL
, 
fs
);

467 
	}
}

477 
	$födmou¡
(c⁄° *
dev«me
, 
knowndev
 **
ªsu…
)

479 
knowndev
 *
dev
;

480 
i
, 
num
;

481 
boﬁ
 
found
 = 
Ál£
;

483 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

485 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

486 
i
=0; !
found
 && i<
num
; i++) {

487 
dev
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

488 i‡(
dev
->
kd_øw«me
==
NULL
) {

493 i‡(!
	`°rcmp
(
dev«me
, 
dev
->
kd_«me
)) {

494 *
ªsu…
 = 
dev
;

495 
found
 = 
åue
;

499  
found
 ? 0 : 
ENODEV
;

500 
	}
}

509 
vfs_mou¡
(c⁄° *
dev«me
, *
d©a
,

510 (*
mou¡func
)(*
d©a
, 
devi˚
 *, 
fs
 **
ªt
))

512 c⁄° *
vﬁ«me
;

513 
knowndev
 *
kd
;

514 
fs
 *fs;

515 
ªsu…
;

517 
	`vfs_biglock_acquúe
();

519 
ªsu…
 = 
	`födmou¡
(
dev«me
, &
kd
);

520 i‡(
ªsu…
) {

521 
	`vfs_biglock_ªÀa£
();

522  
ªsu…
;

525 i‡(
kd
->
kd_fs
 !
NULL
) {

526 
	`vfs_biglock_ªÀa£
();

527  
EBUSY
;

529 
	`KASSERT
(
kd
->
kd_øw«me
 !
NULL
);

530 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

532 
ªsu…
 = 
	`mou¡func
(
d©a
, 
kd
->
kd_devi˚
, &
fs
);

533 i‡(
ªsu…
) {

534 
	`vfs_biglock_ªÀa£
();

535  
ªsu…
;

538 
	`KASSERT
(
fs
 !
NULL
);

540 
kd
->
kd_fs
 = 
fs
;

542 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
fs
);

543 
	`k¥ötf
("vfs: Mounted %s: on %s\n",

544 
vﬁ«me
 ? vﬁ«mê: 
kd
->
kd_«me
, kd->kd_name);

546 
	`vfs_biglock_ªÀa£
();

548 
	}
}

555 
	$vfs_unmou¡
(c⁄° *
dev«me
)

557 
knowndev
 *
kd
;

558 
ªsu…
;

560 
	`vfs_biglock_acquúe
();

562 
ªsu…
 = 
	`födmou¡
(
dev«me
, &
kd
);

563 i‡(
ªsu…
) {

564 
Áû
;

567 i‡(
kd
->
kd_fs
 =
NULL
) {

568 
ªsu…
 = 
EINVAL
;

569 
Áû
;

571 
	`KASSERT
(
kd
->
kd_øw«me
 !
NULL
);

572 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

574 
ªsu…
 = 
	`FSOP_SYNC
(
kd
->
kd_fs
);

575 i‡(
ªsu…
) {

576 
Áû
;

579 
ªsu…
 = 
	`FSOP_UNMOUNT
(
kd
->
kd_fs
);

580 i‡(
ªsu…
) {

581 
Áû
;

584 
	`k¥ötf
("vfs: Unmou¡ed %s:\n", 
kd
->
kd_«me
);

587 
kd
->
kd_fs
 = 
NULL
;

589 
	`KASSERT
(
ªsu…
==0);

591 
Áû
:

592 
	`vfs_biglock_ªÀa£
();

593  
ªsu…
;

594 
	}
}

600 
	$vfs_unmou¡Æl
()

602 
knowndev
 *
dev
;

603 
i
, 
num
;

604 
ªsu…
;

606 
	`vfs_biglock_acquúe
();

608 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

609 
i
=0; i<
num
; i++) {

610 
dev
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

611 i‡(
dev
->
kd_øw«me
 =
NULL
) {

615 i‡(
dev
->
kd_fs
 =
NULL
) {

620 
	`k¥ötf
("vfs: Unmou¡ög %s:\n", 
dev
->
kd_«me
);

622 
ªsu…
 = 
	`FSOP_SYNC
(
dev
->
kd_fs
);

623 i‡(
ªsu…
) {

624 
	`k¥ötf
("vfs: Warning: sync failed for %s: %s,Årying "

625 "agaö\n", 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

627 
ªsu…
 = 
	`FSOP_SYNC
(
dev
->
kd_fs
);

628 i‡(
ªsu…
) {

629 
	`k¥ötf
("vfs: Warning: sync failed secondÅime"

631 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

636 
ªsu…
 = 
	`FSOP_UNMOUNT
(
dev
->
kd_fs
);

637 i‡(
ªsu…
 =
EBUSY
) {

638 
	`k¥ötf
("vfs: Cannot unmount %s: (busy)\n",

639 
dev
->
kd_«me
);

642 i‡(
ªsu…
) {

643 
	`k¥ötf
("vfs: Warning: unmount failed for %s:"

645 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

650 
dev
->
kd_fs
 = 
NULL
;

653 
	`vfs_biglock_ªÀa£
();

656 
	}
}

	@os161/kern/vfs/vfslookup.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<limôs.h
>

37 
	~<lib.h
>

38 
	~<synch.h
>

39 
	~<vfs.h
>

40 
	~<fs.h
>

41 
	~<vnode.h
>

43 
vnode
 *
	gboŸfs_vnode
 = 
NULL
;

50 
	$ch™ge_boŸfs
(
vnode
 *
√wvn
)

52 
vnode
 *
ﬁdvn
;

54 
ﬁdvn
 = 
boŸfs_vnode
;

55 
boŸfs_vnode
 = 
√wvn
;

57 i‡(
ﬁdvn
 !
NULL
) {

58 
	`VOP_DECREF
(
ﬁdvn
);

60 
	}
}

71 
	$vfs_£tboŸfs
(c⁄° *
f¢ame
)

73 
tmp
[
NAME_MAX
+1];

74 *
s
;

75 
ªsu…
;

76 
vnode
 *
√wguy
;

78 
	`vfs_biglock_acquúe
();

80 
	`¢¥ötf
(
tmp
, —mp)-1, "%s", 
f¢ame
);

81 
s
 = 
	`°rchr
(
tmp
, ':');

82 i‡(
s
) {

84 i‡(
	`°æí
(
s
)>0) {

85 
	`vfs_biglock_ªÀa£
();

86  
EINVAL
;

90 
	`°rˇt
(
tmp
, ":");

93 
ªsu…
 = 
	`vfs_chdú
(
tmp
);

94 i‡(
ªsu…
) {

95 
	`vfs_biglock_ªÀa£
();

96  
ªsu…
;

99 
ªsu…
 = 
	`vfs_gëcurdú
(&
√wguy
);

100 i‡(
ªsu…
) {

101 
	`vfs_biglock_ªÀa£
();

102  
ªsu…
;

105 
	`ch™ge_boŸfs
(
√wguy
);

107 
	`vfs_biglock_ªÀa£
();

109 
	}
}

115 
	$vfs_˛órboŸfs
()

117 
	`vfs_biglock_acquúe
();

118 
	`ch™ge_boŸfs
(
NULL
);

119 
	`vfs_biglock_ªÀa£
();

120 
	}
}

130 
	$gëdevi˚
(*
∑th
, **
sub∑th
, 
vnode
 **
°¨tvn
)

132 
¶ash
=-1, 
cﬁ⁄
=-1, 
i
;

133 
vnode
 *
vn
;

134 
ªsu…
;

136 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

142 
i
=0; 
∑th
[i]; i++) {

143 i‡(
∑th
[
i
]==':') {

144 
cﬁ⁄
 = 
i
;

147 i‡(
∑th
[
i
]=='/') {

148 
¶ash
 = 
i
;

153 i‡(
cﬁ⁄
 < 0 && 
¶ash
 != 0) {

161 *
sub∑th
 = 
∑th
;

162  
	`vfs_gëcurdú
(
°¨tvn
);

165 i‡(
cﬁ⁄
>0) {

167 
∑th
[
cﬁ⁄
]=0;

168 
∑th
[
cﬁ⁄
+1]=='/') {

170 
cﬁ⁄
++;

172 *
sub∑th
 = &
∑th
[
cﬁ⁄
+1];

174 
ªsu…
 = 
	`vfs_gëroŸ
(
∑th
, 
°¨tvn
);

175 i‡(
ªsu…
) {

176  
ªsu…
;

188 
	`KASSERT
(
cﬁ⁄
==0 || 
¶ash
==0);

190 i‡(
∑th
[0]=='/') {

191 i‡(
boŸfs_vnode
==
NULL
) {

192  
ENOENT
;

194 
	`VOP_INCREF
(
boŸfs_vnode
);

195 *
°¨tvn
 = 
boŸfs_vnode
;

198 
	`KASSERT
(
∑th
[0]==':');

200 
ªsu…
 = 
	`vfs_gëcurdú
(&
vn
);

201 i‡(
ªsu…
) {

202  
ªsu…
;

209 
	`KASSERT
(
vn
->
vn_fs
!=
NULL
);

211 *
°¨tvn
 = 
	`FSOP_GETROOT
(
vn
->
vn_fs
);

213 
	`VOP_DECREF
(
vn
);

216 
∑th
[1]=='/') {

218 
∑th
++;

221 *
sub∑th
 = 
∑th
+1;

224 
	}
}

232 
	$vfs_look∑ª¡
(*
∑th
, 
vnode
 **
ªtvÆ
,

233 *
buf
, 
size_t
 
buÊí
)

235 
vnode
 *
°¨tvn
;

236 
ªsu…
;

238 
	`vfs_biglock_acquúe
();

240 
ªsu…
 = 
	`gëdevi˚
(
∑th
, &∑th, &
°¨tvn
);

241 i‡(
ªsu…
) {

242 
	`vfs_biglock_ªÀa£
();

243  
ªsu…
;

246 i‡(
	`°æí
(
∑th
)==0) {

252 
ªsu…
 = 
EINVAL
;

255 
ªsu…
 = 
	`VOP_LOOKPARENT
(
°¨tvn
, 
∑th
, 
ªtvÆ
, 
buf
, 
buÊí
);

258 
	`VOP_DECREF
(
°¨tvn
);

260 
	`vfs_biglock_ªÀa£
();

261  
ªsu…
;

262 
	}
}

265 
	$vfs_lookup
(*
∑th
, 
vnode
 **
ªtvÆ
)

267 
vnode
 *
°¨tvn
;

268 
ªsu…
;

270 
	`vfs_biglock_acquúe
();

272 
ªsu…
 = 
	`gëdevi˚
(
∑th
, &∑th, &
°¨tvn
);

273 i‡(
ªsu…
) {

274 
	`vfs_biglock_ªÀa£
();

275  
ªsu…
;

278 i‡(
	`°æí
(
∑th
)==0) {

279 *
ªtvÆ
 = 
°¨tvn
;

280 
	`vfs_biglock_ªÀa£
();

284 
ªsu…
 = 
	`VOP_LOOKUP
(
°¨tvn
, 
∑th
, 
ªtvÆ
);

286 
	`VOP_DECREF
(
°¨tvn
);

287 
	`vfs_biglock_ªÀa£
();

288  
ªsu…
;

289 
	}
}

	@os161/kern/vfs/vfspath.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<kîn/f˙é.h
>

37 
	~<limôs.h
>

38 
	~<lib.h
>

39 
	~<vfs.h
>

40 
	~<vnode.h
>

45 
	$vfs_›í
(*
∑th
, 
›íÊags
, 
mode_t
 
mode
, 
vnode
 **
ªt
)

47 
how
;

48 
ªsu…
;

49 
ˇnwrôe
;

50 
vnode
 *
vn
 = 
NULL
;

52 
how
 = 
›íÊags
 & 
O_ACCMODE
;

54 
how
) {

55 
O_RDONLY
:

56 
ˇnwrôe
=0;

58 
O_WRONLY
:

59 
O_RDWR
:

60 
ˇnwrôe
=1;

63  
EINVAL
;

66 i‡(
›íÊags
 & 
O_CREAT
) {

67 
«me
[
NAME_MAX
+1];

68 
vnode
 *
dú
;

69 
ex˛
 = (
›íÊags
 & 
O_EXCL
)!=0;

71 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
dú
, 
«me
, (name));

72 i‡(
ªsu…
) {

73  
ªsu…
;

76 
ªsu…
 = 
	`VOP_CREAT
(
dú
, 
«me
, 
ex˛
, 
mode
, &
vn
);

78 
	`VOP_DECREF
(
dú
);

81 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

84 i‡(
ªsu…
) {

85  
ªsu…
;

88 
	`KASSERT
(
vn
 !
NULL
);

90 
ªsu…
 = 
	`VOP_OPEN
(
vn
, 
›íÊags
);

91 i‡(
ªsu…
) {

92 
	`VOP_DECREF
(
vn
);

93  
ªsu…
;

96 
	`VOP_INCOPEN
(
vn
);

98 i‡(
›íÊags
 & 
O_TRUNC
) {

99 i‡(
ˇnwrôe
==0) {

100 
ªsu…
 = 
EINVAL
;

103 
ªsu…
 = 
	`VOP_TRUNCATE
(
vn
, 0);

105 i‡(
ªsu…
) {

106 
	`VOP_DECOPEN
(
vn
);

107 
	`VOP_DECREF
(
vn
);

108  
ªsu…
;

112 *
ªt
 = 
vn
;

115 
	}
}

119 
	$vfs_˛o£
(
vnode
 *
vn
)

135 
	`VOP_DECOPEN
(
vn
);

136 
	`VOP_DECREF
(
vn
);

137 
	}
}

141 
	$vfs_ªmove
(*
∑th
)

143 
vnode
 *
dú
;

144 
«me
[
NAME_MAX
+1];

145 
ªsu…
;

147 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
dú
, 
«me
, (name));

148 i‡(
ªsu…
) {

149  
ªsu…
;

152 
ªsu…
 = 
	`VOP_REMOVE
(
dú
, 
«me
);

153 
	`VOP_DECREF
(
dú
);

155  
ªsu…
;

156 
	}
}

160 
	$vfs_ª«me
(*
ﬁd∑th
, *
√w∑th
)

162 
vnode
 *
ﬁddú
;

163 
ﬁd«me
[
NAME_MAX
+1];

164 
vnode
 *
√wdú
;

165 
√w«me
[
NAME_MAX
+1];

166 
ªsu…
;

168 
ªsu…
 = 
	`vfs_look∑ª¡
(
ﬁd∑th
, &
ﬁddú
, 
ﬁd«me
, (oldname));

169 i‡(
ªsu…
) {

170  
ªsu…
;

172 
ªsu…
 = 
	`vfs_look∑ª¡
(
√w∑th
, &
√wdú
, 
√w«me
, (newname));

173 i‡(
ªsu…
) {

174 
	`VOP_DECREF
(
ﬁddú
);

175  
ªsu…
;

178 i‡(
ﬁddú
->
vn_fs
==
NULL
 || 
√wdú
->vn_fs==NULL ||

179 
ﬁddú
->
vn_fs
 !
√wdú
->vn_fs) {

180 
	`VOP_DECREF
(
√wdú
);

181 
	`VOP_DECREF
(
ﬁddú
);

182  
EXDEV
;

185 
ªsu…
 = 
	`VOP_RENAME
(
ﬁddú
, 
ﬁd«me
, 
√wdú
, 
√w«me
);

187 
	`VOP_DECREF
(
√wdú
);

188 
	`VOP_DECREF
(
ﬁddú
);

190  
ªsu…
;

191 
	}
}

195 
	$vfs_lök
(*
ﬁd∑th
, *
√w∑th
)

197 
vnode
 *
ﬁdfûe
;

198 
vnode
 *
√wdú
;

199 
√w«me
[
NAME_MAX
+1];

200 
ªsu…
;

202 
ªsu…
 = 
	`vfs_lookup
(
ﬁd∑th
, &
ﬁdfûe
);

203 i‡(
ªsu…
) {

204  
ªsu…
;

206 
ªsu…
 = 
	`vfs_look∑ª¡
(
√w∑th
, &
√wdú
, 
√w«me
, (newname));

207 i‡(
ªsu…
) {

208 
	`VOP_DECREF
(
ﬁdfûe
);

209  
ªsu…
;

212 i‡(
ﬁdfûe
->
vn_fs
==
NULL
 || 
√wdú
->vn_fs==NULL ||

213 
ﬁdfûe
->
vn_fs
 !
√wdú
->vn_fs) {

214 
	`VOP_DECREF
(
√wdú
);

215 
	`VOP_DECREF
(
ﬁdfûe
);

216  
EXDEV
;

219 
ªsu…
 = 
	`VOP_LINK
(
√wdú
, 
√w«me
, 
ﬁdfûe
);

221 
	`VOP_DECREF
(
√wdú
);

222 
	`VOP_DECREF
(
ﬁdfûe
);

224  
ªsu…
;

225 
	}
}

235 
	$vfs_symlök
(c⁄° *
c⁄ã¡s
, *
∑th
)

237 
vnode
 *
√wdú
;

238 
√w«me
[
NAME_MAX
+1];

239 
ªsu…
;

241 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
√wdú
, 
√w«me
, (newname));

242 i‡(
ªsu…
) {

243  
ªsu…
;

246 
ªsu…
 = 
	`VOP_SYMLINK
(
√wdú
, 
√w«me
, 
c⁄ã¡s
);

247 
	`VOP_DECREF
(
√wdú
);

249  
ªsu…
;

250 
	}
}

260 
	$vfs_ªadlök
(*
∑th
, 
uio
 *uio)

262 
vnode
 *
vn
;

263 
ªsu…
;

265 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

266 i‡(
ªsu…
) {

267  
ªsu…
;

270 
ªsu…
 = 
	`VOP_READLINK
(
vn
, 
uio
);

272 
	`VOP_DECREF
(
vn
);

274  
ªsu…
;

275 
	}
}

281 
	$vfs_mkdú
(*
∑th
, 
mode_t
 
mode
)

283 
vnode
 *
∑ª¡
;

284 
«me
[
NAME_MAX
+1];

285 
ªsu…
;

287 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
∑ª¡
, 
«me
, (name));

288 i‡(
ªsu…
) {

289  
ªsu…
;

292 
ªsu…
 = 
	`VOP_MKDIR
(
∑ª¡
, 
«me
, 
mode
);

294 
	`VOP_DECREF
(
∑ª¡
);

296  
ªsu…
;

297 
	}
}

303 
	$vfs_rmdú
(*
∑th
)

305 
vnode
 *
∑ª¡
;

306 
«me
[
NAME_MAX
+1];

307 
ªsu…
;

309 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
∑ª¡
, 
«me
, (name));

310 i‡(
ªsu…
) {

311  
ªsu…
;

314 
ªsu…
 = 
	`VOP_RMDIR
(
∑ª¡
, 
«me
);

316 
	`VOP_DECREF
(
∑ª¡
);

318  
ªsu…
;

319 
	}
}

	@os161/kern/vfs/vnode.c

33 
	~<ty≥s.h
>

34 
	~<kîn/î∫o.h
>

35 
	~<lib.h
>

36 
	~<synch.h
>

37 
	~<vfs.h
>

38 
	~<vnode.h
>

45 
	$vnode_öô
(
vnode
 *
vn
, c⁄° 
vnode_›s
 *
›s
,

46 
fs
 *fs, *
fsd©a
)

48 
	`KASSERT
(
vn
!=
NULL
);

49 
	`KASSERT
(
›s
!=
NULL
);

51 
vn
->
vn_›s
 = 
›s
;

52 
vn
->
vn_ªfcou¡
 = 1;

53 
vn
->
vn_›ícou¡
 = 0;

54 
vn
->
vn_fs
 = 
fs
;

55 
vn
->
vn_d©a
 = 
fsd©a
;

57 
	}
}

64 
	$vnode_˛ónup
(
vnode
 *
vn
)

66 
	`KASSERT
(
vn
->
vn_ªfcou¡
==1);

67 
	`KASSERT
(
vn
->
vn_›ícou¡
==0);

69 
vn
->
vn_›s
 = 
NULL
;

70 
vn
->
vn_ªfcou¡
 = 0;

71 
vn
->
vn_›ícou¡
 = 0;

72 
vn
->
vn_fs
 = 
NULL
;

73 
vn
->
vn_d©a
 = 
NULL
;

74 
	}
}

82 
	$vnode_ö¸ef
(
vnode
 *
vn
)

84 
	`KASSERT
(
vn
 !
NULL
);

86 
	`vfs_biglock_acquúe
();

88 
vn
->
vn_ªfcou¡
++;

90 
	`vfs_biglock_ªÀa£
();

91 
	}
}

99 
	$vnode_de¸ef
(
vnode
 *
vn
)

101 
ªsu…
;

103 
	`KASSERT
(
vn
 !
NULL
);

105 
	`vfs_biglock_acquúe
();

107 
	`KASSERT
(
vn
->
vn_ªfcou¡
>0);

108 i‡(
vn
->
vn_ªfcou¡
>1) {

109 
vn
->
vn_ªfcou¡
--;

112 
ªsu…
 = 
	`VOP_RECLAIM
(
vn
);

113 i‡(
ªsu…
 !0 &&Ñesu… !
EBUSY
) {

115 
	`k¥ötf
("vfs: Warning: VOP_RECLAIM: %s\n",

116 
	`°ªº‹
(
ªsu…
));

120 
	`vfs_biglock_ªÀa£
();

121 
	}
}

128 
	$vnode_öc›í
(
vnode
 *
vn
)

130 
	`KASSERT
(
vn
 !
NULL
);

132 
	`vfs_biglock_acquúe
();

133 
vn
->
vn_›ícou¡
++;

134 
	`vfs_biglock_ªÀa£
();

135 
	}
}

142 
	$vnode_dec›í
(
vnode
 *
vn
)

144 
ªsu…
;

146 
	`KASSERT
(
vn
 !
NULL
);

148 
	`vfs_biglock_acquúe
();

150 
	`KASSERT
(
vn
->
vn_›ícou¡
>0);

151 
vn
->
vn_›ícou¡
--;

153 i‡(
vn
->
vn_›ícou¡
 > 0) {

154 
	`vfs_biglock_ªÀa£
();

158 
ªsu…
 = 
	`VOP_CLOSE
(
vn
);

159 i‡(
ªsu…
) {

163 
	`k¥ötf
("vfs: W¨nög: VOP_CLOSE: %s\n", 
	`°ªº‹
(
ªsu…
));

166 
	`vfs_biglock_ªÀa£
();

167 
	}
}

174 
	$vnode_check
(
vnode
 *
v
, c⁄° *
›°r
)

176 
	`vfs_biglock_acquúe
();

178 i‡(
v
 =
NULL
) {

179 
	`∑nic
("vnode_check: v›_%s:ÇuŒ vnode\n", 
›°r
);

181 i‡(
v
 == (*)0xdeadbeef) {

182 
	`∑nic
("vnode_check: v›_%s: dódbì‡vnode\n", 
›°r
);

185 i‡(
v
->
vn_›s
 =
NULL
) {

186 
	`∑nic
("vnode_check: v›_%s:ÇuŒ op†poöãr\n", 
›°r
);

188 i‡(
v
->
vn_›s
 == (*)0xdeadbeef) {

189 
	`∑nic
("vnode_check: v›_%s: dódbì‡›†poöãr\n", 
›°r
);

192 i‡(
v
->
vn_›s
->
v›_magic
 !
VOP_MAGIC
) {

193 
	`∑nic
("vnode_check: vop_%s: ops with bad magicÇumber %lx\n",

194 
›°r
, 
v
->
vn_›s
->
v›_magic
);

201 i‡(
v
->
vn_fs
 == (*)0xdeadbeef) {

202 
	`∑nic
("vnode_check: v›_%s: dódbì‡f†poöãr\n", 
›°r
);

205 i‡(
v
->
vn_ªfcou¡
 < 0) {

206 
	`∑nic
("vnode_check: v›_%s:Çeg©ivêªfcou¡ %d\n", 
›°r
,

207 
v
->
vn_ªfcou¡
);

209 i‡(
v
->
vn_ªfcou¡
 =0 && 
	`°rcmp
(
›°r
, "reclaim")) {

210 
	`∑nic
("vnode_check: v›_%s: zîÿªfcou¡\n", 
›°r
);

212 i‡(
v
->
vn_ªfcou¡
 > 0x100000) {

213 
	`k¥ötf
("vnode_check: vop_%s: warning:ÜargeÑefcount %d\n",

214 
›°r
, 
v
->
vn_ªfcou¡
);

217 i‡(
v
->
vn_›ícou¡
 < 0) {

218 
	`∑nic
("vnode_check: v›_%s:Çeg©ivê›ícou¡ %d\n", 
›°r
,

219 
v
->
vn_›ícou¡
);

221 i‡(
v
->
vn_›ícou¡
 > 0x100000) {

222 
	`k¥ötf
("vnode_check: vop_%s: warning:Üarge opencount %d\n",

223 
›°r
, 
v
->
vn_›ícou¡
);

226 
	`vfs_biglock_ªÀa£
();

227 
	}
}

	@os161/kern/vm/copyinout.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<£tjmp.h
>

34 
	~<thªad.h
>

35 
	~<cuºít.h
>

36 
	~<vm.h
>

37 
	~<c›yöout.h
>

100 
	$c›yÁû
()

102 
	`l⁄gjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
, 1);

103 
	}
}

118 
	$c›ycheck
(
c⁄°_u£Ωå_t
 
u£Ωå
, 
size_t
 
Àn
, size_à*
°›Àn
)

120 
vaddr_t
 
bŸ
, 
t›
;

122 *
°›Àn
 = 
Àn
;

124 
bŸ
 = (
vaddr_t
Ë
u£Ωå
;

125 
t›
 = 
bŸ
+
Àn
-1;

127 i‡(
t›
 < 
bŸ
) {

129  
EFAULT
;

132 i‡(
bŸ
 >
USERSPACETOP
) {

134  
EFAULT
;

137 i‡(
t›
 >
USERSPACETOP
) {

139 *
°›Àn
 = 
USERSPACETOP
 - 
bŸ
;

143 
	}
}

153 
	$c›yö
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
)

155 
ªsu…
;

156 
size_t
 
°›Àn
;

158 
ªsu…
 = 
	`c›ycheck
(
u£r§c
, 
Àn
, &
°›Àn
);

159 i‡(
ªsu…
) {

160  
ªsu…
;

162 i‡(
°›Àn
 !
Àn
) {

164  
EFAULT
;

167 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

169 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

170 i‡(
ªsu…
) {

171 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

172  
EFAULT
;

175 
	`mem˝y
(
de°
, (c⁄° *)
u£r§c
, 
Àn
);

177 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

179 
	}
}

189 
	$c›yout
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
)

191 
ªsu…
;

192 
size_t
 
°›Àn
;

194 
ªsu…
 = 
	`c›ycheck
(
u£rde°
, 
Àn
, &
°›Àn
);

195 i‡(
ªsu…
) {

196  
ªsu…
;

198 i‡(
°›Àn
 !
Àn
) {

200  
EFAULT
;

203 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

205 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

206 i‡(
ªsu…
) {

207 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

208  
EFAULT
;

211 
	`mem˝y
((*)
u£rde°
, 
§c
, 
Àn
);

213 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

215 
	}
}

235 
	$c›y°r
(*
de°
, c⁄° *
§c
, 
size_t
 
maxÀn
, size_à
°›Àn
,

236 
size_t
 *
gŸÀn
)

238 
size_t
 
i
;

240 
i
=0; i<
maxÀn
 && i<
°›Àn
; i++) {

241 
de°
[
i
] = 
§c
[i];

242 i‡(
§c
[
i
] == 0) {

243 i‡(
gŸÀn
 !
NULL
) {

244 *
gŸÀn
 = 
i
+1;

249 i‡(
°›Àn
 < 
maxÀn
) {

251  
EFAULT
;

254  
ENAMETOOLONG
;

255 
	}
}

266 
	$c›yö°r
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
, size_à*
a˘uÆ
)

268 
ªsu…
;

269 
size_t
 
°›Àn
;

271 
ªsu…
 = 
	`c›ycheck
(
u£r§c
, 
Àn
, &
°›Àn
);

272 i‡(
ªsu…
) {

273  
ªsu…
;

276 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

278 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

279 i‡(
ªsu…
) {

280 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

281  
EFAULT
;

284 
ªsu…
 = 
	`c›y°r
(
de°
, (c⁄° *)
u£r§c
, 
Àn
, 
°›Àn
, 
a˘uÆ
);

286 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

287  
ªsu…
;

288 
	}
}

299 
	$c›yout°r
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
, size_à*
a˘uÆ
)

301 
ªsu…
;

302 
size_t
 
°›Àn
;

304 
ªsu…
 = 
	`c›ycheck
(
u£rde°
, 
Àn
, &
°›Àn
);

305 i‡(
ªsu…
) {

306  
ªsu…
;

309 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

311 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

312 i‡(
ªsu…
) {

313 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

314  
EFAULT
;

317 
ªsu…
 = 
	`c›y°r
((*)
u£rde°
, 
§c
, 
Àn
, 
°›Àn
, 
a˘uÆ
);

319 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

320  
ªsu…
;

321 
	}
}

	@os161/kern/vm/kmalloc.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<•ölock.h
>

33 
	~<vm.h
>

42 
	$fûl_dódbìf
(*
v±r
, 
size_t
 
Àn
)

44 
uöt32_t
 *
±r
 = 
v±r
;

45 
size_t
 
i
;

47 
i
=0; i<
Àn
/(
uöt32_t
); i++) {

48 
±r
[
i
] = 0xdeadbeef;

50 
	}
}

79 #unde‡
SLOW


80 #unde‡
SLOWER


84 #i‡
PAGE_SIZE
 == 4096

86 
	#NSIZES
 8

	)

87 c⁄° 
size_t
 
	gsizes
[
NSIZES
] = { 16, 32, 64, 128, 256, 512, 1024, 2048 };

89 
	#SMALLEST_SUBPAGE_SIZE
 16

	)

90 
	#LARGEST_SUBPAGE_SIZE
 2048

	)

92 #ñi‡
PAGE_SIZE
 == 8192

100 
	s‰ìli°
 {

101 
‰ìli°
 *
	m√xt
;

104 
	s∑gîef
 {

105 
∑gîef
 *
	m√xt_ßmesize
;

106 
∑gîef
 *
	m√xt_Æl
;

107 
vaddr_t
 
	m∑góddr_™d_blockty≥
;

108 
uöt16_t
 
	m‰ìli°_off£t
;

109 
uöt16_t
 
	mn‰ì
;

112 
	#INVALID_OFFSET
 (0xffff)

	)

114 
	#PR_PAGEADDR
(
¥
Ë(’r)->
∑góddr_™d_blockty≥
 & 
PAGE_FRAME
)

	)

115 
	#PR_BLOCKTYPE
(
¥
Ë(’r)->
∑góddr_™d_blockty≥
 & ~
PAGE_FRAME
)

	)

116 
	#MKPAB
(
∑
, 
blk
Ë((’a)&
PAGE_FRAME
Ë| ((blkË& ~PAGE_FRAME))

	)

138 
	#NPAGEREFS
 (
PAGE_SIZE
 / (
∑gîef
))

	)

139 
∑gîef
 
	g∑gîefs
[
NPAGEREFS
];

141 
	#INUSE_WORDS
 (
NPAGEREFS
/32)

	)

142 
uöt32_t
 
	g∑gîefs_öu£
[
INUSE_WORDS
];

145 
∑gîef
 *

146 
	$Ælo˝agîef
()

148 
i
,
j
;

149 
uöt32_t
 
k
;

151 
i
=0; i<
INUSE_WORDS
; i++) {

152 i‡(
∑gîefs_öu£
[
i
]==0xffffffff) {

156 
k
=1,
j
=0; k!=0; k<<=1,j++) {

157 i‡((
∑gîefs_öu£
[
i
] & 
k
)==0) {

158 
∑gîefs_öu£
[
i
] |
k
;

159  &
∑gîefs
[
i
*32 + 
j
];

162 
	`KASSERT
(0);

166  
NULL
;

167 
	}
}

171 
	$‰ì∑gîef
(
∑gîef
 *
p
)

173 
size_t
 
i
, 
j
;

174 
uöt32_t
 
k
;

176 
j
 = 
p
-
∑gîefs
;

177 
	`KASSERT
(
j
 < 
NPAGEREFS
);

178 
i
 = 
j
/32;

179 
k
 = ((
uöt32_t
)1Ë<< (
j
%32);

180 
	`KASSERT
((
∑gîefs_öu£
[
i
] & 
k
) != 0);

181 
∑gîefs_öu£
[
i
] &~
k
;

182 
	}
}

186 
∑gîef
 *
	gsizeba£s
[
NSIZES
];

187 
∑gîef
 *
	gÆlba£
;

198 
•ölock
 
	gkmÆloc_•ölock
 = 
SPINLOCK_INITIALIZER
;

203 #ifde‡
SLOWER


204 #i‚de‡
SLOW


205 
	#SLOW


	)

209 #ifde‡
SLOW


212 
	$checksub∑ge
(
∑gîef
 *
¥
)

214 
vaddr_t
 
¥∑ge
, 
Êa
;

215 
‰ìli°
 *
Ê
;

216 
blkty≥
;

217 
n‰ì
=0;

219 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
kmÆloc_•ölock
));

221 i‡(
¥
->
‰ìli°_off£t
 =
INVALID_OFFSET
) {

222 
	`KASSERT
(
¥
->
n‰ì
==0);

226 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

227 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

229 
	`KASSERT
(
¥
->
‰ìli°_off£t
 < 
PAGE_SIZE
);

230 
	`KASSERT
(
¥
->
‰ìli°_off£t
 % 
sizes
[
blkty≥
] == 0);

232 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

233 
Ê
 = (
‰ìli°
 *)
Êa
;

235 ; 
Ê
 !
NULL
; f»Ê->
√xt
) {

236 
Êa
 = (
vaddr_t
)
Ê
;

237 
	`KASSERT
(
Êa
 >
¥∑ge
 && fœ <ÖΩagê+ 
PAGE_SIZE
);

238 
	`KASSERT
((
Êa
-
¥∑ge
Ë% 
sizes
[
blkty≥
] == 0);

239 
	`KASSERT
(
Êa
 >
MIPS_KSEG0
);

240 
	`KASSERT
(
Êa
 < 
MIPS_KSEG1
);

241 
n‰ì
++;

243 
	`KASSERT
(
n‰ì
==
¥
->nfree);

244 
	}
}

246 
	#checksub∑ge
(
¥
Ë(()’r))

	)

249 #ifde‡
SLOWER


252 
	$checksub∑ges
()

254 
∑gîef
 *
¥
;

255 
i
;

256 
sc
=0, 
ac
=0;

258 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
kmÆloc_•ölock
));

260 
i
=0; i<
NSIZES
; i++) {

261 
¥
 = 
sizeba£s
[
i
];Ö∏!
NULL
;Ö∏¥->
√xt_ßmesize
) {

262 
	`checksub∑ge
(
¥
);

263 
	`KASSERT
(
sc
 < 
NPAGEREFS
);

264 
sc
++;

268 
¥
 = 
Ælba£
;Ö∏!
NULL
;Ö∏¥->
√xt_Æl
) {

269 
	`checksub∑ge
(
¥
);

270 
	`KASSERT
(
ac
 < 
NPAGEREFS
);

271 
ac
++;

274 
	`KASSERT
(
sc
==
ac
);

275 
	}
}

277 
	#checksub∑ges
()

	)

284 
	$dumpsub∑ge
(
∑gîef
 *
¥
)

286 
vaddr_t
 
¥∑ge
, 
Êa
;

287 
‰ìli°
 *
Ê
;

288 
blkty≥
;

289 
i
, 
n
, 
ödex
;

290 
uöt32_t
 
‰ìm≠
[
PAGE_SIZE
 / (
SMALLEST_SUBPAGE_SIZE
*32)];

292 
	`checksub∑ge
(
¥
);

293 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
kmÆloc_•ölock
));

296 
i
=0; i<(
‰ìm≠
)/(freemap[0]); i++) {

297 
‰ìm≠
[
i
] = 0;

300 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

301 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

304 
n
 = 
PAGE_SIZE
 / 
sizes
[
blkty≥
];

305 
	`KASSERT
(
n
 <32*(
‰ìm≠
)/(freemap[0]));

307 i‡(
¥
->
‰ìli°_off£t
 !
INVALID_OFFSET
) {

308 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

309 
Ê
 = (
‰ìli°
 *)
Êa
;

311 ; 
Ê
 !
NULL
; f»Ê->
√xt
) {

312 
Êa
 = (
vaddr_t
)
Ê
;

313 
ödex
 = (
Êa
-
¥∑ge
Ë/ 
sizes
[
blkty≥
];

314 
	`KASSERT
(
ödex
<
n
);

315 
‰ìm≠
[
ödex
/32] |= (1<<(index%32));

319 
	`k¥ötf
("at 0x%08lx: size %-4lu %u/%u free\n",

320 ()
¥∑ge
, (Ë
sizes
[
blkty≥
],

321 (Ë
¥
->
n‰ì
, 
n
);

322 
	`k¥ötf
(" ");

323 
i
=0; i<
n
; i++) {

324 
vÆ
 = (
‰ìm≠
[
i
/32] & (1<<(i%32)))!=0;

325 
	`k¥ötf
("%c", 
vÆ
 ? '.' : '*');

326 i‡(
i
%64==63 && i<
n
-1) {

327 
	`k¥ötf
("\n ");

330 
	`k¥ötf
("\n");

331 
	}
}

334 
	$khóp_¥öt°©s
()

336 
∑gîef
 *
¥
;

339 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

341 
	`k¥ötf
("Subpageállocator status:\n");

343 
¥
 = 
Ælba£
;Ö∏!
NULL
;Ö∏¥->
√xt_Æl
) {

344 
	`dumpsub∑ge
(
¥
);

347 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

348 
	}
}

354 
	$ªmove_li°s
(
∑gîef
 *
¥
, 
blkty≥
)

356 
∑gîef
 **
guy
;

358 
	`KASSERT
(
blkty≥
>=0 && blkty≥<
NSIZES
);

360 
guy
 = &
sizeba£s
[
blkty≥
]; *guy; guy = &(*guy)->
√xt_ßmesize
) {

361 
	`checksub∑ge
(*
guy
);

362 i‡(*
guy
 =
¥
) {

363 *
guy
 = 
¥
->
√xt_ßmesize
;

368 
guy
 = &
Ælba£
; *guy; guy = &(*guy)->
√xt_Æl
) {

369 
	`checksub∑ge
(*
guy
);

370 i‡(*
guy
 =
¥
) {

371 *
guy
 = 
¥
->
√xt_Æl
;

375 
	}
}

378 
ölöe


379 
	$blockty≥
(
size_t
 
sz
)

381 
i
;

382 
i
=0; i<
NSIZES
; i++) {

383 i‡(
sz
 <
sizes
[
i
]) {

384  
i
;

388 
	`∑nic
("Subpageállocator cannot handleállocation of size %lu\n",

389 ()
sz
);

393 
	}
}

397 
	$sub∑ge_kmÆloc
(
size_t
 
sz
)

399 
blkty≥
;

400 
∑gîef
 *
¥
;

401 
vaddr_t
 
¥∑ge
;

402 
vaddr_t
 
Êa
;

403 
‰ìli°
 *vﬁ©ûê
Ê
;

404 *
ªçå
;

406 vﬁ©ûê
i
;

409 
blkty≥
 = 
	`blockty≥
(
sz
);

410 
sz
 = 
sizes
[
blkty≥
];

412 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

414 
	`checksub∑ges
();

416 
¥
 = 
sizeba£s
[
blkty≥
];Ö∏!
NULL
;Ö∏¥->
√xt_ßmesize
) {

419 
	`KASSERT
(
	`PR_BLOCKTYPE
(
¥
Ë=
blkty≥
);

420 
	`checksub∑ge
(
¥
);

422 i‡(
¥
->
n‰ì
 > 0) {

424 
dﬂŒoc
:

426 
	`KASSERT
(
¥
->
‰ìli°_off£t
 < 
PAGE_SIZE
);

427 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

428 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

429 
Ê
 = (
‰ìli°
 *)
Êa
;

431 
ªçå
 = 
Ê
;

432 
Ê
 = fl->
√xt
;

433 
¥
->
n‰ì
--;

435 i‡(
Ê
 !
NULL
) {

436 
	`KASSERT
(
¥
->
n‰ì
 > 0);

437 
Êa
 = (
vaddr_t
)
Ê
;

438 
	`KASSERT
(
Êa
 - 
¥∑ge
 < 
PAGE_SIZE
);

439 
¥
->
‰ìli°_off£t
 = 
Êa
 - 
¥∑ge
;

442 
	`KASSERT
(
¥
->
n‰ì
 == 0);

443 
¥
->
‰ìli°_off£t
 = 
INVALID_OFFSET
;

446 
	`checksub∑ges
();

448 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

449  
ªçå
;

462 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

463 
¥∑ge
 = 
	`Æloc_k∑ges
(1);

464 i‡(
¥∑ge
==0) {

466 
	`k¥ötf
("kmalloc: Subpageállocator couldn't getáÖage\n");

467  
NULL
;

469 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

471 
¥
 = 
	`Ælo˝agîef
();

472 i‡(
¥
==
NULL
) {

474 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

475 
	`‰ì_k∑ges
(
¥∑ge
);

476 
	`k¥ötf
("kmalloc: Subpageállocator couldn't getÖageref\n");

477  
NULL
;

480 
¥
->
∑góddr_™d_blockty≥
 = 
	`MKPAB
(
¥∑ge
, 
blkty≥
);

481 
¥
->
n‰ì
 = 
PAGE_SIZE
 / 
sizes
[
blkty≥
];

489 
Êa
 = 
¥∑ge
;

490 
Ê
 = (
‰ìli°
 *)
Êa
;

491 
Ê
->
√xt
 = 
NULL
;

492 
i
=1; i<
¥
->
n‰ì
; i++) {

493 
Ê
 = (
‰ìli°
 *)(
Êa
 + 
i
*
sizes
[
blkty≥
]);

494 
Ê
->
√xt
 = (
‰ìli°
 *)(
Êa
 + (
i
-1)*
sizes
[
blkty≥
]);

495 
	`KASSERT
(
Ê
 !Ê->
√xt
);

497 
Êa
 = (
vaddr_t
Ë
Ê
;

498 
¥
->
‰ìli°_off£t
 = 
Êa
 - 
¥∑ge
;

499 
	`KASSERT
(
¥
->
‰ìli°_off£t
 =’r->
n‰ì
-1)*
sizes
[
blkty≥
]);

501 
¥
->
√xt_ßmesize
 = 
sizeba£s
[
blkty≥
];

502 
sizeba£s
[
blkty≥
] = 
¥
;

504 
¥
->
√xt_Æl
 = 
Ælba£
;

505 
Ælba£
 = 
¥
;

508 
dﬂŒoc
;

509 
	}
}

513 
	$sub∑ge_k‰ì
(*
±r
)

515 
blkty≥
;

516 
vaddr_t
 
±øddr
;

517 
∑gîef
 *
¥
;

518 
vaddr_t
 
¥∑ge
;

519 
vaddr_t
 
Êa
;

520 
‰ìli°
 *
Ê
;

521 
vaddr_t
 
off£t
;

523 
±øddr
 = (
vaddr_t
)
±r
;

525 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

527 
	`checksub∑ges
();

529 
¥
 = 
Ælba£
;Ör;Ö∏¥->
√xt_Æl
) {

530 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

531 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

534 
	`KASSERT
(
blkty≥
>=0 && blkty≥<
NSIZES
);

535 
	`checksub∑ge
(
¥
);

537 i‡(
±øddr
 >
¥∑ge
 &&Öåadd∏<ÖΩagê+ 
PAGE_SIZE
) {

542 i‡(
¥
==
NULL
) {

544 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

548 
off£t
 = 
±øddr
 - 
¥∑ge
;

551 i‡(
off£t
 >
PAGE_SIZE
 || off£à% 
sizes
[
blkty≥
] != 0) {

552 
	`∑nic
("k‰ì: sub∑gê‰ì o‡övÆidádd∏%p\n", 
±r
);

559 
	`fûl_dódbìf
(
±r
, 
sizes
[
blkty≥
]);

566 
Êa
 = 
¥∑ge
 + 
off£t
;

567 
Ê
 = (
‰ìli°
 *)
Êa
;

568 i‡(
¥
->
‰ìli°_off£t
 =
INVALID_OFFSET
) {

569 
Ê
->
√xt
 = 
NULL
;

571 
Ê
->
√xt
 = (
‰ìli°
 *)(
¥∑ge
 + 
¥
->
‰ìli°_off£t
);

573 
¥
->
‰ìli°_off£t
 = 
off£t
;

574 
¥
->
n‰ì
++;

576 
	`KASSERT
(
¥
->
n‰ì
 <
PAGE_SIZE
 / 
sizes
[
blkty≥
]);

577 i‡(
¥
->
n‰ì
 =
PAGE_SIZE
 / 
sizes
[
blkty≥
]) {

579 
	`ªmove_li°s
(
¥
, 
blkty≥
);

580 
	`‰ì∑gîef
(
¥
);

582 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

583 
	`‰ì_k∑ges
(
¥∑ge
);

586 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

589 #ifde‡
SLOWER


590 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

591 
	`checksub∑ges
();

592 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

596 
	}
}

602 
	$kmÆloc
(
size_t
 
sz
)

604 i‡(
sz
>=
LARGEST_SUBPAGE_SIZE
) {

605 
≈ages
;

606 
vaddr_t
 
addªss
;

609 
≈ages
 = (
sz
 + 
PAGE_SIZE
 - 1)/PAGE_SIZE;

610 
addªss
 = 
	`Æloc_k∑ges
(
≈ages
);

611 i‡(
addªss
==0) {

612  
NULL
;

615  (*)
addªss
;

618  
	`sub∑ge_kmÆloc
(
sz
);

619 
	}
}

622 
	$k‰ì
(*
±r
)

627 i‡(
±r
 =
NULL
) {

629 } i‡(
	`sub∑ge_k‰ì
(
±r
)) {

630 
	`KASSERT
((
vaddr_t
)
±r
%
PAGE_SIZE
==0);

631 
	`‰ì_k∑ges
((
vaddr_t
)
±r
);

633 
	}
}

	@os161/kern/vm/uw-vmstats.c

13 
	~<ty≥s.h
>

14 
	~<lib.h
>

15 
	~<synch.h
>

16 
	~<•l.h
>

17 
	~<uw-vm°©s.h
>

20 
	g°©s_cou¡s
[
VMSTAT_COUNT
];

22 
•ölock
 
	g°©s_lock
 = 
SPINLOCK_INITIALIZER
;

25 c⁄° *
	g°©s_«mes
[] = {

42 
	$vm°©s_öc
(
ödex
)

44 
	`•ölock_acquúe
(&
°©s_lock
);

45 
	`_vm°©s_öc
(
ödex
);

46 
	`•ölock_ªÀa£
(&
°©s_lock
);

47 
	}
}

51 
	$vm°©s_öô
()

56 
	`•ölock_öô
(&
°©s_lock
);

58 
	`•ölock_acquúe
(&
°©s_lock
);

59 
	`_vm°©s_öô
();

60 
	`•ölock_ªÀa£
(&
°©s_lock
);

61 
	}
}

65 
	$_vm°©s_öc
(
ödex
)

67 
	`KASSERT
(
ödex
 < 
VMSTAT_COUNT
);

68 
°©s_cou¡s
[
ödex
]++;

69 
	}
}

73 
	$_vm°©s_öô
()

75 
i
 = 0;

77 i‡((
°©s_«mes
Ë/ (*Ë!
VMSTAT_COUNT
) {

78 
	`k¥ötf
("vmstats_init:Çumber of stats_names = %d != VMSTAT_COUNT = %d\n",

79 ((
°©s_«mes
Ë/ (*)), 
VMSTAT_COUNT
);

80 
	`∑nic
("ShouldÑeally fixÅhis beforeÖroceeding\n");

83 
i
=0; i<
VMSTAT_COUNT
; i++) {

84 
°©s_cou¡s
[
i
] = 0;

87 
	}
}

97 
	$vm°©s_¥öt
()

99 
i
 = 0;

100 
‰ì_∂us_ª∂a˚
 = 0;

101 
disk_∂us_zî€d_∂us_ªlﬂd
 = 0;

102 
éb_Áu…s
 = 0;

103 
ñf_∂us_sw≠_ªads
 = 0;

104 
disk_ªads
 = 0;

106 
	`k¥ötf
("VMSTATS:\n");

107 
i
=0; i<
VMSTAT_COUNT
; i++) {

108 
	`k¥ötf
("VMSTAT %25†%10d\n", 
°©s_«mes
[
i
], 
°©s_cou¡s
[i]);

111 
éb_Áu…s
 = 
°©s_cou¡s
[
VMSTAT_TLB_FAULT
];

112 
‰ì_∂us_ª∂a˚
 = 
°©s_cou¡s
[
VMSTAT_TLB_FAULT_FREE
] + sèts_cou¡s[
VMSTAT_TLB_FAULT_REPLACE
];

113 
disk_∂us_zî€d_∂us_ªlﬂd
 = 
°©s_cou¡s
[
VMSTAT_PAGE_FAULT_DISK
] +

114 
°©s_cou¡s
[
VMSTAT_PAGE_FAULT_ZERO
] + sèts_cou¡s[
VMSTAT_TLB_RELOAD
];

115 
ñf_∂us_sw≠_ªads
 = 
°©s_cou¡s
[
VMSTAT_ELF_FILE_READ
] + sèts_cou¡s[
VMSTAT_SWAP_FILE_READ
];

116 
disk_ªads
 = 
°©s_cou¡s
[
VMSTAT_PAGE_FAULT_DISK
];

118 
	`k¥ötf
("VMSTAT TLB Fau…†wôh Fªê+ TLB Fau…†wôh Rïœ˚ = %d\n", 
‰ì_∂us_ª∂a˚
);

119 i‡(
éb_Áu…s
 !
‰ì_∂us_ª∂a˚
) {

120 
	`k¥ötf
("WARNING: TLB Faults (%d) != TLB Faults with Free + TLB Faults with Replace (%d)\n",

121 
éb_Áu…s
, 
‰ì_∂us_ª∂a˚
);

124 
	`k¥ötf
("VMSTAT TLB Reloads + Page Faults (Zeroed) + Page Faults (Disk) = %d\n",

125 
disk_∂us_zî€d_∂us_ªlﬂd
);

126 i‡(
éb_Áu…s
 !
disk_∂us_zî€d_∂us_ªlﬂd
) {

127 
	`k¥ötf
("WARNING: TLB Faults (%d) != TLB Reloads + Page Faults (Zeroed) + Page Faults (Disk) (%d)\n",

128 
éb_Áu…s
, 
disk_∂us_zî€d_∂us_ªlﬂd
);

131 
	`k¥ötf
("VMSTAT ELF Fûêªad†+ Sw≠fûêªad†%d\n", 
ñf_∂us_sw≠_ªads
);

132 i‡(
disk_ªads
 !
ñf_∂us_sw≠_ªads
) {

133 
	`k¥ötf
("WARNING: ELF FileÑeads + SwapfileÑeads != Page Faults (Disk) %d\n",

134 
ñf_∂us_sw≠_ªads
);

136 
	}
}

	@os161/root/hostinclude/hostcompat.h

31 
	~<sys/ty≥s.h
>

33 
ho°com∑t_öô
(
¨gc
, **
¨gv
);

35 
time_t
 
__time
—ime_à*
£cs
, *
n£cs
);

	@os161/root/include/assert.h

30 #i‚de‡
_ASSERT_H_


31 
	#_ASSERT_H_


	)

36 #unde‡
as£π


41 
__bad_as£π
(c⁄° *
fûe
, 
löe
, c⁄° *
msg
);

47 #ifde‡
NDEBUG


50 
	#as£π
(
x
Ë(()(x)Ë

	)

52 
	#as£π
(
x
Ë(()0Ë

	)

56 
	#as£π
(
x
Ë((xË? ()0 : 
	`__bad_as£π
(
__FILE__
, 
__LINE__
, #x))

	)

	@os161/root/include/err.h

30 #i‚de‡
_ERR_H_


31 
	#_ERR_H_


	)

33 
	~<kîn/ty≥s.h
>

47 
w¨n
(c⁄° *
fmt
, ...);

48 
w¨nx
(c⁄° *
fmt
, ...);

49 
îr
(
exôcode
, c⁄° *
fmt
, ...);

50 
îrx
(
exôcode
, c⁄° *
fmt
, ...);

52 
vw¨n
(c⁄° *
fmt
, 
__va_li°
);

53 
vw¨nx
(c⁄° *
fmt
, 
__va_li°
);

54 
vîr
(
exôcode
, c⁄° *
fmt
, 
__va_li°
);

55 
vîrx
(
exôcode
, c⁄° *
fmt
, 
__va_li°
);

	@os161/root/include/errno.h

30 #i‚de‡
_ERRNO_H_


31 
	#_ERRNO_H_


	)

34 
	~<kîn/î∫o.h
>

37 
î∫o
;

	@os161/root/include/fcntl.h

31 
	~<uni°d.h
>

	@os161/root/include/kern/endian.h

30 #i‚de‡
_KERN_ENDIAN_H_


31 
	#_KERN_ENDIAN_H_


	)

42 
	#_LITTLE_ENDIAN
 1234

	)

43 
	#_BIG_ENDIAN
 4321

	)

44 
	#_PDP_ENDIAN
 3412

	)

47 
	~<kîn/machöe/ídün.h
>

	@os161/root/include/kern/errmsg.h

30 #i‚de‡
_KERN_ERRMSG_H_


31 
	#_KERN_ERRMSG_H_


	)

41 c⁄° *c⁄° 
	gsys_îæi°
[] = {

112 c⁄° 
	gsys_√º
 = (
sys_îæi°
)/(const *);

	@os161/root/include/kern/errno.h

30 #i‚de‡
_KERN_ERRNO_H_


31 
	#_KERN_ERRNO_H_


	)

45 
	#ENOSYS
 1

	)

46 
	#EUNIMP
 2

	)

47 
	#ENOMEM
 3

	)

48 
	#EAGAIN
 4

	)

49 
	#EINTR
 5

	)

50 
	#EFAULT
 6

	)

51 
	#ENAMETOOLONG
 7

	)

52 
	#EINVAL
 8

	)

53 
	#EPERM
 9

	)

54 
	#EACCES
 10

	)

55 
	#EMPROC
 11

	)

56 
	#ENPROC
 12

	)

57 
	#ENOEXEC
 13

	)

58 
	#E2BIG
 14

	)

59 
	#ESRCH
 15

	)

60 
	#ECHILD
 16

	)

61 
	#ENOTDIR
 17

	)

62 
	#EISDIR
 18

	)

63 
	#ENOENT
 19

	)

64 
	#ELOOP
 20

	)

65 
	#ENOTEMPTY
 21

	)

66 
	#EEXIST
 22

	)

67 
	#EMLINK
 23

	)

68 
	#EXDEV
 24

	)

69 
	#ENODEV
 25

	)

70 
	#ENXIO
 26

	)

71 
	#EBUSY
 27

	)

72 
	#EMFILE
 28

	)

73 
	#ENFILE
 29

	)

74 
	#EBADF
 30

	)

75 
	#EIOCTL
 31

	)

76 
	#EIO
 32

	)

77 
	#ESPIPE
 33

	)

78 
	#EPIPE
 34

	)

79 
	#EROFS
 35

	)

80 
	#ENOSPC
 36

	)

81 
	#EDQUOT
 37

	)

82 
	#EFBIG
 38

	)

83 
	#EFTYPE
 39

	)

84 
	#EDOM
 40

	)

85 
	#ERANGE
 41

	)

86 
	#EILSEQ
 42

	)

87 
	#ENOTSOCK
 43

	)

88 
	#EISSOCK
 44

	)

89 
	#EISCONN
 45

	)

90 
	#ENOTCONN
 46

	)

91 
	#ESHUTDOWN
 47

	)

92 
	#EPFNOSUPPORT
 48

	)

93 
	#ESOCKTNOSUPPORT
 49

	)

94 
	#EPROTONOSUPPORT
 50

	)

95 
	#EPROTOTYPE
 51

	)

96 
	#EAFNOSUPPORT
 52

	)

97 
	#ENOPROTOOPT
 53

	)

98 
	#EADDRINUSE
 54

	)

99 
	#EADDRNOTAVAIL
 55

	)

100 
	#ENETDOWN
 56

	)

101 
	#ENETUNREACH
 57

	)

102 
	#EHOSTDOWN
 58

	)

103 
	#EHOSTUNREACH
 59

	)

104 
	#ECONNREFUSED
 60

	)

105 
	#ETIMEDOUT
 61

	)

106 
	#ECONNRESET
 62

	)

107 
	#EMSGSIZE
 63

	)

108 
	#ENOTSUP
 64

	)

	@os161/root/include/kern/fcntl.h

30 #i‚de‡
_KERN_FCNTL_H_


31 
	#_KERN_FCNTL_H_


	)

43 
	#O_RDONLY
 0

	)

44 
	#O_WRONLY
 1

	)

45 
	#O_RDWR
 2

	)

47 
	#O_CREAT
 4

	)

48 
	#O_EXCL
 8

	)

49 
	#O_TRUNC
 16

	)

50 
	#O_APPEND
 32

	)

51 
	#O_NOCTTY
 64

	)

54 
	#O_ACCMODE
 3

	)

61 
	#LOCK_SH
 1

	)

62 
	#LOCK_EX
 2

	)

63 
	#LOCK_UN
 3

	)

64 
	#LOCK_NB
 4

	)

71 
	#F_DUPFD
 0

	)

72 
	#F_GETFD
 1

	)

73 
	#F_SETFD
 2

	)

74 
	#F_GETFL
 3

	)

75 
	#F_SETFL
 4

	)

76 
	#F_GETOWN
 5

	)

77 
	#F_SETOWN
 6

	)

78 
	#F_GETLK
 7

	)

79 
	#F_SETLK
 8

	)

80 
	#F_SETLKW
 9

	)

83 
	#FD_CLOEXEC
 1

	)

86 
	#F_RDLCK
 0

	)

87 
	#F_WRLCK
 1

	)

88 
	#F_UNLCK
 2

	)

91 
	sÊock
 {

92 
off_t
 
	ml_°¨t
;

93 
	ml_whí˚
;

94 
	ml_ty≥
;

95 
off_t
 
	ml_Àn
;

96 
pid_t
 
	ml_pid
;

	@os161/root/include/kern/ioctl.h

30 #i‚de‡
_KERN_IOCTL_H_


31 
	#_KERN_IOCTL_H_


	)

	@os161/root/include/kern/iovec.h

30 #i‚de‡
_KERN_IOVEC_H_


31 
	#_KERN_IOVEC_H_


	)

38 
	siovec
 {

57 #ifde‡
_KERNEL


59 
u£Ωå_t
 
	miov_uba£
;

60 *
	miov_kba£
;

63 *
	miov_ba£
;

65 
size_t
 
	miov_Àn
;

	@os161/root/include/kern/limits.h

30 #i‚de‡
_KERN_LIMITS_H_


31 
	#_KERN_LIMITS_H_


	)

52 
	#__NAME_MAX
 255

	)

55 
	#__PATH_MAX
 1024

	)

58 
	#__ARG_MAX
 (64 * 1024)

	)

66 
	#__PID_MIN
 2

	)

69 
	#__PID_MAX
 32767

	)

72 
	#__PIPE_BUF
 512

	)

80 
	#__NGROUPS_MAX
 32

	)

83 
	#__LOGIN_NAME_MAX
 17

	)

94 
	#__OPEN_MAX
 128

	)

97 
	#__IOV_MAX
 1024

	)

	@os161/root/include/kern/mips/endian.h

30 #i‚de‡
_KERN_MIPS_ENDIAN_H_


31 
	#_KERN_MIS_ENDIAN_H_


	)

42 
	#_BYTE_ORDER
 
_BIG_ENDIAN


	)

	@os161/root/include/kern/mips/regdefs.h

36 #i‚de‡
_KERN_MIPS_REGDEFS_H_


37 
	#_KERN_MIPS_REGDEFS_H_


	)

40 
	#z0
 
$0


	)

41 
	#AT
 
$1


	)

42 
	#v0
 
$2


	)

43 
	#v1
 
$3


	)

44 
	#a0
 
$4


	)

45 
	#a1
 
$5


	)

46 
	#a2
 
$6


	)

47 
	#a3
 
$7


	)

48 
	#t0
 
$8


	)

49 
	#t1
 
$9


	)

50 
	#t2
 
$10


	)

51 
	#t3
 
$11


	)

52 
	#t4
 
$12


	)

53 
	#t5
 
$13


	)

54 
	#t6
 
$14


	)

55 
	#t7
 
$15


	)

56 
	#s0
 
$16


	)

57 
	#s1
 
$17


	)

58 
	#s2
 
$18


	)

59 
	#s3
 
$19


	)

60 
	#s4
 
$20


	)

61 
	#s5
 
$21


	)

62 
	#s6
 
$22


	)

63 
	#s7
 
$23


	)

64 
	#t8
 
$24


	)

65 
	#t9
 
$25


	)

66 
	#k0
 
$26


	)

67 
	#k1
 
$27


	)

68 
	#gp
 
$28


	)

69 
	#•
 
$29


	)

70 
	#s8
 
$30


	)

71 
	#ø
 
$31


	)

	@os161/root/include/kern/mips/setjmp.h

30 #i‚de‡
_MIPS_SETJMP_H_


31 
	#_MIPS_SETJMP_H_


	)

41 
	#__JB_REGS
 11

	)

44 
uöt32_t
 
	tjmp_buf
[
__JB_REGS
];

	@os161/root/include/kern/mips/signal.h

31 #i‚de‡
_KERN_MIPS_SIGNAL_H_


32 
	#_KERN_MIPS_SIGNAL_H_


	)

41 
	ssigc⁄ãxt
 {

	@os161/root/include/kern/mips/types.h

30 #i‚de‡
_KERN_MIPS_TYPES_H_


31 
	#_KERN_MIPS_TYPES_H_


	)

43 
	t__i8
;

44 
	t__i16
;

45 
	t__i32
;

46 
	t__i64
;

48 
	t__u8
;

49 
	t__u16
;

50 
	t__u32
;

51 
	t__u64
;

54 
	t__öçå_t
;

55 
	t__uöçå_t
;

65 
	t__size_t
;

66 
	t__ssize_t
;

67 
	t__±rdiff_t
;

69 
	t__size_t
;

70 
	t__ssize_t
;

71 
	t__±rdiff_t
;

75 
	#__CHAR_BIT
 8

	)

	@os161/root/include/kern/reboot.h

30 #i‚de‡
_KERN_REBOOT_H_


31 
	#_KERN_REBOOT_H_


	)

40 
	#RB_REBOOT
 0

	)

41 
	#RB_HALT
 1

	)

42 
	#RB_POWEROFF
 2

	)

	@os161/root/include/kern/resource.h

30 #i‚de‡
_KERN_RESOURCE_H_


31 
	#_KERN_RESOURCE_H_


	)

41 
	#PRIO_MIN
 (-20)

	)

42 
	#PRIO_MAX
 20

	)

45 
	#PRIO_PROCESS
 0

	)

46 
	#PRIO_PGRP
 1

	)

47 
	#PRIO_USER
 2

	)

50 
	#RUSAGE_SELF
 0

	)

51 
	#RUSAGE_CHILDREN
 (-1)

	)

53 
	srußge
 {

54 
timevÆ
 
	mru_utime
;

55 
timevÆ
 
	mru_°ime
;

56 
__size_t
 
	mru_maxrss
;

57 
__cou¡î_t
 
	mru_ixrss
;

58 
__cou¡î_t
 
	mru_idrss
;

59 
__cou¡î_t
 
	mru_i§ss
;

60 
__cou¡î_t
 
	mru_möÊt
;

61 
__cou¡î_t
 
	mru_majÊt
;

62 
__cou¡î_t
 
	mru_nsw≠
;

63 
__cou¡î_t
 
	mru_öblock
;

64 
__cou¡î_t
 
	mru_oublock
;

65 
__cou¡î_t
 
	mru_msgrcv
;

66 
__cou¡î_t
 
	mru_msg¢d
;

67 
__cou¡î_t
 
	mru_nsig«ls
;

68 
__cou¡î_t
 
	mru_nvcsw
;

69 
__cou¡î_t
 
	mru_nivcsw
;

74 
	#RLIMIT_NPROC
 0

	)

75 
	#RLIMIT_NOFILE
 1

	)

76 
	#RLIMIT_CPU
 2

	)

77 
	#RLIMIT_DATA
 3

	)

78 
	#RLIMIT_STACK
 4

	)

79 
	#RLIMIT_MEMLOCK
 5

	)

80 
	#RLIMIT_RSS
 6

	)

81 
	#RLIMIT_CORE
 7

	)

82 
	#RLIMIT_FSIZE
 8

	)

83 
	#__RLIMIT_NUM
 9

	)

85 
	sæimô
 {

86 
__æim_t
 
	mæim_cur
;

87 
__æim_t
 
	mæim_max
;

90 
	#RLIM_INFINITY
 (~(
__æim_t
)0)

	)

	@os161/root/include/kern/seek.h

30 #i‚de‡
_KERN_SEEK_H_


31 
	#_KERN_SEEK_H_


	)

42 
	#SEEK_SET
 0

	)

43 
	#SEEK_CUR
 1

	)

44 
	#SEEK_END
 2

	)

	@os161/root/include/kern/sfs.h

30 #i‚de‡
_KERN_SFS_H_


31 
	#_KERN_SFS_H_


	)

39 
	#SFS_MAGIC
 0xabadf001

	)

40 
	#SFS_BLOCKSIZE
 512

	)

41 
	#SFS_VOLNAME_SIZE
 32

	)

42 
	#SFS_NDIRECT
 15

	)

43 
	#SFS_DBPERIDB
 128

	)

44 
	#SFS_NAMELEN
 60

	)

45 
	#SFS_SB_LOCATION
 0

	)

46 
	#SFS_ROOT_LOCATION
 1

	)

47 
	#SFS_MAP_LOCATION
 2

	)

48 
	#SFS_NOINO
 0

	)

51 
	#SFS_BLOCKBITS
 (
SFS_BLOCKSIZE
 * 
CHAR_BIT
)

	)

54 
	#SFS_ROUNDUP
(
a
,
b
Ë(((◊)+(b)-1)/(b))*b)

	)

57 
	#SFS_BITMAPSIZE
(
nblocks
Ë
	`SFS_ROUNDUP
“blocks, 
SFS_BLOCKBITS
)

	)

60 
	#SFS_BITBLOCKS
(
nblocks
Ë(
	`SFS_BITMAPSIZE
“blocks)/
SFS_BLOCKBITS
)

	)

63 
	#SFS_TYPE_INVAL
 0

	)

64 
	#SFS_TYPE_FILE
 1

	)

65 
	#SFS_TYPE_DIR
 2

	)

70 
	ssfs_su≥r
 {

71 
uöt32_t
 
	m•_magic
;

72 
uöt32_t
 
	m•_nblocks
;

73 
	m•_vﬁ«me
[
SFS_VOLNAME_SIZE
];

74 
uöt32_t
 
	mª£rved
[118];

80 
	ssfs_öode
 {

81 
uöt32_t
 
	msfi_size
;

82 
uöt16_t
 
	msfi_ty≥
;

83 
uöt16_t
 
	msfi_lökcou¡
;

84 
uöt32_t
 
	msfi_dúe˘
[
SFS_NDIRECT
];

85 
uöt32_t
 
	msfi_ödúe˘
;

86 
uöt32_t
 
	msfi_wa°e
[128-3-
SFS_NDIRECT
];

92 
	ssfs_dú
 {

93 
uöt32_t
 
	msfd_öo
;

94 
	msfd_«me
[
SFS_NAMELEN
];

	@os161/root/include/kern/signal.h

37 #i‚de‡
_KERN_SIGNAL_H_


38 
	#_KERN_SIGNAL_H_


	)

56 
	#SIGHUP
 1

	)

57 
	#SIGINT
 2

	)

58 
	#SIGQUIT
 3

	)

59 
	#SIGILL
 4

	)

60 
	#SIGTRAP
 5

	)

61 
	#SIGABRT
 6

	)

62 
	#SIGEMT
 7

	)

63 
	#SIGFPE
 8

	)

64 
	#SIGKILL
 9

	)

65 
	#SIGBUS
 10

	)

66 
	#SIGSEGV
 11

	)

67 
	#SIGSYS
 12

	)

68 
	#SIGPIPE
 13

	)

69 
	#SIGALRM
 14

	)

70 
	#SIGTERM
 15

	)

71 
	#SIGURG
 16

	)

72 
	#SIGSTOP
 17

	)

73 
	#SIGTSTP
 18

	)

74 
	#SIGCONT
 19

	)

75 
	#SIGCHLD
 20

	)

76 
	#SIGTTIN
 21

	)

77 
	#SIGTTOU
 22

	)

78 
	#SIGIO
 23

	)

79 
	#SIGXCPU
 24

	)

80 
	#SIGXFSZ
 25

	)

81 
	#SIGVTALRM
 26

	)

82 
	#SIGPROF
 27

	)

83 
	#SIGWINCH
 28

	)

84 
	#SIGINFO
 29

	)

85 
	#SIGUSR1
 20

	)

86 
	#SIGUSR2
 31

	)

87 
	#SIGPWR
 32

	)

88 
	#_NSIG
 32

	)

92 
__u32
 
	tsig£t_t
;

95 
	#SA_ONSTACK
 1

	)

96 
	#SA_RESTART
 2

	)

97 
	#SA_RESETHAND
 4

	)

100 
	#SIG_BLOCK
 1

	)

101 
	#SIG_UNBLOCK
 2

	)

102 
	#SIG_SETMASK
 3

	)

105 (*
	t__sigfunc
)();

108 
	#SIG_DFL
 ((
__sigfunc
Ë0Ë

	)

109 
	#SIG_IGN
 ((
__sigfunc
Ë1Ë

	)

114 
	ssiga˘i⁄
 {

115 
__sigfunc
 
ß_h™dÀr
;

116 
sig£t_t
 
ß_mask
;

117 
ß_Êags
;

124 
	ssigÆt°ack
 {

125 *
ss_•
;

126 
size_t
 
ss_size
;

127 
ss_Êags
;

	@os161/root/include/kern/socket.h

30 #i‚de‡
_KERN_SOCKET_H_


31 
	#_KERN_SOCKET_H_


	)

43 
	#SOCK_STREAM
 1

	)

44 
	#SOCK_DGRAM
 2

	)

45 
	#SOCK_RAW
 3

	)

48 
	#AF_UNSPEC
 0

	)

49 
	#AF_UNIX
 1

	)

50 
	#AF_INET
 2

	)

51 
	#AF_INET6
 3

	)

54 
	#PF_UNSPEC
 
AF_UNSPEC


	)

55 
	#PF_UNIX
 
AF_UNIX


	)

56 
	#PF_INET
 
AF_INET


	)

57 
	#PF_INET6
 
AF_INET6


	)

73 
	ssockaddr
 {

74 
__u8
 
	mß_Àn
;

75 
__u8
 
	mß_Ámûy
;

78 
	#_SS_SIZE
 128

	)

79 
	ssockaddr_°‹age
 {

80 
__u8
 
	mss_Àn
;

81 
__u8
 
	mss_Ámûy
;

82 
__u8
 
	m__ss_∑d1
;

83 
__u8
 
	m__ss_∑d2
;

84 
__u32
 
	m__ss_∑d3
;

85 
__u64
 
	m__ss_∑d4
;

86 
	m__ss_∑d5
[
_SS_SIZE
 - (
__u64
Ë- (
__u32
Ë- 4*(
__u8
)];

98 
	smsghdr
 {

99 *
	mmsg_«me
;

100 
sockÀn_t
 
	mmsg_«mñí
;

101 
iovec
 *
	mmsg_iov
;

102 
	mmsg_iovÀn
;

103 *
	mmsg_c⁄åﬁ
;

104 
sockÀn_t
 
	mmsg_c⁄åﬁÀn
;

105 
	mmsg_Êags
;

108 
	scmsghdr
 {

109 
sockÀn_t
 
	mcmsg_Àn
;

110 
	mcmsg_Àvñ
;

111 
	mcmsg_ty≥
;

	@os161/root/include/kern/stat.h

30 #i‚de‡
_KERN_STAT_H_


31 
	#_KERN_STAT_H_


	)

42 
	s°©
 {

44 
off_t
 
	m°_size
;

45 
mode_t
 
	m°_mode
;

46 
∆ök_t
 
	m°_∆ök
;

47 
blk˙t_t
 
	m°_blocks
;

50 
dev_t
 
	m°_dev
;

51 
öo_t
 
	m°_öo
;

52 
dev_t
 
	m°_rdev
;

55 
time_t
 
	m°_©ime
;

56 
time_t
 
	m°_˘ime
;

57 
time_t
 
	m°_mtime
;

58 
__u32
 
	m°_©imí£c
;

59 
__u32
 
	m°_˘imí£c
;

60 
__u32
 
	m°_mtimí£c
;

63 
uid_t
 
	m°_uid
;

64 
gid_t
 
	m°_gid
;

67 
__u32
 
	m°_gí
;

68 
blksize_t
 
	m°_blksize
;

	@os161/root/include/kern/stattypes.h

30 #i‚de‡
_KERN_STATTYPES_H_


31 
	#_KERN_STATTYPES_H_


	)

45 
	#_S_IFMT
 070000

	)

46 
	#_S_IFREG
 010000

	)

47 
	#_S_IFDIR
 020000

	)

48 
	#_S_IFLNK
 030000

	)

49 
	#_S_IFIFO
 040000

	)

50 
	#_S_IFSOCK
 050000

	)

51 
	#_S_IFCHR
 060000

	)

52 
	#_S_IFBLK
 070000

	)

	@os161/root/include/kern/syscall.h

30 #i‚de‡
_KERN_SYSCALL_H_


31 
	#_KERN_SYSCALL_H_


	)

50 
	#SYS_f‹k
 0

	)

51 
	#SYS_vf‹k
 1

	)

52 
	#SYS_execv
 2

	)

53 
	#SYS__exô
 3

	)

54 
	#SYS_waôpid
 4

	)

55 
	#SYS_gëpid
 5

	)

56 
	#SYS_gëµid
 6

	)

58 
	#SYS_sbrk
 7

	)

59 
	#SYS_mm≠
 8

	)

60 
	#SYS_munm≠
 9

	)

61 
	#SYS_m¥Ÿe˘
 10

	)

69 
	#SYS_umask
 17

	)

70 
	#SYS_is£tugid
 18

	)

71 
	#SYS_gëªsuid
 19

	)

72 
	#SYS_£åesuid
 20

	)

73 
	#SYS_gëªsgid
 21

	)

74 
	#SYS_£åesgid
 22

	)

75 
	#SYS_gëgroups
 23

	)

76 
	#SYS_£tgroups
 24

	)

77 
	#SYS___gëlogö
 25

	)

78 
	#SYS___£éogö
 26

	)

80 
	#SYS_kûl
 27

	)

81 
	#SYS_siga˘i⁄
 28

	)

82 
	#SYS_sig≥ndög
 29

	)

83 
	#SYS_sig¥ocmask
 30

	)

84 
	#SYS_sigsu•íd
 31

	)

85 
	#SYS_sigªtu∫
 32

	)

105 
	#SYS_›í
 45

	)

106 
	#SYS_pùe
 46

	)

107 
	#SYS_dup
 47

	)

108 
	#SYS_dup2
 48

	)

109 
	#SYS_˛o£
 49

	)

110 
	#SYS_ªad
 50

	)

111 
	#SYS_¥ód
 51

	)

114 
	#SYS_gëdúíåy
 54

	)

115 
	#SYS_wrôe
 55

	)

116 
	#SYS_pwrôe
 56

	)

119 
	#SYS_l£ek
 59

	)

120 
	#SYS_Êock
 60

	)

121 
	#SYS_·runˇã
 61

	)

122 
	#SYS_fsync
 62

	)

123 
	#SYS_f˙é
 63

	)

124 
	#SYS_io˘l
 64

	)

125 
	#SYS_£À˘
 65

	)

126 
	#SYS_pﬁl
 66

	)

129 
	#SYS_lök
 67

	)

130 
	#SYS_ªmove
 68

	)

131 
	#SYS_mkdú
 69

	)

132 
	#SYS_rmdú
 70

	)

133 
	#SYS_mkfifo
 71

	)

134 
	#SYS_ª«me
 72

	)

135 
	#SYS_ac˚ss
 73

	)

137 
	#SYS_chdú
 74

	)

138 
	#SYS_fchdú
 75

	)

139 
	#SYS___gëcwd
 76

	)

141 
	#SYS_symlök
 77

	)

142 
	#SYS_ªadlök
 78

	)

144 
	#SYS_mou¡
 79

	)

145 
	#SYS_unmou¡
 80

	)

149 
	#SYS_°©
 81

	)

150 
	#SYS_f°©
 82

	)

151 
	#SYS_l°©
 83

	)

153 
	#SYS_utimes
 84

	)

154 
	#SYS_futimes
 85

	)

155 
	#SYS_lutimes
 86

	)

157 
	#SYS_chmod
 87

	)

158 
	#SYS_chown
 88

	)

159 
	#SYS_fchmod
 89

	)

160 
	#SYS_fchown
 90

	)

161 
	#SYS_lchmod
 91

	)

162 
	#SYS_lchown
 92

	)

172 
	#SYS_sockë
 98

	)

173 
	#SYS_böd
 99

	)

174 
	#SYS_c⁄√˘
 100

	)

175 
	#SYS_li°í
 101

	)

176 
	#SYS_ac˚±
 102

	)

178 
	#SYS_shutdown
 104

	)

179 
	#SYS_gësock«me
 105

	)

180 
	#SYS_gë≥î«me
 106

	)

181 
	#SYS_gësock›t
 107

	)

182 
	#SYS_£tsock›t
 108

	)

189 
	#SYS___time
 113

	)

190 
	#SYS___£âime
 114

	)

191 
	#SYS_«no¶ìp
 115

	)

196 
	#SYS_sync
 118

	)

197 
	#SYS_ªboŸ
 119

	)

	@os161/root/include/kern/time.h

30 #i‚de‡
_KERN_TIME_H_


31 
	#_KERN_TIME_H_


	)

43 
	stimevÆ
 {

44 
__time_t
 
	mtv_£c
;

45 
__i32
 
	mtv_u£c
;

48 
	stime•ec
 {

49 
__time_t
 
	mtv_£c
;

50 
__i32
 
	mtv_n£c
;

59 
	#ITIMER_REAL
 0

	)

60 
	#ITIMER_VIRTUAL
 1

	)

61 
	#ITIMER_PROF
 2

	)

64 
	sôimîvÆ
 {

65 
timevÆ
 
	mô_öãrvÆ
;

66 
timevÆ
 
	mô_vÆue
;

	@os161/root/include/kern/types.h

30 #i‚de‡
_KERN_TYPES_H_


31 
	#_KERN_TYPES_H_


	)

34 
	~<kîn/machöe/ty≥s.h
>

64 
__u32
 
	t__blk˙t_t
;

65 
__u32
 
	t__blksize_t
;

66 
__u64
 
	t__cou¡î_t
;

67 
__u32
 
	t__daddr_t
;

68 
__u32
 
	t__dev_t
;

69 
__u32
 
	t__fsid_t
;

70 
__i32
 
	t__gid_t
;

71 
__u32
 
	t__ö_addr_t
;

72 
__u32
 
	t__ö_p‹t_t
;

73 
__u32
 
	t__öo_t
;

74 
__u32
 
	t__mode_t
;

75 
__u16
 
	t__∆ök_t
;

76 
__i64
 
	t__off_t
;

77 
__i32
 
	t__pid_t
;

78 
__u64
 
	t__æim_t
;

79 
__u8
 
	t__ß_Ámûy_t
;

80 
__i64
 
	t__time_t
;

81 
__i32
 
	t__uid_t
;

83 
	t__nfds_t
;

84 
	t__sockÀn_t
;

87 #ifde‡
__GNUC__


88 
__buûtö_va_li°
 
	t__va_li°
;

	@os161/root/include/kern/unistd.h

30 #i‚de‡
_KERN_UNISTD_H_


31 
	#_KERN_UNISTD_H_


	)

34 
	#STDIN_FILENO
 0

	)

35 
	#STDOUT_FILENO
 1

	)

36 
	#STDERR_FILENO
 2

	)

	@os161/root/include/kern/wait.h

30 #i‚de‡
_KERN_WAIT_H_


31 
	#_KERN_WAIT_H_


	)

39 
	#WNOHANG
 1

	)

40 
	#WUNTRACED
 2

	)

43 
	#WAIT_ANY
 (-1Ë

	)

44 
	#WAIT_MYPGRP
 0

	)

54 
	#_WWHAT
(
x
Ë((x)&3Ë

	)

55 
	#_WVAL
(
x
Ë((x)>>2Ë

	)

56 
	#_MKWVAL
(
x
Ë((x)<<2Ë

	)

59 
	#__WEXITED
 0

	)

60 
	#__WSIGNALED
 1

	)

61 
	#__WCORED
 2

	)

62 
	#__WSTOPPED
 3

	)

65 
	#WIFEXITED
(
x
Ë(
	`_WWHAT
(x)==
__WEXITED
)

	)

66 
	#WIFSIGNALED
(
x
Ë(
	`_WWHAT
(x)==
__WSIGNALED
 || _WWHAT(x)==
__WCORED
)

	)

67 
	#WIFSTOPPED
(
x
Ë(
	`_WWHAT
(x)==
__WSTOPPED
)

	)

68 
	#WEXITSTATUS
(
x
Ë(
	`_WVAL
(x))

	)

69 
	#WTERMSIG
(
x
Ë(
	`_WVAL
(x))

	)

70 
	#WSTOPSIG
(
x
Ë(
	`_WVAL
(x))

	)

71 
	#WCOREDUMP
(
x
Ë(
	`_WWHAT
(x)==
__WCORED
)

	)

74 
	#_MKWAIT_EXIT
(
x
Ë(
	`_MKWVAL
(x)|
__WEXITED
)

	)

75 
	#_MKWAIT_SIG
(
x
Ë(
	`_MKWVAL
(x)|
__WSIGNALED
)

	)

76 
	#_MKWAIT_CORE
(
x
Ë(
	`_MKWVAL
(x)|
__WCORED
)

	)

77 
	#_MKWAIT_STOP
(
x
Ë(
	`_MKWVAL
(x)|
__WSTOPPED
)

	)

	@os161/root/include/limits.h

30 #i‚de‡
_LIMITS_H_


31 
	#_LIMITS_H_


	)

38 
	~<kîn/limôs.h
>

41 
	#NAME_MAX
 
__NAME_MAX


	)

42 
	#PATH_MAX
 
__PATH_MAX


	)

43 
	#ARG_MAX
 
__ARG_MAX


	)

44 
	#PID_MIN
 
__PID_MIN


	)

45 
	#PID_MAX
 
__PID_MAX


	)

46 
	#PIPE_BUF
 
__PIPE_BUF


	)

47 
	#NGROUPS_MAX
 
__NGROUPS_MAX


	)

48 
	#LOGIN_NAME_MAX
 
__LOGIN_NAME_MAX


	)

49 
	#OPEN_MAX
 
__OPEN_MAX


	)

50 
	#IOV_MAX
 
__IOV_MAX


	)

	@os161/root/include/setjmp.h

30 #i‚de‡
_SETJMP_H_


31 
	#_SETJMP_H_


	)

34 
	~<machöe/£tjmp.h
>

49 
£tjmp
(
jmp_buf
 
jb
);

50 
l⁄gjmp
(
jmp_buf
 
jb
, 
code
);

	@os161/root/include/signal.h

30 
	~<kîn/sig«l.h
>

	@os161/root/include/stdarg.h

30 #i‚de‡
_STDARG_H_


31 
	#_STDARG_H_


	)

33 
	~<kîn/ty≥s.h
>

41 
__va_li°
 
	tva_li°
;

43 
	#va_°¨t
(
≠
,
fmt
Ë
	`__buûtö_°d¨g_°¨t
◊p,fmt)

	)

44 
	#va_¨g
(
≠
,
t
Ë
	`__buûtö_va_¨g
◊p,t)

	)

45 
	#va_c›y
(
≠1
,
≠2
Ë
	`__buûtö_va_c›y
◊p1,≠2)

	)

46 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

	@os161/root/include/stdint.h

30 #i‚de‡
_STDINT_H_


31 
	#_STDINT_H_


	)

37 
	~<kîn/ty≥s.h
>

39 
__i8
 
	töt8_t
;

40 
__i16
 
	töt16_t
;

41 
__i32
 
	töt32_t
;

42 
__i64
 
	töt64_t
;

43 
__u8
 
	tuöt8_t
;

44 
__u16
 
	tuöt16_t
;

45 
__u32
 
	tuöt32_t
;

46 
__u64
 
	tuöt64_t
;

48 
__öçå_t
 
	töçå_t
;

49 
__uöçå_t
 
	tuöçå_t
;

	@os161/root/include/stdio.h

30 #i‚de‡
_STDIO_H_


31 
	#_STDIO_H_


	)

37 
	~<kîn/ty≥s.h
>

38 
	~<ty≥s/size_t.h
>

39 
	~<sys/nuŒ.h
>

42 
	#EOF
 (-1)

	)

48 
__v¥ötf
((*
£ndfunc
)(*
˛õ¡d©a
, c⁄° *, 
size_t
 
Àn
),

49 *
˛õ¡d©a
,

50 c⁄° *
fmt
,

51 
__va_li°
 
≠
);

54 
	`¥ötf
(c⁄° *
fmt
, ...);

55 
	`v¥ötf
(c⁄° *
fmt
, 
__va_li°
 
≠
);

56 
	`¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, ...);

57 
	`v¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, 
__va_li°
 
≠
);

60 
	`puts
(const *);

64 
	`__puts
(const *);

67 
	`putch¨
();

70 
	`gëch¨
();

	@os161/root/include/stdlib.h

30 #i‚de‡
_STDLIB_H_


31 
	#_STDLIB_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
	~<ty≥s/size_t.h
>

35 
	~<sys/nuŒ.h
>

40 
©oi
(const *);

45 
ab‹t
();

51 
exô
(
code
);

56 
sy°em
(c⁄° *
comm™d
);

61 
	#RAND_MAX
 0x7fffffff

	)

62 
øndom
();

63 
§™dom
(
£ed
);

64 *
öô°©e
(, *, 
size_t
);

65 *
£t°©e
(*);

70 *
mÆloc
(
size_t
 
size
);

71 
‰ì
(*
±r
);

	@os161/root/include/string.h

30 #i‚de‡
_STRING_H_


31 
	#_STRING_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
	~<ty≥s/size_t.h
>

35 
	~<sys/nuŒ.h
>

40 *
°rˇt
(*, const *);

41 *
°r˝y
(*, const *);

42 *
°rchr
(const *, );

43 *
°ºchr
(const *, );

44 
°rcmp
(const *, const *);

45 
size_t
 
°æí
(const *);

46 *
°πok_r
(*, const *, **);

47 *
°πok
(*, const *);

49 *
mem£t
(*, 
c
, 
size_t
);

50 *
mem˝y
(*, c⁄° *, 
size_t
);

51 *
memmove
(*, c⁄° *, 
size_t
);

52 
memcmp
(c⁄° *, c⁄° *, 
size_t
);

57 c⁄° *
°ªº‹
(
îrcode
);

62 
bzîo
(*, 
size_t
);

	@os161/root/include/sys/endian.h

30 #i‚de‡
_SYS_ENDIAN_H_


31 
	#_SYS_ENDIAN_H_


	)

33 
	~<kîn/ídün.h
>

	@os161/root/include/sys/ioctl.h

31 
	~<uni°d.h
>

	@os161/root/include/sys/null.h

30 #i‚de‡
_SYS_NULL_H_


31 
	#_SYS_NULL_H_


	)

37 
	#NULL
 ((*)0)

	)

	@os161/root/include/sys/reboot.h

31 
	~<uni°d.h
>

	@os161/root/include/sys/stat.h

30 #i‚de‡
_SYS_STAT_H_


31 
	#_SYS_STAT_H_


	)

36 
	~<kîn/°©.h
>

37 
	~<kîn/°©ty≥s.h
>

42 
	#S_ISDIR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFDIR
)

	)

43 
	#S_ISREG
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFREG
)

	)

44 
	#S_ISDIR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFDIR
)

	)

45 
	#S_ISLNK
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFLNK
)

	)

46 
	#S_ISIFO
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFIFO
)

	)

47 
	#S_ISSOCK
(
mode
Ë((modê& 
_S_IFMT
Ë==
_S_IFSOCK
)

	)

48 
	#S_ISCHR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFCHR
)

	)

49 
	#S_ISBLK
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFBLK
)

	)

55 
	#S_IFMT
 
_S_IFMT


	)

56 
	#S_IFREG
 
_S_IFREG


	)

57 
	#S_IFDIR
 
_S_IFDIR


	)

58 
	#S_IFLNK
 
_S_IFLNK


	)

59 
	#S_IFIFO
 
_S_IFIFO


	)

60 
	#S_IFSOCK
 
_S_IFSOCK


	)

61 
	#S_IFCHR
 
_S_IFCHR


	)

62 
	#S_IFBLK
 
_S_IFBLK


	)

71 
f°©
(
fûeh™dÀ
, 
°©
 *
buf
);

72 
°©
(c⁄° *
∑th
, °© *
buf
);

73 
l°©
(c⁄° *
∑th
, 
°©
 *
buf
);

80 
mkdú
(c⁄° *
dú«me
, 
ign‹e
);

	@os161/root/include/sys/types.h

30 #i‚de‡
_SYS_TYPES_H_


31 
	#_SYS_TYPES_H_


	)

42 
	~<kîn/ty≥s.h
>

45 
	~<ty≥s/size_t.h
>

46 
	~<sys/nuŒ.h
>

55 
__ssize_t
 
	tssize_t
;

56 
__±rdiff_t
 
	t±rdiff_t
;

59 
__blk˙t_t
 
	tblk˙t_t
;

60 
__blksize_t
 
	tblksize_t
;

61 
__daddr_t
 
	tdaddr_t
;

62 
__dev_t
 
	tdev_t
;

63 
__fsid_t
 
	tfsid_t
;

64 
__gid_t
 
	tgid_t
;

65 
__ö_addr_t
 
	tö_addr_t
;

66 
__ö_p‹t_t
 
	tö_p‹t_t
;

67 
__öo_t
 
	töo_t
;

68 
__mode_t
 
	tmode_t
;

69 
__∆ök_t
 
	t∆ök_t
;

70 
__off_t
 
	toff_t
;

71 
__pid_t
 
	tpid_t
;

72 
__æim_t
 
	tæim_t
;

73 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

74 
__time_t
 
	ttime_t
;

75 
__uid_t
 
	tuid_t
;

77 
__nfds_t
 
	tnfds_t
;

78 
__sockÀn_t
 
	tsockÀn_t
;

84 
	#CHAR_BIT
 
__CHAR_BIT


	)

	@os161/root/include/sys/wait.h

31 
	~<uni°d.h
>

	@os161/root/include/time.h

31 
	~<uni°d.h
>

	@os161/root/include/types/size_t.h

30 #i‚de‡
_TYPES_SIZE_T_H_


31 
	#_TYPES_SIZE_T_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
__size_t
 
	tsize_t
;

	@os161/root/include/unistd.h

30 #i‚de‡
_UNISTD_H_


31 
	#_UNISTD_H_


	)

33 
	~<sys/ty≥s.h
>

40 
	~<kîn/f˙é.h
>

41 
	~<kîn/io˘l.h
>

42 
	~<kîn/ªboŸ.h
>

43 
	~<kîn/£ek.h
>

44 
	~<kîn/time.h
>

45 
	~<kîn/uni°d.h
>

46 
	~<kîn/waô.h
>

110 #ifde‡
__GNUC__


112 
	#__DEAD
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

114 
	#__DEAD


	)

118 
__DEAD
 
_exô
(
code
);

119 
execv
(c⁄° *
¥og
, *c⁄° *
¨gs
);

120 
pid_t
 
f‹k
();

121 
waôpid
(
pid_t
 
pid
, *
ªtu∫code
, 
Êags
);

127 
›í
(c⁄° *
fûíame
, 
Êags
, ...);

128 
ªad
(
fûeh™dÀ
, *
buf
, 
size_t
 
size
);

129 
wrôe
(
fûeh™dÀ
, c⁄° *
buf
, 
size_t
 
size
);

130 
˛o£
(
fûeh™dÀ
);

131 
ªboŸ
(
code
);

132 
sync
();

134 
rmdú
(c⁄° *
dú«me
);

137 
gëpid
();

138 
io˘l
(
fûeh™dÀ
, 
code
, *
buf
);

139 
off_t
 
l£ek
(
fûeh™dÀ
, off_à
pos
, 
code
);

140 
fsync
(
fûeh™dÀ
);

141 
·runˇã
(
fûeh™dÀ
, 
off_t
 
size
);

142 
ªmove
(c⁄° *
fûíame
);

143 
ª«me
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
);

144 
lök
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
);

146 
chdú
(c⁄° *
∑th
);

149 *
sbrk
(
ch™ge
);

150 
gëdúíåy
(
fûeh™dÀ
, *
buf
, 
size_t
 
buÊí
);

151 
symlök
(c⁄° *
èrgë
, c⁄° *
lök«me
);

152 
ªadlök
(c⁄° *
∑th
, *
buf
, 
size_t
 
buÊí
);

153 
dup2
(
fûeh™dÀ
, 
√wh™dÀ
);

154 
pùe
(
fûeh™dÀs
[2]);

155 
time_t
 
__time
—ime_à*
£c⁄ds
, *
«no£c⁄ds
);

156 
__gëcwd
(*
buf
, 
size_t
 
buÊí
);

164 *
gëcwd
(*
buf
, 
size_t
 
buÊí
);

165 
time_t
 
time
—ime_à*
£c⁄ds
);

	@os161/user/bin/cat/cat.c

30 
	~<uni°d.h
>

31 
	~<°rög.h
>

32 
	~<îr.h
>

44 
	$doˇt
(c⁄° *
«me
, 
fd
)

46 
buf
[1024];

47 
Àn
, 
wr
, 
wπŸ
;

55 (
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf)))>0) {

60 
wπŸ
 = 0;

61 
wπŸ
 < 
Àn
) {

62 
wr
 = 
	`wrôe
(
STDOUT_FILENO
, 
buf
+
wπŸ
, 
Àn
-wrtot);

63 i‡(
wr
<0) {

64 
	`îr
(1, "stdout");

66 
wπŸ
 +
wr
;

72 i‡(
Àn
<0) {

73 
	`îr
(1, "%s", 
«me
);

75 
	}
}

80 
	$ˇt
(c⁄° *
fûe
)

82 
fd
;

87 i‡(!
	`°rcmp
(
fûe
, "-")) {

88 
	`doˇt
("°dö", 
STDIN_FILENO
);

96 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
);

97 i‡(
fd
<0) {

98 
	`îr
(1, "%s", 
fûe
);

100 
	`doˇt
(
fûe
, 
fd
);

101 
	`˛o£
(
fd
);

102 
	}
}

106 
	$maö
(
¨gc
, *
¨gv
[])

108 i‡(
¨gc
==1) {

110 
	`doˇt
("°dö", 
STDIN_FILENO
);

114 
i
;

115 
i
=1; i<
¨gc
; i++) {

116 
	`ˇt
(
¨gv
[
i
]);

120 
	}
}

	@os161/user/bin/cp/cp.c

30 
	~<uni°d.h
>

31 
	~<îr.h
>

42 
	$c›y
(c⁄° *
‰om
, c⁄° *
to
)

44 
‰omfd
;

45 
tofd
;

46 
buf
[1024];

47 
Àn
, 
wr
, 
wπŸ
;

52 
‰omfd
 = 
	`›í
(
‰om
, 
O_RDONLY
);

53 i‡(
‰omfd
<0) {

54 
	`îr
(1, "%s", 
‰om
);

56 
tofd
 = 
	`›í
(
to
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
);

57 i‡(
tofd
<0) {

58 
	`îr
(1, "%s", 
to
);

67 (
Àn
 = 
	`ªad
(
‰omfd
, 
buf
, (buf)))>0) {

72 
wπŸ
 = 0;

73 
wπŸ
 < 
Àn
) {

74 
wr
 = 
	`wrôe
(
tofd
, 
buf
+
wπŸ
, 
Àn
-wrtot);

75 i‡(
wr
<0) {

76 
	`îr
(1, "%s", 
to
);

78 
wπŸ
 +
wr
;

84 i‡(
Àn
<0) {

85 
	`îr
(1, "%s", 
‰om
);

88 i‡(
	`˛o£
(
‰omfd
) < 0) {

89 
	`îr
(1, "%s: clo£", 
‰om
);

92 i‡(
	`˛o£
(
tofd
) < 0) {

93 
	`îr
(1, "%s: clo£", 
to
);

95 
	}
}

98 
	$maö
(
¨gc
, *
¨gv
[])

108 i‡(
¨gc
!=3) {

109 
	`îrx
(1, "Usage: cp OLDFILE NEWFILE");

111 
	`c›y
(
¨gv
[1],árgv[2]);

113 
	}
}

	@os161/user/bin/false/false.c

30 
	~<uni°d.h
>

31 
	~<°dlib.h
>

41 
	$maö
()

44 
	`exô
(1);

45 
	}
}

	@os161/user/bin/ln/ln.c

30 
	~<uni°d.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<îr.h
>

51 
	$dosymlök
(c⁄° *
ãxt
, c⁄° *
∑th
)

53 i‡(
	`symlök
(
ãxt
, 
∑th
)) {

54 
	`îr
(1, "%s", 
∑th
);

56 
	}
}

65 
	$doh¨dlök
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
)

67 i‡(
	`lök
(
ﬁdfûe
, 
√wfûe
)) {

68 
	`îr
(1, "%†‹ %s", 
ﬁdfûe
, 
√wfûe
);

69 
	`exô
(1);

71 
	}
}

74 
	$maö
(
¨gc
, *
¨gv
[])

82 i‡(
¨gc
==4 && !
	`°rcmp
(
¨gv
[1], "-s")) {

83 
	`dosymlök
(
¨gv
[2],árgv[3]);

85 i‡(
¨gc
==3) {

86 
	`doh¨dlök
(
¨gv
[1],árgv[2]);

89 
	`w¨nx
("Usage:Ün oldfileÇewfile");

90 
	`îrx
(1, "Ün -s symlinkcontents symlinkfile\n");

93 
	}
}

	@os161/user/bin/ls/ls.c

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<°dio.h
>

33 
	~<uni°d.h
>

34 
	~<°rög.h
>

35 
	~<î∫o.h
>

36 
	~<îr.h
>

49 
	ga›t
=0;

50 
	gd›t
=0;

51 
	gl›t
=0;

52 
	gR›t
=0;

53 
	gs›t
=0;

58 
	$›ti⁄
(
ch
)

60 
ch
) {

61 'a': 
a›t
=1; ;

62 'd': 
d›t
=1; ;

63 'l': 
l›t
=1; ;

64 'R': 
R›t
=1; ;

65 's': 
s›t
=1; ;

67 
	`îrx
(1, "Unknow¿›ti⁄ -%c", 
ch
);

69 
	}
}

76 
	$ba£«me
(c⁄° *
∑th
)

78 c⁄° *
s
;

80 
s
 = 
	`°ºchr
(
∑th
, '/');

81 i‡(
s
) {

82  
s
+1;

84  
∑th
;

85 
	}
}

92 
	$isdú
(c⁄° *
∑th
)

94 
°©
 
buf
;

95 
fd
;

98 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

99 i‡(
fd
<0) {

100 
	`îr
(1, "%s", 
∑th
);

102 i‡(
	`f°©
(
fd
, &
buf
)<0) {

103 
	`îr
(1, "%s: f°©", 
∑th
);

105 
	`˛o£
(
fd
);

107  
	`S_ISDIR
(
buf
.
°_mode
);

108 
	}
}

116 
	$¥öthódî
(c⁄° *
fûe
)

119 
fú°
=1;

120 i‡(
fú°
) {

121 
fú°
 = 0;

124 
	`¥ötf
("\n");

126 
	`¥ötf
("%s:\n", 
fûe
);

127 
	}
}

135 
	$¥öt
(c⁄° *
∑th
)

137 
°©
 
°©buf
;

138 c⁄° *
fûe
;

139 
ty≥ch
;

141 i‡(
l›t
 || 
s›t
) {

142 
fd
;

144 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

145 i‡(
fd
<0) {

146 
	`îr
(1, "%s", 
∑th
);

148 i‡(
	`f°©
(
fd
, &
°©buf
)<0) {

149 
	`îr
(1, "%s: f°©", 
∑th
);

151 
	`˛o£
(
fd
);

154 
fûe
 = 
	`ba£«me
(
∑th
);

156 i‡(
s›t
) {

157 
	`¥ötf
("%3d ", 
°©buf
.
°_blocks
);

160 i‡(
l›t
) {

161 i‡(
	`S_ISREG
(
°©buf
.
°_mode
)) {

162 
ty≥ch
 = '-';

164 i‡(
	`S_ISDIR
(
°©buf
.
°_mode
)) {

165 
ty≥ch
 = 'd';

167 i‡(
	`S_ISLNK
(
°©buf
.
°_mode
)) {

168 
ty≥ch
 = 'l';

170 i‡(
	`S_ISCHR
(
°©buf
.
°_mode
)) {

171 
ty≥ch
 = 'c';

173 i‡(
	`S_ISBLK
(
°©buf
.
°_mode
)) {

174 
ty≥ch
 = 'b';

177 
ty≥ch
 = '?';

180 
	`¥ötf
("%crwx------ %2dÑoot %-8llu",

181 
ty≥ch
,

182 
°©buf
.
°_∆ök
,

183 
°©buf
.
°_size
);

185 
	`¥ötf
("%s\n", 
fûe
);

186 
	}
}

193 
	$li°dú
(c⁄° *
∑th
, 
showhódî
)

195 
fd
;

196 
buf
[1024];

197 
√w∑th
[1024];

198 
Àn
;

200 i‡(
showhódî
) {

201 
	`¥öthódî
(
∑th
);

207 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

208 i‡(
fd
<0) {

209 
	`îr
(1, "%s", 
∑th
);

215 (
Àn
 = 
	`gëdúíåy
(
fd
, 
buf
, (buf)-1)) > 0) {

216 
buf
[
Àn
] = 0;

219 
	`¢¥ötf
(
√w∑th
, “ew∑th), "%s/%s", 
∑th
, 
buf
);

221 i‡(
a›t
 || 
buf
[0]!='.') {

223 
	`¥öt
(
√w∑th
);

226 i‡(
Àn
<0) {

227 
	`îr
(1, "%s: gëdúíåy", 
∑th
);

231 
	`˛o£
(
fd
);

232 
	}
}

236 
	$ªcur£dú
(c⁄° *
∑th
)

238 
fd
;

239 
buf
[1024];

240 
√w∑th
[1024];

241 
Àn
;

246 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

247 i‡(
fd
<0) {

248 
	`îr
(1, "%s", 
∑th
);

254 (
Àn
 = 
	`gëdúíåy
(
fd
, 
buf
, (buf)-1)) > 0) {

255 
buf
[
Àn
] = 0;

258 
	`¢¥ötf
(
√w∑th
, “ew∑th), "%s/%s", 
∑th
, 
buf
);

260 i‡(!
a›t
 && 
buf
[0]=='.') {

265 i‡(!
	`°rcmp
(
buf
, ".") || !strcmp(buf, "..")) {

270 i‡(!
	`isdú
(
√w∑th
)) {

274 
	`li°dú
(
√w∑th
, 1 );

275 i‡(
R›t
) {

276 
	`ªcur£dú
(
√w∑th
);

279 i‡(
Àn
<0) {

280 
	`îr
(1, "%s", 
∑th
);

283 
	`˛o£
(
fd
);

284 
	}
}

288 
	$li°ôem
(c⁄° *
∑th
, 
showhódî
)

290 i‡(!
d›t
 && 
	`isdú
(
∑th
)) {

291 
	`li°dú
(
∑th
, 
showhódî
 || 
R›t
);

292 i‡(
R›t
) {

293 
	`ªcur£dú
(
∑th
);

297 
	`¥öt
(
∑th
);

299 
	}
}

302 
	$maö
(
¨gc
, *
¨gv
[])

304 
i
,
j
, 
ôems
=0;

309 
i
=1; i<
¨gc
; i++) {

310 i‡(
¨gv
[
i
][0]!='-') {

311 
ôems
++;

318 
i
=1; i<
¨gc
; i++) {

319 i‡(
¨gv
[
i
][0]=='-') {

324 
j
=1; 
¨gv
[
i
][j]; j++) {

325 
	`›ti⁄
(
¨gv
[
i
][
j
]);

332 
	`li°ôem
(
¨gv
[
i
], 
ôems
>1);

340 i‡(
ôems
==0) {

341 
	`li°ôem
(".", 0);

345 
	}
}

	@os161/user/bin/mkdir/mkdir.c

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<uni°d.h
>

33 
	~<îr.h
>

43 
	$maö
(
¨gc
, *
¨gv
[])

45 i‡(
¨gc
!=2) {

46 
	`îrx
(1, "Usage: mkdir DIRECTORY");

49 i‡(
	`mkdú
(
¨gv
[1], 0775)) {

50 
	`îr
(1, "%s", 
¨gv
[1]);

53 
	}
}

	@os161/user/bin/mv/mv.c

30 
	~<uni°d.h
>

31 
	~<îr.h
>

49 
	$d‹íame
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
)

51 i‡(
	`ª«me
(
ﬁdfûe
, 
√wfûe
)) {

52 
	`îr
(1, "%†‹ %s", 
ﬁdfûe
, 
√wfûe
);

54 
	}
}

57 
	$maö
(
¨gc
, *
¨gv
[])

59 i‡(
¨gc
!=3) {

60 
	`îrx
(1, "Usage: mv oldfileÇewfile");

62 
	`d‹íame
(
¨gv
[1],árgv[2]);

64 
	}
}

	@os161/user/bin/pwd/pwd.c

30 
	~<°dio.h
>

31 
	~<uni°d.h
>

32 
	~<°rög.h
>

33 
	~<îr.h
>

34 
	~<limôs.h
>

45 
	$maö
()

47 
buf
[
PATH_MAX
+1], *
p
;

49 
p
 = 
	`gëcwd
(
buf
, (buf));

50 i‡(
p
 =
NULL
) {

51 
	`îr
(1, ".");

53 
	`¥ötf
("%s\n", 
buf
);

55 
	}
}

	@os161/user/bin/rm/rm.c

30 
	~<uni°d.h
>

31 
	~<îr.h
>

41 
	$d‹emove
(c⁄° *
fûe
)

43 i‡(
	`ªmove
(
fûe
)) {

44 
	`îr
(1, "%s", 
fûe
);

46 
	}
}

49 
	$maö
(
¨gc
, *
¨gv
[])

51 
i
;

53 i‡(
¨gc
<2) {

55 
	`îrx
(1, "Usage:Ñm FILES");

59 
i
=1; i<
¨gc
; i++) {

60 
	`d‹emove
(
¨gv
[
i
]);

64 
	}
}

	@os161/user/bin/rmdir/rmdir.c

30 
	~<uni°d.h
>

31 
	~<îr.h
>

41 
	$maö
(
¨gc
, *
¨gv
[])

43 i‡(
¨gc
!=2) {

44 
	`îrx
(1, "Usage:Ñmdir DIRECTORY");

47 i‡(
	`rmdú
(
¨gv
[1])) {

48 
	`îr
(1, "%s", 
¨gv
[1]);

51 
	}
}

	@os161/user/bin/sh/sh.c

38 
	~<sys/ty≥s.h
>

39 
	~<sys/waô.h
>

40 
	~<as£π.h
>

41 
	~<uni°d.h
>

42 
	~<°dlib.h
>

43 
	~<°dio.h
>

44 
	~<°rög.h
>

45 
	~<limôs.h
>

46 
	~<î∫o.h
>

47 
	~<îr.h
>

49 #ifde‡
HOST


50 
	~"ho°com∑t.h
"

53 #i‚de‡
NARG_MAX


55 
	#NARG_MAX
 1024

	)

59 #i‡
ARG_MAX
 > 4096

60 
	#CMDLINE_MAX
 4096

	)

62 
	#CMDLINE_MAX
 
ARG_MAX


	)

66 
	gtimög
 = 0;

69 
	#MAXBG
 128

	)

70 
pid_t
 
	gbgpids
[
MAXBG
];

78 
	$ˇn_bg
()

80 
i
;

82 
i
 = 0; i < 
MAXBG
; i++) {

83 i‡(
bgpids
[
i
] == 0) {

89 
	}
}

98 
	$ªmembî_bg
(
pid_t
 
pid
)

100 
i
;

101 
i
 = 0; i < 
MAXBG
; i++) {

102 i‡(
bgpids
[
i
] == 0) {

103 
bgpids
[
i
] = 
pid
;

107 
	`as£π
(0);

108 
	}
}

116 
	$¥öt°©us
(
°©us
)

118 i‡(
	`WIFEXITED
(
°©us
)) {

119 
	`¥ötf
("Exô %d", 
	`WEXITSTATUS
(
°©us
));

121 i‡(
	`WIFSIGNALED
(
°©us
Ë&& 
	`WCOREDUMP
(status)) {

122 
	`¥ötf
("Sig«»%d (c‹êdum≥d)", 
	`WTERMSIG
(
°©us
));

124 i‡(
	`WIFSIGNALED
(
°©us
)) {

125 
	`¥ötf
("Sig«»%d", 
	`WTERMSIG
(
°©us
));

127 i‡(
	`WIFSTOPPED
(
°©us
)) {

128 
	`¥ötf
("St›≥d o¿sig«»%d", 
	`WSTOPSIG
(
°©us
));

131 
	`¥ötf
("InvÆid sètu†codê%d", 
°©us
);

133 
	}
}

141 
	$dowaô
(
pid_t
 
pid
)

143 
°©us
;

144 i‡(
	`waôpid
(
pid
, &
°©us
, 0)<0) {

145 
	`w¨n
("pid %d", 
pid
);

148 
	`¥ötf
("pid %d: ", 
pid
);

149 
	`¥öt°©us
(
°©us
);

150 
	`¥ötf
("\n");

152 
	}
}

154 #ifde‡
WNOHANG


161 
	$dowaôpﬁl
(
pid_t
 
pid
)

163 
°©us
;

164 
pid_t
 
ªsu…
;

165 
ªsu…
 = 
	`waôpid
(
pid
, &
°©us
, 
WNOHANG
);

166 i‡(
ªsu…
<0) {

167 
	`w¨n
("pid %d", 
pid
);

169 i‡(
ªsu…
!=0) {

170 
	`¥ötf
("pid %d: ", 
pid
);

171 
	`¥öt°©us
(
°©us
);

172 
	`¥ötf
("\n");

176 
	}
}

184 
	$waôpﬁl
()

186 
i
;

187 
i
=0; i < 
MAXBG
; i++) {

188 i‡(
bgpids
[
i
] != 0) {

189 i‡(
	`dowaôpﬁl
(
bgpids
[
i
])) {

190 
bgpids
[
i
] = 0;

194 
	}
}

205 
	$cmd_waô
(
ac
, *
av
[])

207 
i
;

208 
pid_t
 
pid
;

210 i‡(
ac
 == 2) {

211 
pid
 = 
	`©oi
(
av
[1]);

212 
	`dowaô
(
pid
);

213 
i
 = 0; i < 
MAXBG
; i++) {

214 i‡(
bgpids
[
i
]==
pid
) {

215 
bgpids
[
i
] = 0;

220 i‡(
ac
 == 1) {

221 
i
=0; i < 
MAXBG
; i++) {

222 i‡(
bgpids
[
i
] != 0) {

223 
	`dowaô
(
bgpids
[
i
]);

224 
bgpids
[
i
] = 0;

229 
	`¥ötf
("Usage: wait [pid]\n");

231 
	}
}

240 
	$cmd_chdú
(
ac
, *
av
[])

242 i‡(
ac
 == 2) {

243 i‡(
	`chdú
(
av
[1])) {

244 
	`w¨n
("chdir");

249 
	`¥ötf
("Usage: chdir dir\n");

251 
	}
}

260 
	$cmd_exô
(
ac
, *
av
[])

262 
code
;

264 i‡(
ac
 == 1) {

265 
code
 = 0;

267 i‡(
ac
 == 2) {

268 
code
 = 
	`©oi
(
av
[1]);

271 
	`¥ötf
("Usage:Éxit [code]\n");

275 
	`exô
(
code
);

278 
	}
}

285 c⁄° *
	m«me
;

286 (*
	mfunc
)(, **);

287 } 
	gbuûtös
[] = {

288 { "cd", 
cmd_chdú
 },

289 { "chdú", 
cmd_chdú
 },

290 { "exô", 
cmd_exô
 },

291 { "waô", 
cmd_waô
 },

292 { 
NULL
, NULL }

304 
	$docomm™d
(*
buf
)

306 *
¨gs
[
NARG_MAX
 + 1];

307 
«rgs
, 
i
;

308 *
s
;

309 
pid_t
 
pid
;

310 
°©us
;

311 
bg
=0;

312 
time_t
 
°¨t£cs
, 
íd£cs
;

313 
°¨ä£cs
, 
ídn£cs
;

315 
«rgs
 = 0;

316 
s
 = 
	`°πok
(
buf
, " \t\r\n"); s; s = såtok(
NULL
, " \t\r\n")) {

317 i‡(
«rgs
 >
NARG_MAX
) {

318 
	`¥ötf
("%s: Too manyárguments "

320 
¨gs
[0]);

323 
¨gs
[
«rgs
++] = 
s
;

325 
¨gs
[
«rgs
] = 
NULL
;

327 i‡(
«rgs
==0) {

332 
i
=0; 
buûtös
[i].
«me
; i++) {

333 i‡(!
	`°rcmp
(
buûtös
[
i
].
«me
, 
¨gs
[0])) {

334  
buûtös
[
i
].
	`func
(
«rgs
, 
¨gs
);

340 i‡(
«rgs
 > 0 && !
	`°rcmp
(
¨gs
[nargs-1], "&")) {

342 i‡(!
	`ˇn_bg
()) {

343 
	`¥ötf
("%s: Too many background jobs; wait for "

345 
¨gs
[0]);

348 
«rgs
--;

349 
¨gs
[
«rgs
] = 
NULL
;

350 
bg
 = 1;

353 i‡(
timög
) {

354 
	`__time
(&
°¨t£cs
, &
°¨ä£cs
);

357 
pid
 = 
	`f‹k
();

358 
pid
) {

361 
	`w¨n
("fork");

362  
	`_MKWAIT_EXIT
(255);

365 
	`execv
(
¨gs
[0],árgs);

366 
	`w¨n
("%s", 
¨gs
[0]);

374 
	`_exô
(1);

380 i‡(
bg
) {

382 
	`ªmembî_bg
(
pid
);

383 
	`¥ötf
("[%d] %†... &\n", 
pid
, 
¨gs
[0]);

387 i‡(
	`waôpid
(
pid
, &
°©us
, 0) < 0) {

388 
	`w¨n
("waitpid");

389 
°©us
 = -1;

392 i‡(
timög
) {

393 
	`__time
(&
íd£cs
, &
ídn£cs
);

394 i‡(
ídn£cs
 < 
°¨ä£cs
) {

395 
ídn£cs
 += 1000000000;

396 
íd£cs
--;

398 
ídn£cs
 -
°¨ä£cs
;

399 
íd£cs
 -
°¨t£cs
;

400 
	`w¨nx
("subprocessÅime: %lu.%09lu seconds",

401 (Ë
íd£cs
, (Ë
ídn£cs
);

404  
°©us
;

405 
	}
}

419 
	$gëcmd
(*
buf
, 
size_t
 
Àn
)

421 
size_t
 
pos
 = 0;

422 
d⁄e
=0, 
ch
;

428 !
d⁄e
) {

429 
ch
 = 
	`gëch¨
();

430 i‡((
ch
 ='\b' || ch =127Ë&& 
pos
 > 0) {

431 
	`putch¨
('\b');

432 
	`putch¨
(' ');

433 
	`putch¨
('\b');

434 
pos
--;

436 i‡(
ch
 == '\r' || ch == '\n') {

437 
	`putch¨
('\r');

438 
	`putch¨
('\n');

439 
d⁄e
 = 1;

441 i‡(
ch
 >32 && ch < 127 && 
pos
 < 
Àn
-1) {

442 
buf
[
pos
++] = 
ch
;

443 
	`putch¨
(
ch
);

447 
	`putch¨
('\a');

450 
buf
[
pos
] = 0;

451 
	}
}

461 
	$öãø˘ive
()

463 
buf
[
CMDLINE_MAX
];

464 
°©us
;

467 
	`¥ötf
("OS/161$ ");

468 
	`gëcmd
(
buf
, (buf));

469 
°©us
 = 
	`docomm™d
(
buf
);

470 i‡(
°©us
) {

471 
	`¥öt°©us
(
°©us
);

472 
	`¥ötf
("\n");

474 #ifde‡
WNOHANG


475 
	`waôpﬁl
();

478 
	}
}

482 
	$check_timög
()

484 
time_t
 
£cs
;

485 
n£cs
;

486 i‡(
	`__time
(&
£cs
, &
n£cs
) != -1) {

487 
timög
 = 1;

488 
	`w¨nx
("TimingÉnabled.");

490 
	}
}

498 
	$maö
(
¨gc
, *
¨gv
[])

500 #ifde‡
HOST


501 
	`ho°com∑t_öô
(
¨gc
, 
¨gv
);

503 
	`check_timög
();

509 i‡(
¨gc
 == 0 ||árgc == 1) {

510 
	`öãø˘ive
();

512 i‡(
¨gc
 =3 && !
	`°rcmp
(
¨gv
[1], "-c")) {

513  
	`docomm™d
(
¨gv
[2]);

516 
	`îrx
(1, "Usage: sh [-c command]");

519 
	}
}

	@os161/user/bin/sync/sync.c

30 
	~<uni°d.h
>

39 
	$maö
()

41 
	`sync
();

43 
	}
}

	@os161/user/bin/true/true.c

30 
	~<uni°d.h
>

31 
	~<°dlib.h
>

38 
	$maö
()

41 
	`exô
(0);

42 
	}
}

	@os161/user/include/assert.h

30 #i‚de‡
_ASSERT_H_


31 
	#_ASSERT_H_


	)

36 #unde‡
as£π


41 
__bad_as£π
(c⁄° *
fûe
, 
löe
, c⁄° *
msg
);

47 #ifde‡
NDEBUG


50 
	#as£π
(
x
Ë(()(x)Ë

	)

52 
	#as£π
(
x
Ë(()0Ë

	)

56 
	#as£π
(
x
Ë((xË? ()0 : 
	`__bad_as£π
(
__FILE__
, 
__LINE__
, #x))

	)

	@os161/user/include/err.h

30 #i‚de‡
_ERR_H_


31 
	#_ERR_H_


	)

33 
	~<kîn/ty≥s.h
>

47 
w¨n
(c⁄° *
fmt
, ...);

48 
w¨nx
(c⁄° *
fmt
, ...);

49 
îr
(
exôcode
, c⁄° *
fmt
, ...);

50 
îrx
(
exôcode
, c⁄° *
fmt
, ...);

52 
vw¨n
(c⁄° *
fmt
, 
__va_li°
);

53 
vw¨nx
(c⁄° *
fmt
, 
__va_li°
);

54 
vîr
(
exôcode
, c⁄° *
fmt
, 
__va_li°
);

55 
vîrx
(
exôcode
, c⁄° *
fmt
, 
__va_li°
);

	@os161/user/include/errno.h

30 #i‚de‡
_ERRNO_H_


31 
	#_ERRNO_H_


	)

34 
	~<kîn/î∫o.h
>

37 
î∫o
;

	@os161/user/include/fcntl.h

31 
	~<uni°d.h
>

	@os161/user/include/limits.h

30 #i‚de‡
_LIMITS_H_


31 
	#_LIMITS_H_


	)

38 
	~<kîn/limôs.h
>

41 
	#NAME_MAX
 
__NAME_MAX


	)

42 
	#PATH_MAX
 
__PATH_MAX


	)

43 
	#ARG_MAX
 
__ARG_MAX


	)

44 
	#PID_MIN
 
__PID_MIN


	)

45 
	#PID_MAX
 
__PID_MAX


	)

46 
	#PIPE_BUF
 
__PIPE_BUF


	)

47 
	#NGROUPS_MAX
 
__NGROUPS_MAX


	)

48 
	#LOGIN_NAME_MAX
 
__LOGIN_NAME_MAX


	)

49 
	#OPEN_MAX
 
__OPEN_MAX


	)

50 
	#IOV_MAX
 
__IOV_MAX


	)

	@os161/user/include/setjmp.h

30 #i‚de‡
_SETJMP_H_


31 
	#_SETJMP_H_


	)

34 
	~<machöe/£tjmp.h
>

49 
£tjmp
(
jmp_buf
 
jb
);

50 
l⁄gjmp
(
jmp_buf
 
jb
, 
code
);

	@os161/user/include/signal.h

30 
	~<kîn/sig«l.h
>

	@os161/user/include/stdarg.h

30 #i‚de‡
_STDARG_H_


31 
	#_STDARG_H_


	)

33 
	~<kîn/ty≥s.h
>

41 
__va_li°
 
	tva_li°
;

43 
	#va_°¨t
(
≠
,
fmt
Ë
	`__buûtö_°d¨g_°¨t
◊p,fmt)

	)

44 
	#va_¨g
(
≠
,
t
Ë
	`__buûtö_va_¨g
◊p,t)

	)

45 
	#va_c›y
(
≠1
,
≠2
Ë
	`__buûtö_va_c›y
◊p1,≠2)

	)

46 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

	@os161/user/include/stdint.h

30 #i‚de‡
_STDINT_H_


31 
	#_STDINT_H_


	)

37 
	~<kîn/ty≥s.h
>

39 
__i8
 
	töt8_t
;

40 
__i16
 
	töt16_t
;

41 
__i32
 
	töt32_t
;

42 
__i64
 
	töt64_t
;

43 
__u8
 
	tuöt8_t
;

44 
__u16
 
	tuöt16_t
;

45 
__u32
 
	tuöt32_t
;

46 
__u64
 
	tuöt64_t
;

48 
__öçå_t
 
	töçå_t
;

49 
__uöçå_t
 
	tuöçå_t
;

	@os161/user/include/stdio.h

30 #i‚de‡
_STDIO_H_


31 
	#_STDIO_H_


	)

37 
	~<kîn/ty≥s.h
>

38 
	~<ty≥s/size_t.h
>

39 
	~<sys/nuŒ.h
>

42 
	#EOF
 (-1)

	)

48 
__v¥ötf
((*
£ndfunc
)(*
˛õ¡d©a
, c⁄° *, 
size_t
 
Àn
),

49 *
˛õ¡d©a
,

50 c⁄° *
fmt
,

51 
__va_li°
 
≠
);

54 
	`¥ötf
(c⁄° *
fmt
, ...);

55 
	`v¥ötf
(c⁄° *
fmt
, 
__va_li°
 
≠
);

56 
	`¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, ...);

57 
	`v¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, 
__va_li°
 
≠
);

60 
	`puts
(const *);

64 
	`__puts
(const *);

67 
	`putch¨
();

70 
	`gëch¨
();

	@os161/user/include/stdlib.h

30 #i‚de‡
_STDLIB_H_


31 
	#_STDLIB_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
	~<ty≥s/size_t.h
>

35 
	~<sys/nuŒ.h
>

40 
©oi
(const *);

45 
ab‹t
();

51 
exô
(
code
);

56 
sy°em
(c⁄° *
comm™d
);

61 
	#RAND_MAX
 0x7fffffff

	)

62 
øndom
();

63 
§™dom
(
£ed
);

64 *
öô°©e
(, *, 
size_t
);

65 *
£t°©e
(*);

70 *
mÆloc
(
size_t
 
size
);

71 
‰ì
(*
±r
);

	@os161/user/include/string.h

30 #i‚de‡
_STRING_H_


31 
	#_STRING_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
	~<ty≥s/size_t.h
>

35 
	~<sys/nuŒ.h
>

40 *
°rˇt
(*, const *);

41 *
°r˝y
(*, const *);

42 *
°rchr
(const *, );

43 *
°ºchr
(const *, );

44 
°rcmp
(const *, const *);

45 
size_t
 
°æí
(const *);

46 *
°πok_r
(*, const *, **);

47 *
°πok
(*, const *);

49 *
mem£t
(*, 
c
, 
size_t
);

50 *
mem˝y
(*, c⁄° *, 
size_t
);

51 *
memmove
(*, c⁄° *, 
size_t
);

52 
memcmp
(c⁄° *, c⁄° *, 
size_t
);

57 c⁄° *
°ªº‹
(
îrcode
);

62 
bzîo
(*, 
size_t
);

	@os161/user/include/sys/endian.h

30 #i‚de‡
_SYS_ENDIAN_H_


31 
	#_SYS_ENDIAN_H_


	)

33 
	~<kîn/ídün.h
>

	@os161/user/include/sys/ioctl.h

31 
	~<uni°d.h
>

	@os161/user/include/sys/null.h

30 #i‚de‡
_SYS_NULL_H_


31 
	#_SYS_NULL_H_


	)

37 
	#NULL
 ((*)0)

	)

	@os161/user/include/sys/reboot.h

31 
	~<uni°d.h
>

	@os161/user/include/sys/stat.h

30 #i‚de‡
_SYS_STAT_H_


31 
	#_SYS_STAT_H_


	)

36 
	~<kîn/°©.h
>

37 
	~<kîn/°©ty≥s.h
>

42 
	#S_ISDIR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFDIR
)

	)

43 
	#S_ISREG
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFREG
)

	)

44 
	#S_ISDIR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFDIR
)

	)

45 
	#S_ISLNK
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFLNK
)

	)

46 
	#S_ISIFO
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFIFO
)

	)

47 
	#S_ISSOCK
(
mode
Ë((modê& 
_S_IFMT
Ë==
_S_IFSOCK
)

	)

48 
	#S_ISCHR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFCHR
)

	)

49 
	#S_ISBLK
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFBLK
)

	)

55 
	#S_IFMT
 
_S_IFMT


	)

56 
	#S_IFREG
 
_S_IFREG


	)

57 
	#S_IFDIR
 
_S_IFDIR


	)

58 
	#S_IFLNK
 
_S_IFLNK


	)

59 
	#S_IFIFO
 
_S_IFIFO


	)

60 
	#S_IFSOCK
 
_S_IFSOCK


	)

61 
	#S_IFCHR
 
_S_IFCHR


	)

62 
	#S_IFBLK
 
_S_IFBLK


	)

71 
f°©
(
fûeh™dÀ
, 
°©
 *
buf
);

72 
°©
(c⁄° *
∑th
, °© *
buf
);

73 
l°©
(c⁄° *
∑th
, 
°©
 *
buf
);

80 
mkdú
(c⁄° *
dú«me
, 
ign‹e
);

	@os161/user/include/sys/types.h

30 #i‚de‡
_SYS_TYPES_H_


31 
	#_SYS_TYPES_H_


	)

42 
	~<kîn/ty≥s.h
>

45 
	~<ty≥s/size_t.h
>

46 
	~<sys/nuŒ.h
>

55 
__ssize_t
 
	tssize_t
;

56 
__±rdiff_t
 
	t±rdiff_t
;

59 
__blk˙t_t
 
	tblk˙t_t
;

60 
__blksize_t
 
	tblksize_t
;

61 
__daddr_t
 
	tdaddr_t
;

62 
__dev_t
 
	tdev_t
;

63 
__fsid_t
 
	tfsid_t
;

64 
__gid_t
 
	tgid_t
;

65 
__ö_addr_t
 
	tö_addr_t
;

66 
__ö_p‹t_t
 
	tö_p‹t_t
;

67 
__öo_t
 
	töo_t
;

68 
__mode_t
 
	tmode_t
;

69 
__∆ök_t
 
	t∆ök_t
;

70 
__off_t
 
	toff_t
;

71 
__pid_t
 
	tpid_t
;

72 
__æim_t
 
	tæim_t
;

73 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

74 
__time_t
 
	ttime_t
;

75 
__uid_t
 
	tuid_t
;

77 
__nfds_t
 
	tnfds_t
;

78 
__sockÀn_t
 
	tsockÀn_t
;

84 
	#CHAR_BIT
 
__CHAR_BIT


	)

	@os161/user/include/sys/wait.h

31 
	~<uni°d.h
>

	@os161/user/include/time.h

31 
	~<uni°d.h
>

	@os161/user/include/types/size_t.h

30 #i‚de‡
_TYPES_SIZE_T_H_


31 
	#_TYPES_SIZE_T_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
__size_t
 
	tsize_t
;

	@os161/user/include/unistd.h

30 #i‚de‡
_UNISTD_H_


31 
	#_UNISTD_H_


	)

33 
	~<sys/ty≥s.h
>

40 
	~<kîn/f˙é.h
>

41 
	~<kîn/io˘l.h
>

42 
	~<kîn/ªboŸ.h
>

43 
	~<kîn/£ek.h
>

44 
	~<kîn/time.h
>

45 
	~<kîn/uni°d.h
>

46 
	~<kîn/waô.h
>

110 #ifde‡
__GNUC__


112 
	#__DEAD
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

114 
	#__DEAD


	)

118 
__DEAD
 
_exô
(
code
);

119 
execv
(c⁄° *
¥og
, *c⁄° *
¨gs
);

120 
pid_t
 
f‹k
();

121 
waôpid
(
pid_t
 
pid
, *
ªtu∫code
, 
Êags
);

127 
›í
(c⁄° *
fûíame
, 
Êags
, ...);

128 
ªad
(
fûeh™dÀ
, *
buf
, 
size_t
 
size
);

129 
wrôe
(
fûeh™dÀ
, c⁄° *
buf
, 
size_t
 
size
);

130 
˛o£
(
fûeh™dÀ
);

131 
ªboŸ
(
code
);

132 
sync
();

134 
rmdú
(c⁄° *
dú«me
);

137 
gëpid
();

138 
io˘l
(
fûeh™dÀ
, 
code
, *
buf
);

139 
off_t
 
l£ek
(
fûeh™dÀ
, off_à
pos
, 
code
);

140 
fsync
(
fûeh™dÀ
);

141 
·runˇã
(
fûeh™dÀ
, 
off_t
 
size
);

142 
ªmove
(c⁄° *
fûíame
);

143 
ª«me
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
);

144 
lök
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
);

146 
chdú
(c⁄° *
∑th
);

149 *
sbrk
(
ch™ge
);

150 
gëdúíåy
(
fûeh™dÀ
, *
buf
, 
size_t
 
buÊí
);

151 
symlök
(c⁄° *
èrgë
, c⁄° *
lök«me
);

152 
ªadlök
(c⁄° *
∑th
, *
buf
, 
size_t
 
buÊí
);

153 
dup2
(
fûeh™dÀ
, 
√wh™dÀ
);

154 
pùe
(
fûeh™dÀs
[2]);

155 
time_t
 
__time
—ime_à*
£c⁄ds
, *
«no£c⁄ds
);

156 
__gëcwd
(*
buf
, 
size_t
 
buÊí
);

164 *
gëcwd
(*
buf
, 
size_t
 
buÊí
);

165 
time_t
 
time
—ime_à*
£c⁄ds
);

	@os161/user/lib/hostcompat/err.c

34 
	~<uni°d.h
>

35 
	~<°dio.h
>

36 
	~<î∫o.h
>

37 
	~<°rög.h
>

39 
	~"ho°-îr.h
"

41 #ifde‡
NEED_ERR


46 c⁄° *
ho°com∑t_¥og«me
;

53 
	$ho°com∑t_¥öãº
(
u£_î∫o
, c⁄° *
fmt
, 
va_li°
 
≠
)

55 c⁄° *
îrmsg
;

62 
îrmsg
 = 
	`°ªº‹
(
î∫o
);

71 i‡(
ho°com∑t_¥og«me
 !
NULL
) {

72 
	`Ârötf
(
°dîr
, "%s: ", 
ho°com∑t_¥og«me
);

75 
	`Ârötf
(
°dîr
, "libhostcompat: hostcompat_initÇot called\n");

76 
	`Ârötf
(
°dîr
, "libhostcompat-program: ");

80 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

82 i‡(
u£_î∫o
) {

84 
	`Ârötf
(
°dîr
, ": %s\n", 
îrmsg
);

88 
	`Ârötf
(
°dîr
, "\n");

90 
	}
}

98 
	$vw¨n
(c⁄° *
fmt
, 
va_li°
 
≠
)

100 
	`ho°com∑t_¥öãº
(1, 
fmt
, 
≠
);

101 
	}
}

105 
	$vw¨nx
(c⁄° *
fmt
, 
va_li°
 
≠
)

107 
	`ho°com∑t_¥öãº
(0, 
fmt
, 
≠
);

108 
	}
}

112 
	$vîr
(
exôcode
, c⁄° *
fmt
, 
va_li°
 
≠
)

114 
	`ho°com∑t_¥öãº
(1, 
fmt
, 
≠
);

115 
	`exô
(
exôcode
);

116 
	}
}

120 
	$vîrx
(
exôcode
, c⁄° *
fmt
, 
va_li°
 
≠
)

122 
	`ho°com∑t_¥öãº
(0, 
fmt
, 
≠
);

123 
	`exô
(
exôcode
);

124 
	}
}

132 
	$w¨n
(c⁄° *
fmt
, ...)

134 
va_li°
 
≠
;

135 
	`va_°¨t
(
≠
, 
fmt
);

136 
	`vw¨n
(
fmt
, 
≠
);

137 
	`va_íd
(
≠
);

138 
	}
}

141 
	$w¨nx
(c⁄° *
fmt
, ...)

143 
va_li°
 
≠
;

144 
	`va_°¨t
(
≠
, 
fmt
);

145 
	`vw¨nx
(
fmt
, 
≠
);

146 
	`va_íd
(
≠
);

147 
	}
}

150 
	$îr
(
exôcode
, c⁄° *
fmt
, ...)

152 
va_li°
 
≠
;

153 
	`va_°¨t
(
≠
, 
fmt
);

154 
	`vîr
(
exôcode
, 
fmt
, 
≠
);

155 
	`va_íd
(
≠
);

156 
	}
}

159 
	$îrx
(
exôcode
, c⁄° *
fmt
, ...)

161 
va_li°
 
≠
;

162 
	`va_°¨t
(
≠
, 
fmt
);

163 
	`vîrx
(
exôcode
, 
fmt
, 
≠
);

164 
	`va_íd
(
≠
);

165 
	}
}

	@os161/user/lib/hostcompat/host-err.h

31 #i‚de‡
HOSTCOMPAT_ERR_H


32 
	#HOSTCOMPAT_ERR_H


	)

34 
	~<°d¨g.h
>

48 
w¨n
(c⁄° *
fmt
, ...);

49 
w¨nx
(c⁄° *
fmt
, ...);

50 
îr
(
exôcode
, c⁄° *
fmt
, ...);

51 
îrx
(
exôcode
, c⁄° *
fmt
, ...);

53 
vw¨n
(c⁄° *
fmt
, 
va_li°
);

54 
vw¨nx
(c⁄° *
fmt
, 
va_li°
);

55 
vîr
(
exôcode
, c⁄° *
fmt
, 
va_li°
);

56 
vîrx
(
exôcode
, c⁄° *
fmt
, 
va_li°
);

	@os161/user/lib/hostcompat/hostcompat.c

30 
	~<uni°d.h
>

31 
	~<ãrmios.h
>

32 
	~<sig«l.h
>

33 
	~<°dlib.h
>

34 
	~<°dio.h
>

36 
	~"ho°com∑t.h
"

42 c⁄° *
	gho°com∑t_¥og«me
 = 
NULL
;

48 
ãrmios
 
	gho°com∑t_ru¡ios
;

49 
ãrmios
 
	gho°com∑t_ßvëios
;

56 
	$ho°com∑t_âyª£t
()

58 
	`tc£èâr
(
STDIN_FILENO
, 
TCSADRAIN
, &
ho°com∑t_ßvëios
);

59 
	}
}

66 
	$ho°com∑t_âyªsume
()

68 
	`tc£èâr
(
STDIN_FILENO
, 
TCSADRAIN
, &
ho°com∑t_ru¡ios
);

69 
	}
}

76 
	$ho°com∑t_ây£tup
()

78 
ãrmios
 
tios
;

81 i‡(
	`tcgë©å
(
STDIN_FILENO
, &
tios
) < 0) {

86 
ho°com∑t_ßvëios
 = 
tios
;

89 
tios
.
c_lÊag
 &~
ICANON
;

95 
tios
.
c_cc
[
VMIN
] = 1;

98 
tios
.
c_cc
[
VTIME
] = 0;

101 
tios
.
c_lÊag
 &~(
ECHO
|
ECHONL
|
ECHOCTL
);

104 
tios
.
c_iÊag
 &~(
IXON
|
IXOFF
);

107 
tios
.
c_iÊag
 &~(
INLCR
|
IGNCR
|
ICRNL
);

110 #ifde‡
OCRNL


111 
tios
.
c_oÊag
 &~(
OCRNL
);

113 
tios
.
c_oÊag
 |
OPOST
|
ONLCR
;

116 
tios
.
c_lÊag
 |
ISIG
;

119 
ho°com∑t_ru¡ios
 = 
tios
;

120 
	`tc£èâr
(
STDIN_FILENO
, 
TCSADRAIN
, &
tios
);

123 
	}
}

130 
	$ho°com∑t_dõ
(
sig
)

133 
	`ho°com∑t_âyª£t
();

136 
	`sig«l
(
sig
, 
SIG_DFL
);

139 
	`kûl
(
	`gëpid
(), 
sig
);

142 
	`_exô
(255);

143 
	}
}

150 
	$ho°com∑t_°›
(
sig
)

153 
	`ho°com∑t_âyª£t
();

156 
	`sig«l
(
sig
, 
SIG_DFL
);

159 
	`kûl
(
	`gëpid
(), 
sig
);

160 
	}
}

167 
	$ho°com∑t_c⁄t
(
sig
)

169 ()
sig
;

172 
	`ho°com∑t_âyªsume
();

178 
	`sig«l
(
SIGTTIN
, 
ho°com∑t_°›
);

179 
	`sig«l
(
SIGTTOU
, 
ho°com∑t_°›
);

180 
	`sig«l
(
SIGTSTP
, 
ho°com∑t_°›
);

181 
	`sig«l
(
SIGCONT
, 
ho°com∑t_c⁄t
);

182 
	}
}

188 
	$ho°com∑t_öô
(
¨gc
, *
¨gv
[])

191 i‡(
¨gc
 > 0 && 
¨gv
[0] !
NULL
) {

192 
ho°com∑t_¥og«me
 = 
¨gv
[0];

196 i‡(
	`ho°com∑t_ây£tup
() < 0) {

201 
	`©exô
(
ho°com∑t_âyª£t
);

204 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

205 
	`£tvbuf
(
°dîr
, 
NULL
, 
_IONBF
, 0);

208 
	`sig«l
(
SIGHUP
, 
ho°com∑t_dõ
);

209 
	`sig«l
(
SIGINT
, 
ho°com∑t_dõ
);

210 
	`sig«l
(
SIGQUIT
, 
ho°com∑t_dõ
);

211 
	`sig«l
(
SIGILL
, 
ho°com∑t_dõ
);

212 
	`sig«l
(
SIGTRAP
, 
ho°com∑t_dõ
);

213 
	`sig«l
(
SIGABRT
, 
ho°com∑t_dõ
);

214 #ifde‡
SIGEMT


215 
	`sig«l
(
SIGEMT
, 
ho°com∑t_dõ
);

217 
	`sig«l
(
SIGFPE
, 
ho°com∑t_dõ
);

218 
	`sig«l
(
SIGBUS
, 
ho°com∑t_dõ
);

219 
	`sig«l
(
SIGSEGV
, 
ho°com∑t_dõ
);

220 
	`sig«l
(
SIGSYS
, 
ho°com∑t_dõ
);

221 
	`sig«l
(
SIGPIPE
, 
ho°com∑t_dõ
);

222 
	`sig«l
(
SIGALRM
, 
ho°com∑t_dõ
);

223 
	`sig«l
(
SIGTERM
, 
ho°com∑t_dõ
);

224 
	`sig«l
(
SIGXCPU
, 
ho°com∑t_dõ
);

225 
	`sig«l
(
SIGXFSZ
, 
ho°com∑t_dõ
);

226 
	`sig«l
(
SIGVTALRM
, 
ho°com∑t_dõ
);

227 
	`sig«l
(
SIGPROF
, 
ho°com∑t_dõ
);

228 
	`sig«l
(
SIGUSR1
, 
ho°com∑t_dõ
);

229 
	`sig«l
(
SIGUSR2
, 
ho°com∑t_dõ
);

232 
	`sig«l
(
SIGTTIN
, 
ho°com∑t_°›
);

233 
	`sig«l
(
SIGTTOU
, 
ho°com∑t_°›
);

234 
	`sig«l
(
SIGTSTP
, 
ho°com∑t_°›
);

237 
	`sig«l
(
SIGCONT
, 
ho°com∑t_c⁄t
);

238 
	}
}

	@os161/user/lib/hostcompat/hostcompat.h

31 
	~<sys/ty≥s.h
>

33 
ho°com∑t_öô
(
¨gc
, **
¨gv
);

35 
time_t
 
__time
—ime_à*
£cs
, *
n£cs
);

	@os161/user/lib/hostcompat/time.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/time.h
>

36 
	~<°rög.h
>

38 
	~"ho°com∑t.h
"

40 
time_t


41 
	$__time
(
time_t
 *
£cs
, *
n£cs
)

43 
timevÆ
 
tv
;

44 i‡(
	`gëtimeofday
(&
tv
, 
NULL
) < 0) {

47 i‡(
£cs
) {

48 *
£cs
 = 
tv
.
tv_£c
;

50 i‡(
n£cs
) {

51 *
n£cs
 = 
tv
.
tv_u£c
 * 1000;

53  
tv
.
tv_£c
;

54 
	}
}

	@os161/user/lib/libc/stdio/__puts.c

30 
	~<°dio.h
>

40 
	$__puts
(c⁄° *
°r
)

42 
cou¡
=0;

43 *
°r
) {

44 
	`putch¨
(*
°r
);

45 
°r
++;

46 
cou¡
++;

48  
cou¡
;

49 
	}
}

	@os161/user/lib/libc/stdio/getchar.c

30 
	~<°dio.h
>

31 
	~<uni°d.h
>

39 
	$gëch¨
()

41 
ch
;

42 
Àn
;

44 
Àn
 = 
	`ªad
(
STDIN_FILENO
, &
ch
, 1);

45 i‡(
Àn
<=0) {

47  
EOF
;

55  ()()
ch
;

56 
	}
}

	@os161/user/lib/libc/stdio/printf.c

30 
	~<°dio.h
>

31 
	~<°d¨g.h
>

43 
	$__¥ötf_£nd
(*
myd©a
, c⁄° *
d©a
, 
size_t
 
Àn
)

45 
i
;

46 ()
myd©a
;

48 
i
=0; i<
Àn
; i++) {

49 
	`putch¨
(
d©a
[
i
]);

51 
	}
}

55 
	$¥ötf
(c⁄° *
fmt
, ...)

57 
ch¨s
;

58 
va_li°
 
≠
;

59 
	`va_°¨t
(
≠
, 
fmt
);

60 
ch¨s
 = 
	`v¥ötf
(
fmt
, 
≠
);

61 
	`va_íd
(
≠
);

62  
ch¨s
;

63 
	}
}

67 
	$v¥ötf
(c⁄° *
fmt
, 
va_li°
 
≠
)

69  
	`__v¥ötf
(
__¥ötf_£nd
, 
NULL
, 
fmt
, 
≠
);

70 
	}
}

	@os161/user/lib/libc/stdio/putchar.c

30 
	~<°dio.h
>

31 
	~<uni°d.h
>

41 
	$putch¨
(
ch
)

43 
c
 = 
ch
;

44 
Àn
;

45 
Àn
 = 
	`wrôe
(
STDOUT_FILENO
, &
c
, 1);

46 i‡(
Àn
<=0) {

47  
EOF
;

49  
ch
;

50 
	}
}

	@os161/user/lib/libc/stdio/puts.c

30 
	~<°dio.h
>

37 
	$puts
(c⁄° *
s
)

39 
	`__puts
(
s
);

40 
	`putch¨
('\n');

42 
	}
}

	@os161/user/lib/libc/stdlib/abort.c

30 
	~<°dlib.h
>

31 
	~<uni°d.h
>

42 
	$ab‹t
()

44 
	`_exô
(255);

45 
	}
}

	@os161/user/lib/libc/stdlib/exit.c

30 
	~<°dlib.h
>

31 
	~<uni°d.h
>

38 
	$exô
(
code
)

45 
	`_exô
(
code
);

46 
	}
}

73 
__exô_hack
();

76 
	$__exô_hack
()

78 vﬁ©ûê
bœh
 = 1;

79 
bœh
) {}

80 
	}
}

	@os161/user/lib/libc/stdlib/malloc.c

39 
	~<°dlib.h
>

40 
	~<uni°d.h
>

41 
	~<îr.h
>

42 
	~<°döt.h
>

44 #unde‡
MALLOCDEBUG


46 #i‡
deföed
(
__mùs__
Ë|| deföed(
__i386__
)

47 
	#MALLOC32


	)

48 #ñi‡
deföed
(
__Æpha__
)

49 
	#MALLOC64


	)

70 
	smhódî
 {

72 #i‡
deföed
(
MALLOC32
)

73 
	#MBLOCKSIZE
 8

	)

74 
	#MBLOCKSHIFT
 3

	)

75 
	#MMAGIC
 2

	)

80 
	mmh_¥evblock
:29;

81 
	mmh_∑d
:1;

82 
	mmh_magic1
:2;

84 
	mmh_√xtblock
:29;

85 
	mmh_öu£
:1;

86 
	mmh_magic2
:2;

88 #ñi‡
deföed
(
MALLOC64
)

89 
	#MBLOCKSIZE
 16

	)

90 
	#MBLOCKSHIFT
 4

	)

91 
	#MMAGIC
 6

	)

96 
	mmh_¥evblock
:62;

97 
	mmh_∑d
:1;

98 
	mmh_magic1
:3;

100 
	mmh_√xtblock
:62;

101 
	mmh_öu£
:1;

102 
	mmh_magic2
:3;

124 
	#M_NEXTOFF
(
mh
Ë((
size_t
)(((size_t)((mh)->
mh_√xtblock
))<<
MBLOCKSHIFT
))

	)

125 
	#M_PREVOFF
(
mh
Ë((
size_t
)(((size_t)((mh)->
mh_¥evblock
))<<
MBLOCKSHIFT
))

	)

126 
	#M_NEXT
(
mh
Ë((
mhódî
 *)(((*)(mh))+
	`M_NEXTOFF
(mh)))

	)

127 
	#M_PREV
(
mh
Ë((
mhódî
 *)(((*)(mh))-
	`M_PREVOFF
(mh)))

	)

129 
	#M_DATA
(
mh
Ë((*)((mh)+1))

	)

130 
	#M_SIZE
(
mh
Ë(
	`M_NEXTOFF
(mh)-
MBLOCKSIZE
)

	)

132 
	#M_OK
(
mh
Ë((mh)->
mh_magic1
==
MMAGIC
 && (mh)->
mh_magic2
==MMAGIC)

	)

134 
	#M_MKFIELD
(
off
Ë((off)>>
MBLOCKSHIFT
)

	)

141 
uöçå_t
 
	g__hópba£
, 
	g__hó±›
;

148 
	$__mÆloc_öô
()

150 *
x
;

155 i‡((
mhódî
Ë!
MBLOCKSIZE
) {

156 
	`îrx
(1, "malloc: InternalÉrror - MBLOCKSIZE wrong");

158 i‡((
MBLOCKSIZE
 & (MBLOCKSIZE-1))!=0) {

159 
	`îrx
(1, "malloc: InternalÉrror - MBLOCKSIZEÇotÖower of 2");

161 i‡(1<<
MBLOCKSHIFT
 !
MBLOCKSIZE
) {

162 
	`îrx
(1, "malloc: InternalÉrror - MBLOCKSHIFT wrong");

166 i‡(
__hópba£
!=0 || 
__hó±›
!=0) {

167 
	`îrx
(1, "malloc: InternalÉrror - bad init call");

171 
x
 = 
	`sbrk
(0);

172 i‡(
x
==(*)-1) {

173 
	`îr
(1, "malloc: initial sbrk failed");

175 i‡(
x
==(*) 0) {

176 
	`îrx
(1, "malloc: InternalÉrror - heap beganát 0");

178 
__hópba£
 = 
__hó±›
 = (
uöçå_t
)
x
;

187 i‡(
__hópba£
 % 
MBLOCKSIZE
 != 0) {

188 
size_t
 
adju°
 = 
MBLOCKSIZE
 - (
__hópba£
 % MBLOCKSIZE);

189 
x
 = 
	`sbrk
(
adju°
);

190 i‡(
x
==(*)-1) {

191 
	`îr
(1, "malloc: sbrk failedáligning heap base");

193 i‡((
uöçå_t
)
x
 !
__hópba£
) {

194 
	`îr
(1, "malloc: heap base moved during init");

196 #ifde‡
MALLOCDEBUG


197 
	`w¨nx
("malloc:ádjusted heap base upwards by %lu bytes",

198 (Ë
adju°
);

200 
__hópba£
 +
adju°
;

201 
__hó±›
 = 
__hópba£
;

203 
	}
}

207 #ifde‡
MALLOCDEBUG


214 
	$__mÆloc_dump
()

216 
mhódî
 *
mh
;

217 
uöçå_t
 
i
;

218 
size_t
 
righçªvblock
;

220 
	`w¨nx
("heap: ************************************************");

222 
righçªvblock
 = 0;

223 
i
=
__hópba£
; i<
__hó±›
; i +
	`M_NEXTOFF
(
mh
)) {

224 
mh
 = (
mhódî
 *Ë
i
;

225 i‡(!
	`M_OK
(
mh
)) {

226 
	`îrx
(1, "malloc: Heap corrupt; headerát 0x%lx"

228 (Ë
i
);

230 i‡(
mh
->
mh_¥evblock
 !
righçªvblock
) {

231 
	`îrx
(1, "malloc: Heap corrupt; headerát 0x%lx"

234 (Ë
i
,

235 (Ë
mh
->
mh_¥evblock
 << 
MBLOCKSHIFT
,

236 (Ë
righçªvblock
 << 
MBLOCKSHIFT
);

238 
righçªvblock
 = 
mh
->
mh_√xtblock
;

240 
	`w¨nx
("heap: 0x%lx 0x%-6lx (next: 0x%lx) %s",

241 (Ë
i
 + 
MBLOCKSIZE
,

242 (Ë
	`M_SIZE
(
mh
),

243 (Ë(
i
+
	`M_NEXTOFF
(
mh
)),

244 
mh
->
mh_öu£
 ? "INUSE" : "FREE");

246 i‡(
i
!=
__hó±›
) {

247 
	`îrx
(1, "malloc: Heap corrupt;Ñan offÉnd");

250 
	`w¨nx
("heap: ************************************************");

251 
	}
}

263 
	$__mÆloc_sbrk
(
size_t
 
size
)

265 *
x
;

267 
x
 = 
	`sbrk
(
size
);

268 i‡(
x
 == (*)-1) {

269  
NULL
;

272 i‡((
uöçå_t
)
x
 !
__hó±›
) {

273 
	`îrx
(1, "malloc: InternalÉrror - "

275 (Ë
__hó±›
,

276 (Ë(
uöçå_t
Ë
x
);

278 
__hó±›
 +
size
;

279  
x
;

280 
	}
}

292 
	$__mÆloc_•lô
(
mhódî
 *
mh
, 
size_t
 
size
)

294 
mhódî
 *
mh√xt
, *
mh√w
;

295 
size_t
 
ﬁdsize
;

297 i‡(
size
 % 
MBLOCKSIZE
 != 0) {

298 
	`îrx
(1, "malloc: InternalÉrror (size %luÖassedÅo split)",

299 (Ë
size
);

302 i‡(
	`M_SIZE
(
mh
Ë- 
size
 < 2*
MBLOCKSIZE
) {

307 
mh√xt
 = 
	`M_NEXT
(
mh
);

309 
ﬁdsize
 = 
	`M_SIZE
(
mh
);

310 
mh
->
mh_√xtblock
 = 
	`M_MKFIELD
(
size
 + 
MBLOCKSIZE
);

312 
mh√w
 = 
	`M_NEXT
(
mh
);

313 i‡(
mh√w
==
mh√xt
) {

314 
	`îrx
(1, "malloc: InternalÉrror (split screwed up?)");

317 
mh√w
->
mh_¥evblock
 = 
	`M_MKFIELD
(
size
 + 
MBLOCKSIZE
);

318 
mh√w
->
mh_∑d
 = 0;

319 
mh√w
->
mh_magic1
 = 
MMAGIC
;

320 
mh√w
->
mh_√xtblock
 = 
	`M_MKFIELD
(
ﬁdsize
 - 
size
);

321 
mh√w
->
mh_öu£
 = 0;

322 
mh√w
->
mh_magic2
 = 
MMAGIC
;

324 i‡(
mh√xt
 !(
mhódî
 *Ë
__hó±›
) {

325 
mh√xt
->
mh_¥evblock
 = 
mh√w
->
mh_√xtblock
;

327 
	}
}

333 
	$mÆloc
(
size_t
 
size
)

335 
mhódî
 *
mh
;

336 
uöçå_t
 
i
;

337 
size_t
 
righçªvblock
;

339 i‡(
__hópba£
==0) {

340 
	`__mÆloc_öô
();

342 i‡(
__hópba£
==0 || 
__hó±›
==0 || __heapbase > __heaptop) {

343 
	`w¨nx
("malloc: InternalÉrror -Üocal data corrupt");

344 
	`îrx
(1, "malloc: heapbase 0x%lx; heaptop 0x%lx",

345 (Ë
__hópba£
, (Ë
__hó±›
);

348 #ifde‡
MALLOCDEBUG


349 
	`w¨nx
("malloc:áboutÅoállocate %lu (0x%lx) bytes",

350 (Ë
size
, () size);

351 
	`__mÆloc_dump
();

355 
size
 = ((sizê+ 
MBLOCKSIZE
 - 1Ë& ~(
size_t
)(MBLOCKSIZE-1));

361 
righçªvblock
 = 0;

362 
i
=
__hópba£
; i<
__hó±›
; i +
	`M_NEXTOFF
(
mh
)) {

363 
mh
 = (
mhódî
 *Ë
i
;

364 i‡(!
	`M_OK
(
mh
)) {

365 
	`îrx
(1, "malloc: Heap corrupt; headerát 0x%lx"

367 (Ë
i
);

369 i‡(
mh
->
mh_¥evblock
 !
righçªvblock
) {

370 
	`îrx
(1, "malloc: Heap corrupt; headerát 0x%lx"

373 (Ë
i
,

374 (Ë
mh
->
mh_¥evblock
 << 
MBLOCKSHIFT
,

375 (Ë
righçªvblock
 << 
MBLOCKSHIFT
);

377 
righçªvblock
 = 
mh
->
mh_√xtblock
;

380 i‡(
mh
->
mh_öu£
) {

385 i‡(
	`M_SIZE
(
mh
Ë< 
size
) {

390 
	`__mÆloc_•lô
(
mh
, 
size
);

395 
mh
->
mh_öu£
 = 1;

397 #ifde‡
MALLOCDEBUG


398 
	`w¨nx
("mÆloc:áŒoˇtögáà%p", 
	`M_DATA
(
mh
));

399 
	`__mÆloc_dump
();

401  
	`M_DATA
(
mh
);

403 i‡(
i
!=
__hó±›
) {

404 
	`îrx
(1, "malloc: Heap corrupt;Ñan offÉnd");

411 
mh
 = 
	`__mÆloc_sbrk
(
size
 + 
MBLOCKSIZE
);

412 i‡(
mh
 =
NULL
) {

413  
NULL
;

416 
mh
->
mh_¥evblock
 = 
righçªvblock
;

417 
mh
->
mh_magic1
 = 
MMAGIC
;

418 
mh
->
mh_magic2
 = 
MMAGIC
;

419 
mh
->
mh_∑d
 = 0;

420 
mh
->
mh_öu£
 = 1;

421 
mh
->
mh_√xtblock
 = 
	`M_MKFIELD
(
size
 + 
MBLOCKSIZE
);

423 #ifde‡
MALLOCDEBUG


424 
	`w¨nx
("mÆloc:áŒoˇtögáà%p", 
	`M_DATA
(
mh
));

425 
	`__mÆloc_dump
();

427  
	`M_DATA
(
mh
);

428 
	}
}

438 
	$__mÆloc_dódbìf
(*
±r
, 
size_t
 
size
)

440 
uöt32_t
 *
x
 = 
±r
;

441 
size_t
 
i
, 
n
 = 
size
/(
uöt32_t
);

442 
i
=0; i<
n
; i++) {

443 
x
[
i
] = 0xdeadbeef;

445 
	}
}

452 
	$__mÆloc_åymîge
(
mhódî
 *
mh
, mhódî *
mh√xt
)

454 
mhódî
 *
mh√xäext
;

456 i‡(
mh
->
mh_√xtblock
 !
mh√xt
->
mh_¥evblock
) {

457 
	`îrx
(1, "free: Heap corrupt (%pánd %p inconsistent)",

458 
mh
, 
mh√xt
);

460 i‡(
mh
->
mh_öu£
 || 
mh√xt
->mh_inuse) {

465 
mh√xäext
 = 
	`M_NEXT
(
mh√xt
);

467 
mh
->
mh_√xtblock
 = 
	`M_MKFIELD
(
MBLOCKSIZE
 + 
	`M_SIZE
(mh) +

468 
MBLOCKSIZE
 + 
	`M_SIZE
(
mh√xt
));

470 i‡(
mh√xäext
 !(
mhódî
 *)
__hó±›
) {

471 
mh√xäext
->
mh_¥evblock
 = 
mh
->
mh_√xtblock
;

475 
	`__mÆloc_dódbìf
(
mh√xt
, (
mhódî
));

476 
	}
}

482 
	$‰ì
(*
x
)

484 
mhódî
 *
mh
, *
mh√xt
, *
mh¥ev
;

486 i‡(
x
==
NULL
) {

492 i‡(
__hópba£
==0 || 
__hó±›
==0 || __heapbase > __heaptop) {

493 
	`w¨nx
("free: InternalÉrror -Üocal data corrupt");

494 
	`îrx
(1, "free: heapbase 0x%lx; heaptop 0x%lx",

495 (Ë
__hópba£
, (Ë
__hó±›
);

499 i‡((
uöçå_t
)
x
 < 
__hópba£
 || (uöçå_t)x >
__hó±›
) {

500 
	`îrx
(1, "‰ì: InvÆidÖoöã∏%∞‰ìd (ouào‡ønge)", 
x
);

503 #ifde‡
MALLOCDEBUG


504 
	`w¨nx
("‰ì:ábouàtÿ‰ì %p", 
x
);

505 
	`__mÆloc_dump
();

508 
mh
 = ((
mhódî
 *)
x
)-1;

509 i‡(!
	`M_OK
(
mh
)) {

510 
	`îrx
(1, "‰ì: InvÆidÖoöã∏%∞‰ìd (c‹ru± hódî)", 
x
);

513 i‡(!
mh
->
mh_öu£
) {

514 
	`îrx
(1, "‰ì: InvÆidÖoöã∏%∞‰ìd (Æªady fªe)", 
x
);

518 
mh
->
mh_öu£
 = 0;

521 
	`__mÆloc_dódbìf
(
	`M_DATA
(
mh
), 
	`M_SIZE
(mh));

524 
mh√xt
 = 
	`M_NEXT
(
mh
);

525 i‡(
mh√xt
 !(
mhódî
 *)
__hó±›
) {

526 
	`__mÆloc_åymîge
(
mh
, 
mh√xt
);

530 i‡(
mh
 !(
mhódî
 *)
__hópba£
) {

531 
mh¥ev
 = 
	`M_PREV
(
mh
);

532 
	`__mÆloc_åymîge
(
mh¥ev
, 
mh
);

535 #ifde‡
MALLOCDEBUG


536 
	`w¨nx
("‰ì: fªed %p", 
x
);

537 
	`__mÆloc_dump
();

539 
	}
}

	@os161/user/lib/libc/stdlib/random.c

41 
	~<as£π.h
>

42 
	~<î∫o.h
>

43 
	~<°dlib.h
>

49 
	#LOCKME
()

	)

50 
	#UNLOCKME
()

	)

52 
§™dom_u∆ocked
();

53 
øndom_u∆ocked
();

122 
	#TYPE_0
 0

	)

123 
	#BREAK_0
 8

	)

124 
	#DEG_0
 0

	)

125 
	#SEP_0
 0

	)

127 
	#TYPE_1
 1

	)

128 
	#BREAK_1
 32

	)

129 
	#DEG_1
 7

	)

130 
	#SEP_1
 3

	)

132 
	#TYPE_2
 2

	)

133 
	#BREAK_2
 64

	)

134 
	#DEG_2
 15

	)

135 
	#SEP_2
 1

	)

137 
	#TYPE_3
 3

	)

138 
	#BREAK_3
 128

	)

139 
	#DEG_3
 31

	)

140 
	#SEP_3
 3

	)

142 
	#TYPE_4
 4

	)

143 
	#BREAK_4
 256

	)

144 
	#DEG_4
 63

	)

145 
	#SEP_4
 1

	)

151 
	#MAX_TYPES
 5

	)

153 c⁄° 
	gdegªes
[
MAX_TYPES
] = { 
DEG_0
, 
DEG_1
, 
DEG_2
, 
DEG_3
, 
DEG_4
 };

154 c⁄° 
	g£ps
[
MAX_TYPES
] = { 
SEP_0
, 
SEP_1
, 
SEP_2
, 
SEP_3
, 
SEP_4
 };

170 
	gøndtbl
[
DEG_3
 + 1] = {

171 
TYPE_3
,

199 *
	gÂå
 = &
øndtbl
[
SEP_3
 + 1];

200 *
	gΩå
 = &
øndtbl
[1];

212 *
	g°©e
 = &
øndtbl
[1];

213 
	gønd_ty≥
 = 
TYPE_3
;

214 
	gønd_deg
 = 
DEG_3
;

215 
	gønd_£p
 = 
SEP_3
;

216 *
	gíd_±r
 = &
øndtbl
[
DEG_3
 + 1];

232 
	$§™dom_u∆ocked
(
x
)

234 
i
;

236 i‡(
ønd_ty≥
 =
TYPE_0
)

237 
°©e
[0] = 
x
;

239 
°©e
[0] = 
x
;

240 
i
 = 1; i < 
ønd_deg
; i++)

241 
°©e
[
i
] = 1103515245L * state[i - 1] + 12345L;

242 
Âå
 = &
°©e
[
ønd_£p
];

243 
Ωå
 = &
°©e
[0];

244 
i
 = 0; i < 10 * 
ønd_deg
; i++)

245 ()
	`øndom_u∆ocked
();

247 
	}
}

250 
	$§™dom
(
x
)

253 
	`LOCKME
();

254 
	`§™dom_u∆ocked
(
x
);

255 
	`UNLOCKME
();

256 
	}
}

282 
	$öô°©e
(

283 
£ed
,

284 *
¨g_°©e
,

285 
size_t
 
n
)

287 *
o°©e
 = (*)(&
°©e
[-1]);

288 *
l⁄g_¨g_°©e
;

290 
	`as£π
(
¨g_°©e
 !
NULL
);

292 
l⁄g_¨g_°©e
 = (*)(*)
¨g_°©e
;

294 
	`LOCKME
();

295 i‡(
ønd_ty≥
 =
TYPE_0
)

296 
°©e
[-1] = 
ønd_ty≥
;

298 
°©e
[-1] = 
MAX_TYPES
 * (
Ωå
 - sèãË+ 
ønd_ty≥
;

299 i‡(
n
 < 
BREAK_0
) {

300 
	`UNLOCKME
();

301  (
NULL
);

302 } i‡(
n
 < 
BREAK_1
) {

303 
ønd_ty≥
 = 
TYPE_0
;

304 
ønd_deg
 = 
DEG_0
;

305 
ønd_£p
 = 
SEP_0
;

306 } i‡(
n
 < 
BREAK_2
) {

307 
ønd_ty≥
 = 
TYPE_1
;

308 
ønd_deg
 = 
DEG_1
;

309 
ønd_£p
 = 
SEP_1
;

310 } i‡(
n
 < 
BREAK_3
) {

311 
ønd_ty≥
 = 
TYPE_2
;

312 
ønd_deg
 = 
DEG_2
;

313 
ønd_£p
 = 
SEP_2
;

314 } i‡(
n
 < 
BREAK_4
) {

315 
ønd_ty≥
 = 
TYPE_3
;

316 
ønd_deg
 = 
DEG_3
;

317 
ønd_£p
 = 
SEP_3
;

319 
ønd_ty≥
 = 
TYPE_4
;

320 
ønd_deg
 = 
DEG_4
;

321 
ønd_£p
 = 
SEP_4
;

323 
°©e
 = (*Ë(
l⁄g_¨g_°©e
 + 1);

324 
íd_±r
 = &
°©e
[
ønd_deg
];

325 
	`§™dom_u∆ocked
(
£ed
);

326 i‡(
ønd_ty≥
 =
TYPE_0
)

327 
l⁄g_¨g_°©e
[0] = 
ønd_ty≥
;

329 
l⁄g_¨g_°©e
[0] = 
MAX_TYPES
 * (
Ωå
 - 
°©e
Ë+ 
ønd_ty≥
;

330 
	`UNLOCKME
();

331 ((*)
o°©e
);

332 
	}
}

354 
	$£t°©e
(*
¨g_°©e
)

356 *
√w_°©e
;

357 
ty≥
;

358 
ª¨
;

359 *
o°©e
 = (*)(&
°©e
[-1]);

361 
	`as£π
(
¨g_°©e
 !
NULL
);

363 
√w_°©e
 = (*)(*)
¨g_°©e
;

364 
ty≥
 = ()(
√w_°©e
[0] % 
MAX_TYPES
);

365 
ª¨
 = ()(
√w_°©e
[0] / 
MAX_TYPES
);

367 
	`LOCKME
();

368 i‡(
ønd_ty≥
 =
TYPE_0
)

369 
°©e
[-1] = 
ønd_ty≥
;

371 
°©e
[-1] = 
MAX_TYPES
 * (
Ωå
 - sèãË+ 
ønd_ty≥
;

372 
ty≥
) {

373 
TYPE_0
:

374 
TYPE_1
:

375 
TYPE_2
:

376 
TYPE_3
:

377 
TYPE_4
:

378 
ønd_ty≥
 = 
ty≥
;

379 
ønd_deg
 = 
degªes
[
ty≥
];

380 
ønd_£p
 = 
£ps
[
ty≥
];

383 
	`UNLOCKME
();

384  (
NULL
);

386 
°©e
 = (*Ë(
√w_°©e
 + 1);

387 i‡(
ønd_ty≥
 !
TYPE_0
) {

388 
Ωå
 = &
°©e
[
ª¨
];

389 
Âå
 = &
°©e
[(
ª¨
 + 
ønd_£p
Ë% 
ønd_deg
];

391 
íd_±r
 = &
°©e
[
ønd_deg
];

392 
	`UNLOCKME
();

393 ((*)
o°©e
);

394 
	}
}

415 
	$øndom_u∆ocked
()

417 
i
;

418 *
f
, *
r
;

420 i‡(
ønd_ty≥
 =
TYPE_0
) {

421 
i
 = 
°©e
[0];

422 
°©e
[0] = 
i
 = (i * 1103515245L + 12345L) & 0x7fffffff;

427 
f
 = 
Âå
; 
r
 = 
Ωå
;

428 *
f
 +*
r
;

430 
i
 = (()*
f
 >> 1) & 0x7fffffff;

431 i‡(++
f
 >
íd_±r
) {

432 
f
 = 
°©e
;

433 ++
r
;

435 i‡(++
r
 >
íd_±r
) {

436 
r
 = 
°©e
;

439 
Âå
 = 
f
; 
Ωå
 = 
r
;

441 (
i
);

442 
	}
}

445 
	$øndom
()

447 
r
;

449 
	`LOCKME
();

450 
r
 = 
	`øndom_u∆ocked
();

451 
	`UNLOCKME
();

452  (
r
);

453 
	}
}

	@os161/user/lib/libc/stdlib/system.c

30 
	~<î∫o.h
>

31 
	~<°dlib.h
>

32 
	~<uni°d.h
>

33 
	~<°rög.h
>

41 
	#MAXCMDSIZE
 2048

	)

42 
	#MAXARGS
 128

	)

45 
	$sy°em
(c⁄° *
cmd
)

53 
tmp
[
MAXCMDSIZE
];

54 *
¨gv
[
MAXARGS
+1];

55 
«rgs
=0;

56 *
s
;

57 
pid
, 
°©us
;

59 i‡(
	`°æí
(
cmd
Ë>(
tmp
)) {

60 
î∫o
 = 
E2BIG
;

63 
	`°r˝y
(
tmp
, 
cmd
);

65 
s
 = 
	`°πok
(
tmp
, " \t"); s; s = såtok(
NULL
, " \t")) {

66 i‡(
«rgs
 < 
MAXARGS
) {

67 
¨gv
[
«rgs
++] = 
s
;

70 
î∫o
 = 
E2BIG
;

75 
¨gv
[
«rgs
] = 
NULL
;

77 
pid
 = 
	`f‹k
();

78 
pid
) {

83 
	`execv
(
¨gv
[0],árgv);

85 
	`_exô
(255);

88 
	`waôpid
(
pid
, &
°©us
, 0);

89  
°©us
;

91 
	}
}

	@os161/user/lib/libc/string/memcmp.c

30 
	~<°rög.h
>

38 
	$memcmp
(c⁄° *
av
, c⁄° *
bv
, 
size_t
 
Àn
)

40 c⁄° *
a
 = 
av
;

41 c⁄° *
b
 = 
bv
;

42 
size_t
 
i
;

44 
i
=0; i<
Àn
; i++) {

45 i‡(
a
[
i
] !
b
[i]) {

46  ()(
a
[
i
] - 
b
[i]);

50 
	}
}

	@os161/user/lib/libc/string/memset.c

30 
	~<°rög.h
>

37 
	$mem£t
(*
±r
, 
ch
, 
size_t
 
Àn
)

39 *
p
 = 
±r
;

40 
size_t
 
i
;

42 
i
=0; i<
Àn
; i++) {

43 
p
[
i
] = 
ch
;

46  
±r
;

47 
	}
}

	@os161/user/lib/libc/string/strerror.c

30 
	~<°rög.h
>

31 
	~<kîn/îrmsg.h
>

37 
	$°ªº‹
(
îrcode
)

39 i‡(
îrcode
>=0 &&Éºcodê< 
sys_√º
) {

40  
sys_îæi°
[
îrcode
];

43 
	}
}

	@os161/user/lib/libc/string/strtok.c

30 
	~<°rög.h
>

32 *
	g__°πok_c⁄ãxt
;

35 
	$°πok
(*
°r
, c⁄° *
£ps
)

37  
	`°πok_r
(
°r
, 
£ps
, &
__°πok_c⁄ãxt
);

38 
	}
}

	@os161/user/lib/libc/time/time.c

30 
	~<uni°d.h
>

38 
time_t


39 
	$time
(
time_t
 *
t
)

41  
	`__time
(
t
, 
NULL
);

42 
	}
}

	@os161/user/lib/libc/unix/__assert.c

30 
	~<as£π.h
>

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<uni°d.h
>

34 
	~<°rög.h
>

42 
	$__bad_as£π
(c⁄° *
fûe
, 
löe
, c⁄° *
ex¥
)

44 
buf
[256];

45 
	`¢¥ötf
(
buf
, (buf), "Assertion failed: %s (%sÜine %d)\n",

46 
ex¥
, 
fûe
, 
löe
);

48 
	`wrôe
(
STDERR_FILENO
, 
buf
, 
	`°æí
(buf));

49 
	`ab‹t
();

50 
	}
}

	@os161/user/lib/libc/unix/err.c

30 
	~<°dio.h
>

31 
	~<°d¨g.h
>

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

34 
	~<uni°d.h
>

35 
	~<îr.h
>

36 
	~<î∫o.h
>

45 **
__¨gv
;

52 
	$__£ndîr
(*
junk
, c⁄° *
d©a
, 
size_t
 
Àn
)

54 ()
junk
;

56 
	`wrôe
(
STDERR_FILENO
, 
d©a
, 
Àn
);

57 
	}
}

65 
	$__£ndîr°r
(c⁄° *
°r
)

67 
	`__£ndîr
(
NULL
, 
°r
, 
	`°æí
(str));

68 
	}
}

75 
	$__¥öãº
(
u£_î∫o
, c⁄° *
fmt
, 
va_li°
 
≠
)

77 c⁄° *
îrmsg
;

78 c⁄° *
¥og
;

85 
îrmsg
 = 
	`°ªº‹
(
î∫o
);

94 i‡(
__¨gv
!=
NULL
 && __argv[0]!=NULL) {

95 
¥og
 = 
__¨gv
[0];

98 
¥og
 = "(programÇame unknown)";

102 
	`__£ndîr°r
(
¥og
);

103 
	`__£ndîr°r
(": ");

106 
	`__v¥ötf
(
__£ndîr
, 
NULL
, 
fmt
, 
≠
);

109 i‡(
u£_î∫o
) {

110 
	`__£ndîr°r
(": ");

111 
	`__£ndîr°r
(
îrmsg
);

115 
	`__£ndîr°r
("\n");

116 
	}
}

124 
	$vw¨n
(c⁄° *
fmt
, 
va_li°
 
≠
)

126 
	`__¥öãº
(1, 
fmt
, 
≠
);

127 
	}
}

131 
	$vw¨nx
(c⁄° *
fmt
, 
va_li°
 
≠
)

133 
	`__¥öãº
(0, 
fmt
, 
≠
);

134 
	}
}

138 
	$vîr
(
exôcode
, c⁄° *
fmt
, 
va_li°
 
≠
)

140 
	`__¥öãº
(1, 
fmt
, 
≠
);

141 
	`exô
(
exôcode
);

142 
	}
}

146 
	$vîrx
(
exôcode
, c⁄° *
fmt
, 
va_li°
 
≠
)

148 
	`__¥öãº
(0, 
fmt
, 
≠
);

149 
	`exô
(
exôcode
);

150 
	}
}

158 
	$w¨n
(c⁄° *
fmt
, ...)

160 
va_li°
 
≠
;

161 
	`va_°¨t
(
≠
, 
fmt
);

162 
	`vw¨n
(
fmt
, 
≠
);

163 
	`va_íd
(
≠
);

164 
	}
}

167 
	$w¨nx
(c⁄° *
fmt
, ...)

169 
va_li°
 
≠
;

170 
	`va_°¨t
(
≠
, 
fmt
);

171 
	`vw¨nx
(
fmt
, 
≠
);

172 
	`va_íd
(
≠
);

173 
	}
}

176 
	$îr
(
exôcode
, c⁄° *
fmt
, ...)

178 
va_li°
 
≠
;

179 
	`va_°¨t
(
≠
, 
fmt
);

180 
	`vîr
(
exôcode
, 
fmt
, 
≠
);

181 
	`va_íd
(
≠
);

182 
	}
}

185 
	$îrx
(
exôcode
, c⁄° *
fmt
, ...)

187 
va_li°
 
≠
;

188 
	`va_°¨t
(
≠
, 
fmt
);

189 
	`vîrx
(
exôcode
, 
fmt
, 
≠
);

190 
	`va_íd
(
≠
);

191 
	}
}

	@os161/user/lib/libc/unix/errno.c

30 
	~<î∫o.h
>

41 **
	g__¨gv
;

43 
	gî∫o
;

	@os161/user/lib/libc/unix/getcwd.c

30 
	~<uni°d.h
>

31 
	~<î∫o.h
>

40 
	$gëcwd
(*
buf
, 
size_t
 
buÊí
)

42 
r
;

44 i‡(
buÊí
 < 1) {

45 
î∫o
 = 
EINVAL
;

46  
NULL
;

49 
r
 = 
	`__gëcwd
(
buf
, 
buÊí
-1);

50 i‡(
r
 < 0) {

51  
NULL
;

54 
buf
[
r
] = 0;

55  
buf
;

56 
	}
}

	@os161/user/my-testbin/example/example.c

4 
	~<uni°d.h
>

7 
	$maö
()

9 
	`ªboŸ
(
RB_POWEROFF
);

11 
	}
}

	@os161/user/sbin/dumpsfs/dumpsfs.c

30 
	~<sys/ty≥s.h
>

31 
	~<°döt.h
>

32 
	~<°rög.h
>

33 
	~<°dio.h
>

34 
	~<as£π.h
>

35 
	~<limôs.h
>

36 
	~<îr.h
>

38 
	~"suµ‹t.h
"

39 
	~"kîn/sfs.h
"

42 #ifde‡
HOST


44 
	~<√töë/ö.h
>

45 
	~<¨∑/öë.h
>

46 
	~"ho°com∑t.h
"

47 
	#SWAPL
(
x
Ë
	`¡ohl
(x)

	)

48 
	#SWAPS
(
x
Ë
	`¡ohs
(x)

	)

52 
	#SWAPL
(
x
Ë(x)

	)

53 
	#SWAPS
(
x
Ë(x)

	)

57 
	~"disk.h
"

60 
uöt32_t


61 
	$dumpsb
()

63 
sfs_su≥r
 
•
;

64 
	`diskªad
(&
•
, 
SFS_SB_LOCATION
);

65 i‡(
	`SWAPL
(
•
.
•_magic
Ë!
SFS_MAGIC
) {

66 
	`îrx
(1, "Notán sfs filesystem");

68 
•
.
•_vﬁ«me
[(sp.sp_volname)-1] = 0;

69 
	`¥ötf
("Vﬁumê«me: %-40† %u blocks\n", 
•
.
•_vﬁ«me
,

70 
	`SWAPL
(
•
.
•_nblocks
));

72  
	`SWAPL
(
•
.
•_nblocks
);

73 
	}
}

77 
	$dodúblock
(
uöt32_t
 
block
)

79 
sfs_dú
 
sds
[
SFS_BLOCKSIZE
/(sfs_dir)];

80 
nsds
 = 
SFS_BLOCKSIZE
/(
sfs_dú
);

81 
i
;

83 
	`diskªad
(&
sds
, 
block
);

85 
	`¥ötf
(" [block %u]\n", 
block
);

86 
i
=0; i<
nsds
; i++) {

87 
uöt32_t
 
öo
 = 
	`SWAPL
(
sds
[
i
].
sfd_öo
);

88 i‡(
öo
==
SFS_NOINO
) {

89 
	`¥ötf
(" [freeÉntry]\n");

92 
sds
[
i
].
sfd_«me
[
SFS_NAMELEN
-1] = 0;

93 
	`¥ötf
(" %u %s\n", 
öo
, 
sds
[
i
].
sfd_«me
);

96 
	}
}

100 
	$dumpdú
(
uöt32_t
 
öo
)

102 
sfs_öode
 
sfi
;

103 
uöt32_t
 
ib
[
SFS_DBPERIDB
];

104 
√¡rõs
, 
i
;

105 
uöt32_t
 
block
, 
nblocks
=0;

107 
	`diskªad
(&
sfi
, 
öo
);

109 
√¡rõs
 = 
	`SWAPL
(
sfi
.
sfi_size
Ë/ (
sfs_dú
);

110 i‡(
	`SWAPL
(
sfi
.
sfi_size
Ë% (
sfs_dú
) != 0) {

111 
	`w¨nx
("Warning: dir size isÇotá multiple of dirÉntry size");

113 
	`¥ötf
("Dúe˘‹y %u: %dÉ¡rõs\n", 
öo
, 
√¡rõs
);

115 
i
=0; i<
SFS_NDIRECT
; i++) {

116 
block
 = 
	`SWAPL
(
sfi
.
sfi_dúe˘
[
i
]);

117 i‡(
block
) {

118 
	`dodúblock
(
block
);

119 
nblocks
++;

122 i‡(
	`SWAPL
(
sfi
.
sfi_ödúe˘
)) {

123 
	`diskªad
(&
ib
, 
	`SWAPL
(
sfi
.
sfi_ödúe˘
));

124 
i
=0; i<
SFS_DBPERIDB
; i++) {

125 
block
 = 
	`SWAPL
(
ib
[
i
]);

126 i‡(
block
) {

127 
	`dodúblock
(
block
);

128 
nblocks
++;

132 
	`¥ötf
(" %u block†ö dúe˘‹y\n", 
nblocks
);

133 
	}
}

137 
	$dumpbôs
(
uöt32_t
 
fsblocks
)

139 
uöt32_t
 
nblocks
 = 
	`SFS_BITBLOCKS
(
fsblocks
);

140 
uöt32_t
 
i
, 
j
;

141 
d©a
[
SFS_BLOCKSIZE
];

143 
	`¥ötf
("Fªem≠: %u block†(%u %u %u)\n", 
nblocks
, 
	`SFS_BITMAPSIZE
(
fsblocks
), fsblocks, 
SFS_BLOCKBITS
);

145 
i
=0; i<
nblocks
; i++) {

146 
	`diskªad
(
d©a
, 
SFS_MAP_LOCATION
+
i
);

147 
j
=0; j<
SFS_BLOCKSIZE
; j++) {

148 
	`¥ötf
("%02x", ()
d©a
[
j
]);

149 i‡(
j
%32==31) {

150 
	`¥ötf
("\n");

154 
	`¥ötf
("\n");

155 
	}
}

158 
	$maö
(
¨gc
, **
¨gv
)

160 
uöt32_t
 
nblocks
;

162 #ifde‡
HOST


163 
	`ho°com∑t_öô
(
¨gc
, 
¨gv
);

166 i‡(
¨gc
!=2) {

167 
	`îrx
(1, "Usage: dumpsfs device/diskfile");

170 
	`›ídisk
(
¨gv
[1]);

171 
nblocks
 = 
	`dumpsb
();

172 
	`dumpbôs
(
nblocks
);

173 
	`dumpdú
(
SFS_ROOT_LOCATION
);

175 
	`˛o£disk
();

178 
	}
}

	@os161/user/sbin/halt/halt.c

30 
	~<uni°d.h
>

40 
	$maö
()

42 
	`ªboŸ
(
RB_HALT
);

44 
	}
}

	@os161/user/sbin/mksfs/disk.c

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<uni°d.h
>

33 
	~<as£π.h
>

34 
	~<°döt.h
>

35 
	~<°rög.h
>

36 
	~<î∫o.h
>

37 
	~<f˙é.h
>

38 
	~<îr.h
>

40 
	~"suµ‹t.h
"

41 
	~"disk.h
"

43 
	#HOSTSTRING
 "Sy°em/161 Disk Image"

	)

44 
	#BLOCKSIZE
 512

	)

46 #i‚de‡
EINTR


47 
	#EINTR
 0

	)

50 
	gfd
=-1;

51 
uöt32_t
 
	gnblocks
;

54 
	$›ídisk
(c⁄° *
∑th
)

56 
°©
 
°©buf
;

58 
	`as£π
(
fd
<0);

59 
fd
 = 
	`›í
(
∑th
, 
O_RDWR
);

60 i‡(
fd
<0) {

61 
	`îr
(1, "%s", 
∑th
);

63 i‡(
	`f°©
(
fd
, &
°©buf
)) {

64 
	`îr
(1, "%s: f°©", 
∑th
);

67 
nblocks
 = 
°©buf
.
°_size
 / 
BLOCKSIZE
;

69 #ifde‡
HOST


70 
nblocks
--;

73 
buf
[64];

74 
Àn
;

77 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf)-1);

78 i‡(
Àn
 < 0 && (
î∫o
==
EINTR
 ||Éºno==
EAGAIN
)) {

83 
buf
[
Àn
] = 0;

84 
buf
[
	`°æí
(
HOSTSTRING
)] = 0;

86 i‡(
	`°rcmp
(
buf
, 
HOSTSTRING
)) {

87 
	`îrx
(1, "%s: NŸá Sy°em/161 disk image", 
∑th
);

91 
	}
}

93 
uöt32_t


94 
	$diskblocksize
()

96 
	`as£π
(
fd
>=0);

97  
BLOCKSIZE
;

98 
	}
}

100 
uöt32_t


101 
	$diskblocks
()

103 
	`as£π
(
fd
>=0);

104  
nblocks
;

105 
	}
}

108 
	$diskwrôe
(c⁄° *
d©a
, 
uöt32_t
 
block
)

110 c⁄° *
cd©a
 = 
d©a
;

111 
uöt32_t
 
tŸ
=0;

112 
Àn
;

114 
	`as£π
(
fd
>=0);

116 #ifde‡
HOST


118 
block
++;

121 i‡(
	`l£ek
(
fd
, 
block
*
BLOCKSIZE
, 
SEEK_SET
)<0) {

122 
	`îr
(1, "lseek");

125 
tŸ
 < 
BLOCKSIZE
) {

126 
Àn
 = 
	`wrôe
(
fd
, 
cd©a
 + 
tŸ
, 
BLOCKSIZE
 -Åot);

127 i‡(
Àn
 < 0) {

128 i‡(
î∫o
==
EINTR
 ||Éºno==
EAGAIN
) {

131 
	`îr
(1, "write");

133 i‡(
Àn
==0) {

134 
	`îr
(1, "writeÑeturned 0?");

136 
tŸ
 +
Àn
;

138 
	}
}

141 
	$diskªad
(*
d©a
, 
uöt32_t
 
block
)

143 *
cd©a
 = 
d©a
;

144 
uöt32_t
 
tŸ
=0;

145 
Àn
;

147 
	`as£π
(
fd
>=0);

149 #ifde‡
HOST


151 
block
++;

154 i‡(
	`l£ek
(
fd
, 
block
*
BLOCKSIZE
, 
SEEK_SET
)<0) {

155 
	`îr
(1, "lseek");

158 
tŸ
 < 
BLOCKSIZE
) {

159 
Àn
 = 
	`ªad
(
fd
, 
cd©a
 + 
tŸ
, 
BLOCKSIZE
 -Åot);

160 i‡(
Àn
 < 0) {

161 i‡(
î∫o
==
EINTR
 ||Éºno==
EAGAIN
) {

164 
	`îr
(1, "read");

166 i‡(
Àn
==0) {

167 
	`îr
(1, "unexpected EOF in mid-sector");

169 
tŸ
 +
Àn
;

171 
	}
}

174 
	$˛o£disk
()

176 
	`as£π
(
fd
>=0);

177 i‡(
	`˛o£
(
fd
)) {

178 
	`îr
(1, "close");

180 
fd
 = -1;

181 
	}
}

	@os161/user/sbin/mksfs/disk.h

30 
›ídisk
(c⁄° *
∑th
);

32 
uöt32_t
 
diskblocksize
();

33 
uöt32_t
 
diskblocks
();

35 
diskwrôe
(c⁄° *
d©a
, 
uöt32_t
 
block
);

36 
diskªad
(*
d©a
, 
uöt32_t
 
block
);

38 
˛o£disk
();

	@os161/user/sbin/mksfs/mksfs.c

30 
	~<sys/ty≥s.h
>

31 
	~<°döt.h
>

32 
	~<°rög.h
>

33 
	~<as£π.h
>

34 
	~<limôs.h
>

35 
	~<îr.h
>

37 
	~"suµ‹t.h
"

38 
	~"kîn/sfs.h
"

41 #ifde‡
HOST


43 
	~<√töë/ö.h
>

44 
	~<¨∑/öë.h
>

45 
	~"ho°com∑t.h
"

46 
	#SWAPL
(
x
Ë
	`¡ohl
(x)

	)

47 
	#SWAPS
(
x
Ë
	`¡ohs
(x)

	)

51 
	#SWAPL
(
x
Ë(x)

	)

52 
	#SWAPS
(
x
Ë(x)

	)

56 
	~"disk.h
"

58 
	#MAXBITBLOCKS
 32

	)

62 
	$check
()

64 
	`as£π
((
sfs_su≥r
)==
SFS_BLOCKSIZE
);

65 
	`as£π
((
sfs_öode
)==
SFS_BLOCKSIZE
);

66 
	`as£π
(
SFS_BLOCKSIZE
 % (
sfs_dú
) == 0);

67 
	}
}

71 
	$wrôesu≥r
(c⁄° *
vﬁ«me
, 
uöt32_t
 
nblocks
)

73 
sfs_su≥r
 
•
;

75 
	`bzîo
((*)&
•
, (sp));

77 i‡(
	`°æí
(
vﬁ«me
Ë>
SFS_VOLNAME_SIZE
) {

78 
	`îrx
(1, "Vﬁumê«mê%†toÿl⁄g", 
vﬁ«me
);

81 
•
.
•_magic
 = 
	`SWAPL
(
SFS_MAGIC
);

82 
•
.
•_nblocks
 = 
	`SWAPL
(
nblocks
);

83 
	`°r˝y
(
•
.
•_vﬁ«me
, 
vﬁ«me
);

85 
	`diskwrôe
(&
•
, 
SFS_SB_LOCATION
);

86 
	}
}

90 
	$wrôîoŸdú
()

92 
sfs_öode
 
sfi
;

94 
	`bzîo
((*)&
sfi
, (sfi));

96 
sfi
.
sfi_size
 = 
	`SWAPL
(0);

97 
sfi
.
sfi_ty≥
 = 
	`SWAPS
(
SFS_TYPE_DIR
);

98 
sfi
.
sfi_lökcou¡
 = 
	`SWAPS
(1);

100 
	`diskwrôe
(&
sfi
, 
SFS_ROOT_LOCATION
);

101 
	}
}

103 
	gbôbuf
[
MAXBITBLOCKS
*
SFS_BLOCKSIZE
];

107 
	$dﬂŒocbô
(
uöt32_t
 
bô
)

109 
uöt32_t
 
byã
 = 
bô
/
CHAR_BIT
;

110 
mask
 = (1<<(
bô
 % 
CHAR_BIT
));

112 
	`as£π
((
bôbuf
[
byã
] & 
mask
) == 0);

113 
bôbuf
[
byã
] |
mask
;

114 
	}
}

118 
	$wrôebôm≠
(
uöt32_t
 
fsblocks
)

121 
uöt32_t
 
nbôs
 = 
	`SFS_BITMAPSIZE
(
fsblocks
);

122 
uöt32_t
 
nblocks
 = 
	`SFS_BITBLOCKS
(
fsblocks
);

123 *
±r
;

124 
uöt32_t
 
i
;

126 i‡(
nblocks
 > 
MAXBITBLOCKS
) {

127 
	`îrx
(1, "FilesystemÅooÜarge "

131 
	`dﬂŒocbô
(
SFS_SB_LOCATION
);

132 
	`dﬂŒocbô
(
SFS_ROOT_LOCATION
);

133 
i
=0; i<
nblocks
; i++) {

134 
	`dﬂŒocbô
(
SFS_MAP_LOCATION
+
i
);

136 
i
=
fsblocks
; i<
nbôs
; i++) {

137 
	`dﬂŒocbô
(
i
);

140 
i
=0; i<
nblocks
; i++) {

141 
±r
 = 
bôbuf
 + 
i
*
SFS_BLOCKSIZE
;

142 
	`diskwrôe
(
±r
, 
SFS_MAP_LOCATION
+
i
);

144 
	}
}

147 
	$maö
(
¨gc
, **
¨gv
)

149 
uöt32_t
 
size
, 
blocksize
;

150 *
vﬁ«me
, *
s
;

152 #ifde‡
HOST


153 
	`ho°com∑t_öô
(
¨gc
, 
¨gv
);

156 i‡(
¨gc
!=3) {

157 
	`îrx
(1, "Usage: mksfs device/diskfile volume-name");

160 
	`check
();

162 
vﬁ«me
 = 
¨gv
[2];

165 
s
 = 
	`°rchr
(
vﬁ«me
, ':');

166 i‡(
s
 !
NULL
) {

167 i‡(
	`°æí
(
s
)!=1) {

168 
	`îrx
(1, "IŒegÆ vﬁumê«mê%s", 
vﬁ«me
);

170 *
s
 = 0;

174 
s
 = 
	`°rchr
(
vﬁ«me
, '/');

175 i‡(
s
 !
NULL
) {

176 
	`îrx
(1, "IŒegÆ vﬁumê«mê%s", 
vﬁ«me
);

179 
	`›ídisk
(
¨gv
[1]);

180 
blocksize
 = 
	`diskblocksize
();

182 i‡(
blocksize
!=
SFS_BLOCKSIZE
) {

183 
	`îrx
(1, "Device has wrong blocksize %u (should be %u)\n",

184 
blocksize
, 
SFS_BLOCKSIZE
);

186 
size
 = 
	`diskblocks
();

188 
	`wrôesu≥r
(
vﬁ«me
, 
size
);

189 
	`wrôîoŸdú
();

190 
	`wrôebôm≠
(
size
);

192 
	`˛o£disk
();

195 
	}
}

	@os161/user/sbin/mksfs/support.c

	@os161/user/sbin/mksfs/support.h

31 #ifde‡
__osf__


33 
	#HAS_NO_SIZED_TYPES


	)

36 #i‡
deföed
(
__sun__
Ë&& deföed(
__svr4__
)

38 
	#HAS_NO_SIZED_TYPES


	)

46 #ifde‡
HAS_NO_SIZED_TYPES


48 #i‡
deföed
(
__Æpha__
Ë|| deföed(
__Æpha
)

50 
	tuöt32_t
;

51 
	tuöt16_t
;

52 
	tuöt8_t
;

54 #ñi‡
deföed
(
__•¨c__
)

56 
	tuöt32_t
;

57 
	tuöt16_t
;

58 
	tuöt8_t
;

	@os161/user/sbin/poweroff/poweroff.c

30 
	~<uni°d.h
>

40 
	$maö
()

42 
	`ªboŸ
(
RB_POWEROFF
);

44 
	}
}

	@os161/user/sbin/reboot/reboot.c

30 
	~<uni°d.h
>

40 
	$maö
()

42 
	`ªboŸ
(
RB_REBOOT
);

44 
	}
}

	@os161/user/sbin/sfsck/sfsck.c

30 
	~<sys/ty≥s.h
>

31 
	~<as£π.h
>

32 
	~<limôs.h
>

33 
	~<°döt.h
>

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 
	~<îr.h
>

39 
	~"suµ‹t.h
"

40 
	~"kîn/sfs.h
"

42 #ifde‡
HOST


43 
	~<√töë/ö.h
>

44 
	~<¨∑/öë.h
>

45 
	~"ho°com∑t.h
"

46 
	#SWAPL
(
x
Ë
	`¡ohl
(x)

	)

47 
	#SWAPS
(
x
Ë
	`¡ohs
(x)

	)

51 
	#SWAPL
(
x
Ë(x)

	)

52 
	#SWAPS
(
x
Ë(x)

	)

53 
	#NO_REALLOC


	)

54 
	#NO_QSORT


	)

58 
	~"disk.h
"

61 
	#EXIT_USAGE
 4

	)

62 
	#EXIT_FATAL
 3

	)

63 
	#EXIT_UNRECOV
 2

	)

64 
	#EXIT_RECOV
 1

	)

65 
	#EXIT_CLEAN
 0

	)

67 
	gbad√ss
=0;

71 
	$£tbad√ss
(
code
)

73 i‡(
bad√ss
 < 
code
) {

74 
bad√ss
 = 
code
;

76 
	}
}

82 
	$sw≠sb
(
sfs_su≥r
 *
•
)

84 
•
->
•_magic
 = 
	`SWAPL
(sp->sp_magic);

85 
•
->
•_nblocks
 = 
	`SWAPL
(sp->sp_nblocks);

86 
	}
}

90 
	$sw≠öode
(
sfs_öode
 *
sfi
)

92 
i
;

94 
sfi
->
sfi_size
 = 
	`SWAPL
(sfi->sfi_size);

95 
sfi
->
sfi_ty≥
 = 
	`SWAPS
(sfi->sfi_type);

96 
sfi
->
sfi_lökcou¡
 = 
	`SWAPS
(sfi->sfi_linkcount);

98 
i
=0; i<
SFS_NDIRECT
; i++) {

99 
sfi
->
sfi_dúe˘
[
i
] = 
	`SWAPL
(sfi->sfi_direct[i]);

102 #ifde‡
SFS_NIDIRECT


103 
i
=0; i<
SFS_NIDIRECT
; i++) {

104 
sfi
->
sfi_ödúe˘
[
i
] = 
	`SWAPL
(sfi->sfi_indirect[i]);

107 
sfi
->
sfi_ödúe˘
 = 
	`SWAPL
(sfi->sfi_indirect);

110 #ifde‡
SFS_NDIDIRECT


111 
i
=0; i<
SFS_NDIDIRECT
; i++) {

112 
sfi
->
sfi_dödúe˘
[
i
] = 
	`SWAPL
(sfi->sfi_dindirect[i]);

115 #ifde‡
HAS_DIDIRECT


116 
sfi
->
sfi_dödúe˘
 = 
	`SWAPL
(sfi->sfi_dindirect);

120 #ifde‡
SFS_NTIDIRECT


121 
i
=0; i<
SFS_NTIDIRECT
; i++) {

122 
sfi
->
sfi_tödúe˘
[
i
] = 
	`SWAPL
(sfi->sfi_tindirect[i]);

125 #ifde‡
HAS_TIDIRECT


126 
sfi
->
sfi_tödúe˘
 = 
	`SWAPL
(sfi->sfi_tindirect);

129 
	}
}

133 
	$sw≠dú
(
sfs_dú
 *
sfd
)

135 
sfd
->
sfd_öo
 = 
	`SWAPL
(sfd->sfd_ino);

136 
	}
}

140 
	$sw≠ödú
(
uöt32_t
 *
íåõs
)

142 
i
;

143 
i
=0; i<
SFS_DBPERIDB
; i++) {

144 
íåõs
[
i
] = 
	`SWAPL
(entries[i]);

146 
	}
}

150 
	$sw≠bôs
(
uöt8_t
 *
bôs
)

153 ()
bôs
;

154 
	}
}

160 
	$domÆloc
(
size_t
 
Àn
)

162 *
x
;

163 
x
 = 
	`mÆloc
(
Àn
);

164 i‡(
x
==
NULL
) {

165 
	`îrx
(
EXIT_FATAL
, "Out of memory");

167  
x
;

168 
	}
}

173 
	mB_SUPERBLOCK
,

174 
	mB_BITBLOCK
,

175 
	mB_INODE
,

176 
	mB_IBLOCK
,

177 
	mB_DIRDATA
,

178 
	mB_DATA
,

179 
	mB_TOFREE
,

180 
	mB_PASTEND
,

181 } 
	tblockußge_t
;

183 
uöt32_t
 
	gnblocks
, 
	gbôblocks
;

184 
uöt32_t
 
	guniquecou¡î
 = 1;

186 
	gcou¡_blocks
=0, 
	gcou¡_dús
=0, 
	gcou¡_fûes
=0;

190 
uöt8_t
 *
	gbôm≠d©a
;

191 
uöt8_t
 *
	gto‰ìd©a
;

195 
	$bôm≠_öô
(
uöt32_t
 
bôblocks
)

197 
size_t
 
i
, 
m≠size
 = 
bôblocks
 * 
SFS_BLOCKSIZE
;

198 
bôm≠d©a
 = 
	`domÆloc
(
m≠size
 * (
uöt8_t
));

199 
to‰ìd©a
 = 
	`domÆloc
(
m≠size
 * (
uöt8_t
));

200 
i
=0; i<
m≠size
; i++) {

201 
bôm≠d©a
[
i
] = 
to‰ìd©a
[i] = 0;

203 
	}
}

207 
	$blockußge°r
(
blockußge_t
 
how
, 
uöt32_t
 
howdesc
)

209 
rv
[256];

210 
how
) {

211 
B_SUPERBLOCK
:  "superblock";

212 
B_BITBLOCK
:  "bitmap block";

213 
B_INODE
:  "inode";

214 
B_IBLOCK
:

215 
	`¢¥ötf
(
rv
, (rv), "indirect block of inode %lu",

216 (Ë
howdesc
);

218 
B_DIRDATA
:

219 
	`¢¥ötf
(
rv
, (rv), "directory data from inode %lu",

220 (Ë
howdesc
);

222 
B_DATA
:

223 
	`¢¥ötf
(
rv
, (rv), "file data from inode %lu",

224 (Ë
howdesc
);

226 
B_TOFREE
:

227 
	`as£π
(0);

229 
B_PASTEND
:

232  
rv
;

233 
	}
}

237 
	$bôm≠_m¨k
(
uöt32_t
 
block
, 
blockußge_t
 
how
, uöt32_à
howdesc
)

239 
ödex
 = 
block
/8;

240 
uöt8_t
 
mask
 = ((uöt8_t)1)<<(
block
%8);

242 i‡(
how
 =
B_TOFREE
) {

243 i‡(
to‰ìd©a
[
ödex
] & 
mask
) {

247 i‡(
bôm≠d©a
[
ödex
] & 
mask
) {

251 
to‰ìd©a
[
ödex
] |
mask
;

255 i‡(
to‰ìd©a
[
ödex
] & 
mask
) {

257 
to‰ìd©a
[
ödex
] &~
mask
;

260 i‡(
bôm≠d©a
[
ödex
] & 
mask
) {

261 
	`w¨nx
("Block %lu (usedás %s)álready in use! (NOT FIXED)",

262 (Ë
block
, 
	`blockußge°r
(
how
, 
howdesc
));

263 
	`£tbad√ss
(
EXIT_UNRECOV
);

266 
bôm≠d©a
[
ödex
] |
mask
;

268 i‡(
how
 !
B_PASTEND
) {

269 
cou¡_blocks
++;

271 
	}
}

275 
	$cou¡bôs
(
uöt8_t
 
vÆ
)

277 
uöt8_t
 
x
;

278 
˘
=0;

280 
x
=1; x; x<<=1) {

281 i‡(
vÆ
 & 
x
Ë
˘
++;

283  
˘
;

284 
	}
}

288 
	$ªp‹tbôs
(
uöt32_t
 
bôblock
, uöt32_à
byã
, 
uöt8_t
 
vÆ
, c⁄° *
wh©
)

290 
uöt8_t
 
x
, 
y
;

291 
uöt32_t
 
blocknum
;

293 
x
=1, 
y
=0; x; x<<=1, y++) {

294 i‡(
vÆ
 & 
x
) {

295 
blocknum
 = 
bôblock
*
SFS_BLOCKBITS
 + 
byã
*
CHAR_BIT
 + 
y
;

296 
	`w¨nx
("Block %luÉrroneously shown %s in bitmap",

297 (Ë
blocknum
, 
wh©
);

300 
	}
}

304 
	$check_bôm≠
()

306 
uöt8_t
 
bôs
[
SFS_BLOCKSIZE
], *
found
, *
to‰ì
, 
tmp
;

307 
uöt32_t
 
Æloccou¡
=0, 
‰ìcou¡
=0, 
i
, 
j
;

308 
bch™ged
;

310 
i
=0; i<
bôblocks
; i++) {

311 
	`diskªad
(
bôs
, 
SFS_MAP_LOCATION
+
i
);

312 
	`sw≠bôs
(
bôs
);

313 
found
 = 
bôm≠d©a
 + 
i
*
SFS_BLOCKSIZE
;

314 
to‰ì
 = 
to‰ìd©a
 + 
i
*
SFS_BLOCKSIZE
;

315 
bch™ged
 = 0;

317 
j
=0; j<
SFS_BLOCKSIZE
; j++) {

319 
	`as£π
((
found
[
j
] & 
to‰ì
[j])==0);

321 i‡(
bôs
[
j
]==
found
[j]) {

325 i‡(
bôs
[
j
]==(
found
[j] | 
to‰ì
[j])) {

326 
bôs
[
j
] = 
found
[j];

327 
bch™ged
 = 1;

332 
bôs
[
j
] &~
to‰ì
[j];

335 i‡((
bôs
[
j
] & 
found
[j]) != found[j]) {

336 
tmp
 = 
found
[
j
] & ~
bôs
[j];

337 
Æloccou¡
 +
	`cou¡bôs
(
tmp
);

338 i‡(
tmp
 != 0) {

339 
	`ªp‹tbôs
(
i
, 
j
, 
tmp
, "free");

344 i‡((
bôs
[
j
] & 
found
[j]) != bits[j]) {

345 
tmp
 = 
bôs
[
j
] & ~
found
[j];

346 
‰ìcou¡
 +
	`cou¡bôs
(
tmp
);

347 i‡(
tmp
 != 0) {

348 
	`ªp‹tbôs
(
i
, 
j
, 
tmp
, "allocated");

352 
bôs
[
j
] = 
found
[j];

353 
bch™ged
 = 1;

356 i‡(
bch™ged
) {

357 
	`sw≠bôs
(
bôs
);

358 
	`diskwrôe
(
bôs
, 
SFS_MAP_LOCATION
+
i
);

362 i‡(
Æloccou¡
 > 0) {

363 
	`w¨nx
("%lu blocksÉrroneously shown free in bitmap (fixed)",

364 (Ë
Æloccou¡
);

365 
	`£tbad√ss
(
EXIT_RECOV
);

367 i‡(
‰ìcou¡
 > 0) {

368 
	`w¨nx
("%lu blocksÉrroneously shown used in bitmap (fixed)",

369 (Ë
‰ìcou¡
);

370 
	`£tbad√ss
(
EXIT_RECOV
);

372 
	}
}

376 
	söodemem‹y
 {

377 
uöt32_t
 
	möo
;

378 
uöt32_t
 
	mlökcou¡
;

381 
öodemem‹y
 *
	göodes
 = 
NULL
;

382 
	gnöodes
=0, 
	gmaxöodes
=0;

386 
	$addmem‹y
(
uöt32_t
 
öo
, uöt32_à
lökcou¡
)

388 
	`as£π
(
nöodes
 <
maxöodes
);

389 i‡(
nöodes
 =
maxöodes
) {

390 #ifde‡
NO_REALLOC


391 
√wmax
 = (
maxöodes
+1)*2;

392 *
p
 = 
	`domÆloc
(
√wmax
 * (
öodemem‹y
));

393 i‡(
öodes
) {

394 
	`mem˝y
(
p
, 
öodes
, 
nöodes
);

395 
	`‰ì
(
öodes
);

397 
öodes
 = 
p
;

399 
maxöodes
 = (maxinodes+1)*2;

400 
öodes
 = 
	`ªÆloc
(öodes, 
maxöodes
 * (
uöt32_t
));

401 i‡(
öodes
==
NULL
) {

402 
	`îrx
(
EXIT_FATAL
, "Out of memory");

406 
öodes
[
nöodes
].
öo
 = ino;

407 
öodes
[
nöodes
].
lökcou¡
 =Üinkcount;

408 
	}
}

413 
	$ªmembî_dú
(
uöt32_t
 
öo
, c⁄° *
∑thsoÁr
)

415 
i
;

418 ()
∑thsoÁr
;

420 
i
=0; i<
nöodes
; i++) {

421 i‡(
öodes
[
i
].
öo
==ino) {

422 
	`as£π
(
öodes
[
i
].
lökcou¡
==0);

427 
	`addmem‹y
(
öo
, 0);

430 
	}
}

434 
	$ob£rve_fûñök
(
uöt32_t
 
öo
)

436 
i
;

437 
i
=0; i<
nöodes
; i++) {

438 i‡(
öodes
[
i
].
öo
==ino) {

439 
	`as£π
(
öodes
[
i
].
lökcou¡
>0);

440 
öodes
[
i
].
lökcou¡
++;

444 
	`bôm≠_m¨k
(
öo
, 
B_INODE
, ino);

445 
	`addmem‹y
(
öo
, 1);

446 
	}
}

450 
	$adju°_fûñöks
()

452 
sfs_öode
 
sfi
;

453 
i
;

455 
i
=0; i<
nöodes
; i++) {

456 i‡(
öodes
[
i
].
lökcou¡
==0) {

460 
	`diskªad
(&
sfi
, 
öodes
[
i
].
öo
);

461 
	`sw≠öode
(&
sfi
);

462 
	`as£π
(
sfi
.
sfi_ty≥
 =
SFS_TYPE_FILE
);

463 i‡(
sfi
.
sfi_lökcou¡
 !
öodes
[
i
].
lökcou¡
) {

464 
	`w¨nx
("File %luÜink count %lu should be %lu (fixed)",

465 (Ë
öodes
[
i
].
öo
,

466 (Ë
sfi
.
sfi_lökcou¡
,

467 (Ë
öodes
[
i
].
lökcou¡
);

468 
sfi
.
sfi_lökcou¡
 = 
öodes
[
i
].
lökcou¡
;

469 
	`£tbad√ss
(
EXIT_RECOV
);

470 
	`sw≠öode
(&
sfi
);

471 
	`diskwrôe
(&
sfi
, 
öodes
[
i
].
öo
);

473 
cou¡_fûes
++;

475 
	}
}

481 
	$checknuŒ°rög
(*
buf
, 
size_t
 
maxÀn
)

483 
size_t
 
i
;

484 
i
=0; i<
maxÀn
; i++) {

485 i‡(
buf
[
i
]==0) {

489 
buf
[
maxÀn
-1] = 0;

491 
	}
}

495 
	$checkbad°rög
(*
buf
)

497 
size_t
 
i
;

498 
rv
=0;

500 
i
=0; 
buf
[i]; i++) {

501 i‡(
buf
[
i
]==':' || buf[i]=='/') {

502 
buf
[
i
] = '_';

503 
rv
 = 1;

506  
rv
;

507 
	}
}

513 
	$check_sb
()

515 
sfs_su≥r
 
•
;

516 
uöt32_t
 
i
;

517 
sch™ged
=0;

519 
	`diskªad
(&
•
, 
SFS_SB_LOCATION
);

520 
	`sw≠sb
(&
•
);

521 i‡(
•
.
•_magic
 !
SFS_MAGIC
) {

522 
	`îrx
(
EXIT_UNRECOV
, "Notán sfs filesystem");

525 
	`as£π
(
nblocks
==0);

526 
	`as£π
(
bôblocks
==0);

527 
nblocks
 = 
•
.
•_nblocks
;

528 
bôblocks
 = 
	`SFS_BITBLOCKS
(
nblocks
);

529 
	`as£π
(
nblocks
>0);

530 
	`as£π
(
bôblocks
>0);

532 
	`bôm≠_öô
(
bôblocks
);

533 
i
=
nblocks
; i<
bôblocks
*
SFS_BLOCKBITS
; i++) {

534 
	`bôm≠_m¨k
(
i
, 
B_PASTEND
, 0);

537 i‡(
	`checknuŒ°rög
(
•
.
•_vﬁ«me
, (sp.sp_volname))) {

538 
	`w¨nx
("VolumeÇameÇotÇull-terminated (fixed)");

539 
	`£tbad√ss
(
EXIT_RECOV
);

540 
sch™ged
 = 1;

542 i‡(
	`checkbad°rög
(
•
.
•_vﬁ«me
)) {

543 
	`w¨nx
("VolumeÇame contains illegal characters (fixed)");

544 
	`£tbad√ss
(
EXIT_RECOV
);

545 
sch™ged
 = 1;

548 i‡(
sch™ged
) {

549 
	`sw≠sb
(&
•
);

550 
	`diskwrôe
(&
•
, 
SFS_SB_LOCATION
);

553 
	`bôm≠_m¨k
(
SFS_SB_LOCATION
, 
B_SUPERBLOCK
, 0);

554 
i
=0; i<
bôblocks
; i++) {

555 
	`bôm≠_m¨k
(
SFS_MAP_LOCATION
+
i
, 
B_BITBLOCK
, i);

557 
	}
}

563 
	$check_ödúe˘_block
(
uöt32_t
 
öo
, uöt32_à*
õ¡ry
, uöt32_à*
blockp
,

564 
uöt32_t
 
nblocks
, uöt32_à*
badcou¡p
,

565 
isdú
, 
ödúe˘i⁄
)

567 
uöt32_t
 
íåõs
[
SFS_DBPERIDB
];

568 
uöt32_t
 
i
, 
˘
;

570 i‡(*
õ¡ry
 !=0) {

571 
	`diskªad
(
íåõs
, *
õ¡ry
);

572 
	`sw≠ödú
(
íåõs
);

573 
	`bôm≠_m¨k
(*
õ¡ry
, 
B_IBLOCK
, 
öo
);

576 
i
=0; i<
SFS_DBPERIDB
; i++) {

577 
íåõs
[
i
] = 0;

581 i‡(
ödúe˘i⁄
 > 1) {

582 
i
=0; i<
SFS_DBPERIDB
; i++) {

583 
	`check_ödúe˘_block
(
öo
, &
íåõs
[
i
],

584 
blockp
, 
nblocks
,

585 
badcou¡p
,

586 
isdú
,

587 
ödúe˘i⁄
-1);

591 
	`as£π
(
ödúe˘i⁄
==1);

593 
i
=0; i<
SFS_DBPERIDB
; i++) {

594 i‡(*
blockp
 < 
nblocks
) {

595 i‡(
íåõs
[
i
] != 0) {

596 
	`bôm≠_m¨k
(
íåõs
[
i
],

597 
isdú
 ? 
B_DIRDATA
 : 
B_DATA
,

598 
öo
);

602 i‡(
íåõs
[
i
] != 0) {

603 (*
badcou¡p
)++;

604 
	`bôm≠_m¨k
(
íåõs
[
i
],

605 
isdú
 ? 
B_DIRDATA
 : 
B_DATA
,

606 
öo
);

607 
íåõs
[
i
] = 0;

610 (*
blockp
)++;

614 
˘
=0;

615 
i
=
˘
=0; i<
SFS_DBPERIDB
; i++) {

616 i‡(
íåõs
[
i
]!=0Ë
˘
++;

618 i‡(
˘
==0) {

619 i‡(*
õ¡ry
 != 0) {

620 (*
badcou¡p
)++;

621 
	`bôm≠_m¨k
(*
õ¡ry
, 
B_TOFREE
, 0);

622 *
õ¡ry
 = 0;

626 
	`as£π
(*
õ¡ry
 != 0);

627 i‡(*
badcou¡p
 > 0) {

628 
	`sw≠ödú
(
íåõs
);

629 
	`diskwrôe
(
íåõs
, *
õ¡ry
);

632 
	}
}

637 
	$check_öode_blocks
(
uöt32_t
 
öo
, 
sfs_öode
 *
sfi
, 
isdú
)

639 
uöt32_t
 
size
, 
block
, 
nblocks
, 
badcou¡
;

641 
badcou¡
 = 0;

643 
size
 = 
	`SFS_ROUNDUP
(
sfi
->
sfi_size
, 
SFS_BLOCKSIZE
);

644 
nblocks
 = 
size
/
SFS_BLOCKSIZE
;

646 
block
=0; block<
SFS_NDIRECT
; block++) {

647 i‡(
block
 < 
nblocks
) {

648 i‡(
sfi
->
sfi_dúe˘
[
block
] != 0) {

649 
	`bôm≠_m¨k
(
sfi
->
sfi_dúe˘
[
block
],

650 
isdú
 ? 
B_DIRDATA
 : 
B_DATA
, 
öo
);

654 i‡(
sfi
->
sfi_dúe˘
[
block
] != 0) {

655 
badcou¡
++;

656 
	`bôm≠_m¨k
(
sfi
->
sfi_dúe˘
[
block
],

657 
B_TOFREE
, 0);

662 #ifde‡
SFS_NIDIRECT


663 
i
=0; i<
SFS_NIDIRECT
; i++) {

664 
	`check_ödúe˘_block
(
öo
, &
sfi
->
sfi_ödúe˘
[
i
],

665 &
block
, 
nblocks
, &
badcou¡
, 
isdú
, 1);

668 
	`check_ödúe˘_block
(
öo
, &
sfi
->
sfi_ödúe˘
,

669 &
block
, 
nblocks
, &
badcou¡
, 
isdú
, 1);

672 #ifde‡
SFS_NDIDIRECT


673 
i
=0; i<
SFS_NDIDIRECT
; i++) {

674 
	`check_ödúe˘_block
(
öo
, &
sfi
->
sfi_dödúe˘
[
i
],

675 &
block
, 
nblocks
, &
badcou¡
, 
isdú
, 2);

678 #ifde‡
HAS_DIDIRECT


679 
	`check_ödúe˘_block
(
öo
, &
sfi
->
sfi_dödúe˘
,

680 &
block
, 
nblocks
, &
badcou¡
, 
isdú
, 2);

684 #ifde‡
SFS_NTIDIRECT


685 
i
=0; i<
SFS_NTIDIRECT
; i++) {

686 
	`check_ödúe˘_block
(
öo
, &
sfi
->
sfi_tödúe˘
[
i
],

687 &
block
, 
nblocks
, &
badcou¡
, 
isdú
, 3);

690 #ifde‡
HAS_TIDIRECT


691 
	`check_ödúe˘_block
(
öo
, &
sfi
->
sfi_tödúe˘
,

692 &
block
, 
nblocks
, &
badcou¡
, 
isdú
, 3);

696 i‡(
badcou¡
 > 0) {

697 
	`w¨nx
("Inode %lu: %lu blocksáfter EOF (freed)",

698 (Ë
öo
, (Ë
badcou¡
);

699 
	`£tbad√ss
(
EXIT_RECOV
);

704 
	}
}

709 
uöt32_t


710 
	$ibm≠
(
uöt32_t
 
iblock
, uöt32_à
off£t
, uöt32_à
íåysize
)

712 
uöt32_t
 
íåõs
[
SFS_DBPERIDB
];

714 i‡(
iblock
 == 0) {

718 
	`diskªad
(
íåõs
, 
iblock
);

719 
	`sw≠ödú
(
íåõs
);

721 i‡(
íåysize
 > 1) {

722 
uöt32_t
 
ödex
 = 
off£t
 / 
íåysize
;

723 
off£t
 %
íåysize
;

724  
	`ibm≠
(
íåõs
[
ödex
], 
off£t
, 
íåysize
/
SFS_DBPERIDB
);

727 
	`as£π
(
off£t
 < 
SFS_DBPERIDB
);

728  
íåõs
[
off£t
];

730 
	}
}

732 
	#BMAP_ND
 
SFS_NDIRECT


	)

733 
	#BMAP_D
(
sfi
, 
x
Ë((sfi)->
sfi_dúe˘
[(x)])

	)

735 #ifde‡
SFS_NIDIRECT


736 
	#BMAP_NI
 
SFS_NIDIRECT


	)

737 
	#BMAP_I
(
sfi
, 
x
Ë((sfi)->
sfi_ödúe˘
[(x)])

	)

739 
	#BMAP_NI
 1

	)

740 
	#BMAP_I
(
sfi
, 
x
Ë(()(x), (sfi)->
sfi_ödúe˘
)

	)

743 #ifde‡
SFS_NDIDIRECT


744 
	#BMAP_NII
 
SFS_NDIDIRECT


	)

745 
	#BMAP_II
(
sfi
, 
x
Ë((sfi)->
sfi_dödúe˘
[(x)])

	)

747 #ifde‡
HAS_DIDIRECT


748 
	#BMAP_NII
 1

	)

749 
	#BMAP_II
(
sfi
, 
x
Ë(()(x), (sfi)->
sfi_dödúe˘
)

	)

751 
	#BMAP_NII
 0

	)

752 
	#BMAP_II
(
sfi
, 
x
Ë(()(x), ()(sfi), 0)

	)

756 #ifde‡
SFS_NTIDIRECT


757 
	#BMAP_NIII
 
SFS_NTIDIRECT


	)

758 
	#BMAP_III
(
sfi
, 
x
Ë((sfi)->
sfi_tödúe˘
[(x)])

	)

760 #ifde‡
HAS_TIDIRECT


761 
	#BMAP_NIII
 1

	)

762 
	#BMAP_III
(
sfi
, 
x
Ë(()(x), (sfi)->
sfi_tödúe˘
)

	)

764 
	#BMAP_NIII
 0

	)

765 
	#BMAP_III
(
sfi
, 
x
Ë(()(x), ()(sfi), 0)

	)

769 
	#BMAP_DMAX
 
BMAP_ND


	)

770 
	#BMAP_IMAX
 (
BMAP_DMAX
+
SFS_DBPERIDB
*
BMAP_NI
)

	)

771 
	#BMAP_IIMAX
 (
BMAP_IMAX
+
SFS_DBPERIDB
*
BMAP_NII
)

	)

772 
	#BMAP_IIIMAX
 (
BMAP_IIMAX
+
SFS_DBPERIDB
*
BMAP_NIII
)

	)

774 
	#BMAP_DSIZE
 1

	)

775 
	#BMAP_ISIZE
 (
BMAP_DSIZE
*
SFS_DBPERIDB
)

	)

776 
	#BMAP_IISIZE
 (
BMAP_ISIZE
*
SFS_DBPERIDB
)

	)

777 
	#BMAP_IIISIZE
 (
BMAP_IISIZE
*
SFS_DBPERIDB
)

	)

780 
uöt32_t


781 
	$dobm≠
(c⁄° 
sfs_öode
 *
sfi
, 
uöt32_t
 
fûeblock
)

783 
uöt32_t
 
iblock
, 
off£t
;

785 i‡(
fûeblock
 < 
BMAP_DMAX
) {

786  
	`BMAP_D
(
sfi
, 
fûeblock
);

788 i‡(
fûeblock
 < 
BMAP_IMAX
) {

789 
iblock
 = (
fûeblock
 - 
BMAP_DMAX
)/
BMAP_ISIZE
;

790 
off£t
 = (
fûeblock
 - 
BMAP_DMAX
)%
BMAP_ISIZE
;

791  
	`ibm≠
(
	`BMAP_I
(
sfi
, 
iblock
), 
off£t
, 
BMAP_DSIZE
);

793 i‡(
fûeblock
 < 
BMAP_IIMAX
) {

794 
iblock
 = (
fûeblock
 - 
BMAP_IMAX
)/
BMAP_IISIZE
;

795 
off£t
 = (
fûeblock
 - 
BMAP_IMAX
)%
BMAP_IISIZE
;

796  
	`ibm≠
(
	`BMAP_II
(
sfi
, 
iblock
), 
off£t
, 
BMAP_ISIZE
);

798 i‡(
fûeblock
 < 
BMAP_IIIMAX
) {

799 
iblock
 = (
fûeblock
 - 
BMAP_IIMAX
)/
BMAP_IIISIZE
;

800 
off£t
 = (
fûeblock
 - 
BMAP_IIMAX
)%
BMAP_IIISIZE
;

801  
	`ibm≠
(
	`BMAP_III
(
sfi
, 
iblock
), 
off£t
, 
BMAP_IISIZE
);

804 
	}
}

808 
	$dúªad
(
sfs_öode
 *
sfi
, 
sfs_dú
 *
d
, 
nd
)

810 c⁄° 
©⁄˚
 = 
SFS_BLOCKSIZE
/(
sfs_dú
);

811 
nblocks
 = 
	`SFS_ROUNDUP
(
nd
, 
©⁄˚
) /átonce;

812 
i
, 
j
;

814 
i
=0; i<
nblocks
; i++) {

815 
uöt32_t
 
block
 = 
	`dobm≠
(
sfi
, 
i
);

816 i‡(
block
!=0) {

817 
	`diskªad
(
d
 + 
i
*
©⁄˚
, 
block
);

818 
j
=0; j<
©⁄˚
; j++) {

819 
	`sw≠dú
(&
d
[
i
*
©⁄˚
+
j
]);

823 
	`w¨nx
("Warning: sparse directory found");

824 
	`bzîo
(
d
 + 
i
*
©⁄˚
, 
SFS_BLOCKSIZE
);

827 
	}
}

831 
	$dúwrôe
(c⁄° 
sfs_öode
 *
sfi
, 
sfs_dú
 *
d
, 
nd
)

833 c⁄° 
©⁄˚
 = 
SFS_BLOCKSIZE
/(
sfs_dú
);

834 
nblocks
 = 
	`SFS_ROUNDUP
(
nd
, 
©⁄˚
) /átonce;

835 
i
, 
j
, 
bad
;

837 
i
=0; i<
nblocks
; i++) {

838 
uöt32_t
 
block
 = 
	`dobm≠
(
sfi
, 
i
);

839 i‡(
block
!=0) {

840 
j
=0; j<
©⁄˚
; j++) {

841 
	`sw≠dú
(&
d
[
i
*
©⁄˚
+
j
]);

843 
	`diskwrôe
(
d
 + 
i
*
©⁄˚
, 
block
);

846 
j
=
bad
=0; j<
©⁄˚
; j++) {

847 i‡(
d
[
i
*
©⁄˚
+
j
].
sfd_öo
 !
SFS_NOINO
 ||

848 
d
[
i
*
©⁄˚
+
j
].
sfd_«me
[0] != 0) {

849 
bad
 = 1;

852 i‡(
bad
) {

853 
	`w¨nx
("Cannot writeÅo missing block in "

855 
	`£tbad√ss
(
EXIT_UNRECOV
);

859 
	}
}

863 
sfs_dú
 *
	gglobÆ_s‹tdús
;

866 
	$dús‹tfunc
(c⁄° *
Ø
, c⁄° *
bb
)

868 c⁄° *
a
 = (c⁄° *)
Ø
;

869 c⁄° *
b
 = (c⁄° *)
bb
;

870 c⁄° 
sfs_dú
 *
ad
 = &
globÆ_s‹tdús
[*
a
];

871 c⁄° 
sfs_dú
 *
bd
 = &
globÆ_s‹tdús
[*
b
];

872  
	`°rcmp
(
ad
->
sfd_«me
, 
bd
->sfd_name);

873 
	}
}

875 #ifde‡
NO_QSORT


878 
qs‹t
(*
d©a
, 
num
, 
size_t
 
size
, (*
f
)(const *, const *))

880 
i
, 
j
;

881 ()
size
;

884 
i
=0; i<
num
-1; i++) {

885 
j
=
i
+1; j<
num
; j++) {

886 i‡(
	`f
(&
d©a
[
i
], &d©a[
j
]) < 0) {

887 
tmp
 = 
d©a
[
i
];

888 
d©a
[
i
] = d©a[
j
];

889 
d©a
[
j
] = 
tmp
;

893 
	}
}

898 
	$s‹tdú
(*
ve˘‹
, 
sfs_dú
 *
d
, 
nd
)

900 
globÆ_s‹tdús
 = 
d
;

901 
	`qs‹t
(
ve˘‹
, 
nd
, (), 
dús‹tfunc
);

902 
	}
}

907 
	$dú_åyadd
(
sfs_dú
 *
d
, 
nd
, c⁄° *
«me
, 
uöt32_t
 
öo
)

909 
i
;

910 
i
=0; i<
nd
; i++) {

911 i‡(
d
[
i
].
sfd_öo
==
SFS_NOINO
) {

912 
d
[
i
].
sfd_öo
 = 
öo
;

913 
	`as£π
(
	`°æí
(
«me
Ë< (
d
[
i
].
sfd_«me
));

914 
	`°r˝y
(
d
[
i
].
sfd_«me
, 
«me
);

919 
	}
}

923 
	$check_dú_íåy
(c⁄° *
∑thsoÁr
, 
uöt32_t
 
ödex
, 
sfs_dú
 *
sfd
)

925 
dch™ged
 = 0;

927 i‡(
sfd
->
sfd_öo
 =
SFS_NOINO
) {

928 i‡(
sfd
->
sfd_«me
[0] != 0) {

929 
	`£tbad√ss
(
EXIT_RECOV
);

930 
	`w¨nx
("Directory /%sÉntry %lu hasÇame butÇo file",

931 
∑thsoÁr
, (Ë
ödex
);

932 
sfd
->
sfd_«me
[0] = 0;

933 
dch™ged
 = 1;

937 i‡(
sfd
->
sfd_«me
[0] == 0) {

938 
	`¢¥ötf
(
sfd
->
sfd_«me
, (sfd->sfd_name),

940 (Ë
sfd
->
sfd_öo
,

941 (Ë
uniquecou¡î
++);

942 
	`£tbad√ss
(
EXIT_RECOV
);

943 
	`w¨nx
("Directory /%sÉntry %lu has file but "

945 
∑thsoÁr
, (Ë
ödex
,

946 
sfd
->
sfd_«me
);

947 
dch™ged
 = 1;

949 i‡(
	`checknuŒ°rög
(
sfd
->
sfd_«me
, (sfd->sfd_name))) {

950 
	`£tbad√ss
(
EXIT_RECOV
);

951 
	`w¨nx
("Directory /%sÉntry %luÇot "

953 
∑thsoÁr
, (Ë
ödex
);

954 
dch™ged
 = 1;

956 i‡(
	`checkbad°rög
(
sfd
->
sfd_«me
)) {

957 
	`£tbad√ss
(
EXIT_RECOV
);

958 
	`w¨nx
("Directory /%sÉntry %lu contains invalid "

960 
∑thsoÁr
, (Ë
ödex
);

961 
dch™ged
 = 1;

964  
dch™ged
;

965 
	}
}

971 
	$check_dú
(
uöt32_t
 
öo
, uöt32_à
∑ª¡öo
, c⁄° *
∑thsoÁr
)

973 
sfs_öode
 
sfi
;

974 
sfs_dú
 *
dúíåõs
;

975 *
s‹tve˘‹
;

976 
uöt32_t
 
dúsize
, 
ndúíåõs
, 
maxdúíåõs
, 
subdúcou¡
, 
i
;

977 
ich™ged
=0, 
dch™ged
=0, 
dŸ£í
=0, 
dŸdŸ£í
=0;

979 
	`diskªad
(&
sfi
, 
öo
);

980 
	`sw≠öode
(&
sfi
);

982 i‡(
	`ªmembî_dú
(
öo
, 
∑thsoÁr
)) {

987 
	`bôm≠_m¨k
(
öo
, 
B_INODE
, ino);

988 
cou¡_dús
++;

990 i‡(
sfi
.
sfi_size
 % (
sfs_dú
) != 0) {

991 
	`£tbad√ss
(
EXIT_RECOV
);

992 
	`w¨nx
("Directory /%s has illegal size %lu (fixed)",

993 
∑thsoÁr
, (Ë
sfi
.
sfi_size
);

994 
sfi
.
sfi_size
 = 
	`SFS_ROUNDUP
(sfi.sfi_size,

995 (
sfs_dú
));

996 
ich™ged
 = 1;

999 i‡(
	`check_öode_blocks
(
öo
, &
sfi
, 1)) {

1000 
ich™ged
 = 1;

1003 
ndúíåõs
 = 
sfi
.
sfi_size
/(
sfs_dú
);

1004 
maxdúíåõs
 = 
	`SFS_ROUNDUP
(
ndúíåõs
,

1005 
SFS_BLOCKSIZE
/(
sfs_dú
));

1006 
dúsize
 = 
maxdúíåõs
 * (
sfs_dú
);

1007 
dúíåõs
 = 
	`domÆloc
(
dúsize
);

1008 
s‹tve˘‹
 = 
	`domÆloc
(
ndúíåõs
 * ());

1010 
	`dúªad
(&
sfi
, 
dúíåõs
, 
ndúíåõs
);

1011 
i
=
ndúíåõs
; i<
maxdúíåõs
; i++) {

1012 
dúíåõs
[
i
].
sfd_öo
 = 
SFS_NOINO
;

1013 
	`bzîo
(
dúíåõs
[
i
].
sfd_«me
, (direntries[i].sfd_name));

1016 
i
=0; i<
ndúíåõs
; i++) {

1017 i‡(
	`check_dú_íåy
(
∑thsoÁr
, 
i
, &
dúíåõs
[i])) {

1018 
dch™ged
 = 1;

1020 
s‹tve˘‹
[
i
] = i;

1023 
	`s‹tdú
(
s‹tve˘‹
, 
dúíåõs
, 
ndúíåõs
);

1026 
i
=0; i+1<
ndúíåõs
; i++) {

1027 
sfs_dú
 *
d1
 = &
dúíåõs
[
s‹tve˘‹
[
i
]];

1028 
sfs_dú
 *
d2
 = &
dúíåõs
[
s‹tve˘‹
[
i
+1]];

1029 
	`as£π
(
d1
 !
d2
);

1031 i‡(
d1
->
sfd_öo
 =
SFS_NOINO
) {

1035 i‡(!
	`°rcmp
(
d1
->
sfd_«me
, 
d2
->sfd_name)) {

1036 i‡(
d1
->
sfd_öo
 =
d2
->sfd_ino) {

1037 
	`£tbad√ss
(
EXIT_RECOV
);

1038 
	`w¨nx
("Directory /%s: DuplicateÉntries for "

1040 
∑thsoÁr
, 
d1
->
sfd_«me
);

1041 
d1
->
sfd_öo
 = 
SFS_NOINO
;

1042 
d1
->
sfd_«me
[0] = 0;

1045 
	`¢¥ötf
(
d1
->
sfd_«me
, (d1->sfd_name),

1047 (Ë
d1
->
sfd_öo
,

1048 (Ë
uniquecou¡î
++);

1049 
	`£tbad√ss
(
EXIT_RECOV
);

1050 
	`w¨nx
("Directory /%s: DuplicateÇames %s "

1052 
∑thsoÁr
, 
d2
->
sfd_«me
, 
d1
->sfd_name);

1054 
dch™ged
 = 1;

1058 
i
=0; i<
ndúíåõs
; i++) {

1059 i‡(!
	`°rcmp
(
dúíåõs
[
i
].
sfd_«me
, ".")) {

1060 i‡(
dúíåõs
[
i
].
sfd_öo
 !
öo
) {

1061 
	`£tbad√ss
(
EXIT_RECOV
);

1062 
	`w¨nx
("Directory /%s: Incorrect `.'Éntry "

1063 "(fixed)", 
∑thsoÁr
);

1064 
dúíåõs
[
i
].
sfd_öo
 = 
öo
;

1065 
dch™ged
 = 1;

1067 
	`as£π
(
dŸ£í
==0);

1068 
dŸ£í
 = 1;

1070 i‡(!
	`°rcmp
(
dúíåõs
[
i
].
sfd_«me
, "..")) {

1071 i‡(
dúíåõs
[
i
].
sfd_öo
 !
∑ª¡öo
) {

1072 
	`£tbad√ss
(
EXIT_RECOV
);

1073 
	`w¨nx
("Directory /%s: Incorrect `..'Éntry "

1074 "(fixed)", 
∑thsoÁr
);

1075 
dúíåõs
[
i
].
sfd_öo
 = 
∑ª¡öo
;

1076 
dch™ged
 = 1;

1078 
	`as£π
(
dŸdŸ£í
==0);

1079 
dŸdŸ£í
 = 1;

1083 i‡(!
dŸ£í
) {

1084 i‡(
	`dú_åyadd
(
dúíåõs
, 
ndúíåõs
, ".", 
öo
)==0) {

1085 
	`£tbad√ss
(
EXIT_RECOV
);

1086 
	`w¨nx
("Directory /%s: No `.'Éntry (added)",

1087 
∑thsoÁr
);

1088 
dch™ged
 = 1;

1090 i‡(
	`dú_åyadd
(
dúíåõs
, 
maxdúíåõs
, ".", 
öo
)==0) {

1091 
	`£tbad√ss
(
EXIT_RECOV
);

1092 
	`w¨nx
("Directory /%s: No `.'Éntry (added)",

1093 
∑thsoÁr
);

1094 
ndúíåõs
++;

1095 
dch™ged
 = 1;

1096 
sfi
.
sfi_size
 +(
sfs_dú
);

1097 
ich™ged
 = 1;

1100 
	`£tbad√ss
(
EXIT_UNRECOV
);

1101 
	`w¨nx
("Directory /%s: No `.'Éntry (NOT FIXED)",

1102 
∑thsoÁr
);

1106 i‡(!
dŸdŸ£í
) {

1107 i‡(
	`dú_åyadd
(
dúíåõs
, 
ndúíåõs
, "..", 
∑ª¡öo
)==0) {

1108 
	`£tbad√ss
(
EXIT_RECOV
);

1109 
	`w¨nx
("Directory /%s: No `..'Éntry (added)",

1110 
∑thsoÁr
);

1111 
dch™ged
 = 1;

1113 i‡(
	`dú_åyadd
(
dúíåõs
, 
maxdúíåõs
, "..",

1114 
∑ª¡öo
)==0) {

1115 
	`£tbad√ss
(
EXIT_RECOV
);

1116 
	`w¨nx
("Directory /%s: No `..'Éntry (added)",

1117 
∑thsoÁr
);

1118 
ndúíåõs
++;

1119 
dch™ged
 = 1;

1120 
sfi
.
sfi_size
 +(
sfs_dú
);

1121 
ich™ged
 = 1;

1124 
	`£tbad√ss
(
EXIT_UNRECOV
);

1125 
	`w¨nx
("Directory /%s: No `..'Éntry (NOT FIXED)",

1126 
∑thsoÁr
);

1130 
subdúcou¡
=0;

1131 
i
=0; i<
ndúíåõs
; i++) {

1132 i‡(!
	`°rcmp
(
dúíåõs
[
i
].
sfd_«me
, ".")) {

1135 i‡(!
	`°rcmp
(
dúíåõs
[
i
].
sfd_«me
, "..")) {

1138 i‡(
dúíåõs
[
i
].
sfd_öo
 =
SFS_NOINO
) {

1142 
∑th
[
	`°æí
(
∑thsoÁr
)+
SFS_NAMELEN
+1];

1143 
sfs_öode
 
subsfi
;

1145 
	`diskªad
(&
subsfi
, 
dúíåõs
[
i
].
sfd_öo
);

1146 
	`sw≠öode
(&
subsfi
);

1147 
	`¢¥ötf
(
∑th
, (path), "%s/%s",

1148 
∑thsoÁr
, 
dúíåõs
[
i
].
sfd_«me
);

1150 
subsfi
.
sfi_ty≥
) {

1151 
SFS_TYPE_FILE
:

1152 i‡(
	`check_öode_blocks
(
dúíåõs
[
i
].
sfd_öo
,

1153 &
subsfi
, 0)) {

1154 
	`sw≠öode
(&
subsfi
);

1155 
	`diskwrôe
(&
subsfi
,

1156 
dúíåõs
[
i
].
sfd_öo
);

1158 
	`ob£rve_fûñök
(
dúíåõs
[
i
].
sfd_öo
);

1160 
SFS_TYPE_DIR
:

1161 i‡(
	`check_dú
(
dúíåõs
[
i
].
sfd_öo
,

1162 
öo
,

1163 
∑th
)) {

1164 
	`£tbad√ss
(
EXIT_RECOV
);

1165 
	`w¨nx
("Directory /%s: CrosslinkÅo "

1167 
∑th
);

1168 
dúíåõs
[
i
].
sfd_öo
 = 
SFS_NOINO
;

1169 
dúíåõs
[
i
].
sfd_«me
[0] = 0;

1170 
dch™ged
 = 1;

1173 
subdúcou¡
++;

1177 
	`£tbad√ss
(
EXIT_RECOV
);

1178 
	`w¨nx
("Object /%s: Invalid inodeÅype "

1179 "‘emoved)", 
∑th
);

1180 
dúíåõs
[
i
].
sfd_öo
 = 
SFS_NOINO
;

1181 
dúíåõs
[
i
].
sfd_«me
[0] = 0;

1182 
dch™ged
 = 1;

1188 i‡(
sfi
.
sfi_lökcou¡
 !
subdúcou¡
+2) {

1189 
	`£tbad√ss
(
EXIT_RECOV
);

1190 
	`w¨nx
("Directory /%s: Link count %lu should be %lu (fixed)",

1191 
∑thsoÁr
, (Ë
sfi
.
sfi_lökcou¡
,

1192 (Ë
subdúcou¡
+2);

1193 
sfi
.
sfi_lökcou¡
 = 
subdúcou¡
+2;

1194 
ich™ged
 = 1;

1197 i‡(
dch™ged
) {

1198 
	`dúwrôe
(&
sfi
, 
dúíåõs
, 
ndúíåõs
);

1201 i‡(
ich™ged
) {

1202 
	`sw≠öode
(&
sfi
);

1203 
	`diskwrôe
(&
sfi
, 
öo
);

1206 
	`‰ì
(
dúíåõs
);

1207 
	`‰ì
(
s‹tve˘‹
);

1210 
	}
}

1215 
	$check_roŸ_dú
()

1217 
sfs_öode
 
sfi
;

1218 
	`diskªad
(&
sfi
, 
SFS_ROOT_LOCATION
);

1219 
	`sw≠öode
(&
sfi
);

1221 
sfi
.
sfi_ty≥
) {

1222 
SFS_TYPE_DIR
:

1224 
SFS_TYPE_FILE
:

1225 
	`w¨nx
("Root directory inode isáÑegular file (fixed)");

1226 
fix
;

1228 
	`w¨nx
("Root directory inode has invalidÅype %lu (fixed)",

1229 (Ë
sfi
.
sfi_ty≥
);

1230 
fix
:

1231 
	`£tbad√ss
(
EXIT_RECOV
);

1232 
sfi
.
sfi_ty≥
 = 
SFS_TYPE_DIR
;

1233 
	`sw≠öode
(&
sfi
);

1234 
	`diskwrôe
(&
sfi
, 
SFS_ROOT_LOCATION
);

1238 
	`check_dú
(
SFS_ROOT_LOCATION
, SFS_ROOT_LOCATION, "");

1239 
	}
}

1244 
	$maö
(
¨gc
, **
¨gv
)

1246 #ifde‡
HOST


1247 
	`ho°com∑t_öô
(
¨gc
, 
¨gv
);

1250 i‡(
¨gc
!=2) {

1251 
	`îrx
(
EXIT_USAGE
, "Usage: sfsck device/diskfile");

1254 
	`as£π
((
sfs_su≥r
)==
SFS_BLOCKSIZE
);

1255 
	`as£π
((
sfs_öode
)==
SFS_BLOCKSIZE
);

1256 
	`as£π
(
SFS_BLOCKSIZE
 % (
sfs_dú
) == 0);

1258 
	`›ídisk
(
¨gv
[1]);

1260 
	`check_sb
();

1261 
	`check_roŸ_dú
();

1262 
	`check_bôm≠
();

1263 
	`adju°_fûñöks
();

1265 
	`˛o£disk
();

1267 
	`w¨nx
("%lu blocks used (of %lu); %lu directories; %lu files",

1268 
cou¡_blocks
, (Ë
nblocks
, 
cou¡_dús
, 
cou¡_fûes
);

1270 
bad√ss
) {

1271 
EXIT_USAGE
:

1272 
EXIT_FATAL
:

1275 
	`as£π
(0);

1277 
EXIT_UNRECOV
:

1278 
	`w¨nx
("WARNING - unrecoverableÉrrors. MaybeÅryágain?");

1280 
EXIT_RECOV
:

1281 
	`w¨nx
("Caution - filesystem modified. Runágain forÜuck.");

1283 
EXIT_CLEAN
:

1287  
bad√ss
;

1288 
	}
}

	@os161/user/testbin/add/add.c

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~<îr.h
>

43 
	$maö
(
¨gc
, *
¨gv
[])

45 
i
, 
j
;

47 i‡(
¨gc
 != 3) {

48 
	`îrx
(1, "Usage:áddÇum1Çum2");

51 
i
 = 
	`©oi
(
¨gv
[1]);

52 
j
 = 
	`©oi
(
¨gv
[2]);

54 
	`¥ötf
("Answî: %d\n", 
i
+
j
);

57 
	}
}

	@os161/user/testbin/argtest/argtest.c

38 
	~<°dio.h
>

41 
	$maö
(
¨gc
, *
¨gv
[])

43 c⁄° *
tmp
;

44 
i
;

46 
	`¥ötf
("¨gc: %d\n", 
¨gc
);

48 
i
=0; i<=
¨gc
; i++) {

49 
tmp
 = 
¨gv
[
i
];

50 i‡(
tmp
==
NULL
) {

51 
tmp
 = "[NULL]";

53 
	`¥ötf
("¨gv[%d]: %s\n", 
i
, 
tmp
);

57 
	}
}

	@os161/user/testbin/badcall/bad_chdir.c

34 
	~<uni°d.h
>

35 
	~<î∫o.h
>

36 
	~<îr.h
>

38 
	~"ã°.h
"

42 
	$chdú_em±y
()

44 
rv
;

50 
rv
 = 
	`chdú
("");

51 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EINVAL
, 0, "chdirÅoÉmpty string");

52 
	}
}

55 
	$ã°_chdú
()

57 
	`ã°_chdú_∑th
();

58 
	`chdú_em±y
();

59 
	}
}

	@os161/user/testbin/badcall/bad_close.c

34 
	~"ã°.h
"

37 
	$ã°_˛o£
()

39 
	`ã°_˛o£_fd
();

40 
	}
}

	@os161/user/testbin/badcall/bad_dup2.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<limôs.h
>

41 
	~<î∫o.h
>

42 
	~<îr.h
>

44 
	~"c⁄fig.h
"

45 
	~"ã°.h
"

49 
	$dup2_fd2
(
fd
, c⁄° *
desc
)

51 
rv
;

53 
rv
 = 
	`dup2
(
STDIN_FILENO
, 
fd
);

54 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EBADF
, 
desc
);

56 i‡(
rv
 != -1) {

57 
	`˛o£
(
fd
);

59 
	}
}

63 
	$dup2_£lf
()

65 
°©
 
sb
;

66 
rv
;

67 
ã°fd
;

70 
ã°fd
 = 
CLOSED_FD
;

72 
rv
 = 
	`dup2
(
STDIN_FILENO
, 
ã°fd
);

73 i‡(
rv
 == -1) {

74 
	`w¨n
("UH-OH: couldn't copy stdin");

78 
rv
 = 
	`dup2
(
ã°fd
,Åestfd);

79 i‡(
rv
 =
ã°fd
) {

80 
	`w¨nx
("passed: dup2Åo same fd");

82 i‡(
rv
<0) {

83 
	`w¨n
("FAILURE: dup2Åo same fd:Érror");

86 
	`w¨nx
("FAILURE: dup2Åÿßmêfd:Ñëu∫ed %d in°ód", 
rv
);

89 
rv
 = 
	`f°©
(
ã°fd
, &
sb
);

90 i‡(
rv
==0) {

91 
	`w¨nx
("passed: fstat fdáfter dup2Åo itself");

93 i‡(
î∫o
!=
EUNIMP
 &&Éºno!=
ENOSYS
) {

94 
	`w¨n
("FAILURE: fstat fdáfter dup2Åo itself");

98 
rv
 = 
	`l£ek
(
ã°fd
, 0, 
SEEK_CUR
);

99 i‡(
rv
==0 || (rv==-1 && 
î∫o
==
ESPIPE
)) {

100 
	`w¨nx
("passed:Üseek fdáfter dup2Åo itself");

103 
	`w¨n
("FAILURE:Üseek fdáfter dup2Åo itself");

107 
	`˛o£
(
ã°fd
);

108 
	}
}

111 
	$ã°_dup2
()

114 
	`ã°_dup2_fd
();

117 
	`dup2_fd2
(-1, "dup2Åo -1");

118 
	`dup2_fd2
(-5, "dup2Åo -5");

119 
	`dup2_fd2
(
IMPOSSIBLE_FD
, "dup2Åo impossible fd");

120 #ifde‡
OPEN_MAX


121 
	`dup2_fd2
(
OPEN_MAX
, "dup2Åo OPEN_MAX");

123 
	`w¨nx
("Warning: OPEN_MAXÇot defined -Åest skipped");

126 
	`dup2_£lf
();

127 
	}
}

	@os161/user/testbin/badcall/bad_execv.c

34 
	~<sys/ty≥s.h
>

35 
	~<°dlib.h
>

36 
	~<uni°d.h
>

37 
	~<î∫o.h
>

38 
	~<îr.h
>

40 
	~"c⁄fig.h
"

41 
	~"ã°.h
"

45 
	$exec_comm⁄_f‹k
()

47 
pid
, 
rv
, 
°©us
;

49 
pid
 = 
	`f‹k
();

50 i‡(
pid
<0) {

51 
	`w¨n
("UH-OH: fork failed");

55 i‡(
pid
==0) {

60 
rv
 = 
	`waôpid
(
pid
, &
°©us
, 0);

61 i‡(
rv
 == -1) {

62 
	`w¨n
("UH-OH: waitpid failed");

65 i‡(!
	`WIFEXITED
(
°©us
Ë|| 
	`WEXITSTATUS
(°©usË!
MAGIC_STATUS
) {

66 
	`w¨nx
("FAILURE: wrongÉxit code of subprocess");

69 
	}
}

73 
	$exec_bad¥og
(c⁄° *
¥og
, c⁄° *
desc
)

75 
rv
;

76 *
¨gs
[2];

77 
¨gs
[0] = (*)"foo";

78 
¨gs
[1] = 
NULL
;

80 i‡(
	`exec_comm⁄_f‹k
() != 0) {

84 
rv
 = 
	`execv
(
¥og
, 
¨gs
);

85 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

86 
	`exô
(
MAGIC_STATUS
);

87 
	}
}

91 
	$exec_em±y¥og
()

93 
rv
;

94 *
¨gs
[2];

95 
¨gs
[0] = (*)"foo";

96 
¨gs
[1] = 
NULL
;

98 i‡(
	`exec_comm⁄_f‹k
() != 0) {

102 
rv
 = 
	`execv
("", 
¨gs
);

103 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EINVAL
, 
EISDIR
, "execÅheÉmpty string");

104 
	`exô
(
MAGIC_STATUS
);

105 
	}
}

109 
	$exec_bad¨gs
(*
¨gs
, c⁄° *
desc
)

111 
rv
;

113 i‡(
	`exec_comm⁄_f‹k
() != 0) {

117 
rv
 = 
	`execv
("/bö/åue", 
¨gs
);

118 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

119 
	`exô
(
MAGIC_STATUS
);

120 
	}
}

124 
	$exec_⁄órg
(*
±r
, c⁄° *
desc
)

126 
rv
;

128 *
¨gs
[3];

129 
¨gs
[0] = (*)"foo";

130 
¨gs
[1] = (*)
±r
;

131 
¨gs
[2] = 
NULL
;

133 i‡(
	`exec_comm⁄_f‹k
() != 0) {

137 
rv
 = 
	`execv
("/bö/åue", 
¨gs
);

138 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

139 
	`exô
(
MAGIC_STATUS
);

140 
	}
}

143 
	$ã°_execv
()

145 
	`exec_bad¥og
(
NULL
, "exec NULL");

146 
	`exec_bad¥og
(
INVAL_PTR
, "exec invalidÖointer");

147 
	`exec_bad¥og
(
KERN_PTR
, "exec kernelÖointer");

149 
	`exec_em±y¥og
();

151 
	`exec_bad¨gs
(
NULL
, "exec /bin/true with NULLárglist");

152 
	`exec_bad¨gs
(
INVAL_PTR
, "exec /bin/true with invalidÖointerárglist");

153 
	`exec_bad¨gs
(
KERN_PTR
, "exec /bin/true with kernelÖointerárglist");

155 
	`exec_⁄órg
(
INVAL_PTR
, "exec /bin/true with invalidÖointerárg");

156 
	`exec_⁄órg
(
KERN_PTR
, "exec /bin/true with kernelÖointerárg");

157 
	}
}

	@os161/user/testbin/badcall/bad_fsync.c

34 
	~"ã°.h
"

37 
	$ã°_fsync
()

39 
	`ã°_fsync_fd
();

40 
	}
}

	@os161/user/testbin/badcall/bad_ftruncate.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$·runˇã_fd_devi˚
()

50 
rv
, 
fd
;

52 
fd
 = 
	`›í
("nuŒ:", 
O_RDWR
);

53 i‡(
fd
<0) {

54 
	`w¨n
("UH-OH: openingÇull: failed");

58 
rv
 = 
	`·runˇã
(
fd
, 6);

59 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "ftruncate on device");

61 
	`˛o£
(
fd
);

62 
	}
}

66 
	$·runˇã_size_√g
()

68 
rv
, 
fd
;

70 
fd
 = 
	`›í_ã°fûe
(0);

71 i‡(
fd
<0) {

75 
rv
 = 
	`·runˇã
(
fd
, -60);

76 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "ftruncateÅoÇegative size");

78 
	`˛o£
(
fd
);

79 
	`ªmove
(
TESTFILE
);

80 
	}
}

83 
	$ã°_·runˇã
()

85 
	`ã°_·runˇã_fd
();

87 
	`·runˇã_fd_devi˚
();

88 
	`·runˇã_size_√g
();

89 
	}
}

	@os161/user/testbin/badcall/bad_getcwd.c

34 
	~"ã°.h
"

37 
	$ã°_gëcwd
()

39 
	`ã°_gëcwd_buf
();

40 
	}
}

	@os161/user/testbin/badcall/bad_getdirentry.c

34 
	~"ã°.h
"

37 
	$ã°_gëdúíåy
()

39 
	`ã°_gëdúíåy_fd
();

40 
	`ã°_gëdúíåy_buf
();

41 
	}
}

	@os161/user/testbin/badcall/bad_ioctl.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/io˘l.h
>

36 
	~<uni°d.h
>

37 
	~<°dio.h
>

38 
	~<î∫o.h
>

40 
	~"c⁄fig.h
"

41 
	~"ã°.h
"

45 
	$⁄e_io˘l_badbuf
(
fd
, 
code
, c⁄° *
codíame
,

46 *
±r
, c⁄° *
±rdesc
)

48 
desc
[128];

49 
rv
;

51 
	`¢¥ötf
(
desc
, (desc), "io˘»%†wôh %s", 
codíame
, 
±rdesc
);

52 
rv
 = 
	`io˘l
(
fd
, 
code
, 
±r
);

53 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

54 
	}
}

58 
	$™y_io˘l_badbuf
(
fd
, 
code
, c⁄° *
codíame
)

60 
	`⁄e_io˘l_badbuf
(
fd
, 
code
, 
codíame
, 
NULL
, "NULLÖointer");

61 
	`⁄e_io˘l_badbuf
(
fd
, 
code
, 
codíame
, 
INVAL_PTR
, "invalidÖointer");

62 
	`⁄e_io˘l_badbuf
(
fd
, 
code
, 
codíame
, 
KERN_PTR
, "kernelÖointer");

63 
	}
}

65 
	#IOCTL
(
fd
, 
sym
Ë
	`™y_io˘l_badbuf
(fd, sym, #sym)

	)

69 
	$io˘l_badbuf
()

82 ()
™y_io˘l_badbuf
;

83 
	}
}

87 
	$io˘l_badcode
()

89 
rv
;

90 
rv
 = 
	`io˘l
(
STDIN_FILENO
, 
NONEXIST_IOCTL
, 
NULL
);

91 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EIOCTL
, "invalid ioctl");

92 
	}
}

95 
	$ã°_io˘l
()

97 
	`ã°_io˘l_fd
();

100 
	`io˘l_badcode
();

101 
	`io˘l_badbuf
();

102 
	}
}

	@os161/user/testbin/badcall/bad_link.c

34 
	~<uni°d.h
>

35 
	~<î∫o.h
>

37 
	~"ã°.h
"

41 
	$lök_dú
()

43 
rv
;

44 
rv
 = 
	`lök
(".", 
TESTDIR
);

45 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "hardÜink of .");

46 i‡(
rv
==0) {

48 
	`ªmove
(
TESTDIR
);

50 
	}
}

54 
	$lök_em±y1
()

56 
rv
;

57 
rv
 = 
	`lök
("", 
TESTDIR
);

58 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "hardÜink ofÉmpty string");

59 
	}
}

63 
	$lök_em±y2
()

65 
rv
;

66 i‡(
	`¸óã_ã°dú
()<0) {

69 
rv
 = 
	`lök
(
TESTDIR
, "");

70 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "hardÜinkÅoÉmpty string");

71 
	`rmdú
(
TESTDIR
);

72 
	}
}

75 
	$ã°_lök
()

77 
	`ã°_lök_∑ths
();

78 
	`lök_dú
();

79 
	`lök_em±y1
();

80 
	`lök_em±y2
();

81 
	}
}

	@os161/user/testbin/badcall/bad_lseek.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$l£ek_fd_devi˚
()

50 
fd
, 
rv
;

52 
fd
 = 
	`›í
("nuŒ:", 
O_RDONLY
);

53 i‡(
fd
<0) {

54 
	`w¨n
("UH-OH: openingÇull: failed");

58 
rv
 = 
	`l£ek
(
fd
, 309, 
SEEK_SET
);

59 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
ESPIPE
, "lseek on device");

61 
	`˛o£
(
fd
);

62 
	}
}

66 
	$l£ek_fûe_°dö
()

68 
fd
, 
fd2
, 
rv
, 
°©us
;

69 c⁄° 
¶og™
[] = "Thereáin'tÇo suchÅhingásá freeÜunch";

70 
size_t
 
Àn
 = 
	`°æí
(
¶og™
);

71 
pid_t
 
pid
;

74 
pid
 = 
	`f‹k
();

75 i‡(
pid
<0) {

76 
	`w¨n
("UH-OH: fork failed");

79 i‡(
pid
!=0) {

81 
rv
 = 
	`waôpid
(
pid
, &
°©us
, 0);

82 i‡(
rv
<0) {

83 
	`w¨n
("UH-OH: waitpid failed");

85 i‡(
	`WIFSIGNALED
(
°©us
)) {

86 
	`w¨n
("UH-OH: subprocessÉxited with signal %d",

87 
	`WTERMSIG
(
°©us
));

89 i‡(
	`WIFEXITED
(
°©us
Ë&& 
	`WEXITSTATUS
(status) != 0) {

90 
	`w¨n
("UH-OH: subprocessÉxited with code %d",

91 
	`WEXITSTATUS
(
°©us
));

98 
fd
 = 
	`›í_ã°fûe
(
NULL
);

99 i‡(
fd
<0) {

100 
	`_exô
(0);

110 
fd2
 = 
	`dup2
(
fd
, 
STDIN_FILENO
);

111 i‡(
fd2
<0) {

112 
	`w¨n
("UH-OH: dup2Åo stdin failed");

113 
	`˛o£
(
fd
);

114 
	`ªmove
(
TESTFILE
);

115 
	`_exô
(0);

117 i‡(
fd2
 !
STDIN_FILENO
) {

118 
	`w¨n
("UH-OH: dup2Ñeturned wrong file handle");

119 
	`˛o£
(
fd
);

120 
	`ªmove
(
TESTFILE
);

121 
	`_exô
(0);

123 
	`˛o£
(
fd
);

125 
rv
 = 
	`wrôe
(
STDIN_FILENO
, 
¶og™
, 
Àn
);

126 i‡(
rv
<0) {

127 
	`w¨n
("UH-OH: wrôêtÿ%†(vü stdöËÁûed", 
TESTFILE
);

128 
	`ªmove
(
TESTFILE
);

129 
	`_exô
(0);

132 i‡(()
rv
 !
Àn
) {

133 
	`w¨nx
("UH-OH: writeÅo %s (via stdin) got short count",

134 
TESTFILE
);

135 
	`ªmove
(
TESTFILE
);

136 
	`_exô
(0);

139 
rv
 = 
	`l£ek
(
STDIN_FILENO
, 0, 
SEEK_SET
);

140 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 0, "lseek stdin when open on file (try 1)");

142 
rv
 = 
	`l£ek
(
STDIN_FILENO
, 0, 
SEEK_END
);

143 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 0, "lseek stdin when open on file (try 2)");

145 
	`ªmove
(
TESTFILE
);

146 
	`_exô
(0);

147 
	}
}

151 
	$l£ek_loc_√g©ive
()

153 
fd
, 
rv
;

155 
fd
 = 
	`›í_ã°fûe
(
NULL
);

156 i‡(
fd
<0) {

160 
rv
 = 
	`l£ek
(
fd
, -309, 
SEEK_SET
);

161 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "lseekÅoÇegative offset");

163 
	`˛o£
(
fd
);

164 
	`ªmove
(
TESTFILE
);

165 
	}
}

169 
	$l£ek_whí˚_övÆ
()

171 
fd
, 
rv
;

173 
fd
 = 
	`›í_ã°fûe
(0);

174 i‡(
fd
<0) {

178 
rv
 = 
	`l£ek
(
fd
, 0, 3594);

179 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "lseek with invalid whence code");

181 
	`˛o£
(
fd
);

182 
	`ªmove
(
TESTFILE
);

183 
	}
}

187 
	$l£ek_loc_∑°eof
()

189 c⁄° *
mesßge
 = "blahblah";

190 
fd
;

191 
off_t
 
pos
;

193 
fd
 = 
	`›í_ã°fûe
(
mesßge
);

194 i‡(
fd
<0) {

198 
pos
 = 
	`l£ek
(
fd
, 5340, 
SEEK_SET
);

199 i‡(
pos
 == -1) {

200 
	`w¨n
("FAILURE:ÜseekÖast EOF failed");

201 
out
;

203 i‡(
pos
 != 5340) {

204 
	`w¨nx
("FAILURE:Ü£ekÅÿ5340 gŸ off£à%ld", (Ë
pos
);

205 
out
;

208 
pos
 = 
	`l£ek
(
fd
, -50, 
SEEK_CUR
);

209 i‡(
pos
 == -1) {

210 
	`w¨n
("FAILURE: small seek beyond EOF failed");

211 
out
;

213 i‡(
pos
 != 5290) {

214 
	`w¨nx
("FAILURE: SEEK_CURÅÿ5290 gŸ off£à%ld", (Ë
pos
);

215 
out
;

218 
pos
 = 
	`l£ek
(
fd
, 0, 
SEEK_END
);

219 i‡(
pos
 == -1) {

220 
	`w¨n
("FAILURE: seekÅo EOF failed");

221 
out
;

224 i‡(
pos
 !(
off_t
Ë
	`°æí
(
mesßge
)) {

225 
	`w¨nx
("FAILURE: seekÅo EOF got %ld (should be %d)",

226 (Ë
pos
, 
	`°æí
(
mesßge
));

227 
out
;

230 
	`w¨nx
("passed: seekÖast/to EOF");

232 
out
:

233 
	`˛o£
(
fd
);

234 
	`ªmove
(
TESTFILE
);

236 
	}
}

239 
	$ã°_l£ek
()

241 
	`ã°_l£ek_fd
();

243 
	`l£ek_fd_devi˚
();

244 
	`l£ek_fûe_°dö
();

245 
	`l£ek_loc_√g©ive
();

246 
	`l£ek_loc_∑°eof
();

247 
	`l£ek_whí˚_övÆ
();

248 
	}
}

	@os161/user/testbin/badcall/bad_mkdir.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$mkdú_dŸ
()

50 
rv
;

52 
rv
 = 
	`mkdú
(".", 0775);

53 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EEXIST
, "mkdir .");

54 
	}
}

58 
	$mkdú_dŸdŸ
()

60 
rv
;

62 
rv
 = 
	`mkdú
("..", 0775);

63 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EEXIST
, "mkdir ..");

64 
	}
}

68 
	$mkdú_em±y
()

70 
rv
;

71 
rv
 = 
	`mkdú
("", 0775);

72 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "mkdir ofÉmpty string");

73 
	}
}

76 
	$ã°_mkdú
()

78 
	`ã°_mkdú_∑th
();

80 
	`mkdú_dŸ
();

81 
	`mkdú_dŸdŸ
();

82 
	`mkdú_em±y
();

83 
	}
}

	@os161/user/testbin/badcall/bad_open.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$›í_badÊags
()

50 
fd
;

52 
fd
 = 
	`›í
("null:", 309842);

53 
	`ªp‹t_ã°
(
fd
, 
î∫o
, 
EINVAL
, "openÇull: with bad flags");

54 
	}
}

58 
	$›í_em±y
()

60 
rv
;

61 
rv
 = 
	`›í
("", 
O_RDONLY
);

62 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 0, 
EINVAL
, "openÉmpty string");

63 i‡(
rv
>=0) {

64 
	`˛o£
(
rv
);

66 
	}
}

69 
	$ã°_›í
()

71 
	`ã°_›í_∑th
();

73 
	`›í_badÊags
();

74 
	`›í_em±y
();

75 
	}
}

	@os161/user/testbin/badcall/bad_pipe.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$pùe_bad±r
(*
±r
, c⁄° *
desc
)

50 
rv
;

52 
rv
 = 
	`pùe
(
±r
);

53 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

54 
	}
}

58 
	$pùe_u«lig√d
()

60 
fds
[3], 
rv
;

61 *
±r
;

63 
±r
 = (*)&
fds
[0];

64 
±r
++;

66 
rv
 = 
	`pùe
((*)
±r
);

67 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "pipe with unalignedÖointer");

68 
	}
}

71 
	$ã°_pùe
()

73 
	`pùe_bad±r
(
NULL
, "pipe with NULLÖointer");

74 
	`pùe_bad±r
(
INVAL_PTR
, "pipe with invalidÖointer");

75 
	`pùe_bad±r
(
KERN_PTR
, "pipe with kernelÖointer");

77 
	`pùe_u«lig√d
();

78 
	}
}

	@os161/user/testbin/badcall/bad_read.c

34 
	~"ã°.h
"

37 
	$ã°_ªad
()

39 
	`ã°_ªad_fd
();

40 
	`ã°_ªad_buf
();

41 
	}
}

	@os161/user/testbin/badcall/bad_readlink.c

34 
	~<uni°d.h
>

35 
	~<î∫o.h
>

37 
	~"ã°.h
"

41 
	$ªadlök_fûe
()

43 
buf
[128];

44 
fd
, 
rv
;

46 
fd
 = 
	`›í_ã°fûe
("the question containsán invalidássumption");

47 i‡(
fd
<0) {

50 
	`˛o£
(
fd
);

51 
rv
 = 
	`ªadlök
(
TESTFILE
, 
buf
, (buf));

52 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "readlink on file");

53 
	`ªmove
(
TESTFILE
);

54 
	}
}

58 
	$ªadlök_dú
()

60 
buf
[128];

61 
rv
;

62 
rv
 = 
	`ªadlök
(".", 
buf
, (buf));

63 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EISDIR
, "readlink on .");

64 
	}
}

68 
	$ªadlök_em±y
()

70 
buf
[128];

71 
rv
;

72 
rv
 = 
	`ªadlök
("", 
buf
, (buf));

73 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "readlink onÉmpty string");

74 
	}
}

77 
	$ã°_ªadlök
()

79 
	`ã°_ªadlök_∑th
();

80 
	`ã°_ªadlök_buf
();

82 
	`ªadlök_fûe
();

83 
	`ªadlök_dú
();

84 
	`ªadlök_em±y
();

85 
	}
}

	@os161/user/testbin/badcall/bad_reboot.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$ªboŸ_badÊags
()

50 
rv
;

52 
	`w¨nx
("NOTICE: ifÅhis killsÅhe system, it'sá failure.");

53 
rv
 = 
	`ªboŸ
(15353);

54 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "reboot with invalid flags");

55 
	}
}

58 
	$ã°_ªboŸ
()

60 
	`ªboŸ_badÊags
();

61 
	}
}

	@os161/user/testbin/badcall/bad_remove.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$ªmove_dú
()

50 
rv
;

52 i‡(
	`¸óã_ã°dú
() < 0) {

56 
rv
 = 
	`ªmove
(
TESTDIR
);

57 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EISDIR
, "remove() oná directory");

58 
	`rmdú
(
TESTDIR
);

59 
	}
}

63 
	$ªmove_dŸ
()

65 
rv
;

66 
rv
 = 
	`ªmove
(".");

67 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "remove() on .");

68 
	}
}

72 
	$ªmove_dŸdŸ
()

74 
rv
;

75 
rv
 = 
	`ªmove
("..");

76 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "remove() on ..");

77 
	}
}

81 
	$ªmove_em±y
()

83 
rv
;

84 
rv
 = 
	`ªmove
("");

85 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "remove() onÉmpty string");

86 
	}
}

89 
	$ã°_ªmove
()

91 
	`ã°_ªmove_∑th
();

93 
	`ªmove_dú
();

94 
	`ªmove_dŸ
();

95 
	`ªmove_dŸdŸ
();

96 
	`ªmove_em±y
();

97 
	}
}

	@os161/user/testbin/badcall/bad_rename.c

34 
	~<uni°d.h
>

35 
	~<î∫o.h
>

37 
	~"ã°.h
"

41 
	$ª«me_dŸ
()

43 
rv
;

44 
rv
 = 
	`ª«me
(".", 
TESTDIR
);

45 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "rename .");

46 i‡(
rv
==0) {

48 
	`ª«me
(
TESTDIR
, ".");

50 
	}
}

54 
	$ª«me_dŸdŸ
()

56 
rv
;

57 
rv
 = 
	`ª«me
("..", 
TESTDIR
);

58 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "rename ..");

59 i‡(
rv
==0) {

61 
	`ª«me
(
TESTDIR
, "..");

63 
	}
}

67 
	$ª«me_em±y1
()

69 
rv
;

70 
rv
 = 
	`ª«me
("", 
TESTDIR
);

71 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "renameÉmpty string");

72 i‡(
rv
==0) {

74 
	`ª«me
(
TESTDIR
, TESTDIR "-foo");

76 
	}
}

80 
	$ª«me_em±y2
()

82 
rv
;

83 i‡(
	`¸óã_ã°dú
()<0) {

86 
rv
 = 
	`ª«me
(
TESTDIR
, "");

87 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "renameÅoÉmpty string");

88 
	`rmdú
(
TESTDIR
);

89 
	}
}

92 
	$ã°_ª«me
()

94 
	`ã°_ª«me_∑ths
();

96 
	`ª«me_dŸ
();

97 
	`ª«me_dŸdŸ
();

98 
	`ª«me_em±y1
();

99 
	`ª«me_em±y2
();

100 
	}
}

	@os161/user/testbin/badcall/bad_rmdir.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$rmdú_fûe
()

50 
rv
;

51 i‡(
	`¸óã_ã°fûe
()<0) {

54 
rv
 = 
	`rmdú
(
TESTFILE
);

55 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
ENOTDIR
, "rmdirá file");

56 
	`ªmove
(
TESTFILE
);

57 
	}
}

61 
	$rmdú_dŸ
()

63 
rv
;

65 
rv
 = 
	`rmdú
(".");

66 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "rmdir .");

67 
	}
}

71 
	$rmdú_dŸdŸ
()

73 
rv
;

75 
rv
 = 
	`rmdú
("..");

76 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EINVAL
, 
ENOTEMPTY
, "rmdir ..");

77 
	}
}

81 
	$rmdú_em±y
()

83 
rv
;

84 
rv
 = 
	`rmdú
("");

85 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "rmdirÉmpty string");

86 
	}
}

89 
	$ã°_rmdú
()

91 
	`ã°_rmdú_∑th
();

93 
	`rmdú_fûe
();

94 
	`rmdú_dŸ
();

95 
	`rmdú_dŸdŸ
();

96 
	`rmdú_em±y
();

97 
	}
}

	@os161/user/testbin/badcall/bad_sbrk.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$åy_sbrk
(
vÆ
)

50 *
rv
;

51 
rv
 = 
	`sbrk
(
vÆ
);

52 i‡(
rv
==(*)-1) {

53  
î∫o
;

56 
	}
}

60 
	$íf‹˚_sbrk
(
vÆ
, c⁄° *
desc
, 
îr
)

62 
e
;

64 
e
 = 
	`åy_sbrk
(
vÆ
);

65 i‡(
e
 !
îr
 &&É==0) {

66 
	`w¨nx
("FAILURE: sbrk(%s):Çÿîr‹", 
desc
);

69 i‡(
e
 !
îr
) {

70 
î∫o
 = 
e
;

71 
	`w¨n
("FAILURE: sbrk(%s): wr⁄gÉº‹", 
desc
);

74 
	`w¨nx
("∑s£d: sbrk(%s)", 
desc
);

75 
	}
}

79 
	$sbrk_bigpos
()

81 
	`íf‹˚_sbrk
(4096*1024*256, "hugêposôive", 
ENOMEM
);

82 
	}
}

86 
	$sbrk_big√g
()

88 
	`íf‹˚_sbrk
(-4096*1024*256, "hugê√g©ive", 
EINVAL
);

89 
	}
}

93 
	$sbrk_√g
()

95 
	`íf‹˚_sbrk
(-8192, "too-œrgê√g©ive", 
EINVAL
);

96 
	}
}

100 
	$sbrk_u«lig√dpos
()

102 
	`åy_sbrk
(17)) {

104 
EINVAL
:

105 
	`w¨nx
("passed: sbrk(unalignedÖositive)");

108 
	`w¨n
("FAILURE: sbrk(unalignedÖositive): wrongÉrror");

111 
	}
}

115 
	$sbrk_u«lig√d√g
()

117 
	`åy_sbrk
(-17)) {

119 
EINVAL
:

120 
	`w¨nx
("passed: sbrk(unalignedÇegative)");

123 
	`w¨n
("FAILURE: sbrk(unalignedÇegative): wrongÉrror");

126 
	}
}

129 
	$ã°_sbrk
()

131 
	`sbrk_√g
();

132 
	`sbrk_bigpos
();

133 
	`sbrk_big√g
();

134 
	`sbrk_u«lig√dpos
();

135 
	`sbrk_u«lig√d√g
();

136 
	}
}

	@os161/user/testbin/badcall/bad_stat.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

50 
	$badbuf_f°©
(
°©
 *
sb
)

52  
	`f°©
(
STDIN_FILENO
, 
sb
);

53 
	}
}

57 
	$badbuf_l°©
(
°©
 *
sb
)

59  
	`l°©
("nuŒ:", 
sb
);

60 
	}
}

64 
	$badbuf_°©
(
°©
 *
sb
)

66  
	`°©
("nuŒ:", 
sb
);

67 
	}
}

71 
comm⁄_badbuf
((*
°©func
)(
°©
 *), *
±r
,

72 c⁄° *
ˇŒ
, c⁄° *
±rdesc
)

74 
rv
;

75 
mydesc
[128];

77 
	`¢¥ötf
(
mydesc
, (mydesc), "%†wôh %†buf", 
ˇŒ
, 
±rdesc
);

78 
rv
 = 
	`°©func
(
±r
);

79 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
mydesc
);

80 
	}
}

84 
™y_badbuf
((*
°©func
)(
°©
 *), c⁄° *
ˇŒ
)

86 
	`comm⁄_badbuf
(
°©func
, 
NULL
, 
ˇŒ
, "NULL");

87 
	`comm⁄_badbuf
(
°©func
, 
INVAL_PTR
, 
ˇŒ
, "invalidÖointer");

88 
	`comm⁄_badbuf
(
°©func
, 
KERN_PTR
, 
ˇŒ
, "kernelÖointer");

89 
	}
}

95 
™y_em±y
((*
°©func
)(c⁄° *, 
°©
 *), c⁄° *
ˇŒ
)

97 
°©
 
sb
;

98 
desc
[128];

99 
rv
;

101 
	`¢¥ötf
(
desc
, (desc), "%†⁄Ém±y såög", 
ˇŒ
);

102 
rv
 = 
	`°©func
("", &
sb
);

103 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 0, 
EINVAL
, 
desc
);

104 
	}
}

109 
	$ã°_f°©
()

111 
	`ã°_f°©_fd
();

112 
	`™y_badbuf
(
badbuf_f°©
, "fstat");

113 
	}
}

116 
	$ã°_l°©
()

118 
	`ã°_l°©_∑th
();

119 
	`™y_em±y
(
l°©
, "stat");

120 
	`™y_badbuf
(
badbuf_l°©
, "lstat");

121 
	}
}

124 
	$ã°_°©
()

126 
	`ã°_°©_∑th
();

127 
	`™y_em±y
(
°©
, "stat");

128 
	`™y_badbuf
(
badbuf_°©
, "stat");

129 
	}
}

	@os161/user/testbin/badcall/bad_symlink.c

34 
	~<uni°d.h
>

35 
	~<î∫o.h
>

37 
	~"ã°.h
"

41 
	$symlök_em±y1
()

43 
rv
;

44 
rv
 = 
	`symlök
("", 
TESTLINK
);

45 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 0, 
EINVAL
, "symlink ->Émpty string");

46 
	`ªmove
(
TESTLINK
);

47 
	}
}

51 
	$symlök_em±y2
()

53 
rv
;

54 
rv
 = 
	`symlök
("foo", "");

55 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "symlinkÇamedÉmpty string");

56 
	}
}

59 
	$ã°_symlök
()

61 
	`ã°_symlök_∑ths
();

62 
	`symlök_em±y1
();

63 
	`symlök_em±y2
();

64 
	}
}

	@os161/user/testbin/badcall/bad_time.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$time_bad£cs
(*
±r
, c⁄° *
desc
)

50 
rv
;

52 
rv
 = 
	`__time
(
±r
, 
NULL
);

53 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

54 
	}
}

58 
	$time_badn£cs
(*
±r
, c⁄° *
desc
)

60 
rv
;

62 
rv
 = 
	`__time
(
NULL
, 
±r
);

63 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

64 
	}
}

67 
	$ã°_time
()

69 
	`time_bad£cs
(
INVAL_PTR
, "__time with invalid secondsÖointer");

70 
	`time_bad£cs
(
KERN_PTR
, "__time with kernel secondsÖointer");

72 
	`time_badn£cs
(
INVAL_PTR
, "__time with invalidÇsecsÖointer");

73 
	`time_badn£cs
(
KERN_PTR
, "__time with kernelÇsecsÖointer");

74 
	}
}

	@os161/user/testbin/badcall/bad_waitpid.c

34 
	~<sys/ty≥s.h
>

35 
	~<°dlib.h
>

36 
	~<uni°d.h
>

37 
	~<î∫o.h
>

38 
	~<îr.h
>

40 
	~"c⁄fig.h
"

41 
	~"ã°.h
"

45 
	$waô_badpid
(
pid
, c⁄° *
desc
)

47 
rv
, 
x
;

48 
rv
 = 
	`waôpid
(
pid
, &
x
, 0);

49 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EINVAL
, 
NOSUCHPID_ERROR
, 
desc
);

50 
	}
}

54 
	$waô_bad°©us
(*
±r
, c⁄° *
desc
)

56 
rv
, 
pid
, 
x
;

58 
pid
 = 
	`f‹k
();

59 i‡(
pid
<0) {

60 
	`w¨n
("UH-OH: fork failed");

63 i‡(
pid
==0) {

64 
	`exô
(0);

67 
rv
 = 
	`waôpid
(
pid
, 
±r
, 0);

68 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

69 
	`waôpid
(
pid
, &
x
, 0);

70 
	}
}

74 
	$waô_u«lig√d
()

76 
rv
, 
pid
, 
x
;

77 
°©us
[2];

78 *
±r
;

80 
pid
 = 
	`f‹k
();

81 i‡(
pid
<0) {

82 
	`w¨n
("UH-OH: fork failed");

85 i‡(
pid
==0) {

86 
	`exô
(0);

90 
±r
 = (*)(&
°©us
[0]);

93 
±r
++;

95 
rv
 = 
	`waôpid
(
pid
, (*)
±r
, 0);

96 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "wait with unaligned status");

97 i‡(
rv
<0) {

98 
	`waôpid
(
pid
, &
x
, 0);

100 
	}
}

104 
	$waô_badÊags
()

106 
rv
, 
x
, 
pid
;

108 
pid
 = 
	`f‹k
();

109 i‡(
pid
<0) {

110 
	`w¨n
("UH-OH: fork failed");

113 i‡(
pid
==0) {

114 
	`exô
(0);

117 
rv
 = 
	`waôpid
(
pid
, &
x
, 309429);

118 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "wait with bad flags");

119 
	`waôpid
(
pid
, &
x
, 0);

120 
	}
}

124 
	$waô_£lf
()

126 
rv
, 
x
;

127 
rv
 = 
	`waôpid
(
	`gëpid
(), &
x
, 0);

128 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "wait for self");

129 
	}
}

133 
	$waô_∑ª¡
()

135 
mypid
, 
chûdpid
, 
rv
, 
x
;

137 
mypid
 = 
	`gëpid
();

138 
chûdpid
 = 
	`f‹k
();

139 i‡(
chûdpid
<0) {

140 
	`w¨n
("UH-OH: can't fork");

143 i‡(
chûdpid
==0) {

145 
rv
 = 
	`waôpid
(
mypid
, &
x
, 0);

146 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "wait forÖarent (from child)");

147 
	`_exô
(0);

149 
rv
 = 
	`waôpid
(
chûdpid
, &
x
, 0);

150 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "wait forÖarentÅest (fromÖarent)");

151 
	}
}

157 
	$waô_siblögs_chûd
()

159 
pids
[2], 
mypid
, 
Ÿhîpid
, 
fd
, 
rv
, 
x
;

161 
mypid
 = 
	`gëpid
();

163 
fd
 = 
	`›í
(
TESTFILE
, 
O_RDONLY
);

164 i‡(
fd
<0) {

165 
	`w¨n
("UH-OH: childÖrocess (pid %d) can't open %s",

166 
mypid
, 
TESTFILE
);

175 
rv
 = 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

176 i‡(
rv
<0) {

177 
	`w¨n
("UH-OH: childÖrocess (pid %d)ÜseekÉrror",

178 
mypid
);

181 
rv
 = 
	`ªad
(
fd
, 
pids
, (pids));

182 i‡(
rv
<0) {

183 
	`w¨n
("UH-OH: childÖrocess (pid %d)ÑeadÉrror",

184 
mypid
);

187 } 
rv
 < ()(
pids
));

189 i‡(
mypid
==
pids
[0]) {

190 
Ÿhîpid
 = 
pids
[1];

192 i‡(
mypid
==
pids
[1]) {

193 
Ÿhîpid
 = 
pids
[0];

196 
	`w¨n
("UH-OH: childÖrocess (pid %d) got garbage in comm file",

197 
mypid
);

200 
	`˛o£
(
fd
);

202 
rv
 = 
	`waôpid
(
Ÿhîpid
, &
x
, 0);

203 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "sibling wait");

204 
	}
}

208 
	$waô_siblögs
()

210 
pids
[2], 
fd
, 
rv
, 
x
;

214 
fd
 = 
	`›í_ã°fûe
(
NULL
);

215 i‡(
fd
<0) {

219 
pids
[0] = 
	`f‹k
();

220 i‡(
pids
[0]<0) {

221 
	`w¨n
("UH-OH: can't fork");

224 i‡(
pids
[0]==0) {

225 
	`˛o£
(
fd
);

226 
	`waô_siblögs_chûd
();

227 
	`_exô
(0);

230 
pids
[1] = 
	`f‹k
();

231 i‡(
pids
[1]<0) {

232 
	`w¨n
("UH-OH: can't fork");

236 i‡(
pids
[1]==0) {

237 
	`˛o£
(
fd
);

238 
	`waô_siblögs_chûd
();

239 
	`_exô
(0);

242 
rv
 = 
	`wrôe
(
fd
, 
pids
, (pids));

243 i‡(
rv
 < 0) {

244 
	`w¨n
("UH-OH: wrôêîr‹ o¿%s", 
TESTFILE
);

248 i‡(
rv
 !()(
pids
)) {

249 
	`w¨nx
("UH-OH: wrôêîr‹ o¿%s: sh‹àcou¡", 
TESTFILE
);

254 
rv
 = 
	`waôpid
(
pids
[0], &
x
, 0);

255 i‡(
rv
<0) {

256 
	`w¨n
("UH-OH:Éº‹ waôög f‹ chûd 0 (pid %d)", 
pids
[0]);

258 
rv
 = 
	`waôpid
(
pids
[1], &
x
, 0);

259 i‡(
rv
<0) {

260 
	`w¨n
("UH-OH:Éº‹ waôög f‹ chûd 1 (pid %d)", 
pids
[1]);

262 
	`w¨nx
("passed: siblings wait forÉach other");

263 
	`˛o£
(
fd
);

264 
	`ªmove
(
TESTFILE
);

265 
	}
}

270 
	$ã°_waôpid
()

272 
	`waô_badpid
(-8, "wait forÖid -8");

273 
	`waô_badpid
(-1, "wait forÖid -1");

274 
	`waô_badpid
(0, "pid zero");

275 
	`waô_badpid
(
NONEXIST_PID
, "nonexistentÖid");

277 
	`waô_bad°©us
(
NULL
, "wait with NULL status");

278 
	`waô_bad°©us
(
INVAL_PTR
, "wait with invalidÖointer status");

279 
	`waô_bad°©us
(
KERN_PTR
, "wait with kernelÖointer status");

281 
	`waô_u«lig√d
();

283 
	`waô_badÊags
();

285 
	`waô_£lf
();

286 
	`waô_∑ª¡
();

287 
	`waô_siblögs
();

288 
	}
}

	@os161/user/testbin/badcall/bad_write.c

34 
	~"ã°.h
"

37 
	$ã°_wrôe
()

39 
	`ã°_wrôe_fd
();

40 
	`ã°_wrôe_buf
();

41 
	}
}

	@os161/user/testbin/badcall/common_buf.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<limôs.h
>

41 
	~<î∫o.h
>

42 
	~<îr.h
>

44 
	~"c⁄fig.h
"

45 
	~"ã°.h
"

47 
	gbuf_fd
;

49 
	sbu·e°
 {

50 (*
	m£tup
)();

51 (*
	m›
)(*);

52 (*
	m˛ónup
)();

53 c⁄° *
	m«me
;

60 
	$ªad_£tup
()

62 
buf_fd
 = 
	`›í_ã°fûe
("i doÇotÜike greenÉggsánd ham");

63 i‡(
buf_fd
<0) {

67 
	}
}

71 
	$ªad_badbuf
(*
buf
)

73  
	`ªad
(
buf_fd
, 
buf
, 128);

74 
	}
}

78 
	$ªad_˛ónup
()

80 
	`˛o£
(
buf_fd
);

81 
	`ªmove
(
TESTFILE
);

82 
	}
}

88 
	$wrôe_£tup
()

90 
buf_fd
 = 
	`›í_ã°fûe
(
NULL
);

91 i‡(
buf_fd
<0) {

95 
	}
}

99 
	$wrôe_badbuf
(*
±r
)

101  
	`wrôe
(
buf_fd
, 
±r
, 128);

102 
	}
}

106 
	$wrôe_˛ónup
()

108 
	`˛o£
(
buf_fd
);

109 
	`ªmove
(
TESTFILE
);

110 
	}
}

116 
	$gëdúíåy_£tup
()

118 
buf_fd
 = 
	`›í
(".", 
O_RDONLY
);

119 i‡(
buf_fd
 < 0) {

120 
	`w¨n
("UH-OH: couldn't open .");

124 
	}
}

128 
	$gëdúíåy_badbuf
(*
±r
)

130  
	`gëdúíåy
(
buf_fd
, 
±r
, 1024);

131 
	}
}

135 
	$gëdúíåy_˛ónup
()

137 
	`˛o£
(
buf_fd
);

138 
	}
}

144 
	$ªadlök_£tup
()

146  
	`¸óã_ã°lök
();

147 
	}
}

151 
	$ªadlök_badbuf
(*
buf
)

153  
	`ªadlök
(
TESTLINK
, 
buf
, 168);

154 
	}
}

158 
	$ªadlök_˛ónup
()

160 
	`ªmove
(
TESTLINK
);

161 
	}
}

165 
	$gëcwd_£tup
(Ë{  0; 
	}
}

166 
	$gëcwd_˛ónup
(Ë{
	}
}

170 
	$gëcwd_badbuf
(*
buf
)

172  
	`__gëcwd
(
buf
, 408);

173 
	}
}

179 
	$comm⁄_badbuf
(
bu·e°
 *
öfo
, *
buf
, c⁄° *
bufdesc
)

181 
mydesc
[128];

182 
rv
;

184 
	`¢¥ötf
(
mydesc
, (mydesc), "%s with %s buffer",

185 
öfo
->
«me
, 
bufdesc
);

186 
öfo
->
	`£tup
();

187 
rv
 = 
öfo
->
	`›
(
buf
);

188 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
mydesc
);

189 
öfo
->
	`˛ónup
();

190 
	}
}

194 
	$™y_badbuf
(
bu·e°
 *
öfo
)

196 
	`comm⁄_badbuf
(
öfo
, 
NULL
, "NULL");

197 
	`comm⁄_badbuf
(
öfo
, 
INVAL_PTR
, "invalid");

198 
	`comm⁄_badbuf
(
öfo
, 
KERN_PTR
, "kernel-space");

199 
	}
}

203 
	#T
(
ˇŒ
) \

205 
ã°_
##
ˇŒ
##
	`_buf
() \

207 
bu·e°
 
öfo
 = { \

208 
ˇŒ
##
_£tup
, \

209 
ˇŒ
##
_badbuf
, \

210 
ˇŒ
##
_˛ónup
, \

213 
	`™y_badbuf
(&
öfo
); \

214 }

	)

216 
T
(
ªad
);

217 
T
(
wrôe
);

218 
T
(
gëdúíåy
);

219 
T
(
ªadlök
);

220 
T
(
gëcwd
);

	@os161/user/testbin/badcall/common_fds.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<limôs.h
>

41 
	~<î∫o.h
>

42 
	~<îr.h
>

44 
	~"c⁄fig.h
"

45 
	~"ã°.h
"

50 
	$ªad_badfd
(
fd
)

52 
buf
[128];

53  
	`ªad
(
fd
, 
buf
, (buf));

54 
	}
}

58 
	$wrôe_badfd
(
fd
)

60 
buf
[128];

61 
	`mem£t
(
buf
, 'a', (buf));

62  
	`wrôe
(
fd
, 
buf
, (buf));

63 
	}
}

68 
	$˛o£_badfd
(
fd
)

70  
	`˛o£
(
fd
);

71 
	}
}

75 
	$io˘l_badfd
(
fd
)

77  
	`io˘l
(
fd
, 0, 
NULL
);

78 
	}
}

82 
	$l£ek_badfd
(
fd
)

84  
	`l£ek
(
fd
, 0, 
SEEK_SET
);

85 
	}
}

89 
	$fsync_badfd
(
fd
)

91  
	`fsync
(
fd
);

92 
	}
}

96 
	$·runˇã_badfd
(
fd
)

98  
	`·runˇã
(
fd
, 60);

99 
	}
}

103 
	$f°©_badfd
(
fd
)

105 
°©
 
sb
;

106  
	`f°©
(
fd
, &
sb
);

107 
	}
}

111 
	$gëdúíåy_badfd
(
fd
)

113 
buf
[32];

114  
	`gëdúíåy
(
fd
, 
buf
, (buf));

115 
	}
}

119 
	$dup2_badfd
(
fd
)

122  
	`dup2
(
fd
, 
CLOSED_FD
+1);

123 
	}
}

127 
	$dup2_˛ónup
()

129 
	`˛o£
(
CLOSED_FD
+1);

130 
	}
}

136 
™y_badfd
((*
func
)(
fd
), (*
˛ónup
)(), c⁄° *
ˇŒ«me
,

137 
fd
, c⁄° *
fddesc
)

139 
fuŒdesc
[128];

140 
rv
;

142 
	`¢¥ötf
(
fuŒdesc
, (fuŒdesc), "%†usög %s", 
ˇŒ«me
, 
fddesc
);

143 
rv
 = 
	`func
(
fd
);

144 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EBADF
, 
fuŒdesc
);

145 i‡(
˛ónup
) {

146 
	`˛ónup
();

148 
	}
}

152 
ru¡e°
((*
func
)(
fd
), (*
˛ónup
)(), c⁄° *
ˇŒ«me
)

159 
	`™y_badfd
(
func
, 
˛ónup
, 
ˇŒ«me
, -1, "fd -1");

162 
	`™y_badfd
(
func
, 
˛ónup
, 
ˇŒ«me
, -5, "fd -5");

165 
	`™y_badfd
(
func
, 
˛ónup
, 
ˇŒ«me
, 
CLOSED_FD
, "closed fd");

168 
	`™y_badfd
(
func
, 
˛ónup
, 
ˇŒ«me
, 
IMPOSSIBLE_FD
, "impossible fd");

171 #ifde‡
OPEN_MAX


172 
	`™y_badfd
(
func
, 
˛ónup
, 
ˇŒ«me
, 
OPEN_MAX
, "fd OPEN_MAX");

174 
	`w¨nx
("Warning: OPEN_MAXÇot defined,Åest skipped");

176 
	}
}

180 
	#T
(
ˇŒ
) \

182 
ã°_
##
ˇŒ
##
	`_fd
() \

184 
	`ru¡e°
(
ˇŒ
##
_badfd
, 
NULL
, #call); \

185 }

	)

187 
	#TC
(
ˇŒ
) \

189 
ã°_
##
ˇŒ
##
	`_fd
() \

191 
	`ru¡e°
(
ˇŒ
##
_badfd
, cÆl##
_˛ónup
, #call);\

192 }

	)

194 
T
(
ªad
);

195 
T
(
wrôe
);

196 
T
(
˛o£
);

197 
T
(
io˘l
);

198 
T
(
l£ek
);

199 
T
(
fsync
);

200 
T
(
·runˇã
);

201 
T
(
f°©
);

202 
T
(
gëdúíåy
);

203 
TC
(
dup2
);

	@os161/user/testbin/badcall/common_path.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<limôs.h
>

41 
	~<î∫o.h
>

42 
	~<îr.h
>

44 
	~"c⁄fig.h
"

45 
	~"ã°.h
"

49 
	$›í_bad∑th
(c⁄° *
∑th
)

51  
	`›í
(
∑th
, 
O_RDONLY
);

52 
	}
}

56 
	$ªmove_bad∑th
(c⁄° *
∑th
)

58  
	`ªmove
(
∑th
);

59 
	}
}

63 
	$ª«me_bad∑th1
(c⁄° *
∑th
)

65  
	`ª«me
(
∑th
, 
TESTFILE
);

66 
	}
}

70 
	$ª«me_bad∑th2
(c⁄° *
∑th
)

72  
	`ª«me
(
TESTFILE
, 
∑th
);

73 
	}
}

77 
	$lök_bad∑th1
(c⁄° *
∑th
)

79  
	`lök
(
∑th
, 
TESTFILE
);

80 
	}
}

84 
	$lök_bad∑th2
(c⁄° *
∑th
)

86  
	`lök
(
TESTFILE
, 
∑th
);

87 
	}
}

91 
	$mkdú_bad∑th
(c⁄° *
∑th
)

93  
	`mkdú
(
∑th
, 0775);

94 
	}
}

98 
	$rmdú_bad∑th
(c⁄° *
∑th
)

100  
	`rmdú
(
∑th
);

101 
	}
}

105 
	$chdú_bad∑th
(c⁄° *
∑th
)

107  
	`chdú
(
∑th
);

108 
	}
}

112 
	$symlök_bad∑th1
(c⁄° *
∑th
)

114  
	`symlök
(
∑th
, 
TESTFILE
);

115 
	}
}

119 
	$symlök_bad∑th2
(c⁄° *
∑th
)

121  
	`symlök
(
TESTFILE
, 
∑th
);

122 
	}
}

126 
	$ªadlök_bad∑th
(c⁄° *
∑th
)

128 
buf
[128];

129  
	`ªadlök
(
∑th
, 
buf
, (buf));

130 
	}
}

134 
	$l°©_bad∑th
(c⁄° *
«me
)

136 
°©
 
sb
;

137  
	`l°©
(
«me
, &
sb
);

138 
	}
}

142 
	$°©_bad∑th
(c⁄° *
«me
)

144 
°©
 
sb
;

145  
	`°©
(
«me
, &
sb
);

146 
	}
}

152 
comm⁄_bad∑th
((*
func
)(c⁄° *
∑th
), 
mk
, 
rm
, const *path,

153 c⁄° *
ˇŒ
, c⁄° *
∑thdesc
)

155 
mydesc
[128];

156 
rv
;

158 i‡(
mk
) {

159 i‡(
	`¸óã_ã°fûe
()<0) {

164 
	`¢¥ötf
(
mydesc
, (mydesc), "%†wôh %†∑th", 
ˇŒ
, 
∑thdesc
);

165 
rv
 = 
	`func
(
∑th
);

166 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
mydesc
);

168 i‡(
mk
 || 
rm
) {

169 
	`ªmove
(
TESTFILE
);

171 
	}
}

175 
™y_bad∑th
((*
func
)(c⁄° *
∑th
), c⁄° *
ˇŒ
, 
mk
, 
rm
)

177 
	`comm⁄_bad∑th
(
func
, 
mk
, 
rm
, 
NULL
, 
ˇŒ
, "NULL");

178 
	`comm⁄_bad∑th
(
func
, 
mk
, 
rm
, 
INVAL_PTR
, 
ˇŒ
, "invalid-pointer");

179 
	`comm⁄_bad∑th
(
func
, 
mk
, 
rm
, 
KERN_PTR
, 
ˇŒ
, "kernel-pointer");

180 
	}
}

185 
	#T
(
ˇŒ
) \

187 
ã°_
##
ˇŒ
##
	`_∑th
() \

189 
	`™y_bad∑th
(
ˇŒ
##
_bad∑th
, #call, 0, 0); \

190 }

	)

192 
T
(
›í
);

193 
T
(
ªmove
);

194 
T
(
mkdú
);

195 
T
(
rmdú
);

196 
T
(
chdú
);

197 
T
(
ªadlök
);

198 
T
(
°©
);

199 
T
(
l°©
);

202 
	#T2
(
ˇŒ
) \

204 
ã°_
##
ˇŒ
##
	`_∑ths
() \

206 
	`™y_bad∑th
(
ˇŒ
##
_bad∑th1
, #call "(arg1)", 0, 1); \

207 
	`™y_bad∑th
(
ˇŒ
##
_bad∑th2
, #call "(arg2)", 1, 1); \

208 }

	)

210 
T2
(
ª«me
);

211 
T2
(
lök
);

212 
T2
(
symlök
);

	@os161/user/testbin/badcall/config.h

37 #i‡
deföed
(
__mùs__
)

38 
	#KERN_PTR
 ((*)0x80000000Ë

	)

39 
	#INVAL_PTR
 ((*)0x40000000Ë

	)

48 
	#CLOSED_FD
 10

	)

51 
	#IMPOSSIBLE_FD
 1234567890

	)

54 
	#NONEXIST_PID
 34000

	)

57 #ifde‡
ESRCH


58 
	#NOSUCHPID_ERROR
 
ESRCH


	)

60 
	#NOSUCHPID_ERROR
 
EINVAL


	)

64 
	#MAGIC_STATUS
 107

	)

67 
	#NONEXIST_IOCTL
 12345

	)

	@os161/user/testbin/badcall/driver.c

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<uni°d.h
>

36 
	~<î∫o.h
>

37 
	~<îr.h
>

39 
	~"c⁄fig.h
"

40 
	~"ã°.h
"

46 
	$födîr‹
(
rv
, 
îr‹
)

48 i‡(
rv
==-1) {

49  
îr‹
;

54 
	}
}

57 
	$ªp‹t_survivÆ
(
rv
, 
îr‹
, c⁄° *
desc
)

60 
î∫o
 = 
	`födîr‹
(
rv
, 
îr‹
);

61 
	`w¨n
("∑s£d: %s", 
desc
);

62 
	}
}

65 
	$ªp‹t_ã°
(
rv
, 
îr‹
, 
right_îr‹
, c⁄° *
desc
)

67 
gŸîr‹
 = 
	`födîr‹
(
rv
, 
îr‹
);

69 i‡(
gŸîr‹
 =
right_îr‹
) {

70 
	`w¨nx
("∑s£d: %s", 
desc
);

72 i‡(
gŸîr‹
 =
EUNIMP
 || gŸîr‹ =
ENOSYS
) {

73 
	`w¨nx
("------: %†(unim∂emíãd)", 
desc
);

76 
î∫o
 = 
gŸîr‹
;

77 
	`w¨n
("FAILURE: %s", 
desc
);

79 
	}
}

82 
	$ªp‹t_ã°2
(
rv
, 
îr‹
, 
okîr1
, 
okîr2
, c⁄° *
desc
)

84 
gŸîr‹
 = 
	`födîr‹
(
rv
, 
îr‹
);

85 i‡(
gŸîr‹
 =
okîr1
 || gŸîr‹ =
okîr2
) {

86 
	`w¨nx
("∑s£d: %s", 
desc
);

88 i‡(
gŸîr‹
 =
EUNIMP
 || gŸîr‹ =
ENOSYS
) {

89 
	`w¨nx
("------: %†(unim∂emíãd)", 
desc
);

92 
î∫o
 = 
gŸîr‹
;

93 
	`w¨n
("FAILURE: %s", 
desc
);

95 
	}
}

100 
	$›í_ã°fûe
(c⁄° *
°rög
)

102 
fd
, 
rv
;

103 
size_t
 
Àn
;

105 
fd
 = 
	`›í
(
TESTFILE
, 
O_RDWR
|
O_CREAT
|
O_TRUNC
);

106 i‡(
fd
<0) {

107 
	`w¨n
("UH-OH: cª©ög %s: faûed", 
TESTFILE
);

111 i‡(
°rög
) {

112 
Àn
 = 
	`°æí
(
°rög
);

113 
rv
 = 
	`wrôe
(
fd
, 
°rög
, 
Àn
);

114 i‡(
rv
<0) {

115 
	`w¨n
("UH-OH: wrôêtÿ%†Áûed", 
TESTFILE
);

116 
	`˛o£
(
fd
);

117 
	`ªmove
(
TESTFILE
);

120 i‡(()
rv
 !
Àn
) {

121 
	`w¨nx
("UH-OH: wrôêtÿ%†gŸ sh‹àcou¡", 
TESTFILE
);

122 
	`˛o£
(
fd
);

123 
	`ªmove
(
TESTFILE
);

126 
rv
 = 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

127 i‡(
rv
<0) {

128 
	`w¨n
("UH-OH:Ñewöd o‡%†Áûed", 
TESTFILE
);

129 
	`˛o£
(
fd
);

130 
	`ªmove
(
TESTFILE
);

134  
fd
;

135 
	}
}

138 
	$¸óã_ã°fûe
()

140 
fd
, 
rv
;

142 
fd
 = 
	`›í_ã°fûe
(
NULL
);

143 i‡(
fd
<0) {

147 
rv
 = 
	`˛o£
(
fd
);

148 i‡(
rv
<0) {

149 
	`w¨n
("UH-OH: closög %†Áûed", 
TESTFILE
);

154 
	}
}

157 
	$¸óã_ã°dú
()

159 
rv
;

160 
rv
 = 
	`mkdú
(
TESTDIR
, 0775);

161 i‡(
rv
<0) {

162 
	`w¨n
("UH-OH: mkdú %†Áûed", 
TESTDIR
);

166 
	}
}

169 
	$¸óã_ã°lök
()

171 
rv
;

172 
rv
 = 
	`symlök
("bœhbœh", 
TESTLINK
);

173 i‡(
rv
<0) {

174 
	`w¨n
("UH-OH: makög symlök %†Áûed", 
TESTLINK
);

178 
	}
}

184 
	mch
;

185 
	mas°
;

186 c⁄° *
	m«me
;

187 (*
	mf
)();

188 } 
	g›s
[] = {

189 { 'a', 2, "execv", 
ã°_execv
 },

190 { 'b', 2, "waôpid", 
ã°_waôpid
 },

191 { 'c', 2, "›í", 
ã°_›í
 },

192 { 'd', 2, "ªad", 
ã°_ªad
 },

193 { 'e', 2, "wrôe", 
ã°_wrôe
 },

194 { 'f', 2, "˛o£", 
ã°_˛o£
 },

195 { 'g', 0, "ªboŸ", 
ã°_ªboŸ
 },

196 { 'h', 3, "sbrk", 
ã°_sbrk
 },

197 { 'i', 5, "io˘l", 
ã°_io˘l
 },

198 { 'j', 2, "l£ek", 
ã°_l£ek
 },

199 { 'k', 4, "fsync", 
ã°_fsync
 },

200 { 'l', 4, "·runˇã", 
ã°_·runˇã
 },

201 { 'm', 4, "f°©", 
ã°_f°©
 },

202 { 'n', 4, "ªmove", 
ã°_ªmove
 },

203 { 'o', 4, "ª«me", 
ã°_ª«me
 },

204 { 'p', 5, "lök", 
ã°_lök
 },

205 { 'q', 4, "mkdú", 
ã°_mkdú
 },

206 { 'r', 4, "rmdú", 
ã°_rmdú
 },

207 { 's', 2, "chdú", 
ã°_chdú
 },

208 { 't', 4, "gëdúíåy", 
ã°_gëdúíåy
 },

209 { 'u', 5, "symlök", 
ã°_symlök
 },

210 { 'v', 5, "ªadlök", 
ã°_ªadlök
 },

211 { 'w', 2, "dup2", 
ã°_dup2
 },

212 { 'x', 5, "pùe", 
ã°_pùe
 },

213 { 'y', 5, "__time", 
ã°_time
 },

214 { 'z', 2, "__gëcwd", 
ã°_gëcwd
 },

215 { '{', 5, "°©", 
ã°_°©
 },

216 { '|', 5, "l°©", 
ã°_l°©
 },

217 { 0, 0, 
NULL
, NULL }

220 
	#LOWEST
 'a'

	)

221 
	#HIGHEST
 '|'

	)

225 
	$míu
()

227 
i
;

228 
i
=0; 
›s
[i].
«me
; i++) {

229 
	`¥ötf
("[%c] %-24s", 
›s
[
i
].
ch
, ops[i].
«me
);

230 i‡(
i
%2==1) {

231 
	`¥ötf
("\n");

234 i‡(
i
%2==1) {

235 
	`¥ötf
("\n");

237 
	`¥ötf
("[1] %-24s", "asst1");

238 
	`¥ötf
("[2] %-24s\n", "asst2");

239 
	`¥ötf
("[3] %-24s", "asst3");

240 
	`¥ötf
("[4] %-24s\n", "asst4");

241 
	`¥ötf
("[*] %-24s", "all");

242 
	`¥ötf
("[!] %-24s\n", "quit");

243 
	}
}

247 
	$runô
(
›
)

249 
i
, 
k
;

251 i‡(
›
=='!') {

252 
	`exô
(0);

255 i‡(
›
=='?') {

256 
	`míu
();

260 i‡(
›
=='*') {

261 
i
=0; 
›s
[i].
«me
; i++) {

262 
	`¥ötf
("[%s]\n", 
›s
[
i
].
«me
);

263 
›s
[
i
].
	`f
();

268 i‡(
›
>='1' && op <= '4') {

269 
k
 = 
›
-'0';

270 
i
=0; 
›s
[i].
«me
; i++) {

271 i‡(
›s
[
i
].
as°
 <
k
) {

272 
	`¥ötf
("[%s]\n", 
›s
[
i
].
«me
);

273 
›s
[
i
].
	`f
();

279 i‡(
›
 < 
LOWEST
 || o∞> 
HIGHEST
) {

280 
	`¥ötf
("InvÆidÑeque° %c\n", 
›
);

284 
›s
[
›
-'a'].
	`f
();

285 
	}
}

288 
	$maö
(
¨gc
, **
¨gv
)

290 
›
, 
i
, 
j
;

292 
	`¥ötf
("[%c-%c, 1-4, *, ?=míu, !=quô]\n", 
LOWEST
, 
HIGHEST
);

294 i‡(
¨gc
 > 1) {

295 
i
=1; i<
¨gc
; i++) {

296 
j
=0; 
¨gv
[
i
][j]; j++) {

297 
	`¥ötf
("Choose: %c\n",

298 
¨gv
[
i
][
j
]);

299 
	`runô
(
¨gv
[
i
][
j
]);

304 
	`míu
();

306 
	`¥ötf
("Choose: ");

307 
›
 = 
	`gëch¨
();

308 i‡(
›
==
EOF
) {

311 
	`¥ötf
("%c\n", 
›
);

312 
	`runô
(
›
);

317 
	}
}

	@os161/user/testbin/badcall/test.h

30 
	#TESTFILE
 "badˇŒfûe"

	)

31 
	#TESTDIR
 "badˇŒdú"

	)

32 
	#TESTLINK
 "badˇŒlök"

	)

35 
ªp‹t_survivÆ
(
rv
, 
îr‹
, c⁄° *
desc
);

36 
ªp‹t_ã°
(
rv
, 
îr‹
, 
right_îr‹
, c⁄° *
desc
);

37 
ªp‹t_ã°2
(
rv
, 
îr‹
, 
okîr1
, 
okîr2
, c⁄° *
desc
);

38 
›í_ã°fûe
(c⁄° *
°r
);

39 
¸óã_ã°fûe
();

40 
¸óã_ã°dú
();

41 
¸óã_ã°lök
();

44 
ã°_ªad_buf
();

45 
ã°_wrôe_buf
();

46 
ã°_gëdúíåy_buf
();

47 
ã°_gëcwd_buf
();

48 
ã°_ªadlök_buf
();

51 
ã°_ªad_fd
();

52 
ã°_wrôe_fd
();

53 
ã°_˛o£_fd
();

54 
ã°_io˘l_fd
();

55 
ã°_l£ek_fd
();

56 
ã°_fsync_fd
();

57 
ã°_·runˇã_fd
();

58 
ã°_f°©_fd
();

59 
ã°_gëdúíåy_fd
();

60 
ã°_dup2_fd
();

63 
ã°_›í_∑th
();

64 
ã°_ªmove_∑th
();

65 
ã°_ª«me_∑ths
();

66 
ã°_lök_∑ths
();

67 
ã°_mkdú_∑th
();

68 
ã°_rmdú_∑th
();

69 
ã°_chdú_∑th
();

70 
ã°_symlök_∑ths
();

71 
ã°_ªadlök_∑th
();

72 
ã°_°©_∑th
();

73 
ã°_l°©_∑th
();

76 
ã°_execv
();

77 
ã°_waôpid
();

78 
ã°_›í
();

79 
ã°_ªad
();

80 
ã°_wrôe
();

81 
ã°_˛o£
();

82 
ã°_ªboŸ
();

83 
ã°_sbrk
();

84 
ã°_io˘l
();

85 
ã°_l£ek
();

86 
ã°_fsync
();

87 
ã°_·runˇã
();

88 
ã°_f°©
();

89 
ã°_ªmove
();

90 
ã°_ª«me
();

91 
ã°_lök
();

92 
ã°_mkdú
();

93 
ã°_rmdú
();

94 
ã°_chdú
();

95 
ã°_gëdúíåy
();

96 
ã°_symlök
();

97 
ã°_ªadlök
();

98 
ã°_dup2
();

99 
ã°_pùe
();

100 
ã°_time
();

101 
ã°_gëcwd
();

102 
ã°_°©
();

103 
ã°_l°©
();

	@os161/user/testbin/bigfile/bigfile.c

39 
	~<°dlib.h
>

40 
	~<°dio.h
>

41 
	~<°rög.h
>

42 
	~<uni°d.h
>

43 
	~<îr.h
>

45 
	gbuf„r
[100];

48 
	$maö
(
¨gc
, *
¨gv
[])

50 c⁄° *
fûíame
;

51 
i
, 
size
;

52 
fûeid
;

53 
Àn
;

55 i‡(
¨gc
 != 3) {

56 
	`îrx
(1, "Usage: bigfile <filename> <size>");

59 
fûíame
 = 
¨gv
[1];

60 
size
 = 
	`©oi
(
¨gv
[2]);

62 
	`¥ötf
("Cª©ögá fûêo‡sizê%d\n", 
size
);

64 
fûeid
 = 
	`›í
(
fûíame
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
);

65 i‡(
fûeid
 < 0) {

66 
	`îr
(1, "%s: cª©e", 
fûíame
);

69 
i
=0;

70 
i
<
size
) {

71 
	`¢¥ötf
(
buf„r
, (buf„r), "%-10d", 
i
);

72 
Àn
 = 
	`wrôe
(
fûeid
, 
buf„r
, 
	`°æí
(buffer));

73 i‡(
Àn
<0) {

74 
	`îr
(1, "%s: wrôe", 
fûíame
);

76 
i
 +
Àn
;

79 
	`˛o£
(
fûeid
);

82 
	}
}

	@os161/user/testbin/conman/conman.c

37 
	~<uni°d.h
>

38 
	~<îr.h
>

41 
	$maö
() {

42 
ch
=0;

43 
Àn
;

45 
ch
!='q') {

46 
Àn
 = 
	`ªad
(
STDIN_FILENO
, &
ch
, 1);

47 i‡(
Àn
 < 0) {

48 
	`îr
(1, "stdin:Ñead");

50 i‡(
Àn
==0) {

54 
	`wrôe
(
STDOUT_FILENO
, &
ch
, 1);

57 
	}
}

	@os161/user/testbin/crash/crash.c

44 
	~<°dio.h
>

45 
	~<°döt.h
>

46 
	~<uni°d.h
>

47 
	~<îr.h
>

49 #i‡
deföed
(
__mùs__
)

50 
	#KERNEL_ADDR
 0x80000000

	)

51 
	#INVAL_ADDR
 0x40000000

	)

52 
	#INSN_TYPE
 
uöt32_t


	)

53 
	#INVAL_INSN
 0x0000003f

	)

58 (*
	tfunc
)();

62 
	$ªad_‰om_nuŒ
()

64 *
nuŒ
 = 
NULL
;

65 vﬁ©ûê
x
;

66 
x
 = *
nuŒ
;

67 
	}
}

71 
	$ªad_‰om_övÆ
()

73 *
±r
 = (*Ë
INVAL_ADDR
;

74 vﬁ©ûê
x
;

75 
x
 = *
±r
;

76 
	}
}

80 
	$ªad_‰om_kî√l
()

82 *
±r
 = (*Ë
KERNEL_ADDR
;

83 vﬁ©ûê
x
;

84 
x
 = *
±r
;

85 
	}
}

89 
	$wrôe_to_nuŒ
()

91 *
nuŒ
 = 
NULL
;

92 *
nuŒ
 = 6;

93 
	}
}

97 
	$wrôe_to_övÆ
()

99 *
±r
 = (*Ë
INVAL_ADDR
;

100 *
±r
 = 8;

101 
	}
}

105 
	$wrôe_to_code
()

107 
INSN_TYPE
 *
x
 = (INSN_TYPE *)
wrôe_to_code
;

108 *
x
 = 
INVAL_INSN
;

109 
	}
}

113 
	$wrôe_to_kî√l
()

115 *
±r
 = (*Ë
KERNEL_ADDR
;

116 *
±r
 = 8;

117 
	}
}

121 
	$jump_to_nuŒ
()

123 
func
 
f
 = 
NULL
;

124 
	`f
();

125 
	}
}

129 
	$jump_to_övÆ
()

131 
func
 
f
 = (funcË
INVAL_ADDR
;

132 
	`f
();

133 
	}
}

137 
	$jump_to_kî√l
()

139 
func
 
f
 = (funcË
KERNEL_ADDR
;

140 
	`f
();

141 
	}
}

146 
	$ûÀgÆ_ö°ru˘i⁄
()

148 #i‡
	`deföed
(
__mùs__
)

149 
	`asm
(".long 0x0000003f");

153 
	}
}

157 
	$Æignmít_îr‹
()

159 
x
;

160 *
±r
 = &
x
;

161 *
bad±r
 = (*)(((*)
±r
)+1);

163 vﬁ©ûê
j
;

164 
j
 = *
bad±r
;

165 
	}
}

169 
	$divide_by_zîo
()

171 vﬁ©ûê
x
 = 6;

172 vﬁ©ûê
z
 = 0;

173 vﬁ©ûê
a
;

175 
a
 = 
x
/
z
;

176 
	}
}

180 
	$mod_by_zîo
()

182 vﬁ©ûê
x
 = 6;

183 vﬁ©ûê
z
 = 0;

184 vﬁ©ûê
a
;

186 
a
 = 
x
%
z
;

187 
	}
}

191 
	$ªcur£_öf
()

193 vﬁ©ûê
buf
[16];

194 
buf
[0] = 0;

195 
	`ªcur£_öf
();

196 
buf
[0] = 1;

197 
	}
}

202 
	mch
;

203 c⁄° *
	m«me
;

204 
func
 
	mf
;

205 } 
	g›s
[] = {

206 { 'a', "ªad from NULL", 
ªad_‰om_nuŒ
 },

207 { 'b', "ªad from invÆidáddªss", 
ªad_‰om_övÆ
 },

208 { 'c', "ªad from kî√»addªss", 
ªad_‰om_kî√l
 },

209 { 'd', "wrôêtÿNULL", 
wrôe_to_nuŒ
 },

210 { 'e', "wrôêtÿövÆidáddªss", 
wrôe_to_övÆ
 },

211 { 'f', "wrôêtÿcodê£gmít", 
wrôe_to_code
 },

212 { 'g', "wrôêtÿkî√»addªss", 
wrôe_to_kî√l
 },

213 { 'h', "jum∞tÿNULL", 
jump_to_nuŒ
 },

214 { 'i', "jum∞tÿövÆidáddªss", 
jump_to_övÆ
 },

215 { 'j', "jum∞tÿkî√»addªss", 
jump_to_kî√l
 },

216 { 'k', "Æignmíàîr‹", 
Æignmít_îr‹
 },

217 { 'l', "ûÀgÆ in°ru˘i⁄", 
ûÀgÆ_ö°ru˘i⁄
 },

218 { 'm', "dividêby zîo", 
divide_by_zîo
 },

219 { 'n', "mod by zîo", 
mod_by_zîo
 },

220 { 'o', "Recur£ inföôñy", 
ªcur£_öf
 },

221 { 0, 
NULL
, NULL }

225 
	$maö
(
¨gc
, **
¨gv
)

227 
›
, 
i
, 
°©us
;

228 
pid_t
 
pid
;

230 i‡(
¨gc
 == 2) {

231 
›
 = 
¨gv
[1][0];

234 
i
=0; 
›s
[i].
«me
; i++) {

235 
	`¥ötf
("[%c] %s\n", 
›s
[
i
].
ch
, ops[i].
«me
);

237 
	`¥ötf
("[*] RunÉverything (in subprocesses)\n");

238 
	`¥ötf
("Note: [f] mayÇot causeánÉxception on some "

241 
	`¥ötf
("Choose: ");

242 
›
 = 
	`gëch¨
();

245 i‡(
›
=='*') {

246 
i
=0; 
›s
[i].
«me
; i++) {

247 
	`¥ötf
("Ru¬ög: [%c] %s\n", 
›s
[
i
].
ch
, ops[i].
«me
);

248 
pid
 = 
	`f‹k
();

249 i‡(
pid
<0) {

251 
	`w¨n
("fork");

253 i‡(
pid
==0) {

255 
›s
[
i
].
	`f
();

256 
	`¥ötf
("I wasn't killed -Åest fails!\n");

257 
	`_exô
(1);

259 
	`waôpid
(
pid
, &
°©us
, 0);

260 i‡(
	`WIFSIGNALED
(
°©us
)) {

261 
	`¥ötf
("Sig«»%d\n", 
	`WTERMSIG
(
°©us
));

264 
	`¥ötf
("Exô %d\n", 
	`WEXITSTATUS
(
°©us
));

270 
›s
[
›
-'a'].
	`f
();

272 
	`¥ötf
("I wasn't killed -Åest fails!\n");

276 
	}
}

	@os161/user/testbin/ctest/ctest.c

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

47 
	#SIZE
 (1024*1024/(
íåy
))

	)

48 
	#DEFAULT
 477

	)

50 
	síåy
 {

51 
íåy
 *
	me
;

54 
íåy
 
	g¨øy
[
SIZE
];

57 
	$maö
(
¨gc
, **
¨gv
)

59 vﬁ©ûê
íåy
 *
e
;

60 
i
, 
°ride
;

62 
°ride
 = 
DEFAULT
;

63 i‡(
¨gc
 == 2) {

64 
°ride
 = 
	`©oi
(
¨gv
[1]);

66 i‡(
°ride
 <0 || 
¨gc
 > 2) {

67 
	`¥ötf
("Usage: ctest [stridesize]\n");

68 
	`¥ötf
(" stridesize shouldÇot beá multiple of 2.\n");

72 
	`¥ötf
("Sèπög cã°: såidê%d\n", 
°ride
);

81 
i
=0; i<
SIZE
; i++) {

82 
¨øy
[
i
].
e
 = &¨øy[(i+
°ride
Ë% 
SIZE
];

91 
e
 = &
¨øy
[0];

92 
i
=0; i<
SIZE
; i++) {

93 i‡(
i
 % 
°ride
 == 0) {

94 
	`putch¨
('.');

96 
e
 =É->e;

99 
	`¥ötf
("\nDone!\n");

101 
	}
}

	@os161/user/testbin/dirconc/dirconc.c

37 
	~<sys/ty≥s.h
>

38 
	~<sys/waô.h
>

39 
	~<sys/°©.h
>

40 
	~<î∫o.h
>

41 
	~<°dio.h
>

42 
	~<uni°d.h
>

43 
	~<°dlib.h
>

44 
	~<°d¨g.h
>

45 
	~<°rög.h
>

47 
	#NTRIES
 100

	)

48 
	#NPROCS
 5

	)

50 
	#TESTDIR
 "dúc⁄c"

	)

51 
	#NNAMES
 4

	)

52 
	#NAMESIZE
 32

	)

56 c⁄° *c⁄° 
	g«mes
[
NNAMES
] = {

65 
	$choo£_«me
(*
buf
, 
size_t
 
Àn
)

67 c⁄° *
a
, *
b
, *
c
;

69 
a
 = 
«mes
[
	`øndom
()%
NNAMES
];

70 i‡(
	`øndom
()%2==0) {

71 
	`¢¥ötf
(
buf
, 
Àn
, "%s", 
a
);

74 
b
 = 
«mes
[
	`øndom
()%
NNAMES
];

75 i‡(
	`øndom
()%2==0) {

76 
	`¢¥ötf
(
buf
, 
Àn
, "%s/%s", 
a
, 
b
);

79 
c
 = 
«mes
[
	`øndom
()%
NNAMES
];

80 
	`¢¥ötf
(
buf
, 
Àn
, "%s/%s/%s", 
a
, 
b
, 
c
);

81 
	}
}

91 #ifde‡
__GNUC__


92 
__©åibuã__
((
	$__f‹m©__
(
__¥ötf__
, 1, 2)))

94 
	$ßy
(c⁄° *
fmt
, ...)

96 
buf
[512];

97 
va_li°
 
≠
;

98 
	`va_°¨t
(
≠
, 
fmt
);

99 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
≠
);

100 
	`va_íd
(
≠
);

101 
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
	`°æí
(buf));

102 
	}
}

108 
	$d‹íame
(c⁄° *
«me1
, c⁄° *
«me2
)

110 i‡(
	`ª«me
(
«me1
, 
«me2
) < 0) {

111 
î∫o
) {

112 
ENOENT
:

113 
ENOTEMPTY
:

114 
EINVAL
:

117 
	`ßy
("pid %d:Ñename %s -> %s: %s\n",

118 
	`gëpid
(), 
«me1
, 
«me2
, 
	`°ªº‹
(
î∫o
));

122 
	}
}

126 
	$domkdú
(c⁄° *
«me
)

128 i‡(
	`mkdú
(
«me
, 0775)<0) {

129 
î∫o
) {

130 
ENOENT
:

131 
EEXIST
:

134 
	`ßy
("pid %d: mkdir %s: %s\n",

135 
	`gëpid
(), 
«me
, 
	`°ªº‹
(
î∫o
));

139 
	}
}

143 
	$d‹mdú
(c⁄° *
«me
)

145 i‡(
	`rmdú
(
«me
)<0) {

146 
î∫o
) {

147 
ENOENT
:

148 
ENOTEMPTY
:

151 
	`ßy
("pid %d:Ñmdir %s: %s\n",

152 
	`gëpid
(), 
«me
, 
	`°ªº‹
(
î∫o
));

156 
	}
}

160 
	$˛ónup_rmdú
(c⁄° *
«me
)

162 i‡(
	`rmdú
(
«me
)<0) {

163 
î∫o
) {

164 
ENOENT
:

167 
	`ßy
("cleanup (pid %d):Ñmdir %s: %s\n",

168 
	`gëpid
(), 
«me
, 
	`°ªº‹
(
î∫o
));

172 
	}
}

178 
	$ª«me_¥oc
()

180 
«me1
[
NAMESIZE
], 
«me2
[NAMESIZE];

181 
˘
;

183 
˘
=0; ct<
NTRIES
; ct++) {

184 
	`choo£_«me
(
«me1
, (name1));

185 
	`choo£_«me
(
«me2
, (name2));

186 
	`ßy
("pid %2d:Ñíamê%†-> %s\n", ()
	`gëpid
(), 
«me1
, 
«me2
);

187 
	`d‹íame
(
«me1
, 
«me2
);

189 
	}
}

193 
	$mkdú_¥oc
()

195 
«me
[
NAMESIZE
];

196 
˘
;

198 
˘
=0; ct<
NTRIES
; ct++) {

199 
	`choo£_«me
(
«me
, (name));

200 
	`ßy
("pid %2d: mkdú %s\n", ()
	`gëpid
(), 
«me
);

201 
	`domkdú
(
«me
);

203 
	}
}

207 
	$rmdú_¥oc
()

209 
«me
[
NAMESIZE
];

210 
˘
;

212 
˘
=0; ct<
NTRIES
; ct++) {

213 
	`choo£_«me
(
«me
, (name));

214 
	`ßy
("pid %2d:Ñmdú %s\n", ()
	`gëpid
(), 
«me
);

215 
	`d‹mdú
(
«me
);

217 
	}
}

222 
pid_t


223 
dof‹k
((*
func
)())

225 
pid_t
 
pid
;

227 
pid
 = 
	`f‹k
();

228 i‡(
pid
 < 0) {

229 
	`ßy
("f‹k: %s\n", 
	`°ªº‹
(
î∫o
));

232 i‡(
pid
 == 0) {

234 
	`func
();

235 
	`exô
(0);

237  
pid
;

238 
	}
}

242 
	$run
()

244 
pid_t
 
pids
[
NPROCS
*4], 
wp
;

245 
i
, 
°©us
;

247 
i
=0; i<
NPROCS
; i++) {

248 
pids
[
i
*4] = 
	`dof‹k
(
mkdú_¥oc
);

249 
pids
[
i
*4+1] = 
	`dof‹k
(
mkdú_¥oc
);

250 
pids
[
i
*4+2] = 
	`dof‹k
(
ª«me_¥oc
);

251 
pids
[
i
*4+3] = 
	`dof‹k
(
rmdú_¥oc
);

254 
i
=0; i<
NPROCS
*4; i++) {

255 i‡(
pids
[
i
]>=0) {

256 
wp
 = 
	`waôpid
(
pids
[
i
], &
°©us
, 0);

257 i‡(
wp
<0) {

258 
	`ßy
("waôpid %d: %s\n", (Ë
pids
[
i
],

259 
	`°ªº‹
(
î∫o
));

261 i‡(
	`WIFSIGNALED
(
°©us
)) {

262 
	`ßy
("pid %d: sig«»%d\n", (Ë
pids
[
i
],

263 
	`WTERMSIG
(
°©us
));

265 i‡(
	`WIFEXITED
(
°©us
Ë&& 
	`WEXITSTATUS
(status)!=0) {

266 
	`ßy
("pid %d:Éxô %d\n", (Ë
pids
[
i
],

267 
	`WEXITSTATUS
(
°©us
));

271 
	}
}

277 
	$£tup
(c⁄° *
fs
)

279 i‡(
	`chdú
(
fs
)<0) {

280 
	`ßy
("chdú: %s: %s\n", 
fs
, 
	`°ªº‹
(
î∫o
));

281 
	`exô
(1);

283 i‡(
	`mkdú
(
TESTDIR
, 0775)<0) {

284 
	`ßy
("mkdú: %s: %s\n", 
TESTDIR
, 
	`°ªº‹
(
î∫o
));

285 
	`exô
(1);

287 i‡(
	`chdú
(
TESTDIR
)<0) {

288 
	`ßy
("chdú: %s: %s\n", 
TESTDIR
, 
	`°ªº‹
(
î∫o
));

289 
	`exô
(1);

291 
	}
}

295 
	$ªcursive_˛ónup
(c⁄° *
soÁr
, 
dïth
)

297 
buf
[
NAMESIZE
*32];

298 
i
;

300 
i
=0; i<
NNAMES
; i++) {

301 
	`¢¥ötf
(
buf
, (buf), "%s/%s", 
soÁr
, 
«mes
[
i
]);

302 i‡(
	`rmdú
(
buf
)<0) {

303 i‡(
î∫o
==
ENOTEMPTY
) {

304 
	`ªcursive_˛ónup
(
buf
, 
dïth
+1);

305 
	`˛ónup_rmdú
(
buf
);

307 i‡(
î∫o
!=
ENOENT
) {

308 
	`ßy
("cleanup (pid %d):Ñmdir %s: %s\n",

309 
	`gëpid
(), 
buf
, 
	`°ªº‹
(
î∫o
));

313 
	}
}

317 
	$˛ónup
()

319 
	`ªcursive_˛ónup
(".", 0);

321 
	`chdú
("..");

322 
	`˛ónup_rmdú
(
TESTDIR
);

323 
	}
}

328 
	$maö
(
¨gc
, *
¨gv
[])

330 c⁄° *
fs
;

331 
£ed
 = 0;

333 
	`ßy
("Concurrent directory opsÅest\n");

335 i‡(
¨gc
==0 || 
¨gv
==
NULL
) {

336 
	`ßy
("Warning:árgc is 0 -ássuming you meanÅoÑun onÜhd1: "

338 
fs
 = "lhd1:";

340 i‡(
¨gc
==2) {

341 
fs
 = 
¨gv
[1];

343 i‡(
¨gc
==3) {

344 
fs
 = 
¨gv
[1];

345 
£ed
 = 
	`©oi
(
¨gv
[2]);

348 
	`ßy
("Usage: dirconc filesystem [random-seed]\n");

349 
	`exô
(1);

352 
	`§™dom
(
£ed
);

353 
	`£tup
(
fs
);

354 
	`ßy
("Sèπög i¿%s/%s\n", 
fs
, 
TESTDIR
);

356 
	`run
();

358 
	`ßy
("Cleaning up\n");

359 
	`˛ónup
();

362 
	}
}

	@os161/user/testbin/dirseek/dirseek.c

49 
	~<sys/ty≥s.h
>

50 
	~<sys/°©.h
>

51 
	~<uni°d.h
>

52 
	~<°rög.h
>

53 
	~<°dio.h
>

54 
	~<°dlib.h
>

55 
	~<îr.h
>

57 
	#TESTDIR
 "£ekã°dú"

	)

60 c⁄° *
	m«me
;

61 
	mmake_ô
;

62 
off_t
 
	mpos
;

63 } 
	gã°fûes
[] = {

84 { 
NULL
, 0, 0 }

91 
	gdúfd
;

95 
	$födíåy
(c⁄° *
«me
)

97 
i
;

99 
i
=0; 
ã°fûes
[i].
«me
; i++) {

100 i‡(!
	`°rcmp
(
ã°fûes
[
i
].
«me
,Çame)) {

101  
i
;

105 
	}
}

109 
	$›íô
()

111 
dúfd
 = 
	`›í
(".", 
O_RDONLY
);

112 i‡(
dúfd
 < 0) {

113 
	`îr
(1, ".: open");

115 
	}
}

119 
	$˛o£ô
()

121 i‡(
	`˛o£
(
dúfd
)<0) {

122 
	`îr
(1, ".: close");

124 
dúfd
 = -1;

125 
	}
}

129 
	$ªadô
()

131 
buf
[4096];

132 
off_t
 
pos
;

133 
Àn
;

134 
n
, 
i
, 
ix
;

136 
i
=0; 
ã°fûes
[i].
«me
; i++) {

137 
ã°fûes
[
i
].
pos
 = -1;

140 
pos
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_CUR
);

141 i‡(
pos
 < 0) {

142 
	`îr
(1, ".:Üseek(0, SEEK_CUR)");

144 
n
 = 0;

146 (
Àn
 = 
	`gëdúíåy
(
dúfd
, 
buf
, (buf)-1)) > 0) {

148 i‡(()
Àn
 >(
buf
)-1) {

149 
	`îrx
(1, ".:Éntry %d: getdirentryÑeturned "

150 "övÆidÜígth %d", 
n
, 
Àn
);

152 
buf
[
Àn
] = 0;

153 
ix
 = 
	`födíåy
(
buf
);

154 i‡(
ix
 < 0) {

155 
	`îrx
(1, ".:Éntry %d: getdirentryÑeturned "

156 "u√x≥˘edÇamê%s", 
n
, 
buf
);

159 i‡(
ã°fûes
[
ix
].
pos
 >= 0) {

160 
	`îrx
(1, ".:Éntry %d: getdirentryÑeturned "

161 "%†®£c⁄dÅime", 
n
, 
buf
);

164 
ã°fûes
[
ix
].
pos
 =Öos;

166 
pos
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_CUR
);

167 i‡(
pos
 < 0) {

168 
	`îr
(1, ".:Üseek(0, SEEK_CUR)");

170 
n
++;

172 i‡(
Àn
<0) {

173 
	`îr
(1, ".:É¡ry %d: gëdúíåy", 
n
);

176 
i
=0; 
ã°fûes
[i].
«me
; i++) {

177 i‡(
ã°fûes
[
i
].
pos
 < 0) {

178 
	`îrx
(1, ".: getdirentry failedÅoÑeturn %s",

179 
ã°fûes
[
i
].
«me
);

182 i‡(
i
!=
n
) {

189 
	`îrx
(1, ".: getdirentryÑeturned %dÇames,Çot %d (huh...?)",

190 
n
, 
i
);

192 
	}
}

196 
	$fú°ªad
()

198 
off_t
 
pos
;

200 
pos
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_CUR
);

201 i‡(
pos
 < 0) {

202 
	`îr
(1, ".:Üseek(0, SEEK_CUR)");

204 i‡(
pos
 != 0) {

205 
	`îrx
(1, ".: FileÖositionáfter openÇot 0");

208 
	`¥ötf
("Scanning directory...\n");

210 
	`ªadô
();

211 
	}
}

215 
	$d‹ód©0
()

217 
off_t
 
pos
;

219 
	`¥ötf
("Rewinding directoryándÑeading itágain...\n");

221 
pos
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_SET
);

222 i‡(
pos
 < 0) {

223 
	`îr
(1, ".:Üseek(0, SEEK_SET)");

225 i‡(
pos
 != 0) {

226 
	`îrx
(1, ".:Ü£ek(0, SEEK_SETËªtu∫ed %ld", (Ë
pos
);

229 
	`ªadô
();

230 
	}
}

234 
	$ªad⁄e
(c⁄° *
shouldbe
)

236 
buf
[4096];

237 
Àn
;

239 
Àn
 = 
	`gëdúíåy
(
dúfd
, 
buf
, (buf)-1);

240 i‡(
Àn
 < 0) {

241 
	`îr
(1, ".: getdirentry");

243 i‡(()
Àn
 >(
buf
)-1) {

244 
	`îrx
(1, ".: gëdúíåyÑëu∫ed invÆidÜígth %d", 
Àn
);

246 
buf
[
Àn
] = 0;

248 i‡(
	`°rcmp
(
buf
, 
shouldbe
)) {

249 
	`îrx
(1, ".: getdirentryÑeturned %s (expected %s)",

250 
buf
, 
shouldbe
);

252 
	}
}

256 
	$d‹ód⁄e
(
which
)

258 
off_t
 
pos
;

259 
pos
 = 
	`l£ek
(
dúfd
, 
ã°fûes
[
which
].pos, 
SEEK_SET
);

260 i‡(
pos
<0) {

261 
	`îr
(1, ".:Ü£ek(%ld, SEEK_SET)", (Ë
ã°fûes
[
which
].
pos
);

263 i‡(
pos
 !
ã°fûes
[
which
].pos) {

264 
	`îrx
(1, ".:Üseek(%ld, SEEK_SET)Ñeturned %ld",

265 (Ë
ã°fûes
[
which
].
pos
, ()Öos);

268 
	`ªad⁄e
(
ã°fûes
[
which
].
«me
);

269 
	}
}

273 
	$ªadÆl⁄eby⁄e
()

275 
i
;

277 
	`¥ötf
("TryingÅoÑeadÉachÉntryágain...\n");

278 
i
=0; 
ã°fûes
[i].
«me
; i++) {

279 
	`d‹ód⁄e
(
i
);

281 
	}
}

285 
	$ªadÆÃ™domly
()

287 
n
, 
i
, 
x
;

289 
	`¥ötf
("TryingÅoÑeadá bunch ofÉntriesÑandomly...\n");

291 
i
=0; 
ã°fûes
[i].
«me
; i++);

292 
n
 = 
i
;

294 
	`§™dom
(39584);

295 
i
=0; i<512; i++) {

296 
x
 = ()(
	`øndom
()%
n
);

297 
	`d‹ód⁄e
(
x
);

299 
	}
}

303 
	$ªad©eof
()

305 
buf
[4096];

306 
Àn
;

308 
Àn
 = 
	`gëdúíåy
(
dúfd
, 
buf
, (buf)-1);

309 i‡(
Àn
 < 0) {

310 
	`îr
(1, ".:át EOF: getdirentry");

312 i‡(
Àn
==0) {

315 i‡(()
Àn
 >(
buf
)-1) {

316 
	`îrx
(1, ".:át EOF: getdirentryÑeturned "

317 "övÆidÜígth %d", 
Àn
);

319 
buf
[
Àn
] = 0;

320 
	`îrx
(1, ".:áàEOF: gŸ u√x≥˘edÇamê%s", 
buf
);

321 
	}
}

325 
	$d‹ód©eof
()

327 
off_t
 
pos
;

328 
i
;

330 
	`¥ötf
("TryingÅoÑeadáfter goingÅo EOF...\n");

332 
pos
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_END
);

333 i‡(
pos
<0) {

334 
	`îr
(1, ".:Üseek(0, SEEK_END)");

337 
i
=0; 
ã°fûes
[i].
«me
; i++) {

338 i‡(
pos
 <
ã°fûes
[
i
].pos) {

339 
	`îrx
(1, ".: EOFÖosition %ld belowÖosition %ld of %s",

340 
pos
, 
ã°fûes
[
i
].pos,Åe°fûes[i].
«me
);

344 
	`ªad©eof
();

345 
	}
}

349 
	$övÆ_ªad
()

351 
buf
[4096];

352 
Àn
;

354 
Àn
 = 
	`gëdúíåy
(
dúfd
, 
buf
, (buf)-1);

357 ()
Àn
;

358 
	}
}

362 
	$dobadªads
()

364 
off_t
 
pos
, 
pos2
, 
eof
;

365 
vÆid
, 
i
, 
k
=0;

367 
	`¥ötf
("Trying someÖossibly invalidÑeads...\n");

369 
eof
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_END
);

370 i‡(
eof
 < 0) {

371 
	`îr
(1, ".:Üseek(0, SEEK_END)");

374 
pos
=0;Öo†< 
eof
;Öos++) {

375 
vÆid
 = 0;

376 
i
=0; 
ã°fûes
[i].
«me
; i++) {

377 i‡(
pos
==
ã°fûes
[
i
].pos) {

378 
vÆid
 = 1;

381 i‡(
vÆid
) {

386 
pos2
 = 
	`l£ek
(
dúfd
, 
pos
, 
SEEK_SET
);

387 i‡(
pos2
 < 0) {

391 
	`övÆ_ªad
();

392 
k
++;

396 i‡(
k
>0) {

397 
	`¥ötf
("Survived %d invÆidÑóds...\n", 
k
);

400 
	`¥ötf
("Couldn't findány invalid offsetsÅoÅry...\n");

403 
	`¥ötf
("TryingÅoÑead beyond EOF...\n");

404 
pos2
 = 
	`l£ek
(
dúfd
, 
eof
 + 1000, 
SEEK_SET
);

405 i‡(
pos2
 < 0) {

409 
	`övÆ_ªad
();

411 
	}
}

415 
	$dŸe°
()

417 
	`¥ötf
("Opening directory...\n");

418 
	`›íô
();

420 
	`¥ötf
("RunningÅests...\n");

423 
	`fú°ªad
();

426 
	`ªad©eof
();

429 
	`ªadÆl⁄eby⁄e
();

432 
	`d‹ód©eof
();

435 
	`ªadÆÃ™domly
();

438 
	`d‹ód©0
();

441 
	`dobadªads
();

444 
	`d‹ód©0
();

446 
	`¥ötf
("Closing directory...\n");

447 
	`˛o£ô
();

448 
	}
}

456 
	$mkfûe
(c⁄° *
«me
)

458 
fd
, 
i
, 
r
;

459 c⁄° 
mesßge
[] = "TheÅurtle moves!\n";

460 
buf
[32*(
mesßge
)+1];

462 
buf
[0]=0;

463 
i
=0; i<32; i++) {

464 
	`°rˇt
(
buf
, 
mesßge
);

468 
fd
 = 
	`›í
(
«me
, 
O_WRONLY
|
O_CREAT
|
O_EXCL
, 0664);

469 i‡(
fd
<0) {

470 
	`îr
(1, "%s: cª©e", 
«me
);

473 
r
 = 
	`wrôe
(
fd
, 
buf
, 
	`°æí
(buf));

474 i‡(
r
<0) {

475 
	`îr
(1, "%s: wrôe", 
«me
);

477 i‡(()
r
 !
	`°æí
(
buf
)) {

478 
	`îrx
(1, "%s: sh‹àwrôê(%d byãs)", 
«me
, 
r
);

481 i‡(
	`˛o£
(
fd
)<0) {

482 
	`îr
(1, "%s: clo£", 
«me
);

484 
	}
}

488 
	$£tup
()

490 
i
;

492 
	`¥ötf
("Makög dúe˘‹y %s...\n", 
TESTDIR
);

495 i‡(
	`mkdú
(
TESTDIR
, 0775)<0) {

496 
	`îr
(1, "%s: mkdú", 
TESTDIR
);

500 i‡(
	`chdú
(
TESTDIR
)<0) {

501 
	`îr
(1, "%s: chdú", 
TESTDIR
);

504 
	`¥ötf
("Making some files...\n");

507 
i
=0; 
ã°fûes
[i].
«me
; i++) {

508 i‡(
ã°fûes
[
i
].
make_ô
) {

509 
	`mkfûe
(
ã°fûes
[
i
].
«me
);

511 
ã°fûes
[
i
].
pos
 = -1;

513 
	}
}

517 
	$˛ónup
()

519 
i
;

521 
	`¥ötf
("Cleaning up...\n");

524 
i
=0; 
ã°fûes
[i].
«me
; i++) {

525 i‡(
ã°fûes
[
i
].
make_ô
) {

526 i‡(
	`ªmove
(
ã°fûes
[
i
].
«me
)<0) {

527 
	`îr
(1, "%s:Ñemove", 
ã°fûes
[
i
].
«me
);

533 i‡(
	`chdú
("..")<0) {

534 
	`îr
(1, "..: chdir");

538 i‡(
	`rmdú
(
TESTDIR
)<0) {

539 
	`îr
(1, "%s:Ñmdú", 
TESTDIR
);

541 
	}
}

545 
	$maö
()

547 
	`£tup
();

550 
	`dŸe°
();

551 
	`dŸe°
();

553 
	`˛ónup
();

555 
	}
}

	@os161/user/testbin/dirtest/dirtest.c

42 
	~<sys/ty≥s.h
>

43 
	~<sys/°©.h
>

44 
	~<°dio.h
>

45 
	~<uni°d.h
>

46 
	~<°rög.h
>

47 
	~<îr.h
>

49 
	#MAXLEVELS
 5

	)

52 
	$maö
()

54 
i
;

55 c⁄° *
⁄íame
 = "testdir";

56 
dú«me
[512];

58 
	`°r˝y
(
dú«me
, 
⁄íame
);

60 
i
=0; i<
MAXLEVELS
; i++) {

61 
	`¥ötf
("Cª©ög dúe˘‹y: %s\n", 
dú«me
);

63 i‡(
	`mkdú
(
dú«me
, 0755)) {

64 
	`îr
(1, "%s: mkdú", 
dú«me
);

67 
	`°rˇt
(
dú«me
, "/");

68 
	`°rˇt
(
dú«me
, 
⁄íame
);

71 
	`¥ötf
("Passed directory creationÅest.\n");

73 
i
=0; i<
MAXLEVELS
; i++) {

74 
dú«me
[
	`°æí
(dú«meË- såÀn(
⁄íame
) - 1] = 0;

76 
	`¥ötf
("Removög dúe˘‹y: %s\n", 
dú«me
);

78 i‡(
	`rmdú
(
dú«me
)) {

79 
	`îr
(1, "%s:Ñmdú", 
dú«me
);

82 
	`¥ötf
("Passed directoryÑemovalÅest.\n");

85 
	}
}

	@os161/user/testbin/f_test/f_hdr.h

30 
sub¥oc_ªad
();

31 
sub¥oc_wrôe
();

	@os161/user/testbin/f_test/f_read.c

44 
	#Se˘‹Size
 512

	)

46 
	#TMULT
 50

	)

47 
	#FSIZE
 ((
Se˘‹Size
 + 1Ë* 
TMULT
)

	)

49 
	#FNAME
 "f-ã°fûe"

	)

50 
	#READCHAR
 'r'

	)

51 
	#WRITECHAR
 'w'

	)

53 
	~<°dio.h
>

54 
	~<uni°d.h
>

55 
	~<îr.h
>

56 
	~"f_hdr.h
"

58 
	gbuf„r
[
Se˘‹Size
 + 1];

62 
	$check_buf„r
()

64 
i
;

65 
ch
 = 
buf„r
[0];

67 
i
 = 1; i < 
Se˘‹Size
 + 1; i++) {

68 i‡(
buf„r
[
i
] !
ch
) {

69 
	`îrx
(1, "RódÉº‹: %s", 
buf„r
);

73 
	`putch¨
(
ch
);

74 
	}
}

77 
	$sub¥oc_ªad
()

79 
fd
;

80 
i
, 
ªs
;

82 
	`¥ötf
("File Reader starting ...\n\n");

84 
fd
 = 
	`›í
(
FNAME
, 
O_RDONLY
);

85 i‡(
fd
 < 0) {

86 
	`îr
(1, "%s: o≥n", 
FNAME
);

89 
i
=0; i<
TMULT
; i++) {

90 
ªs
 = 
	`ªad
(
fd
, 
buf„r
, 
Se˘‹Size
 + 1);

91 i‡(
ªs
 < 0) {

92 
	`îr
(1, "%s:Ñód", 
FNAME
);

97 i‡(
ªs
 !
Se˘‹Size
 + 1) {

98 
	`îrx
(1, "%s:Ñód: sh‹àcou¡", 
FNAME
);

100 
	`check_buf„r
();

103 
	`˛o£
(
fd
);

105 
	`¥ötf
("File ReadÉxited successfully!\n");

106 
	}
}

	@os161/user/testbin/f_test/f_test.c

43 
	~<sys/ty≥s.h
>

44 
	~<sys/°©.h
>

45 
	~<°dio.h
>

46 
	~<°rög.h
>

47 
	~<uni°d.h
>

48 
	~<îr.h
>

49 
	~"f_hdr.h
"

51 
	#SECTOR_SIZE
 512

	)

54 
	#BUFFER_SIZE
 (2 * 
SECTOR_SIZE
 + 1)

	)

55 
	#BIGFILE_SIZE
 (270 * 
BUFFER_SIZE
)

	)

56 
	#BIGFILE_NAME
 "œrge-f"

	)

58 
	#LETTER
(
x
Ë('a' + (x % 31))

	)

60 
	gfbuf„r
[
BUFFER_SIZE
];

61 
	gibuf„r
[32];

64 
	#DIR_DEPTH
 8

	)

65 
	#DIR_NAME
 "/t"

	)

66 
	#DIRFILE_NAME
 "a"

	)

69 
	#FNAME
 "f-ã°fûe"

	)

70 
	#TMULT
 50

	)

71 
	#FSIZE
 ((
SECTOR_SIZE
 + 1Ë* 
TMULT
)

	)

73 
	#READCHAR
 'r'

	)

74 
	#WRITECHAR
 'w'

	)

76 
	gcbuf„r
[
SECTOR_SIZE
 + 1];

84 
pid_t


85 
f‹koff
((*
func
)())

87 
pid_t
 
pid
 = 
	`f‹k
();

88 
pid
) {

90 
	`w¨n
("fork");

93 
	`func
();

94 
	`_exô
(0);

97  
pid
;

98 
	}
}

102 
	$dowaô
(
pid
)

104 
°©us
;

106 i‡(
	`waôpid
(
pid
, &
°©us
, 0)<0) {

107 
	`w¨n
("waôpid f‹ %d", 
pid
);

109 i‡(
	`WIFSIGNALED
(
°©us
)) {

110 
	`w¨nx
("pid %d: sig«»%d", 
pid
, 
	`WTERMSIG
(
°©us
));

112 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

113 
	`w¨nx
("pid %d:Éxô %d", 
pid
, 
	`WEXITSTATUS
(
°©us
));

115 
	}
}

123 
	$big_fûe
(
size
)

125 
i
, 
j
, 
fûeid
;

127 
	`¥ötf
("[BIGFILE]Åest starting :\n");

128 
	`¥ötf
("\tCª©ögá fûêo‡size: %d\n", 
size
);

130 
fûeid
 = 
	`›í
(
BIGFILE_NAME
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

131 i‡(
fûeid
 < 0) {

132 
	`îr
(1, "[BIGFILE]: %s: o≥¿f‹ wrôe", 
BIGFILE_NAME
);

135 
i
 = 0; i < 
BUFFER_SIZE
; i++) {

136 
fbuf„r
[
i
] = 
	`LETTER
(i);

139 
	`¥ötf
("\tWritingÅo file.\n");

140 
i
 = 0; i < 
size
; i +
BUFFER_SIZE
) {

141 
	`wrôe
(
fûeid
, 
fbuf„r
, 
BUFFER_SIZE
);

143 i‡(!(
i
 % (10 * 
BUFFER_SIZE
))) {

144 
	`¥ötf
("\rBW : %d", 
i
);

148 
	`¥ötf
("\n\tReading from file.\n");

149 
	`˛o£
(
fûeid
);

151 
fûeid
 = 
	`›í
(
BIGFILE_NAME
, 
O_RDONLY
);

152 i‡(
fûeid
 < 0) {

153 
	`îr
(1, "[BIGFILE]: %s: o≥¿f‹Ñód", 
BIGFILE_NAME
);

156 
i
 = 0; i < 
size
; i +
BUFFER_SIZE
) {

157 
j
 = 
	`ªad
(
fûeid
, 
fbuf„r
, 
BUFFER_SIZE
);

158 i‡(
j
<0) {

159 
	`îr
(1, "[BIGFILE]:Ñead");

161 i‡(
j
 !
BUFFER_SIZE
) {

162 
	`îrx
(1, "[BIGFILE]:Ñód: o∆y %d byãs", 
j
);

166 i‡(!(
i
 % (10 * 
BUFFER_SIZE
))) {

167 
	`¥ötf
("\rBR : %d", 
i
);

171 
j
 = 0; j < 
BUFFER_SIZE
; j++) {

172 i‡(
fbuf„r
[
j
] !
	`LETTER
(j)) {

173 
	`îrx
(1, "[BIGFILE] : FailedÑead check : "

174 "öc⁄si°íàd©®ªad: %d", 
i
+
j
);

179 
	`˛o£
(
fûeid
);

180 i‡(
	`ªmove
(
BIGFILE_NAME
)) {

181 
	`îr
(1, "[BIGFILE]: %s:Ñemove", 
BIGFILE_NAME
);

184 
	`¥ötf
("\n[BIGFILE] : Success!\n");

185 
	}
}

193 
	$c⁄cur
()

195 
i
, 
fd
;

196 
r1
, 
r2
, 
w1
;

198 
	`¥ötf
("Spawning 2Ñeaders, 1 writer.\n");

201 
fd
 = 
	`›í
(
FNAME
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

202 i‡(
fd
 < 0) {

203 
	`îr
(1, "[CONCUR]: %s: o≥n", 
FNAME
);

206 
	`¥ötf
("InitializingÅest file: ");

208 
i
 = 0; i < 
SECTOR_SIZE
 + 1; i++) {

209 
cbuf„r
[
i
] = 
READCHAR
;

212 
i
 = 0; i < 
TMULT
; i++) {

213 
	`wrôe
(
fd
, 
cbuf„r
, 
SECTOR_SIZE
 + 1);

217 
	`˛o£
(
fd
);

219 
	`¥ötf
("Done initializing. StartingÖrocesses...\n");

221 
r1
 = 
	`f‹koff
(
sub¥oc_ªad
);

222 
w1
 = 
	`f‹koff
(
sub¥oc_wrôe
);

223 
r2
 = 
	`f‹koff
(
sub¥oc_ªad
);

225 
	`¥ötf
("Waiting forÖrocesses.\n");

227 
	`dowaô
(
r1
);

228 
	`dowaô
(
r2
);

229 
	`dowaô
(
w1
);

231 i‡(
	`ªmove
(
FNAME
)) {

232 
	`îr
(1, "[CONCUR]: %s:Ñemove", 
FNAME
);

235 
	`¥ötf
("[CONCUR] Done!\n");

236 
	}
}

244 
	$dú_ã°
(
dïth
)

246 
i
, 
fd
;

247 
tmp
[] = 
DIR_NAME
;

248 
fmp
[] = 
DIRFILE_NAME
;

249 
dú«me
[64];

251 
	`°r˝y
(
dú«me
, ".");

253 
i
 = 0; i < 
dïth
; i++) {

254 
	`°rˇt
(
dú«me
, 
tmp
);

256 
	`¥ötf
("\tCª©ög dú : %s\n", 
dú«me
);

258 i‡(
	`mkdú
(
dú«me
, 0775) < 0) {

259 
	`îr
(1, "[DIRTEST]: %s: mkdú", 
dú«me
);

262 
	`°rˇt
(
dú«me
, 
fmp
);

263 
	`¥ötf
("\tCª©ög fûe: %s\n", 
dú«me
);

265 
fd
 = 
	`›í
(
dú«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

266 i‡(
fd
<0) {

267 
	`îr
(1, "[DIRTEST]: %s: o≥n", 
dú«me
);

270 
dú«me
[
	`°æí
(dú«meË- såÀn(
fmp
)] = '\0';

273 
	`¥ötf
("[DIRTEST] : Passed directory creationÅest.\n");

275 
i
 = 0; i < 
dïth
; i++) {

276 
	`°rˇt
(
dú«me
, 
fmp
);

278 
	`¥ötf
("\tDñëög fûe: %s\n", 
dú«me
);

280 i‡(
	`ªmove
(
dú«me
)) {

281 
	`îr
(1, "[DIRTEST]: %s:Ñemove", 
dú«me
);

284 
dú«me
[
	`°æí
(dú«meË- såÀn(
fmp
)] = '\0';

285 
	`¥ötf
("\tRemovög dú : %s\n", 
dú«me
);

287 i‡(
	`rmdú
(
dú«me
)) {

288 
	`îr
(1, "[DIRTEST]: %s:Ñmdú", 
dú«me
);

291 
dú«me
[
	`°æí
(dú«meË- såÀn(
tmp
)] = '\0';

294 
	`¥ötf
("[DIRTEST] : Passed directoryÑemovalÅest.\n");

295 
	`¥ötf
("[DIRTEST] : Success!\n");

296 
	}
}

302 
	#RUNBIGFILE
 0x1

	)

303 
	#RUNDIRTEST
 0x2

	)

304 
	#RUNCONCUR
 0x4

	)

305 
	#RUNTHEMALL
 (
RUNBIGFILE
 | 
RUNDIRTEST
 | 
RUNCONCUR
)

	)

308 
	$maö
(
¨gc
, * 
¨gv
[])

310 
tv
 = 0;

312 i‡(
¨gc
 > 1) {

313 i‡(*
¨gv
[1]=='1') {

314 
tv
 = 
RUNBIGFILE
;

316 i‡(*
¨gv
[1]=='2') {

317 
tv
 = 
RUNDIRTEST
;

319 i‡(*
¨gv
[1]=='3') {

320 
tv
 = 
RUNCONCUR
;

324 
tv
 = 
RUNTHEMALL
;

327 i‡(
tv
 & 
RUNBIGFILE
) {

328 
	`¥ötf
("[BIGFILE] : Run #1\n");

329 
	`big_fûe
(
BIGFILE_SIZE
);

330 
	`¥ötf
("[BIGFILE] : Run #2\n");

331 
	`big_fûe
(
BIGFILE_SIZE
);

334 i‡(
tv
 & 
RUNDIRTEST
) {

335 
	`¥ötf
("[DIRTEST] : Run #1\n");

336 
	`dú_ã°
(
DIR_DEPTH
);

337 
	`¥ötf
("[DIRTEST] : Run #2\n");

338 
	`dú_ã°
(
DIR_DEPTH
);

341 i‡(
tv
 & 
RUNCONCUR
) {

342 
	`¥ötf
("[CONCUR]\n");

343 
	`c⁄cur
();

346 
	}
}

	@os161/user/testbin/f_test/f_write.c

44 
	#Se˘‹Size
 512

	)

46 
	#TMULT
 50

	)

47 
	#FSIZE
 ((
Se˘‹Size
 + 1Ë* 
TMULT
)

	)

49 
	#FNAME
 "f-ã°fûe"

	)

50 
	#READCHAR
 'r'

	)

51 
	#WRITECHAR
 'w'

	)

53 
	~<uni°d.h
>

54 
	~<°dio.h
>

55 
	~<îr.h
>

56 
	~"f_hdr.h
"

58 
	gbuf„r
[
Se˘‹Size
 + 1];

61 
	$sub¥oc_wrôe
()

63 
fd
;

64 
i
;

66 
i
=0; i < 
Se˘‹Size
 + 1; i++) {

67 
buf„r
[
i
] = 
WRITECHAR
;

70 
	`¥ötf
("File Writer starting ...\n");

72 
fd
 = 
	`›í
(
FNAME
, 
O_WRONLY
);

73 i‡(
fd
 < 0) {

74 
	`îr
(1, "%s: o≥n", 
FNAME
);

77 
i
=0; i<
TMULT
; i++) {

79 
	`wrôe
(
fd
, 
buf„r
, 
Se˘‹Size
 + 1);

82 
	`˛o£
(
fd
);

84 
	`¥ötf
("File WriteÉxited successfully!\n");

85 
	}
}

	@os161/user/testbin/farm/farm.c

40 
	~<uni°d.h
>

41 
	~<îr.h
>

43 *
	gh¨gv
[2] = { (*)"hog", 
NULL
 };

44 *
	gˇrgv
[3] = { (*)"ˇt", (*)"ˇtfûe", 
NULL
 };

46 
	#MAXPROCS
 6

	)

47 
	gpids
[
MAXPROCS
], 
	g≈ids
;

51 
	$•awnv
(c⁄° *
¥og
, **
¨gv
)

53 
pid
 = 
	`f‹k
();

54 
pid
) {

56 
	`îr
(1, "fork");

59 
	`execv
(
¥og
, 
¨gv
);

60 
	`îr
(1, "%s", 
¥og
);

63 
pids
[
≈ids
++] = 
pid
;

66 
	}
}

70 
	$waôÆl
()

72 
i
, 
°©us
;

73 
i
=0; i<
≈ids
; i++) {

74 i‡(
	`waôpid
(
pids
[
i
], &
°©us
, 0)<0) {

75 
	`w¨n
("waôpid f‹ %d", 
pids
[
i
]);

77 i‡(
	`WIFSIGNALED
(
°©us
)) {

78 
	`w¨nx
("pid %d: sig«»%d", 
pids
[
i
], 
	`WTERMSIG
(
°©us
));

80 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

81 
	`w¨nx
("pid %d:Éxô %d", 
pids
[
i
], 
	`WEXITSTATUS
(
°©us
));

84 
	}
}

88 
	$hog
()

90 
	`•awnv
("/ã°bö/hog", 
h¨gv
);

91 
	}
}

95 
	$ˇt
()

97 
	`•awnv
("/bö/ˇt", 
ˇrgv
);

98 
	}
}

101 
	$maö
()

103 
	`hog
();

104 
	`hog
();

105 
	`hog
();

106 
	`ˇt
();

108 
	`waôÆl
();

111 
	}
}

	@os161/user/testbin/faulter/faulter.c

39 
	~<°dio.h
>

41 
	#REALLY_BIG_ADDRESS
 0x40000000

	)

44 
	$maö
()

46 vﬁ©ûê
i
;

48 
	`¥ötf
("\nEnteringÅhe faulterÖrogram - I should die immediately\n");

49 
i
 = *(*)
REALLY_BIG_ADDRESS
;

50 
	`¥ötf
("I didn't get killed! Program hasá bug\n");

52 
	}
}

	@os161/user/testbin/filetest/filetest.c

41 
	~<°dio.h
>

42 
	~<°rög.h
>

43 
	~<uni°d.h
>

44 
	~<îr.h
>

47 
	$maö
(
¨gc
, *
¨gv
[])

49 
wrôebuf
[40] = "Twiddle dee dee, Twiddle dum dum.......\n";

50 
ªadbuf
[41];

52 
fd
, 
rv
;

54 i‡(
¨gc
!=2) {

55 
	`îrx
(1, "Usage: filetest <filename>");

58 
fd
 = 
	`›í
(
¨gv
[1], 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

59 i‡(
fd
<0) {

60 
	`îr
(1, "%s: o≥¿f‹ wrôe", 
¨gv
[1]);

64 
rv
 = 
	`wrôe
(
fd
, 
wrôebuf
, 40);

65 i‡(
rv
<0) {

66 
	`îr
(1, "%s: wrôe", 
¨gv
[1]);

69 
rv
 = 
	`˛o£
(
fd
);

70 i‡(
rv
<0) {

71 
	`îr
(1, "%s: clo£ (1°Åime)", 
¨gv
[1]);

74 
fd
 = 
	`›í
(
¨gv
[1], 
O_RDONLY
);

75 i‡(
fd
<0) {

76 
	`îr
(1, "%s: o≥¿f‹Ñód", 
¨gv
[1]);

79 
rv
 = 
	`ªad
(
fd
, 
ªadbuf
, 40);

80 i‡(
rv
<0) {

81 
	`îr
(1, "%s:Ñód", 
¨gv
[1]);

83 
rv
 = 
	`˛o£
(
fd
);

84 i‡(
rv
<0) {

85 
	`îr
(1, "%s: clo£ (2ndÅime)", 
¨gv
[1]);

88 
ªadbuf
[40] = 0;

90 i‡(
	`°rcmp
(
ªadbuf
, 
wrôebuf
)) {

91 
	`îrx
(1, "Buffer data mismatch!");

94 
rv
 = 
	`ªmove
(
¨gv
[1]);

95 i‡(
rv
<0) {

96 
	`îr
(1, "%s:Ñemove", 
¨gv
[1]);

98 
	`¥ötf
("Passed filetest.\n");

100 
	}
}

	@os161/user/testbin/forkbomb/forkbomb.c

50 
	~<uni°d.h
>

51 
	~<îr.h
>

53 vﬁ©ûê
	gpid
;

56 
	$maö
()

58 
i
;

61 
	`f‹k
();

63 
pid
 = 
	`gëpid
();

66 
i
=0; i<300; i++) {

67 vﬁ©ûê
£ípid
;

68 
£ípid
 = 
pid
;

69 i‡(
£ípid
 !
	`gëpid
()) {

70 
	`îrx
(1, "pid mismatch (%d, should be %d) "

72 
£ípid
, 
	`gëpid
());

76 
	}
}

	@os161/user/testbin/forktest/forktest.c

39 
	~<uni°d.h
>

40 
	~<°rög.h
>

41 
	~<°dlib.h
>

42 
	~<°dio.h
>

43 
	~<îr.h
>

49 vﬁ©ûê
	gmypid
;

56 
	$dof‹k
()

58 
pid
;

59 
pid
 = 
	`f‹k
();

60 i‡(
pid
 < 0) {

61 
	`w¨n
("fork");

63  
pid
;

64 
	}
}

73 
	$check
()

75 
i
;

77 
mypid
 = 
	`gëpid
();

80 
i
=0; i<800; i++) {

81 vﬁ©ûê
£ípid
;

82 
£ípid
 = 
mypid
;

83 i‡(
£ípid
 !
	`gëpid
()) {

84 
	`îrx
(1, "pid mismatch (%d, should be %d) "

86 
£ípid
, 
	`gëpid
());

89 
	}
}

102 
	$dowaô
(
nowaô
, 
pid
)

104 
x
;

106 i‡(
pid
<0) {

110 i‡(
pid
==0) {

112 
	`exô
(0);

115 i‡(!
nowaô
) {

116 i‡(
	`waôpid
(
pid
, &
x
, 0)<0) {

117 
	`w¨n
("waitpid");

119 i‡(
	`WIFSIGNALED
(
x
)) {

120 
	`w¨nx
("pid %d: sig«»%d", 
pid
, 
	`WTERMSIG
(
x
));

122 i‡(
	`WEXITSTATUS
(
x
) != 0) {

123 
	`w¨nx
("pid %d:Éxô %d", 
pid
, 
	`WEXITSTATUS
(
x
));

126 
	}
}

133 
	$ã°
(
nowaô
)

135 
pid0
, 
pid1
, 
pid2
, 
pid3
;

144 
pid0
 = 
	`dof‹k
();

145 
	`putch¨
('0');

146 
	`check
();

147 
pid1
 = 
	`dof‹k
();

148 
	`putch¨
('1');

149 
	`check
();

150 
pid2
 = 
	`dof‹k
();

151 
	`putch¨
('2');

152 
	`check
();

153 
pid3
 = 
	`dof‹k
();

154 
	`putch¨
('3');

155 
	`check
();

161 
	`dowaô
(
nowaô
, 
pid3
);

162 
	`dowaô
(
nowaô
, 
pid2
);

163 
	`dowaô
(
nowaô
, 
pid1
);

164 
	`dowaô
(
nowaô
, 
pid0
);

166 
	`putch¨
('\n');

167 
	}
}

170 
	$maö
(
¨gc
, *
¨gv
[])

172 
nowaô
=0;

174 i‡(
¨gc
==2 && !
	`°rcmp
(
¨gv
[1], "-w")) {

175 
nowaô
=1;

177 i‡(
¨gc
!=1 &&árgc!=0) {

178 
	`w¨nx
("usage: forktest [-w]");

181 
	`w¨nx
("Starting.");

183 
	`ã°
(
nowaô
);

185 
	`w¨nx
("Complete.");

187 
	}
}

	@os161/user/testbin/guzzle/guzzle.c

37 
	~<°dio.h
>

38 
	~<uni°d.h
>

40 
	#TOP
 1<<25

	)

46 
	$maö
(
¨gc
, *
¨gv
[])

48 vﬁ©ûê
i
;

49 
ch
 = '+';

51 i‡(
¨gc
 == 2) {

52 
ch
 = 
¨gv
[1][0];

55 
i
=0; i<
TOP
; i++) {

57 i‡–(
i
%10000) == 0) {

58 
	`putch¨
(
ch
);

62 
	}
}

	@os161/user/testbin/hash/hash.c

41 
	~<°dio.h
>

42 
	~<uni°d.h
>

43 
	~<f˙é.h
>

44 
	~<îr.h
>

46 #ifde‡
HOST


47 
	~"ho°com∑t.h
"

50 
	#HASHP
 104729

	)

53 
	$maö
(
¨gc
, *
¨gv
[])

55 
fd
;

56 
ªadbuf
[1];

57 
j
 = 0;

59 #ifde‡
HOST


60 
	`ho°com∑t_öô
(
¨gc
, 
¨gv
);

63 i‡(
¨gc
 != 2) {

64 
	`îrx
(1, "Usage: hash filename");

67 
fd
 = 
	`›í
(
¨gv
[1], 
O_RDONLY
, 0664);

69 i‡(
fd
<0) {

70 
	`îr
(1, "%s", 
¨gv
[1]);

74 i‡(
	`ªad
(
fd
, 
ªadbuf
, 1) <= 0) ;

75 
j
 = ((j*8Ë+ (Ë
ªadbuf
[0]Ë% 
HASHP
;

78 
	`˛o£
(
fd
);

80 
	`¥ötf
("Hash : %d\n", 
j
);

83 
	}
}

	@os161/user/testbin/hog/hog.c

38 
	$maö
()

40 vﬁ©ûê
i
;

42 
i
=0; i<50000; i++)

46 
	}
}

	@os161/user/testbin/huge/huge.c

40 
	~<°dio.h
>

41 
	~<°dlib.h
>

43 
	#PageSize
 4096

	)

44 
	#NumPages
 512

	)

46 
	g•¨£
[
NumPages
][
PageSize
];

49 
	$maö
()

51 
i
,
j
;

53 
	`¥ötf
("EnteringÅhe hugeÖrogram - I will stressÅest your VM\n");

56 
i
=0; i<
NumPages
; i++) {

57 
•¨£
[
i
][0]=i;

60 
	`¥ötf
("stage [1] done\n");

63 
j
=0; j<5; j++) {

64 
i
=0; i<
NumPages
; i++) {

65 
•¨£
[
i
][0]++;

67 
	`¥ötf
("°agê[2.%d] d⁄e\n", 
j
);

70 
	`¥ötf
("stage [2] done\n");

73 
i
=
NumPages
-1; i>=0; i--) {

74 i‡(
•¨£
[
i
][0]!=i+5) {

75 
	`¥ötf
("BAD NEWS!!! - your VM mechanism hasá bug!\n");

76 
	`exô
(1);

80 
	`¥ötf
("YouÖassed!\n");

83 
	}
}

	@os161/user/testbin/kitchen/kitchen.c

38 
	~<uni°d.h
>

39 
	~<îr.h
>

41 *
	gßrgv
[2] = { (*)"sök", 
NULL
 };

43 
	#MAXPROCS
 6

	)

44 
	gpids
[
MAXPROCS
], 
	g≈ids
;

48 
	$sök
()

50 
pid
 = 
	`f‹k
();

51 
pid
) {

53 
	`îr
(1, "fork");

56 
	`execv
("/ã°bö/sök", 
ßrgv
);

57 
	`îr
(1, "/testbin/sink");

60 
pids
[
≈ids
++] = 
pid
;

63 
	}
}

67 
	$waôÆl
()

69 
i
, 
°©us
;

70 
i
=0; i<
≈ids
; i++) {

71 i‡(
	`waôpid
(
pids
[
i
], &
°©us
, 0)<0) {

72 
	`w¨n
("waôpid f‹ %d", 
pids
[
i
]);

74 i‡(
	`WIFSIGNALED
(
°©us
)) {

75 
	`w¨nx
("pid %d: sig«»%d", 
pids
[
i
], 
	`WTERMSIG
(
°©us
));

77 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

78 
	`w¨nx
("pid %d:Éxô %d", 
pids
[
i
], 
	`WEXITSTATUS
(
°©us
));

81 
	}
}

85 
	$maö
()

87 
	`sök
();

88 
	`sök
();

89 
	`sök
();

90 
	`sök
();

92 
	`waôÆl
();

95 
	}
}

	@os161/user/testbin/malloctest/malloctest.c

40 
	~<°döt.h
>

41 
	~<°dio.h
>

42 
	~<°dlib.h
>

43 
	~<uni°d.h
>

44 
	~<f˙é.h
>

45 
	~<îr.h
>

48 
	#_PATH_RANDOM
 "øndom:"

	)

50 
	#SMALLSIZE
 72

	)

51 
	#MEDIUMSIZE
 896

	)

52 
	#BIGSIZE
 16384

	)

53 
	#HUGESIZE
 (1024 * 1024 * 1024)

	)

56 
	#OVERHEAD
 32

	)

59 
	#ABSURD_OVERHEAD
 256

	)

63 
	$gëi
()

65 
vÆ
=0;

66 
ch
, 
digôs
=0;

69 
ch
 = 
	`gëch¨
();

70 i‡(
ch
=='\n' || ch=='\r') {

71 
	`putch¨
('\n');

74 i‡((
ch
=='\b' || ch==127Ë&& 
digôs
>0) {

75 
	`¥ötf
("\b \b");

76 
vÆ
 = val/10;

77 
digôs
--;

79 i‡(
ch
>='0' && ch<='9') {

80 
	`putch¨
(
ch
);

81 
vÆ
 = vÆ*10 + (
ch
-'0');

82 
digôs
++;

85 
	`putch¨
('\a');

89 i‡(
digôs
==0) {

92  
vÆ
;

93 
	}
}

102 
	$m¨kblock
(vﬁ©ûê*
±r
, 
size_t
 
size
, 
büs
, 
d›röt
)

104 
size_t
 
n
, 
i
;

105 *
∂
;

106 
vÆ
;

108 
∂
 = (*)
±r
;

109 
n
 = 
size
 / ();

111 
i
=0; i<
n
; i++) {

112 
vÆ
 = (()
i
 ^ ()
büs
);

113 
∂
[
i
] = 
vÆ
;

114 i‡(
d›röt
 && (
i
%64==63)) {

115 
	`¥ötf
(".");

118 i‡(
d›röt
) {

119 
	`¥ötf
("\n");

121 
	}
}

128 
	$checkblock
(vﬁ©ûê*
±r
, 
size_t
 
size
, 
büs
, 
d›röt
)

130 
size_t
 
n
, 
i
;

131 *
∂
;

132 
vÆ
;

134 
∂
 = (*)
±r
;

135 
n
 = 
size
 / ();

137 
i
=0; i<
n
; i++) {

138 
vÆ
 = (()
i
 ^ ()
büs
);

139 i‡(
∂
[
i
] !
vÆ
) {

140 i‡(
d›röt
) {

141 
	`¥ötf
("\n");

143 
	`¥ötf
("FAILED: data mismatchát offset %lu of block "

145 (Ë(
i
*()),

146 ()(
uöçå_t
)
∂
,

147 
∂
[
i
], 
vÆ
);

150 i‡(
d›röt
 && (
i
%64==63)) {

151 
	`¥ötf
(".");

154 i‡(
d›röt
) {

155 
	`¥ötf
("\n");

159 
	}
}

172 
	$ã°1
()

174 vﬁ©ûê*
x
;

176 
	`¥ötf
("*** MallocÅest 1 ***\n");

177 
	`¥ötf
("AŒoˇtög %u byãs\n", 
BIGSIZE
);

178 
x
 = 
	`mÆloc
(
BIGSIZE
);

179 i‡(
x
==
NULL
) {

180 
	`¥ötf
("FAILED: malloc failed\n");

184 
	`m¨kblock
(
x
, 
BIGSIZE
, 0, 0);

185 i‡(
	`checkblock
(
x
, 
BIGSIZE
, 0, 0)) {

186 
	`¥ötf
("FAILED: data corrupt\n");

190 
	`‰ì
((*)
x
);

192 
	`¥ötf
("Passed mallocÅest 1.\n");

193 
	}
}

230 
	$ã°2
()

232 vﬁ©ûê*
x
;

233 
size_t
 
size
;

235 
	`¥ötf
("Entering mallocÅest 2.\n");

236 
	`¥ötf
("Make sure youÑeadánd understandÅhe comment in malloctest.c "

239 
	`¥ötf
("Testing how much memory we canállocate:\n");

241 
size
 = 
HUGESIZE
; (
x
 = 
	`mÆloc
(size))==
NULL
; size = size/2) {

242 
	`¥ötf
(" %9lu byãs: faûed\n", (Ë
size
);

244 
	`¥ötf
(" %9lu byãs: suc˚eded\n", (Ë
size
);

246 
	`¥ötf
("PassedÖart 1\n");

248 
	`¥ötf
("TouchingállÅhe words inÅhe block.\n");

249 
	`m¨kblock
(
x
, 
size
, 0, 1);

251 
	`¥ötf
("ValidatingÅhe words inÅhe block.\n");

252 i‡(
	`checkblock
(
x
, 
size
, 0, 1)) {

253 
	`¥ötf
("FAILED: data corrupt\n");

256 
	`¥ötf
("PassedÖart 2\n");

259 
	`¥ötf
("FreeingÅhe block\n");

260 
	`‰ì
((*)
x
);

261 
	`¥ötf
("PassedÖart 3\n");

262 
	`¥ötf
("Allocatingánother block\n");

264 
x
 = 
	`mÆloc
(
size
);

265 i‡(
x
==
NULL
) {

266 
	`¥ötf
("FAILED: free didn'tÑeturnÅhe memory?\n");

269 
	`‰ì
((*)
x
);

271 
	`¥ötf
("Passed mallocÅest 2.\n");

272 
	}
}

288 
	sã°3
 {

289 
ã°3
 *
	m√xt
;

290 
	mjunk
[(
SMALLSIZE
 - (
ã°3
 *))];

295 
	$ã°3
()

297 
ã°3
 *
li°
 = 
NULL
, *
tmp
;

298 
size_t
 
tŸ
=0;

299 
˘
=0, 
Áûed
=0;

300 *
x
;

302 
	`¥ötf
("Entering mallocÅest 3.\n");

303 
	`¥ötf
("Make sure youÑeadánd understandÅhe comment in malloctest.c "

306 
	`¥ötf
("Testing how much memory we canállocate:\n");

308 (
tmp
 = 
	`mÆloc
((
ã°3
))Ë!
NULL
) {

310 
tmp
->
√xt
 = 
li°
;

311 
li°
 = 
tmp
;

313 
tŸ
 +(
ã°3
);

315 
	`m¨kblock
(
li°
->
junk
, ÷i°->junk), (
uöçå_t
)list, 0);

317 
˘
++;

318 i‡(
˘
%128==0) {

319 
	`¥ötf
(".");

323 
	`¥ötf
("AŒoˇãd %lu byãs\n", (Ë
tŸ
);

325 
	`¥ötf
("Trying some moreállocations which IÉxpectÅo fail...\n");

327 
x
 = 
	`mÆloc
(
SMALLSIZE
);

328 i‡(
x
 !
NULL
) {

329 
	`¥ötf
("FAILED: mÆloc(%uËsuc˚eded\n", 
SMALLSIZE
);

333 
x
 = 
	`mÆloc
(
MEDIUMSIZE
);

334 i‡(
x
 !
NULL
) {

335 
	`¥ötf
("FAILED: mÆloc(%uËsuc˚eded\n", 
MEDIUMSIZE
);

339 
x
 = 
	`mÆloc
(
BIGSIZE
);

340 i‡(
x
 !
NULL
) {

341 
	`¥ötf
("FAILED: mÆloc(%uËsuc˚eded\n", 
BIGSIZE
);

345 
	`¥ötf
("Ok,Çow I'm goingÅo freeÉverything...\n");

347 
li°
 !
NULL
) {

348 
tmp
 = 
li°
->
√xt
;

350 i‡(
	`checkblock
(
li°
->
junk
, (list->junk),

351 (
uöçå_t
)
li°
, 0)) {

352 
Áûed
 = 1;

355 
	`‰ì
(
li°
);

356 
li°
 = 
tmp
;

359 i‡(
Áûed
) {

360 
	`¥ötf
("FAILED: data corruption\n");

364 
	`¥ötf
("Let me see if I canállocate some moreÇow...\n");

366 
x
 = 
	`mÆloc
(
MEDIUMSIZE
);

367 i‡(
x
 =
NULL
) {

368 
	`¥ötf
("FAIL: Nope, I couldn't.\n");

371 
	`‰ì
(
x
);

373 
	`¥ötf
("Passed mallocÅest 3\n");

374 
	}
}

389 
	$ã°4
()

391 *
x
, *
y
, *
z
;

392 
lx
, 
ly
, 
lz
, 
ovîhód
, 
zsize
;

394 
	`¥ötf
("Entering mallocÅest 4.\n");

395 
	`¥ötf
("ThisÅest is intended for first/best-fit based mallocs.\n");

396 
	`¥ötf
("ThisÅest mayÇot work correctly ifÑunáfter otherÅests.\n");

398 
	`¥ötf
("Testing freeÜist coalescing:\n");

400 
x
 = 
	`mÆloc
(
SMALLSIZE
);

401 i‡(
x
==
NULL
) {

402 
	`¥ötf
("FAILED: mÆloc(%uËÁûed\n", 
SMALLSIZE
);

406 
y
 = 
	`mÆloc
(
MEDIUMSIZE
);

407 i‡(
y
==
NULL
) {

408 
	`¥ötf
("FAILED: mÆloc(%uËÁûed\n", 
MEDIUMSIZE
);

413 
	`¥ötf
("Buh? I can't fitá void * inán unsignedÜong\n");

414 
	`¥ötf
("ENVIRONMENT FAILED...\n");

418 
lx
 = ()
x
;

419 
ly
 = ()
y
;

421 
	`¥ötf
("x i†0x%lx; y i†0x%lx\n", 
lx
, 
ly
);

432 i‡(
lx
 =
ly
) {

433 
	`¥ötf
("FAIL: x == y\n");

443 i‡(
lx
 < 
ly
 &&Üx + 
SMALLSIZE
 >Üy) {

444 
	`¥ötf
("FAIL: y starts within x\n");

447 i‡(
ly
 < 
lx
 &&Üy + 
MEDIUMSIZE
 >Üx) {

448 
	`¥ötf
("FAIL: x starts within y\n");

457 i‡(
ly
 < 
lx
) {

458 
	`¥ötf
("TEST UNSUITABLE: y is below x\n");

465 
ovîhód
 = 
ly
 - (
lx
 + 
SMALLSIZE
);

466 
	`¥ötf
("Aµ¨íàblock ovîhód: %lu\n", 
ovîhód
);

468 i‡(
ovîhód
 > 
ABSURD_OVERHEAD
) {

469 
	`¥ötf
("TEST UNSUITABLE: block overheadábsurdlyÜarge.\n");

472 i‡(
ovîhód
 > 
OVERHEAD
) {

473 
	`¥ötf
("FAIL: block overhead isÅooÜarge.\n");

477 
	`¥ötf
("Freeing blocks...\n");

478 
	`‰ì
(
x
);

479 
	`‰ì
(
y
);

481 
zsize
 = 
SMALLSIZE
 + 
MEDIUMSIZE
 + 
ovîhód
;

483 
	`¥ötf
("NowáŒoˇtög %lu byãs... shouldÑeu£Åhê•a˚.\n", 
zsize
);

484 
z
 = 
	`mÆloc
(
zsize
);

485 i‡(
z
 =
NULL
) {

486 
	`¥ötf
("FAIL: Allocation failed...\n");

490 
lz
 = (Ë
z
;

492 
	`¥ötf
("z i†0x%lx (x wa†0x%lx, y 0x%lx)\n", 
lz
, 
lx
, 
ly
);

494 i‡(
lz
==
lx
) {

495 
	`¥ötf
("Passed.\n");

498 
	`¥ötf
("Failed.\n");

501 
	`‰ì
(
z
);

502 
	}
}

518 
	$ã°567
(
ã°no
, 
£ed
)

520 c⁄° 
sizes
[8] = { 13, 17, 69, 176, 433, 871, 1150, 6060 };

522 *
±rs
[32];

523 
psizes
[32];

524 
i
, 
n
, 
size
, 
Áûed
=0;

526 
	`§™dom
(
£ed
);

527 
	`¥ötf
("SìdedÑ™domÇumbî gíî©‹ wôh %lu.\n", 
£ed
);

529 
i
=0; i<32; i++) {

530 
±rs
[
i
] = 
NULL
;

531 
psizes
[
i
] = 0;

534 
i
=0; i<100000; i++) {

535 
n
 = 
	`øndom
()%32;

536 i‡(
±rs
[
n
] =
NULL
) {

537 
size
 = 
sizes
[
	`øndom
()%8];

538 
±rs
[
n
] = 
	`mÆloc
(
size
);

539 
psizes
[
n
] = 
size
;

540 i‡(
±rs
[
n
] =
NULL
) {

541 
	`¥ötf
("\nmÆlo¯%u faûed\n", 
size
);

542 
Áûed
 = 1;

545 
	`m¨kblock
(
±rs
[
n
], 
size
,Ç, 0);

548 
size
 = 
psizes
[
n
];

549 i‡(
	`checkblock
(
±rs
[
n
], 
size
,Ç, 0)) {

550 
Áûed
 = 1;

553 
	`‰ì
(
±rs
[
n
]);

554 
±rs
[
n
] = 
NULL
;

555 
psizes
[
n
] = 0;

557 i‡(
i
%256==0) {

558 
	`¥ötf
(".");

561 
	`¥ötf
("\n");

563 
i
=0; i<32; i++) {

564 i‡(
±rs
[
i
] !
NULL
) {

565 
	`‰ì
(
±rs
[
i
]);

569 i‡(
Áûed
) {

570 
	`¥ötf
("FAILED mÆlo¯ã° %d\n", 
ã°no
);

573 
	`¥ötf
("Pas£d mÆlo¯ã° %d\n", 
ã°no
);

575 
	}
}

579 
	$ã°5
()

581 
	`¥ötf
("Beginning mallocÅest 5\n");

582 
	`ã°567
(5, 0);

583 
	}
}

587 
	$ã°6
()

589 
fd
, 
Àn
;

590 
£ed
;

592 
	`¥ötf
("Beginning mallocÅest 6\n");

594 
fd
 = 
	`›í
(
_PATH_RANDOM
, 
O_RDONLY
);

595 i‡(
fd
 < 0) {

596 
	`îr
(1, "%s", 
_PATH_RANDOM
);

598 
Àn
 = 
	`ªad
(
fd
, &
£ed
, (seed));

599 i‡(
Àn
 < 0) {

600 
	`îr
(1, "%s", 
_PATH_RANDOM
);

602 i‡(
Àn
 < ()(
£ed
)) {

603 
	`îrx
(1, "%s: Sh‹àªad", 
_PATH_RANDOM
);

605 
	`˛o£
(
fd
);

607 
	`ã°567
(6, 
£ed
);

608 
	}
}

612 
	$ã°7
()

614 
£ed
;

616 
	`¥ötf
("Beginning mallocÅest 7\n");

618 
	`¥ötf
("EnterÑandom seed: ");

619 
£ed
 = 
	`gëi
();

621 
	`ã°567
(7, 
£ed
);

622 
	}
}

627 
	mnum
;

628 c⁄° *
	mdesc
;

629 (*
	mfunc
)();

630 } 
	gã°s
[] = {

631 { 1, "Sim∂êÆloˇti⁄Åe°", 
ã°1
 },

632 { 2, "AŒoˇãáŒ mem‹y i¿®big chunk", 
ã°2
 },

633 { 3, "AŒoˇãáŒ mem‹y i¿smÆ»chunks", 
ã°3
 },

634 { 4, "Fªêli° cﬂÀscögÅe° (fú°/√xt/be°-fô o∆y)", 
ã°4
 },

635 { 5, "Såes†ã°", 
ã°5
 },

636 { 6, "R™domized såes†ã°", 
ã°6
 },

637 { 7, "Såes†ã° wôhÖ¨ticuœ∏£ed", 
ã°7
 },

638 { -1, 
NULL
, NULL }

643 
	$dŸe°
(
ä
)

645 
i
;

646 
i
=0; 
ã°s
[i].
num
>=0; i++) {

647 i‡(
ã°s
[
i
].
num
 =
ä
) {

648 
ã°s
[
i
].
	`func
();

653 
	}
}

656 
	$maö
(
¨gc
, *
¨gv
[])

658 
i
, 
ä
, 
míu
=1;

660 i‡(
¨gc
 > 1) {

661 
i
=1; i<
¨gc
; i++) {

662 
	`dŸe°
(
	`©oi
(
¨gv
[
i
]));

668 i‡(
míu
) {

669 
i
=0; 
ã°s
[i].
num
>=0; i++) {

670 
	`¥ötf
(" %2d %s\n", 
ã°s
[
i
].
num
,

671 
ã°s
[
i
].
desc
);

673 
míu
 = 0;

675 
	`¥ötf
("malloctest: ");

676 
ä
 = 
	`gëi
();

677 i‡(
ä
 < 0) {

681 i‡(
	`dŸe°
(
ä
)) {

682 
míu
 = 1;

687 
	}
}

	@os161/user/testbin/matmult/matmult-orig.c

48 
	~<uni°d.h
>

49 
	~<°dio.h
>

51 
	#Dim
 360

	)

55 
	#RIGHT
 46397160

	)

57 
	gA
[
Dim
][Dim];

58 
	gB
[
Dim
][Dim];

59 
	gC
[
Dim
][Dim];

62 
	$maö
()

64 
i
, 
j
, 
k
, 
r
;

66 
i
 = 0; i < 
Dim
; i++)

67 
j
 = 0; j < 
Dim
; j++) {

68 
A
[
i
][
j
] = i;

69 
B
[
i
][
j
] = j;

70 
C
[
i
][
j
] = 0;

73 
i
 = 0; i < 
Dim
; i++)

74 
j
 = 0; j < 
Dim
; j++)

75 
k
 = 0; k < 
Dim
; k++)

76 
C
[
i
][
j
] +
A
[i][
k
] * 
B
[k][j];

78 
	`¥ötf
("matmult-orig finished.\n");

79 
r
 = 
C
[
Dim
-1][Dim-1];

80 
	`¥ötf
("™swî is: %d (should bê%d)\n", 
r
, 
RIGHT
);

81 i‡(
r
 !
RIGHT
) {

82 
	`¥ötf
("FAILED\n");

85 
	`¥ötf
("Passed.\n");

88 
	}
}

	@os161/user/testbin/matmult/matmult.c

42 
	~<uni°d.h
>

43 
	~<°dio.h
>

45 
	#Dim
 72

	)

49 
	#RIGHT
 8772192

	)

51 
	gA
[
Dim
][Dim];

52 
	gB
[
Dim
][Dim];

53 
	gC
[
Dim
][Dim];

54 
	gT
[
Dim
][Dim][Dim];

57 
	$maö
()

59 
i
, 
j
, 
k
, 
r
;

61 
i
 = 0; i < 
Dim
; i++)

62 
j
 = 0; j < 
Dim
; j++) {

63 
A
[
i
][
j
] = i;

64 
B
[
i
][
j
] = j;

65 
C
[
i
][
j
] = 0;

68 
i
 = 0; i < 
Dim
; i++)

69 
j
 = 0; j < 
Dim
; j++)

70 
k
 = 0; k < 
Dim
; k++)

71 
T
[
i
][
j
][
k
] = 
A
[i][k] * 
B
[k][j];

73 
i
 = 0; i < 
Dim
; i++)

74 
j
 = 0; j < 
Dim
; j++)

75 
k
 = 0; k < 
Dim
; k++)

76 
C
[
i
][
j
] +
T
[i][j][
k
];

78 
r
 = 0;

79 
i
 = 0; i < 
Dim
; i++)

80 
r
 +
C
[
i
][i];

82 
	`¥ötf
("matmult finished.\n");

83 
	`¥ötf
("™swî is: %d (should bê%d)\n", 
r
, 
RIGHT
);

84 i‡(
r
 !
RIGHT
) {

85 
	`¥ötf
("FAILED\n");

88 
	`¥ötf
("Passed.\n");

90 
	}
}

	@os161/user/testbin/palin/palin.c

84 
	~<°dio.h
>

85 
	~<°rög.h
>

87 
	g∑lödrome
[8000] =

174 
	$maö
()

176 *
°¨t
, *
íd
;

178 
	`¥ötf
("WelcomeÅoÅheÖalindromeÅester!\n");

179 
	`¥ötf
("I willÅakeáÜargeÖalindromeándÅest it.\n");

180 
	`¥ötf
("Here it is:\n");

181 
	`¥ötf
("%s\n", 
∑lödrome
);

183 
	`¥ötf
("Testing...");

185 
íd
 = 
∑lödrome
+
	`°æí
(palindrome);

186 
íd
--;

188 
°¨t
 = 
∑lödrome
; sèπ <
íd
; start++,Énd--) {

189 
	`putch¨
('.');

190 i‡(*
°¨t
 !*
íd
) {

191 
	`¥ötf
("NOTáÖalindrome\n");

196 
	`¥ötf
("ISáÖalindrome\n");

198 
	}
}

	@os161/user/testbin/parallelvm/parallelvm.c

39 
	~<sys/ty≥s.h
>

40 
	~<sys/waô.h
>

41 
	~<°d¨g.h
>

42 
	~<°dio.h
>

43 
	~<°rög.h
>

44 
	~<°dlib.h
>

45 
	~<uni°d.h
>

46 
	~<îr.h
>

48 
	#NJOBS
 24

	)

50 
	#DIM
 35

	)

51 
	#NMATS
 11

	)

52 
	#JOBSIZE
 ((
NMATS
+1)*
DIM
*DIM*())

	)

54 c⁄° 
	gright_™swîs
[
NJOBS
] = {

83 
	sm©rix
 {

84 
	mm_d©a
[
DIM
][DIM];

95 
	$ßy
(c⁄° *
fmt
, ...)

97 
buf
[256];

98 
va_li°
 
≠
;

99 
	`va_°¨t
(
≠
, 
fmt
);

100 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
≠
);

101 
	`va_íd
(
≠
);

102 
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
	`°æí
(buf));

103 
	}
}

109 
	$mu…ùly
(
m©rix
 *
ªs
, c⁄° m©rix *
m1
, c⁄° m©rix *
m2
)

111 
i
, 
j
, 
k
;

113 
i
=0; i<
DIM
; i++) {

114 
j
=0; j<
DIM
; j++) {

115 
vÆ
=0;

116 
k
=0; k<
DIM
; k++) {

117 
vÆ
 +
m1
->
m_d©a
[
i
][
k
]*
m2
->m_d©a[k][
j
];

119 
ªs
->
m_d©a
[
i
][
j
] = 
vÆ
;

122 
	}
}

126 
	$addeq
(
m©rix
 *
m1
, c⁄° m©rix *
m2
)

128 
i
, 
j
;

129 
i
=0; i<
DIM
; i++) {

130 
j
=0; j<
DIM
; j++) {

131 
m1
->
m_d©a
[
i
][
j
] +
m2
->m_data[i][j];

134 
	}
}

138 
	$åa˚
(c⁄° 
m©rix
 *
m1
)

140 
i
, 
t
=0;

141 
i
=0; i<
DIM
; i++) {

142 
t
 +
m1
->
m_d©a
[
i
][i];

144  
t
;

145 
	}
}

149 
m©rix
 
	gm©s
[
NMATS
];

153 
	$p›uœã_öôül_m©rixes
(
mynum
)

155 
i
,
j
;

156 
m©rix
 *
m
 = &
m©s
[0];

157 
i
=0; i<
DIM
; i++) {

158 
j
=0; j<
DIM
; j++) {

159 
m
->
m_d©a
[
i
][
j
] = 
mynum
+i-2*j;

163 
	`mu…ùly
(&
m©s
[1], &mats[0], &mats[0]);

164 
	}
}

168 
	$compuã
(
n
)

170 
m©rix
 
tmp
;

171 
i
, 
j
;

173 
i
=0,
j
=
n
-1; i<j; i++,j--) {

174 
	`mu…ùly
(&
tmp
, &
m©s
[
i
], &m©s[
j
]);

175 
	`addeq
(&
m©s
[
n
], &
tmp
);

177 
	}
}

181 
	$compuãÆl
(
mynum
)

183 
i
;

184 
	`p›uœã_öôül_m©rixes
(
mynum
);

185 
i
=2; i<
NMATS
; i++) {

186 
	`compuã
(
i
);

188 
	}
}

192 
	$™swî
()

194  
	`åa˚
(&
m©s
[
NMATS
-1]);

195 
	}
}

199 
	$go
(
mynum
)

201 
r
;

203 
	`ßy
("Pro˚s†%d (pid %dË°¨tög compuèti⁄...\n", 
mynum
,

204 (Ë
	`gëpid
());

206 
	`compuãÆl
(
mynum
);

207 
r
 = 
	`™swî
();

209 i‡(
r
 !
right_™swîs
[
mynum
]) {

210 
	`ßy
("Process %dánswer %d: FAILED, should be %d\n",

211 
mynum
, 
r
, 
right_™swîs
[mynum]);

212 
	`exô
(1);

214 
	`ßy
("Pro˚s†%dánswî %d:Öas£d\n", 
mynum
, 
r
);

215 
	`exô
(0);

216 
	}
}

222 
	$°©us_is_Áûuª
(
°©us
)

225 i‡(
	`WIFSIGNALED
(
°©us
)) {

228 i‡(!
	`WIFEXITED
(
°©us
)) {

232 
°©us
 = 
	`WEXITSTATUS
(status);

233  
°©us
 != 0;

234 
	}
}

238 
	$makïrocs
()

240 
i
, 
°©us
, 
Áûcou¡
;

241 
pid_t
 
pids
[
NJOBS
];

243 
	`¥ötf
("Job sizê≠¥oxim©ñy %lu byãs\n", (Ë
JOBSIZE
);

244 
	`¥ötf
("F‹kög %d jobs;ÅŸÆÜﬂd %luk\n", 
NJOBS
,

245 (Ë(
NJOBS
 * 
JOBSIZE
)/1024);

247 
i
=0; i<
NJOBS
; i++) {

248 
pids
[
i
] = 
	`f‹k
();

249 i‡(
pids
[
i
]<0) {

250 
	`w¨n
("fork");

252 i‡(
pids
[
i
]==0) {

254 
	`go
(
i
);

258 
Áûcou¡
=0;

259 
i
=0; i<
NJOBS
; i++) {

260 i‡(
pids
[
i
]<0) {

261 
Áûcou¡
++;

264 i‡(
	`waôpid
(
pids
[
i
], &
°©us
, 0)<0) {

265 
	`îr
(1, "waitpid");

267 i‡(
	`°©us_is_Áûuª
(
°©us
)) {

268 
Áûcou¡
++;

273 i‡(
Áûcou¡
>0) {

274 
	`¥ötf
("%d sub¥o˚s£†Áûed\n", 
Áûcou¡
);

275 
	`exô
(1);

277 
	`¥ötf
("Test complete\n");

278 
	}
}

281 
	$maö
()

283 
	`makïrocs
();

285 
	}
}

	@os161/user/testbin/psort/psort.c

39 
	~<sys/ty≥s.h
>

40 
	~<sys/°©.h
>

41 
	~<sys/waô.h
>

42 
	~<°dio.h
>

43 
	~<°d¨g.h
>

44 
	~<°dlib.h
>

45 
	~<°rög.h
>

46 
	~<as£π.h
>

47 
	~<uni°d.h
>

48 
	~<f˙é.h
>

49 
	~<î∫o.h
>

51 #i‚de‡
RANDOM_MAX


53 
	#RANDOM_MAX
 
RAND_MAX


	)

56 
	#PATH_KEYS
 "s‹tkeys"

	)

57 
	#PATH_SORTED
 "ouçut"

	)

58 
	#PATH_TESTDIR
 "ps‹tdú"

	)

59 
	#PATH_RANDOM
 "ønd:"

	)

61 
	#WORKNUM
 (128*1024)

	)

64 
	gw‹k•a˚
[
WORKNUM
];

66 c⁄° *
	g¥og«me
;

68 
	gnum¥ocs
 = 4;

69 
	gnumkeys
 = 10000;

70 
	gøndom£ed
 = 15432753;

72 
off_t
 
	gc‹ª˘size
;

73 
	gchecksum
;

75 
	#NOBODY
 (-1)

	)

76 
	gme
 = 
NOBODY
;

82 
	$s‹töts
(*
v
, 
num
)

84 
pivŸvÆ
, 
pivŸpoöt
, 
pivŸcou¡
;

85 
‰⁄ços
, 
ªadpos
, 
ídpos
, 
i
, 
j
;

86 
tmp
;

88 i‡(
num
 < 2) {

92 
pivŸpoöt
 = 
num
/2;

93 
pivŸvÆ
 = 
v
[
pivŸpoöt
];

94 
pivŸcou¡
 = 0;

96 
‰⁄ços
 = 0;

97 
ªadpos
 = 0;

98 
ídpos
 = 
num
;

99 
ªadpos
 < 
ídpos
) {

100 i‡(
v
[
ªadpos
] < 
pivŸvÆ
) {

101 
v
[
‰⁄ços
++] = v[
ªadpos
++];

103 i‡(
v
[
ªadpos
] =
pivŸvÆ
) {

104 
ªadpos
++;

105 
pivŸcou¡
++;

108 
tmp
 = 
v
[--
ídpos
];

109 
v
[
ídpos
] = v[
ªadpos
];

110 
v
[
ªadpos
] = 
tmp
;

113 
	`as£π
(
ªadpos
 =
ídpos
);

114 
	`as£π
(
‰⁄ços
 + 
pivŸcou¡
 =
ªadpos
);

116 
i
=
‰⁄ços
; i<
ídpos
; i++) {

117 
v
[
i
] = 
pivŸvÆ
;

120 
i
=
ídpos
, 
j
=
num
-1; i<j; i++,j--) {

121 
tmp
 = 
v
[
i
];

122 
v
[
i
] = v[
j
];

123 
v
[
j
] = 
tmp
;

126 
	`s‹töts
(
v
, 
‰⁄ços
);

127 
	`s‹töts
(&
v
[
ídpos
], 
num
-endpos);

128 
	}
}

134 
	$öô¥og«me
(c⁄° *
av0
)

136 i‡(
av0
) {

137 
¥og«me
 = 
	`°ºchr
(
av0
, '/');

138 i‡(
¥og«me
) {

139 
¥og«me
++;

142 
¥og«me
 = 
av0
;

146 
¥og«me
 = "psort";

148 
	}
}

152 
	$vscom∂aö
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, 
va_li°
 
≠
, 
îr
)

154 
size_t
 
pos
;

156 i‡(
me
 >= 0) {

157 
	`¢¥ötf
(
buf
, 
Àn
, "%s:Öro¯%d: ", 
¥og«me
, 
me
);

160 
	`¢¥ötf
(
buf
, 
Àn
, "%s: ", 
¥og«me
);

162 
pos
 = 
	`°æí
(
buf
);

164 
	`v¢¥ötf
(
buf
+
pos
, 
Àn
-pos, 
fmt
, 
≠
);

165 
pos
 = 
	`°æí
(
buf
);

167 i‡(
îr
 >= 0) {

168 
	`¢¥ötf
(
buf
+
pos
, 
Àn
-pos, ": %s\n", 
	`°ªº‹
(
îr
));

171 
	`¢¥ötf
(
buf
+
pos
, 
Àn
-pos, "\n");

173 
	}
}

177 
	$com∂aöx
(c⁄° *
fmt
, ...)

179 
rc
;

180 
buf
[256];

181 
va_li°
 
≠
;

183 
	`va_°¨t
(
≠
, 
fmt
);

184 
	`vscom∂aö
(
buf
, (buf), 
fmt
, 
≠
, -1);

185 
	`va_íd
(
≠
);

188 
rc
 = 
	`wrôe
(
STDERR_FILENO
, 
buf
, 
	`°æí
(buf));

191 ()
rc
;

192 
	}
}

196 
	$com∂aö
(c⁄° *
fmt
, ...)

198 
rc
;

199 
buf
[256];

200 
va_li°
 
≠
;

201 
îr
 = 
î∫o
;

203 
	`va_°¨t
(
≠
, 
fmt
);

204 
	`vscom∂aö
(
buf
, (buf), 
fmt
, 
≠
, 
îr
);

205 
	`va_íd
(
≠
);

208 
rc
 = 
	`wrôe
(
STDERR_FILENO
, 
buf
, 
	`°æí
(buf));

211 ()
rc
;

212 
	}
}

218 
	$do›í
(c⁄° *
∑th
, 
Êags
, 
mode
)

220 
fd
;

222 
fd
 = 
	`›í
(
∑th
, 
Êags
, 
mode
);

223 i‡(
fd
<0) {

224 
	`com∂aö
("%s", 
∑th
);

225 
	`exô
(1);

227  
fd
;

228 
	}
}

232 
	$do˛o£
(c⁄° *
∑th
, 
fd
)

234 i‡(
	`˛o£
(
fd
)) {

235 
	`com∂aö
("%s: clo£", 
∑th
);

236 
	`exô
(1);

238 
	}
}

242 
	$do¸óã
(c⁄° *
∑th
)

244 
fd
;

246 
fd
 = 
	`do›í
(
∑th
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

247 
	`do˛o£
(
∑th
, 
fd
);

248 
	}
}

252 
	$d‹emove
(c⁄° *
∑th
)

254 
n‹emove
;

256 i‡(
n‹emove
) {

260 i‡(
	`ªmove
(
∑th
) < 0) {

261 i‡(
î∫o
 =
ENOSYS
) {

263 
n‹emove
 = 1;

265 
	`com∂aö
("%s:Ñemove", 
∑th
);

267 
	}
}

270 
off_t


271 
	$gësize
(c⁄° *
∑th
)

273 
°©
 
buf
;

274 
fd
;

275 
no_°©
, 
no_f°©
;

277 i‡(!
no_°©
) {

278 i‡(
	`°©
(
∑th
, &
buf
) == 0) {

279  
buf
.
°_size
;

281 i‡(
î∫o
 !
ENOSYS
) {

282 
	`com∂aö
("%s: sèt", 
∑th
);

283 
	`exô
(1);

286 
no_°©
 = 1;

289 
fd
 = 
	`do›í
(
∑th
, 
O_RDONLY
, 0);

290 i‡(!
no_f°©
) {

291 i‡(
	`f°©
(
fd
, &
buf
) == 0) {

292 
	`˛o£
(
fd
);

293  
buf
.
°_size
;

295 i‡(
î∫o
 !
ENOSYS
) {

296 
	`com∂aö
("%s: sèt", 
∑th
);

297 
	`exô
(1);

300 
no_f°©
 = 1;

304 i‡(
	`l£ek
(
fd
, 0, 
SEEK_END
) >= 0) {

305 
buf
.
°_size
 = 
	`l£ek
(
fd
, 0, 
SEEK_CUR
);

306 i‡(
buf
.
°_size
 >= 0) {

307  
buf
.
°_size
;

310 
	`com∂aö
("%s: gëtög fûêsizêwôhÜ£ek", 
∑th
);

311 
	`˛o£
(
fd
);

312 
	`exô
(1);

313 
	}
}

316 
size_t


317 
	$d‹ód
(c⁄° *
∑th
, 
fd
, *
buf
, 
size_t
 
Àn
)

319 
ªsu…
;

321 
ªsu…
 = 
	`ªad
(
fd
, 
buf
, 
Àn
);

322 i‡(
ªsu…
 < 0) {

323 
	`com∂aö
("%s:Ñód", 
∑th
);

324 
	`exô
(1);

326  (
size_t
Ë
ªsu…
;

327 
	}
}

331 
	$d€xa˘ªad
(c⁄° *
∑th
, 
fd
, *
buf
, 
size_t
 
Àn
)

333 
size_t
 
ªsu…
;

335 
ªsu…
 = 
	`d‹ód
(
∑th
, 
fd
, 
buf
, 
Àn
);

336 i‡(
ªsu…
 !
Àn
) {

337 
	`com∂aöx
("%s:Ñód: sh‹àcou¡", 
∑th
);

338 
	`exô
(1);

340 
	}
}

344 
	$dowrôe
(c⁄° *
∑th
, 
fd
, c⁄° *
buf
, 
size_t
 
Àn
)

346 
ªsu…
;

348 
ªsu…
 = 
	`wrôe
(
fd
, 
buf
, 
Àn
);

349 i‡(
ªsu…
 < 0) {

350 
	`com∂aö
("%s: wrôe", 
∑th
);

351 
	`exô
(1);

353 i‡((
size_t
Ë
ªsu…
 !
Àn
) {

354 
	`com∂aöx
("%s: wrôe: sh‹àcou¡", 
∑th
);

355 
	`exô
(1);

357 
	}
}

361 
	$dﬁ£ek
(c⁄° *
«me
, 
fd
, 
off_t
 
off£t
, 
whí˚
)

363 i‡(
	`l£ek
(
fd
, 
off£t
, 
whí˚
) < 0) {

364 
	`com∂aö
("%s:Ü£ek", 
«me
);

365 
	`exô
(1);

367 
	}
}

372 
	$dochdú
(c⁄° *
∑th
)

374 i‡(
	`chdú
(
∑th
) < 0) {

375 
	`com∂aö
("%s: chdú", 
∑th
);

376 
	`exô
(1);

378 
	}
}

382 
	$domkdú
(c⁄° *
∑th
, 
mode
)

384 i‡(
	`mkdú
(
∑th
, 
mode
) < 0) {

385 
	`com∂aö
("%s: mkdú", 
∑th
);

386 
	`exô
(1);

388 
	}
}

392 
pid_t


393 
	$dof‹k
()

395 
pid_t
 
pid
;

397 
pid
 = 
	`f‹k
();

398 i‡(
pid
 < 0) {

399 
	`com∂aö
("fork");

403  
pid
;

404 
	}
}

410 
	$dowaô
(
guy
, 
pid_t
 
pid
)

412 
°©us
, 
ªsu…
;

414 
ªsu…
 = 
	`waôpid
(
pid
, &
°©us
, 0);

415 i‡(
ªsu…
 < 0) {

416 
	`com∂aö
("waitpid");

419 i‡(
	`WIFSIGNALED
(
°©us
)) {

420 
	`com∂aöx
("¥o¯%d: sig«»%d", 
guy
, 
	`WTERMSIG
(
°©us
));

423 
	`as£π
(
	`WIFEXITED
(
°©us
));

424 
°©us
 = 
	`WEXITSTATUS
(status);

425 i‡(
°©us
) {

426 
	`com∂aöx
("¥o¯%d:Éxô %d", 
guy
, 
°©us
);

430 
	}
}

434 
dof‹kÆl
(c⁄° *
pha£«me
, (*
func
)())

436 
i
, 
bad
 = 0;

437 
pid_t
 
pids
[
num¥ocs
];

439 
i
=0; i<
num¥ocs
; i++) {

440 
pids
[
i
] = 
	`dof‹k
();

441 i‡(
pids
[
i
] < 0) {

442 
bad
 = 1;

444 i‡(
pids
[
i
] == 0) {

446 
me
 = 
i
;

447 
	`func
();

448 
	`exô
(0);

452 
i
=0; i<
num¥ocs
; i++) {

453 i‡(
pids
[
i
] > 0 && 
	`dowaô
(i,Öids[i])) {

454 
bad
 = 1;

458 i‡(
bad
) {

459 
	`com∂aöx
("%†Áûed.", 
pha£«me
);

460 
	`exô
(1);

462 
	}
}

466 
	$£ekmy∂a˚
(c⁄° *
«me
, 
fd
)

468 
keys_≥r
, 
myfú°
;

469 
off_t
 
off£t
;

471 
keys_≥r
 = 
numkeys
 / 
num¥ocs
;

472 
myfú°
 = 
me
*
keys_≥r
;

473 
off£t
 = 
myfú°
 * ();

475 
	`dﬁ£ek
(
«me
, 
fd
, 
off£t
, 
SEEK_SET
);

476 
	}
}

480 
	$gëmykeys
()

482 
keys_≥r
, 
myfú°
, 
mykeys
;

484 
keys_≥r
 = 
numkeys
 / 
num¥ocs
;

485 
myfú°
 = 
me
*
keys_≥r
;

486 
mykeys
 = (
me
 < 
num¥ocs
-1Ë? 
keys_≥r
 : 
numkeys
 - 
myfú°
;

488  
mykeys
;

489 
	}
}

495 
	$checksum_fûe
(c⁄° *
∑th
)

497 
fd
;

498 
buf
[512];

499 
size_t
 
cou¡
, 
i
;

500 
sum
 = 0;

502 
fd
 = 
	`do›í
(
∑th
, 
O_RDONLY
, 0);

504 (
cou¡
 = 
	`d‹ód
(
∑th
, 
fd
, 
buf
, (buf))) > 0) {

505 
i
=0; i<
cou¡
; i++) {

506 
sum
 +(Ë
buf
[
i
];

510 
	`do˛o£
(
∑th
, 
fd
);

512  
sum
;

513 
	}
}

517 *
	g£eds
;

521 
	$gíkeys_sub
()

523 
fd
, 
i
, 
mykeys
, 
keys_d⁄e
, 
keys_to_do
, 
vÆue
;

525 
fd
 = 
	`do›í
(
PATH_KEYS
, 
O_WRONLY
, 0);

527 
mykeys
 = 
	`gëmykeys
();

528 
	`£ekmy∂a˚
(
PATH_KEYS
, 
fd
);

530 
	`§™dom
(
£eds
[
me
]);

531 
keys_d⁄e
 = 0;

532 
keys_d⁄e
 < 
mykeys
) {

533 
keys_to_do
 = 
mykeys
 - 
keys_d⁄e
;

534 i‡(
keys_to_do
 > 
WORKNUM
) {

535 
keys_to_do
 = 
WORKNUM
;

538 
i
=0; i<
keys_to_do
; i++) {

539 
vÆue
 = 
	`øndom
();

542 
	`as£π
(
vÆue
 >= 0);

543 
	`as£π
(
vÆue
 <
RANDOM_MAX
);

546 
vÆue
 =0 || vÆuê=
RANDOM_MAX
) {

547 
vÆue
 = 
	`øndom
();

550 
w‹k•a˚
[
i
] = 
vÆue
;

553 
	`dowrôe
(
PATH_KEYS
, 
fd
, 
w‹k•a˚
, 
keys_to_do
*());

554 
keys_d⁄e
 +
keys_to_do
;

557 
	`do˛o£
(
PATH_KEYS
, 
fd
);

558 
	}
}

562 
	$gíkeys
()

564 
£ed•a˚
[
num¥ocs
];

565 
i
;

568 
	`do¸óã
(
PATH_KEYS
);

571 
	`§™dom
(
øndom£ed
);

572 
i
=0; i<
num¥ocs
; i++) {

573 
£ed•a˚
[
i
] = 
	`øndom
();

577 
£eds
 = 
£ed•a˚
;

578 
	`dof‹kÆl
("Inôüliz©i⁄", 
gíkeys_sub
);

579 
£eds
 = 
NULL
;

582 i‡(
	`gësize
(
PATH_KEYS
Ë!
c‹ª˘size
) {

583 
	`com∂aöx
("%s: fûêi†wr⁄g size", 
PATH_KEYS
);

584 
	`exô
(1);

588 
checksum
 = 
	`checksum_fûe
(
PATH_KEYS
);

589 
	`com∂aöx
("Checksum o‡uns‹ãd keys: %ld", 
checksum
);

590 
	}
}

596 
	$bö«me
(
a
, 
b
)

598 
rv
[32];

599 
	`¢¥ötf
(
rv
, ‘v), "bö-%d-%d", 
a
, 
b
);

600  
rv
;

601 
	}
}

605 
	$mîged«me
(
a
)

607 
rv
[32];

608 
	`¢¥ötf
(
rv
, ‘v), "mîged-%d", 
a
);

609  
rv
;

610 
	}
}

614 
	$bö
()

616 
öfd
, 
outfds
[
num¥ocs
];

617 c⁄° *
«me
;

618 
i
, 
mykeys
, 
keys_d⁄e
, 
keys_to_do
;

619 
key
, 
pivŸ
, 
bönum
;

621 
öfd
 = 
	`do›í
(
PATH_KEYS
, 
O_RDONLY
, 0);

623 
mykeys
 = 
	`gëmykeys
();

624 
	`£ekmy∂a˚
(
PATH_KEYS
, 
öfd
);

626 
i
=0; i<
num¥ocs
; i++) {

627 
«me
 = 
	`bö«me
(
me
, 
i
);

628 
outfds
[
i
] = 
	`do›í
(
«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

631 
pivŸ
 = (
RANDOM_MAX
 / 
num¥ocs
);

633 
keys_d⁄e
 = 0;

634 
keys_d⁄e
 < 
mykeys
) {

635 
keys_to_do
 = 
mykeys
 - 
keys_d⁄e
;

636 i‡(
keys_to_do
 > 
WORKNUM
) {

637 
keys_to_do
 = 
WORKNUM
;

640 
	`d€xa˘ªad
(
PATH_KEYS
, 
öfd
, 
w‹k•a˚
,

641 
keys_to_do
 * ());

643 
i
=0; i<
keys_to_do
; i++) {

644 
key
 = 
w‹k•a˚
[
i
];

646 
bönum
 = 
key
 / 
pivŸ
;

647 i‡(
key
 <= 0) {

648 
	`com∂aöx
("¥o¯%d: g¨bagêkey %d", 
me
, 
key
);

649 
key
 = 0;

651 
	`as£π
(
bönum
 >= 0);

652 
	`as£π
(
bönum
 < 
num¥ocs
);

653 
	`dowrôe
("bö", 
outfds
[
bönum
], &
key
, (key));

656 
keys_d⁄e
 +
keys_to_do
;

658 
	`do˛o£
(
PATH_KEYS
, 
öfd
);

660 
i
=0; i<
num¥ocs
; i++) {

661 
	`do˛o£
(
	`bö«me
(
me
, 
i
), 
outfds
[i]);

663 
	}
}

667 
	$s‹tbös
()

669 c⁄° *
«me
;

670 
i
, 
fd
;

671 
off_t
 
bösize
;

673 
i
=0; i<
num¥ocs
; i++) {

674 
«me
 = 
	`bö«me
(
me
, 
i
);

675 
bösize
 = 
	`gësize
(
«me
);

676 i‡(
bösize
 % () != 0) {

677 
	`com∂aöx
("%s: bö sizê%ldÇÿgood", 
«me
,

678 (Ë
bösize
);

679 
	`exô
(1);

681 i‡(
bösize
 > (
off_t
Ë(
w‹k•a˚
)) {

682 
	`com∂aöx
("¥o¯%d: %s: böÅoÿœrge", 
me
, 
«me
);

683 
	`exô
(1);

686 
fd
 = 
	`do›í
(
«me
, 
O_RDWR
, 0);

687 
	`d€xa˘ªad
(
«me
, 
fd
, 
w‹k•a˚
, 
bösize
);

689 
	`s‹töts
(
w‹k•a˚
, 
bösize
/());

691 
	`dﬁ£ek
(
«me
, 
fd
, 0, 
SEEK_SET
);

692 
	`dowrôe
(
«me
, 
fd
, 
w‹k•a˚
, 
bösize
);

693 
	`do˛o£
(
«me
, 
fd
);

695 
	}
}

699 
	$mîgebös
()

701 
öfds
[
num¥ocs
], 
outfd
;

702 
vÆues
[
num¥ocs
], 
ªady
[numprocs];

703 c⁄° *
«me
, *
ouäame
;

704 
i
, 
ªsu…
;

705 
numªady
, 
∂a˚
, 
vÆ
, 
w‹knum
;

707 
ouäame
 = 
	`mîged«me
(
me
);

708 
outfd
 = 
	`do›í
(
ouäame
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

710 
i
=0; i<
num¥ocs
; i++) {

711 
«me
 = 
	`bö«me
(
i
, 
me
);

712 
öfds
[
i
] = 
	`do›í
(
«me
, 
O_RDONLY
, 0);

713 
vÆues
[
i
] = 0;

714 
ªady
[
i
] = 0;

717 
w‹knum
 = 0;

720 
numªady
 = 0;

721 
i
=0; i<
num¥ocs
; i++) {

722 i‡(
öfds
[
i
] < 0) {

726 i‡(!
ªady
[
i
]) {

727 
ªsu…
 = 
	`d‹ód
("bö", 
öfds
[
i
],

728 &
vÆ
, ());

729 i‡(
ªsu…
 == 0) {

730 
	`do˛o£
("bö", 
öfds
[
i
]);

731 
öfds
[
i
] = -1;

734 i‡((
size_t
Ë
ªsu…
 != ()) {

735 
	`com∂aöx
("%s:Ñead: short count",

736 
	`bö«me
(
i
, 
me
));

737 
	`exô
(1);

739 
vÆues
[
i
] = 
vÆ
;

740 
ªady
[
i
] = 1;

742 
numªady
++;

744 i‡(
numªady
 == 0) {

749 
∂a˚
 = -1;

750 
i
=0; i<
num¥ocs
; i++) {

751 i‡(!
ªady
[
i
]) {

754 i‡(
∂a˚
 < 0 || 
vÆues
[
i
] < 
vÆ
) {

755 
vÆ
 = 
vÆues
[
i
];

756 
∂a˚
 = 
i
;

759 
	`as£π
(
∂a˚
 >= 0);

761 
w‹k•a˚
[
w‹knum
++] = 
vÆ
;

762 i‡(
w‹knum
 >
WORKNUM
) {

763 
	`as£π
(
w‹knum
 =
WORKNUM
);

764 
	`dowrôe
(
ouäame
, 
outfd
, 
w‹k•a˚
,

765 
w‹knum
 * ());

766 
w‹knum
 = 0;

768 
ªady
[
∂a˚
] = 0;

771 
	`dowrôe
(
ouäame
, 
outfd
, 
w‹k•a˚
, 
w‹knum
 * ());

772 
	`do˛o£
(
ouäame
, 
outfd
);

774 
i
=0; i<
num¥ocs
; i++) {

775 
	`as£π
(
öfds
[
i
] < 0);

777 
	}
}

781 
	$as£mbÀ
()

783 
off_t
 
mypos
;

784 
i
, 
fd
;

785 c⁄° *
¨gs
[3];

787 
mypos
 = 0;

788 
i
=0; i<
me
; i++) {

789 
mypos
 +
	`gësize
(
	`mîged«me
(
i
));

792 
fd
 = 
	`do›í
(
PATH_SORTED
, 
O_WRONLY
, 0);

793 
	`dﬁ£ek
(
PATH_SORTED
, 
fd
, 
mypos
, 
SEEK_SET
);

795 i‡(
	`dup2
(
fd
, 
STDOUT_FILENO
) < 0) {

796 
	`com∂aö
("dup2");

797 
	`exô
(1);

800 
	`do˛o£
(
PATH_SORTED
, 
fd
);

802 
¨gs
[0] = "cat";

803 
¨gs
[1] = 
	`mîged«me
(
me
);

804 
¨gs
[2] = 
NULL
;

805 
	`execv
("/bö/ˇt", (**Ë
¨gs
);

806 
	`com∂aö
("/bin/cat:Éxec");

807 
	`exô
(1);

808 
	}
}

812 
	$checksize_bös
()

814 
off_t
 
tŸsize
;

815 
i
, 
j
;

817 
tŸsize
 = 0;

818 
i
=0; i<
num¥ocs
; i++) {

819 
j
=0; j<
num¥ocs
; j++) {

820 
tŸsize
 +
	`gësize
(
	`bö«me
(
i
, 
j
));

823 i‡(
tŸsize
 !
c‹ª˘size
) {

824 
	`com∂aö
("Sum of bin sizes is wrong (%ld, should be %ld)",

825 (Ë
tŸsize
, (Ë
c‹ª˘size
);

826 
	`exô
(1);

828 
	}
}

832 
	$checksize_mîge
()

834 
off_t
 
tŸsize
;

835 
i
;

837 
tŸsize
 = 0;

838 
i
=0; i<
num¥ocs
; i++) {

839 
tŸsize
 +
	`gësize
(
	`mîged«me
(
i
));

841 i‡(
tŸsize
 !
c‹ª˘size
) {

842 
	`com∂aö
("Sum of merged sizes is wrong (%ld, should be %ld)",

843 (Ë
tŸsize
, (Ë
c‹ª˘size
);

844 
	`exô
(1);

846 
	}
}

850 
	$s‹t
()

852 
s‹ãdsum
;

853 
i
, 
j
;

856 
	`dof‹kÆl
("Tossög", 
bö
);

857 
	`checksize_bös
();

858 
	`com∂aöx
("DoneÅossing into bins.");

861 
	`dof‹kÆl
("S‹tög", 
s‹tbös
);

862 
	`checksize_bös
();

863 
	`com∂aöx
("Done sortingÅhe bins.");

866 
	`dof‹kÆl
("Mîgög", 
mîgebös
);

867 
	`checksize_mîge
();

868 
	`com∂aöx
("Done mergingÅhe bins.");

871 
i
=0; i<
num¥ocs
; i++) {

872 
j
=0; j<
num¥ocs
; j++) {

873 
	`d‹emove
(
	`bö«me
(
i
, 
j
));

878 
	`do¸óã
(
PATH_SORTED
);

879 
	`dof‹kÆl
("FöÆás£mbly", 
as£mbÀ
);

880 i‡(
	`gësize
(
PATH_SORTED
Ë!
c‹ª˘size
) {

881 
	`com∂aöx
("%s: fûêi†wr⁄g size", 
PATH_SORTED
);

882 
	`exô
(1);

886 
i
=0; i<
num¥ocs
; i++) {

887 
	`d‹emove
(
	`mîged«me
(
i
));

891 
s‹ãdsum
 = 
	`checksum_fûe
(
PATH_SORTED
);

892 
	`com∂aöx
("Checksum o‡s‹ãd keys: %ld", 
s‹ãdsum
);

894 i‡(
s‹ãdsum
 !
checksum
) {

895 
	`com∂aöx
("Sums doÇot match");

896 
	`exô
(1);

898 
	}
}

904 
	$vÆid«me
(
a
)

906 
rv
[32];

907 
	`¢¥ötf
(
rv
, ‘v), "vÆid-%d", 
a
);

908  
rv
;

909 
	}
}

913 
	$checksize_vÆid
()

915 
off_t
 
tŸvsize
, 
c‹ª˘vsize
;

916 
i
;

918 
c‹ª˘vsize
 = (
off_t
Ë
num¥ocs
*2*();

920 
tŸvsize
 = 0;

921 
i
=0; i<
num¥ocs
; i++) {

922 
tŸvsize
 +
	`gësize
(
	`vÆid«me
(
i
));

924 i‡(
tŸvsize
 !
c‹ª˘vsize
) {

925 
	`com∂aöx
("Sum of validation sizes is wrong "

927 (Ë
tŸvsize
, (Ë
c‹ª˘vsize
);

928 
	`exô
(1);

930 
	}
}

934 
	$dovÆid©e
()

936 c⁄° *
«me
;

937 
fd
, 
i
, 
mykeys
, 
keys_d⁄e
, 
keys_to_do
;

938 
key
, 
smÆÀ°
, 
œrge°
;

940 
«me
 = 
PATH_SORTED
;

941 
fd
 = 
	`do›í
(
«me
, 
O_RDONLY
, 0);

943 
mykeys
 = 
	`gëmykeys
();

944 
	`£ekmy∂a˚
(
«me
, 
fd
);

946 
smÆÀ°
 = 
RANDOM_MAX
;

947 
œrge°
 = 0;

949 
keys_d⁄e
 = 0;

950 
keys_d⁄e
 < 
mykeys
) {

951 
keys_to_do
 = 
mykeys
 - 
keys_d⁄e
;

952 i‡(
keys_to_do
 > 
WORKNUM
) {

953 
keys_to_do
 = 
WORKNUM
;

956 
	`d€xa˘ªad
(
«me
, 
fd
, 
w‹k•a˚
, 
keys_to_do
 * ());

958 
i
=0; i<
keys_to_do
; i++) {

959 
key
 = 
w‹k•a˚
[
i
];

961 i‡(
key
 < 0) {

962 
	`com∂aö
("%s: foundÇeg©ivêkey", 
«me
);

963 
	`exô
(1);

965 i‡(
key
 == 0) {

966 
	`com∂aö
("%s: found zîÿkey", 
«me
);

967 
	`exô
(1);

969 i‡(
key
 >
RANDOM_MAX
) {

970 
	`com∂aö
("%s: foundÅoo-œrgêkey", 
«me
);

971 
	`exô
(1);

974 i‡(
key
 < 
smÆÀ°
) {

975 
smÆÀ°
 = 
key
;

977 i‡(
key
 > 
œrge°
) {

978 
œrge°
 = 
key
;

982 
keys_d⁄e
 +
keys_to_do
;

984 
	`do˛o£
(
«me
, 
fd
);

986 
«me
 = 
	`vÆid«me
(
me
);

987 
fd
 = 
	`do›í
(
«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

988 
	`dowrôe
(
«me
, 
fd
, &
smÆÀ°
, (smallest));

989 
	`dowrôe
(
«me
, 
fd
, &
œrge°
, (largest));

990 
	`do˛o£
(
«me
, 
fd
);

991 
	}
}

995 
	$vÆid©e
()

997 
smÆÀ°
, 
œrge°
, 
¥ev_œrge°
;

998 
i
, 
fd
;

999 c⁄° *
«me
;

1001 
	`dof‹kÆl
("VÆid©i⁄", 
dovÆid©e
);

1002 
	`checksize_vÆid
();

1004 
¥ev_œrge°
 = 1;

1006 
i
=0; i<
num¥ocs
; i++) {

1007 
«me
 = 
	`vÆid«me
(
i
);

1008 
fd
 = 
	`do›í
(
«me
, 
O_RDONLY
, 0);

1010 
	`d€xa˘ªad
(
«me
, 
fd
, &
smÆÀ°
, ());

1011 
	`d€xa˘ªad
(
«me
, 
fd
, &
œrge°
, ());

1013 i‡(
smÆÀ°
 < 1) {

1014 
	`com∂aöx
("VÆid©i⁄: block %d: bad SMALLEST", 
i
);

1015 
	`exô
(1);

1017 i‡(
œrge°
 >
RANDOM_MAX
) {

1018 
	`com∂aöx
("VÆid©i⁄: block %d: bad LARGEST", 
i
);

1019 
	`exô
(1);

1021 i‡(
smÆÀ°
 > 
œrge°
) {

1022 
	`com∂aöx
("Validation: block %d: SMALLEST > LARGEST",

1023 
i
);

1024 
	`exô
(1);

1027 i‡(
smÆÀ°
 < 
¥ev_œrge°
) {

1028 
	`com∂aö
("Validation: block %d smallest key %d",

1029 
i
, 
smÆÀ°
);

1030 
	`com∂aö
("Validation:Örevious blockÜargest key %d",

1031 
¥ev_œrge°
);

1032 
	`com∂aö
("Validation failed");

1033 
	`exô
(1);

1038 
i
=0; i<
num¥ocs
; i++) {

1039 
	`d‹emove
(
	`vÆid«me
(
i
));

1041 
	}
}

1047 
	$£tdú
()

1050 
	`domkdú
(
PATH_TESTDIR
, 0775);

1051 
	`dochdú
(
PATH_TESTDIR
);

1053 
	}
}

1057 
	$un£tdú
()

1059 
	`d‹emove
(
PATH_KEYS
);

1060 
	`d‹emove
(
PATH_SORTED
);

1062 
	`dochdú
("..");

1064 i‡(
	`rmdú
(
PATH_TESTDIR
) < 0) {

1065 
	`com∂aö
("%s:Ñmdú", 
PATH_TESTDIR
);

1069 
	}
}

1075 
	$øndomize
()

1077 
fd
;

1079 
fd
 = 
	`do›í
(
PATH_RANDOM
, 
O_RDONLY
, 0);

1080 
	`d€xa˘ªad
(
PATH_RANDOM
, 
fd
, &
øndom£ed
, (randomseed));

1081 
	`do˛o£
(
PATH_RANDOM
, 
fd
);

1082 
	}
}

1086 
	$ußge
()

1088 
	`com∂aö
("Ußge: %†[-∞¥ocs] [-k keys] [-†£ed] [-r]", 
¥og«me
);

1089 
	`exô
(1);

1090 
	}
}

1094 
	$dﬂrgs
(
¨gc
, *
¨gv
[])

1096 
i
, 
ch
, 
vÆ
, 
¨g
;

1098 
i
=1; i<
¨gc
; i++) {

1099 i‡(
¨gv
[
i
][0] != '-') {

1100 
	`ußge
();

1103 
ch
 = 
¨gv
[
i
][1];

1104 
ch
) {

1105 'p': 
¨g
 = 1; ;

1106 'k': 
¨g
 = 1; ;

1107 's': 
¨g
 = 1; ;

1108 'r': 
¨g
 = 0; ;

1109 : 
	`ußge
(); ;

1111 i‡(
¨g
) {

1112 i‡(
¨gv
[
i
][2]) {

1113 
vÆ
 = 
	`©oi
(
¨gv
[
i
]+2);

1116 
i
++;

1117 i‡(!
¨gv
[
i
]) {

1118 
	`com∂aö
("Option -%cÑequiresán "

1119 "¨gumít", 
ch
);

1120 
	`exô
(1);

1122 
vÆ
 = 
	`©oi
(
¨gv
[
i
]);

1124 
ch
) {

1125 'p': 
num¥ocs
 = 
vÆ
; ;

1126 'k': 
numkeys
 = 
vÆ
; ;

1127 's': 
øndom£ed
 = 
vÆ
; ;

1128 : 
	`as£π
(0); ;

1132 
ch
) {

1133 'r': 
	`øndomize
(); ;

1134 : 
	`as£π
(0); ;

1138 
	}
}

1141 
	$maö
(
¨gc
, *
¨gv
[])

1143 
	`öô¥og«me
(
¨gc
 > 0 ? 
¨gv
[0] : 
NULL
);

1145 
	`dﬂrgs
(
¨gc
, 
¨gv
);

1146 
c‹ª˘size
 = (
off_t
Ë(
numkeys
*());

1148 
	`£tdú
();

1150 
	`gíkeys
();

1151 
	`s‹t
();

1152 
	`vÆid©e
();

1153 
	`com∂aöx
("Succeeded.");

1155 
	`un£tdú
();

1158 
	}
}

	@os161/user/testbin/randcall/calls.c

2 
	~<sys/ty≥s.h
>

3 
	~<sys/°©.h
>

4 
	~<as£π.h
>

5 
	~<uni°d.h
>

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<î∫o.h
>

9 
	~<îr.h
>

11 
	~"exã∫.h
"

13 (*
	tåyfunc
)(
	tdof‹k
);

17 
	$åy_execv
(
dof‹k
)

19 * 
a0
 = 
	`ønd±r
();

20 * 
a1
 = 
	`ønd±r
();

21 
ªsu…
, 
pid
, 
°©us
;

22 
buf
[128];

24 
	`¢¥ötf
(
buf
, (buf), "execv(%p, %p)",

25 (
a0
), (
a1
));

26 
	`¥ötf
("%-47s", 
buf
);

28 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

29 i‡(
pid
<0) {

30 
	`îr
(1, "fork");

32 i‡(
pid
>0) {

33 
	`waôpid
(
pid
, &
°©us
, 0);

37 
ªsu…
 = 
	`execv
(
a0
, 
a1
);

38 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

39 i‡(
dof‹k
) {

40 
	`exô
(0);

42 
	}
}

46 
	$åy_waôpid
(
dof‹k
)

48 
a0
 = 
	`øndöt
();

49 * 
a1
 = 
	`ønd±r
();

50 
a2
 = 
	`øndöt
();

51 
ªsu…
, 
pid
, 
°©us
;

52 
buf
[128];

54 
	`¢¥ötf
(
buf
, (buf), "waitpid(%d, %p, %d)",

55 (
a0
), (
a1
), (
a2
));

56 
	`¥ötf
("%-47s", 
buf
);

58 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

59 i‡(
pid
<0) {

60 
	`îr
(1, "fork");

62 i‡(
pid
>0) {

63 
	`waôpid
(
pid
, &
°©us
, 0);

67 
ªsu…
 = 
	`waôpid
(
a0
, 
a1
, 
a2
);

68 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

69 i‡(
dof‹k
) {

70 
	`exô
(0);

72 
	}
}

76 
	$åy_›í
(
dof‹k
)

78 * 
a0
 = 
	`ønd±r
();

79 
a1
 = 
	`øndöt
();

80 
a2
 = 
	`øndöt
();

81 
ªsu…
, 
pid
, 
°©us
;

82 
buf
[128];

84 
	`¢¥ötf
(
buf
, (buf), "open(%p, %d, %d)",

85 (
a0
), (
a1
), (
a2
));

86 
	`¥ötf
("%-47s", 
buf
);

88 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

89 i‡(
pid
<0) {

90 
	`îr
(1, "fork");

92 i‡(
pid
>0) {

93 
	`waôpid
(
pid
, &
°©us
, 0);

97 
ªsu…
 = 
	`›í
(
a0
, 
a1
, 
a2
);

98 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

99 i‡(
dof‹k
) {

100 
	`exô
(0);

102 
	}
}

106 
	$åy_ªad
(
dof‹k
)

108 
a0
 = 
	`øndöt
();

109 * 
a1
 = 
	`ønd±r
();

110 
size_t
 
a2
 = 
	`øndsize
();

111 
ªsu…
, 
pid
, 
°©us
;

112 
buf
[128];

114 
	`¢¥ötf
(
buf
, (buf), "read(%d, %p, %lu)",

115 (
a0
), (
a1
), ()(
a2
));

116 
	`¥ötf
("%-47s", 
buf
);

118 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

119 i‡(
pid
<0) {

120 
	`îr
(1, "fork");

122 i‡(
pid
>0) {

123 
	`waôpid
(
pid
, &
°©us
, 0);

127 
ªsu…
 = 
	`ªad
(
a0
, 
a1
, 
a2
);

128 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

129 i‡(
dof‹k
) {

130 
	`exô
(0);

132 
	}
}

136 
	$åy_wrôe
(
dof‹k
)

138 
a0
 = 
	`øndöt
();

139 * 
a1
 = 
	`ønd±r
();

140 
size_t
 
a2
 = 
	`øndsize
();

141 
ªsu…
, 
pid
, 
°©us
;

142 
buf
[128];

144 
	`¢¥ötf
(
buf
, (buf), "write(%d, %p, %lu)",

145 (
a0
), (
a1
), ()(
a2
));

146 
	`¥ötf
("%-47s", 
buf
);

148 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

149 i‡(
pid
<0) {

150 
	`îr
(1, "fork");

152 i‡(
pid
>0) {

153 
	`waôpid
(
pid
, &
°©us
, 0);

157 
ªsu…
 = 
	`wrôe
(
a0
, 
a1
, 
a2
);

158 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

159 i‡(
dof‹k
) {

160 
	`exô
(0);

162 
	}
}

166 
	$åy_˛o£
(
dof‹k
)

168 
a0
 = 
	`øndöt
();

169 
ªsu…
, 
pid
, 
°©us
;

170 
buf
[128];

172 
	`¢¥ötf
(
buf
, (buf), "close(%d)",

173 (
a0
));

174 
	`¥ötf
("%-47s", 
buf
);

176 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

177 i‡(
pid
<0) {

178 
	`îr
(1, "fork");

180 i‡(
pid
>0) {

181 
	`waôpid
(
pid
, &
°©us
, 0);

185 
ªsu…
 = 
	`˛o£
(
a0
);

186 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

187 i‡(
dof‹k
) {

188 
	`exô
(0);

190 
	}
}

194 
	$åy_io˘l
(
dof‹k
)

196 
a0
 = 
	`øndöt
();

197 
a1
 = 
	`øndöt
();

198 * 
a2
 = 
	`ønd±r
();

199 
ªsu…
, 
pid
, 
°©us
;

200 
buf
[128];

202 
	`¢¥ötf
(
buf
, (buf), "ioctl(%d, %d, %p)",

203 (
a0
), (
a1
), (
a2
));

204 
	`¥ötf
("%-47s", 
buf
);

206 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

207 i‡(
pid
<0) {

208 
	`îr
(1, "fork");

210 i‡(
pid
>0) {

211 
	`waôpid
(
pid
, &
°©us
, 0);

215 
ªsu…
 = 
	`io˘l
(
a0
, 
a1
, 
a2
);

216 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

217 i‡(
dof‹k
) {

218 
	`exô
(0);

220 
	}
}

224 
	$åy_l£ek
(
dof‹k
)

226 
a0
 = 
	`øndöt
();

227 
off_t
 
a1
 = 
	`øndoff
();

228 
a2
 = 
	`øndöt
();

229 
ªsu…
, 
pid
, 
°©us
;

230 
buf
[128];

232 
	`¢¥ötf
(
buf
, (buf), "lseek(%d, %ld, %d)",

233 (
a0
), ()(
a1
), (
a2
));

234 
	`¥ötf
("%-47s", 
buf
);

236 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

237 i‡(
pid
<0) {

238 
	`îr
(1, "fork");

240 i‡(
pid
>0) {

241 
	`waôpid
(
pid
, &
°©us
, 0);

245 
ªsu…
 = 
	`l£ek
(
a0
, 
a1
, 
a2
);

246 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

247 i‡(
dof‹k
) {

248 
	`exô
(0);

250 
	}
}

254 
	$åy_fsync
(
dof‹k
)

256 
a0
 = 
	`øndöt
();

257 
ªsu…
, 
pid
, 
°©us
;

258 
buf
[128];

260 
	`¢¥ötf
(
buf
, (buf), "fsync(%d)",

261 (
a0
));

262 
	`¥ötf
("%-47s", 
buf
);

264 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

265 i‡(
pid
<0) {

266 
	`îr
(1, "fork");

268 i‡(
pid
>0) {

269 
	`waôpid
(
pid
, &
°©us
, 0);

273 
ªsu…
 = 
	`fsync
(
a0
);

274 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

275 i‡(
dof‹k
) {

276 
	`exô
(0);

278 
	}
}

282 
	$åy_·runˇã
(
dof‹k
)

284 
a0
 = 
	`øndöt
();

285 
off_t
 
a1
 = 
	`øndoff
();

286 
ªsu…
, 
pid
, 
°©us
;

287 
buf
[128];

289 
	`¢¥ötf
(
buf
, (buf), "ftruncate(%d, %ld)",

290 (
a0
), ()(
a1
));

291 
	`¥ötf
("%-47s", 
buf
);

293 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

294 i‡(
pid
<0) {

295 
	`îr
(1, "fork");

297 i‡(
pid
>0) {

298 
	`waôpid
(
pid
, &
°©us
, 0);

302 
ªsu…
 = 
	`·runˇã
(
a0
, 
a1
);

303 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

304 i‡(
dof‹k
) {

305 
	`exô
(0);

307 
	}
}

311 
	$åy_f°©
(
dof‹k
)

313 
a0
 = 
	`øndöt
();

314 * 
a1
 = 
	`ønd±r
();

315 
ªsu…
, 
pid
, 
°©us
;

316 
buf
[128];

318 
	`¢¥ötf
(
buf
, (buf), "fstat(%d, %p)",

319 (
a0
), (
a1
));

320 
	`¥ötf
("%-47s", 
buf
);

322 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

323 i‡(
pid
<0) {

324 
	`îr
(1, "fork");

326 i‡(
pid
>0) {

327 
	`waôpid
(
pid
, &
°©us
, 0);

331 
ªsu…
 = 
	`f°©
(
a0
, 
a1
);

332 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

333 i‡(
dof‹k
) {

334 
	`exô
(0);

336 
	}
}

340 
	$åy_ªmove
(
dof‹k
)

342 * 
a0
 = 
	`ønd±r
();

343 
ªsu…
, 
pid
, 
°©us
;

344 
buf
[128];

346 
	`¢¥ötf
(
buf
, (buf), "remove(%p)",

347 (
a0
));

348 
	`¥ötf
("%-47s", 
buf
);

350 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

351 i‡(
pid
<0) {

352 
	`îr
(1, "fork");

354 i‡(
pid
>0) {

355 
	`waôpid
(
pid
, &
°©us
, 0);

359 
ªsu…
 = 
	`ªmove
(
a0
);

360 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

361 i‡(
dof‹k
) {

362 
	`exô
(0);

364 
	}
}

368 
	$åy_ª«me
(
dof‹k
)

370 * 
a0
 = 
	`ønd±r
();

371 * 
a1
 = 
	`ønd±r
();

372 
ªsu…
, 
pid
, 
°©us
;

373 
buf
[128];

375 
	`¢¥ötf
(
buf
, (buf), "rename(%p, %p)",

376 (
a0
), (
a1
));

377 
	`¥ötf
("%-47s", 
buf
);

379 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

380 i‡(
pid
<0) {

381 
	`îr
(1, "fork");

383 i‡(
pid
>0) {

384 
	`waôpid
(
pid
, &
°©us
, 0);

388 
ªsu…
 = 
	`ª«me
(
a0
, 
a1
);

389 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

390 i‡(
dof‹k
) {

391 
	`exô
(0);

393 
	}
}

397 
	$åy_lök
(
dof‹k
)

399 * 
a0
 = 
	`ønd±r
();

400 * 
a1
 = 
	`ønd±r
();

401 
ªsu…
, 
pid
, 
°©us
;

402 
buf
[128];

404 
	`¢¥ötf
(
buf
, (buf), "link(%p, %p)",

405 (
a0
), (
a1
));

406 
	`¥ötf
("%-47s", 
buf
);

408 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

409 i‡(
pid
<0) {

410 
	`îr
(1, "fork");

412 i‡(
pid
>0) {

413 
	`waôpid
(
pid
, &
°©us
, 0);

417 
ªsu…
 = 
	`lök
(
a0
, 
a1
);

418 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

419 i‡(
dof‹k
) {

420 
	`exô
(0);

422 
	}
}

426 
	$åy_mkdú
(
dof‹k
)

428 * 
a0
 = 
	`ønd±r
();

429 
a1
 = 
	`øndöt
();

430 
ªsu…
, 
pid
, 
°©us
;

431 
buf
[128];

433 
	`¢¥ötf
(
buf
, (buf), "mkdir(%p, %d)",

434 (
a0
), (
a1
));

435 
	`¥ötf
("%-47s", 
buf
);

437 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

438 i‡(
pid
<0) {

439 
	`îr
(1, "fork");

441 i‡(
pid
>0) {

442 
	`waôpid
(
pid
, &
°©us
, 0);

446 
ªsu…
 = 
	`mkdú
(
a0
, 
a1
);

447 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

448 i‡(
dof‹k
) {

449 
	`exô
(0);

451 
	}
}

455 
	$åy_rmdú
(
dof‹k
)

457 * 
a0
 = 
	`ønd±r
();

458 
ªsu…
, 
pid
, 
°©us
;

459 
buf
[128];

461 
	`¢¥ötf
(
buf
, (buf), "rmdir(%p)",

462 (
a0
));

463 
	`¥ötf
("%-47s", 
buf
);

465 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

466 i‡(
pid
<0) {

467 
	`îr
(1, "fork");

469 i‡(
pid
>0) {

470 
	`waôpid
(
pid
, &
°©us
, 0);

474 
ªsu…
 = 
	`rmdú
(
a0
);

475 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

476 i‡(
dof‹k
) {

477 
	`exô
(0);

479 
	}
}

483 
	$åy_chdú
(
dof‹k
)

485 * 
a0
 = 
	`ønd±r
();

486 
ªsu…
, 
pid
, 
°©us
;

487 
buf
[128];

489 
	`¢¥ötf
(
buf
, (buf), "chdir(%p)",

490 (
a0
));

491 
	`¥ötf
("%-47s", 
buf
);

493 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

494 i‡(
pid
<0) {

495 
	`îr
(1, "fork");

497 i‡(
pid
>0) {

498 
	`waôpid
(
pid
, &
°©us
, 0);

502 
ªsu…
 = 
	`chdú
(
a0
);

503 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

504 i‡(
dof‹k
) {

505 
	`exô
(0);

507 
	}
}

511 
	$åy_gëdúíåy
(
dof‹k
)

513 
a0
 = 
	`øndöt
();

514 * 
a1
 = 
	`ønd±r
();

515 
size_t
 
a2
 = 
	`øndsize
();

516 
ªsu…
, 
pid
, 
°©us
;

517 
buf
[128];

519 
	`¢¥ötf
(
buf
, (buf), "getdirentry(%d, %p, %lu)",

520 (
a0
), (
a1
), ()(
a2
));

521 
	`¥ötf
("%-47s", 
buf
);

523 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

524 i‡(
pid
<0) {

525 
	`îr
(1, "fork");

527 i‡(
pid
>0) {

528 
	`waôpid
(
pid
, &
°©us
, 0);

532 
ªsu…
 = 
	`gëdúíåy
(
a0
, 
a1
, 
a2
);

533 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

534 i‡(
dof‹k
) {

535 
	`exô
(0);

537 
	}
}

541 
	$åy_symlök
(
dof‹k
)

543 * 
a0
 = 
	`ønd±r
();

544 * 
a1
 = 
	`ønd±r
();

545 
ªsu…
, 
pid
, 
°©us
;

546 
buf
[128];

548 
	`¢¥ötf
(
buf
, (buf), "symlink(%p, %p)",

549 (
a0
), (
a1
));

550 
	`¥ötf
("%-47s", 
buf
);

552 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

553 i‡(
pid
<0) {

554 
	`îr
(1, "fork");

556 i‡(
pid
>0) {

557 
	`waôpid
(
pid
, &
°©us
, 0);

561 
ªsu…
 = 
	`symlök
(
a0
, 
a1
);

562 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

563 i‡(
dof‹k
) {

564 
	`exô
(0);

566 
	}
}

570 
	$åy_ªadlök
(
dof‹k
)

572 * 
a0
 = 
	`ønd±r
();

573 * 
a1
 = 
	`ønd±r
();

574 
size_t
 
a2
 = 
	`øndsize
();

575 
ªsu…
, 
pid
, 
°©us
;

576 
buf
[128];

578 
	`¢¥ötf
(
buf
, (buf), "readlink(%p, %p, %lu)",

579 (
a0
), (
a1
), ()(
a2
));

580 
	`¥ötf
("%-47s", 
buf
);

582 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

583 i‡(
pid
<0) {

584 
	`îr
(1, "fork");

586 i‡(
pid
>0) {

587 
	`waôpid
(
pid
, &
°©us
, 0);

591 
ªsu…
 = 
	`ªadlök
(
a0
, 
a1
, 
a2
);

592 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

593 i‡(
dof‹k
) {

594 
	`exô
(0);

596 
	}
}

600 
	$åy_dup2
(
dof‹k
)

602 
a0
 = 
	`øndöt
();

603 
a1
 = 
	`øndöt
();

604 
ªsu…
, 
pid
, 
°©us
;

605 
buf
[128];

607 
	`¢¥ötf
(
buf
, (buf), "dup2(%d, %d)",

608 (
a0
), (
a1
));

609 
	`¥ötf
("%-47s", 
buf
);

611 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

612 i‡(
pid
<0) {

613 
	`îr
(1, "fork");

615 i‡(
pid
>0) {

616 
	`waôpid
(
pid
, &
°©us
, 0);

620 
ªsu…
 = 
	`dup2
(
a0
, 
a1
);

621 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

622 i‡(
dof‹k
) {

623 
	`exô
(0);

625 
	}
}

629 
	$åy_pùe
(
dof‹k
)

631 * 
a0
 = 
	`ønd±r
();

632 
ªsu…
, 
pid
, 
°©us
;

633 
buf
[128];

635 
	`¢¥ötf
(
buf
, (buf), "pipe(%p)",

636 (
a0
));

637 
	`¥ötf
("%-47s", 
buf
);

639 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

640 i‡(
pid
<0) {

641 
	`îr
(1, "fork");

643 i‡(
pid
>0) {

644 
	`waôpid
(
pid
, &
°©us
, 0);

648 
ªsu…
 = 
	`pùe
(
a0
);

649 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

650 i‡(
dof‹k
) {

651 
	`exô
(0);

653 
	}
}

657 
	$åy___time
(
dof‹k
)

659 * 
a0
 = 
	`ønd±r
();

660 * 
a1
 = 
	`ønd±r
();

661 
ªsu…
, 
pid
, 
°©us
;

662 
buf
[128];

664 
	`¢¥ötf
(
buf
, (buf), "__time(%p, %p)",

665 (
a0
), (
a1
));

666 
	`¥ötf
("%-47s", 
buf
);

668 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

669 i‡(
pid
<0) {

670 
	`îr
(1, "fork");

672 i‡(
pid
>0) {

673 
	`waôpid
(
pid
, &
°©us
, 0);

677 
ªsu…
 = 
	`__time
(
a0
, 
a1
);

678 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

679 i‡(
dof‹k
) {

680 
	`exô
(0);

682 
	}
}

686 
	$åy___gëcwd
(
dof‹k
)

688 * 
a0
 = 
	`ønd±r
();

689 
size_t
 
a1
 = 
	`øndsize
();

690 
ªsu…
, 
pid
, 
°©us
;

691 
buf
[128];

693 
	`¢¥ötf
(
buf
, (buf), "__getcwd(%p, %lu)",

694 (
a0
), ()(
a1
));

695 
	`¥ötf
("%-47s", 
buf
);

697 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

698 i‡(
pid
<0) {

699 
	`îr
(1, "fork");

701 i‡(
pid
>0) {

702 
	`waôpid
(
pid
, &
°©us
, 0);

706 
ªsu…
 = 
	`__gëcwd
(
a0
, 
a1
);

707 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

708 i‡(
dof‹k
) {

709 
	`exô
(0);

711 
	}
}

715 
	$åy_°©
(
dof‹k
)

717 * 
a0
 = 
	`ønd±r
();

718 * 
a1
 = 
	`ønd±r
();

719 
ªsu…
, 
pid
, 
°©us
;

720 
buf
[128];

722 
	`¢¥ötf
(
buf
, (buf), "stat(%p, %p)",

723 (
a0
), (
a1
));

724 
	`¥ötf
("%-47s", 
buf
);

726 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

727 i‡(
pid
<0) {

728 
	`îr
(1, "fork");

730 i‡(
pid
>0) {

731 
	`waôpid
(
pid
, &
°©us
, 0);

735 
ªsu…
 = 
	`°©
(
a0
, 
a1
);

736 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

737 i‡(
dof‹k
) {

738 
	`exô
(0);

740 
	}
}

744 
	$åy_l°©
(
dof‹k
)

746 * 
a0
 = 
	`ønd±r
();

747 * 
a1
 = 
	`ønd±r
();

748 
ªsu…
, 
pid
, 
°©us
;

749 
buf
[128];

751 
	`¢¥ötf
(
buf
, (buf), "lstat(%p, %p)",

752 (
a0
), (
a1
));

753 
	`¥ötf
("%-47s", 
buf
);

755 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

756 i‡(
pid
<0) {

757 
	`îr
(1, "fork");

759 i‡(
pid
>0) {

760 
	`waôpid
(
pid
, &
°©us
, 0);

764 
ªsu…
 = 
	`l°©
(
a0
, 
a1
);

765 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

766 i‡(
dof‹k
) {

767 
	`exô
(0);

769 
	}
}

771 
åyfunc
 
	gfuncs2
[] = {

772 
åy_execv
,

773 
åy_waôpid
,

774 
åy_›í
,

775 
åy_ªad
,

776 
åy_wrôe
,

777 
åy_˛o£
,

778 
åy_l£ek
,

779 
åy_chdú
,

780 
åy_dup2
,

781 
åy___gëcwd
,

782 
NULL


785 
åyfunc
 
	gfuncs3
[] = {

786 
åy_execv
,

787 
åy_waôpid
,

788 
åy_›í
,

789 
åy_ªad
,

790 
åy_wrôe
,

791 
åy_˛o£
,

792 
åy_l£ek
,

793 
åy_chdú
,

794 
åy_dup2
,

795 
åy___gëcwd
,

796 
NULL


799 
åyfunc
 
	gfuncs4
[] = {

800 
åy_execv
,

801 
åy_waôpid
,

802 
åy_›í
,

803 
åy_ªad
,

804 
åy_wrôe
,

805 
åy_˛o£
,

806 
åy_l£ek
,

807 
åy_fsync
,

808 
åy_·runˇã
,

809 
åy_f°©
,

810 
åy_ªmove
,

811 
åy_ª«me
,

812 
åy_mkdú
,

813 
åy_rmdú
,

814 
åy_chdú
,

815 
åy_gëdúíåy
,

816 
åy_dup2
,

817 
åy___gëcwd
,

818 
NULL


821 
åyfunc
 
	gfuncs5
[] = {

822 
åy_execv
,

823 
åy_waôpid
,

824 
åy_›í
,

825 
åy_ªad
,

826 
åy_wrôe
,

827 
åy_˛o£
,

828 
åy_io˘l
,

829 
åy_l£ek
,

830 
åy_fsync
,

831 
åy_·runˇã
,

832 
åy_f°©
,

833 
åy_ªmove
,

834 
åy_ª«me
,

835 
åy_lök
,

836 
åy_mkdú
,

837 
åy_rmdú
,

838 
åy_chdú
,

839 
åy_gëdúíåy
,

840 
åy_symlök
,

841 
åy_ªadlök
,

842 
åy_dup2
,

843 
åy_pùe
,

844 
åy___time
,

845 
åy___gëcwd
,

846 
åy_°©
,

847 
åy_l°©
,

848 
NULL


851 
åyfunc
 *
	gèbÀs
[4] = {

852 
funcs2
,

853 
funcs3
,

854 
funcs4
,

855 
funcs5
,

859 
	$åyˇŒs
(
as°
, 
dof‹k
, 
cou¡
)

861 
åyfunc
 *
li°
;

862 
i
, 
j
;

864 
	`as£π
(
as°
>=2 &&ásst<=5);

865 
li°
 = 
èbÀs
[
as°
-2];

867 
i
=0; i<
cou¡
; i++) {

868 
j
=0; 
li°
[j]; j++) {

869 (*
li°
[
j
])(
dof‹k
);

872 
	}
}

	@os161/user/testbin/randcall/extern.h

30 
	~<sys/ty≥s.h
>

32 *
ønd±r
();

33 
øndöt
();

34 
off_t
 
øndoff
();

35 
size_t
 
øndsize
();

37 
åyˇŒs
(
as°
, 
dof‹k
, 
cou¡
);

	@os161/user/testbin/randcall/main.c

30 
	~<°dlib.h
>

31 
	~<°dio.h
>

32 
	~<°rög.h
>

34 
	~"exã∫.h
"

38 
	$øndch¨
(*
c
)

40 #i‡
RAND_MAX
 != 0x7fffffff

44 
lbôs
 = 0;

45 
 um
 = 0;

47 
bô
;

48 
˘
 = 0;

50 *
c
 = 0;

52 
˘
 < 
CHAR_BIT
) {

53 i‡(
 um
==0) {

54 
lbôs
 = 
	`øndom
();

55 
 um
 = 31;

58 
bô
 = 
lbôs
 & 1;

59 i‡(
bô
) {

60 (*
c
) |= 1;

62 (*
c
) <<= 1;

63 
˘
++;

64 
lbôs
 >>= 1;

65 
 um
--;

67 
	}
}

71 
	$fûÃ™d
(*
p
, 
size_t
 
Àn
)

73 
size_t
 
i
;

74 *
˝
 = 
p
;

75 
i
=0; i<
Àn
; i++) {

76 
	`øndch¨
(&
˝
[
i
]);

78 
	}
}

81 
	$ønd±r
()

83 *
x
;

84 
	`fûÃ™d
(&
x
, (x));

85  
x
;

86 
	}
}

89 
	$øndöt
()

91 
x
;

92 
	`fûÃ™d
(&
x
, (x));

93  
x
;

94 
	}
}

96 
off_t


97 
	$øndoff
()

99 
off_t
 
x
;

100 
	`fûÃ™d
(&
x
, (x));

101  
x
;

102 
	}
}

104 
size_t


105 
	$øndsize
()

107 
size_t
 
x
;

108 
	`fûÃ™d
(&
x
, (x));

109  
x
;

110 
	}
}

114 
	$ußge
()

116 
	`¥ötf
("Usage:Ñandcall [-f] [-c count] [-r seed] 2|3|4|all\n");

117 
	`¥ötf
(" -f suppress forking\n");

118 
	`¥ötf
(" -c set iteration count (default 100)\n");

119 
	`¥ötf
(" -r setÖseudorandom seed (default 0)\n");

120 
	`exô
(1);

121 
	}
}

124 
	$maö
(
¨gc
, *
¨gv
[])

126 
cou¡
=100, 
£ed
 = 0, 
dof‹k
 = 1;

127 
™
, 
i
;

129 
i
=1; i<
¨gc
; i++) {

130 i‡(!
	`°rcmp
(
¨gv
[
i
], "-f")) {

131 
dof‹k
 = 0;

133 i‡(!
	`°rcmp
(
¨gv
[
i
], "-c"Ë&& i<
¨gc
-1) {

134 
cou¡
 = 
	`©oi
(
¨gv
[++
i
]);

136 i‡(!
	`°rcmp
(
¨gv
[
i
], "-r"Ë&& i<
¨gc
-1) {

137 
£ed
 = 
	`©oi
(
¨gv
[++
i
]);

139 i‡(
¨gv
[
i
][0] == '-') {

140 
	`ußge
();

146 i‡(
i
 !
¨gc
-1) {

147 
	`ußge
();

150 i‡(!
	`°rcmp
(
¨gv
[
i
], "all")) {

151 
™
 = 5;

154 
™
 = 
	`©oi
(
¨gv
[
i
]);

155 i‡(
™
 <2 ||án > 4) {

156 
	`ußge
();

160 
	`¥ötf
("Sìd: %d Cou¡: %d\n", 
£ed
, 
cou¡
);

162 
	`§™dom
(
£ed
);

163 
	`åyˇŒs
(
™
, 
dof‹k
, 
cou¡
);

166 
	}
}

	@os161/user/testbin/rmdirtest/rmdirtest.c

39 
	~<sys/ty≥s.h
>

40 
	~<sys/°©.h
>

41 
	~<°dio.h
>

42 
	~<°rög.h
>

43 
	~<uni°d.h
>

44 
	~<f˙é.h
>

45 
	~<î∫o.h
>

46 
	~<limôs.h
>

47 
	~<îr.h
>

50 c⁄° 
	gã°dú
[] = "testdir";

51 
	g°¨çoöt
[
PATH_MAX
 - (
ã°dú
)];

60 
	$°¨tup
()

62 i‡(
	`gëcwd
(
°¨çoöt
, (°¨çoöt))==
NULL
) {

63 
	`îr
(1, "getcwd (not inÅest dir)");

66 i‡(
	`mkdú
(
ã°dú
, 0775) < 0) {

67 
	`îr
(1, "%s: mkdú", 
ã°dú
);

70 i‡(
	`chdú
(
ã°dú
) < 0) {

71 
	`îr
(1, "%s: chdú", 
ã°dú
);

73 
	}
}

85 
	$kûldú
()

87 
tmp
[
PATH_MAX
];

89 
	`¢¥ötf
(
tmp
, —mp), "%s/%s", 
°¨çoöt
, 
ã°dú
);

90 i‡(
	`rmdú
(
tmp
)<0) {

91 
	`îr
(1, "%s:Ñmdú", 
tmp
);

93 
	}
}

102 
	$föish
()

104 i‡(
	`chdú
(
°¨çoöt
)<0) {

105 
	`îr
(1, "%s: chdú", 
°¨çoöt
);

107 
	}
}

117 
	$ã°1
()

119 
	`¥ötf
("Makög %s\n", 
ã°dú
);

120 
	`°¨tup
();

122 
	`¥ötf
("Removög %†whûêö it\n", 
ã°dú
);

123 
	`kûldú
();

125 
	`¥ötf
("LeavingÅheÅest directory\n");

126 
	`föish
();

127 
	}
}

135 
	$ã°2
()

137 
fd
;

139 
	`¥ötf
("NowÅrying withÅhe directory open...\n");

140 
	`°¨tup
();

141 
fd
 = 
	`›í
(".", 
O_RDONLY
);

142 i‡(
fd
<0) {

143 
	`îr
(1, ".: open");

145 
	`kûldú
();

146 
	`föish
();

149 i‡(
	`˛o£
(
fd
)<0) {

150 
	`îr
(1, "ªmoved %s: clo£", 
ã°dú
);

152 
	}
}

160 
	$ã°3
()

162 
buf
[
PATH_MAX
];

163 
fd
;

165 
	`¥ötf
("Checking if .ÉxistsáfterÑmdir\n");

166 
	`°¨tup
();

167 
	`kûldú
();

169 
fd
 = 
	`›í
(".", 
O_RDONLY
);

170 i‡(
fd
<0) {

171 
î∫o
) {

172 
EINVAL
:

173 
EIO
:

174 
ENOENT
:

177 
	`îr
(1, ".");

182 
	`˛o£
(
fd
);

185 
fd
 = 
	`›í
("..", 
O_RDONLY
);

186 i‡(
fd
<0) {

187 
î∫o
) {

188 
EINVAL
:

189 
EIO
:

190 
ENOENT
:

193 
	`îr
(1, "..");

198 
	`w¨nx
("..: openableáfterÑmdir - might be bad");

199 
	`˛o£
(
fd
);

202 
	`¢¥ötf
(
buf
, (buf), "../%s", 
ã°dú
);

203 
fd
 = 
	`›í
(
buf
, 
O_RDONLY
);

204 i‡(
fd
<0) {

205 
î∫o
) {

206 
EINVAL
:

207 
EIO
:

208 
ENOENT
:

211 
	`îr
(1, "%s", 
buf
);

216 
	`îrx
(1, "%s: w‹k†a·îÑmdú", 
buf
);

219 
	`föish
();

220 
	}
}

228 
	$ã°4
()

230 
buf
[4096];

231 
fd
;

233 
	`¥ötf
("Checking if creating files worksáfterÑmdir...\n");

234 
	`°¨tup
();

235 
	`kûldú
();

237 
fd
 = 
	`›í
("√wfûe", 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

238 i‡(
fd
<0) {

239 
î∫o
) {

240 
EINVAL
:

241 
EIO
:

242 
ENOENT
:

245 
	`îr
(1, "%s", 
buf
);

250 
	`w¨nx
("newfile: creating filesáfterÑmdir works");

251 
	`w¨nx
("(this is only ok ifÅhe space getsÑeclaimed)");

256 
	`mem£t
(
buf
, 'J', (buf));

257 
	`wrôe
(
fd
, 
buf
, (buf));

258 
	`wrôe
(
fd
, 
buf
, (buf));

259 
	`wrôe
(
fd
, 
buf
, (buf));

260 
	`wrôe
(
fd
, 
buf
, (buf));

261 
	`˛o£
(
fd
);

264 
	`föish
();

265 
	}
}

273 
	$ã°5
()

275 
	`¥ötf
("Checking if creating subdirs worksáfterÑmdir...\n");

276 
	`°¨tup
();

277 
	`kûldú
();

279 i‡(
	`mkdú
("newdir", 0775)<0) {

280 
î∫o
) {

281 
EINVAL
:

282 
EIO
:

283 
ENOENT
:

286 
	`îr
(1, "mkdir inÑemoved dir");

291 
	`w¨nx
("newfile: creating directoriesáfterÑmdir works");

292 
	`w¨nx
("(this is only ok ifÅhe space getsÑeclaimed)");

297 
	`mkdú
("newdir/t0", 0775);

298 
	`mkdú
("newdir/t1", 0775);

299 
	`mkdú
("newdir/t2", 0775);

300 
	`mkdú
("newdir/t3", 0775);

301 
	`mkdú
("newdir/t4", 0775);

302 
	`mkdú
("newdir/t5", 0775);

305 
	`föish
();

306 
	}
}

313 
	$ã°6
()

315 
buf
[
PATH_MAX
];

316 
fd
, 
Àn
;

318 
	`¥ötf
("NowÅryingÅoÜistÅhe directory...\n");

319 
	`°¨tup
();

320 
fd
 = 
	`›í
(".", 
O_RDONLY
);

321 i‡(
fd
<0) {

322 
	`îr
(1, ".: open");

324 
	`kûldú
();

326 (
Àn
 = 
	`gëdúíåy
(
fd
, 
buf
, (buf)-1))>0) {

327 i‡(()
Àn
 >(
buf
)-1) {

328 
	`îrx
(1, ".: getdirentry:Ñeturned invalidÜength");

330 
buf
[
Àn
] = 0;

331 i‡(!
	`°rcmp
(
buf
, ".") || !strcmp(buf, "..")) {

335 
	`îrx
(1, ".: gëdúíåy:Ñëu∫ed u√x≥˘edÇamê%s", 
buf
);

337 i‡(
Àn
==0) {

341 
î∫o
) {

342 
EINVAL
:

343 
EIO
:

346 
	`îr
(1, ".: getdirentry");

351 
	`föish
();

354 i‡(
	`˛o£
(
fd
)<0) {

355 
	`îr
(1, "ªmoved %s: clo£", 
ã°dú
);

357 
	}
}

364 
	$ã°7
()

366 
buf
[
PATH_MAX
];

368 
	`°¨tup
();

369 
	`kûldú
();

370 i‡(
	`gëcwd
(
buf
, (buf))==
NULL
) {

371 
î∫o
) {

372 
EINVAL
:

373 
EIO
:

374 
ENOENT
:

377 
	`îr
(1, "gëcwdá·îÑemovög %s", 
ã°dú
);

382 
	`îrx
(1, "getcwdáfterÑemoving %s: succeeded (got %s)",

383 
ã°dú
, 
buf
);

386 
	`föish
();

387 
	}
}

392 
	$maö
()

394 
	`ã°1
();

395 
	`ã°2
();

396 
	`ã°3
();

397 
	`ã°4
();

398 
	`ã°5
();

399 
	`ã°6
();

400 
	`ã°7
();

402 
	`¥ötf
("Whew... survived.\n");

404 
	}
}

	@os161/user/testbin/rmtest/rmtest.c

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

41 
	~<°rög.h
>

42 
	~<uni°d.h
>

43 
	~<î∫o.h
>

44 
	~<îr.h
>

46 
	#TEST
 "rmd©a"

	)

47 
	#TESTDATA
 "I wish I wa†®hódlight. -- Jîry G¨cü"

	)

48 
	#TESTLEN
 ((
TESTDATA
)-1)

	)

52 
	$d‹m
(
fd
)

63 
pid_t
 
pid
;

64 
°©us
;

66 
pid
 = 
	`f‹k
();

67 i‡(
pid
<0) {

68 
	`îr
(1, "fork");

70 i‡(
pid
==0) {

72 
	`˛o£
(
fd
);

73 i‡(
	`ªmove
(
TEST
)) {

74 
	`îr
(1, "%s:Ñemove", 
TEST
);

76 
	`_exô
(0);

79 i‡(
	`waôpid
(
pid
, &
°©us
, 0)<0) {

80 
	`îr
(1, "waitpid");

82 i‡(
	`WIFSIGNALED
(
°©us
)) {

83 
	`w¨n
("chûdÖro˚s†exôed wôh sig«»%d", 
	`WTERMSIG
(
°©us
));

85 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

86 
	`w¨nx
("chûdÖro˚s†exôed wôh codê%d",
	`WEXITSTATUS
(
°©us
));

88 
	}
}

92 
	$ßme
(c⁄° *
a
, c⁄° *
b
, 
Àn
)

94 
Àn
-- > 0) {

95 i‡(*
a
++ !*
b
++)  0;

98 
	}
}

101 
	$maö
()

103 
fûe
, 
Àn
;

104 
buf
[
TESTLEN
];

107 
fûe
 = 
	`›í
(
TEST
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
, 0664);

108 
	`wrôe
(
fûe
, 
TESTDATA
, 
TESTLEN
);

109 
	`˛o£
(
fûe
);

112 
fûe
 = 
	`›í
(
TEST
, 
O_RDONLY
);

113 
Àn
 = 
	`ªad
(
fûe
, 
buf
, 
TESTLEN
);

114 i‡(
Àn
 < 0) {

115 
	`w¨n
("read: before deletion");

117 i‡(
Àn
 < ()
TESTLEN
) {

118 
	`w¨nx
("ªad: bef‹êdñëi⁄: sh‹àcou¡ %d", 
Àn
);

120 i‡(!
	`ßme
(
buf
, 
TESTDATA
, 
TESTLEN
)) {

121 
	`îrx
(1, "Failed: dataÑead back wasÇotÅhe same");

125 i‡(
	`l£ek
(
fûe
, 0, 
SEEK_SET
)) {

126 
	`îr
(1, "lseek");

130 
	`d‹m
(
fûe
);

133 
	`mem£t
(
buf
, '\0', 
TESTLEN
);

134 
Àn
 = 
	`ªad
(
fûe
, 
buf
, 
TESTLEN
);

135 i‡(
Àn
 < 0) {

136 
	`w¨n
("read:áfter deletion");

138 i‡(
Àn
 < ()
TESTLEN
) {

139 
	`w¨nx
("ªad:á·î dñëi⁄: sh‹àcou¡ %d", 
Àn
);

142 i‡(!
	`ßme
(
buf
, 
TESTDATA
, 
TESTLEN
)) {

143 
	`îrx
(1, "Failed: dataÑeadáfter deletion wasÇotÅhe same");

147 
	`˛o£
(
fûe
);

150 
fûe
 = 
	`›í
(
TEST
, 
O_RDONLY
);

151 i‡(
fûe
 >= 0) {

152 
	`˛o£
(
fûe
);

153 
	`îrx
(1, "Failed:Åhe file could still be opened");

156 i‡(
î∫o
!=
ENOENT
) {

157 
	`îr
(1, "UnexpectedÉrrorÑeopeningÅhe file");

160 
	`¥ötf
("Succeeded!\n");

163 
	}
}

	@os161/user/testbin/sink/sink.c

38 
	~<uni°d.h
>

39 
	~<îr.h
>

42 
	$maö
()

44 
ch
=0;

45 
r
;

47 
ch
!='q') {

48 
r
 = 
	`ªad
(
STDIN_FILENO
, &
ch
, 1);

49 i‡(
r
<0) {

50 
	`îr
(1, "stdin");

52 i‡(
r
==0) {

59 
	}
}

	@os161/user/testbin/sort/sort.c

39 
	~<°dlib.h
>

40 
	~<°rög.h
>

41 
	~<îr.h
>

44 
	#SIZE
 (144*1024)

	)

59 
	$s‹t
(*
¨r
, 
size
)

61 
tmp
[
SIZE
];

62 
pivŸ
, 
i
, 
j
, 
k
;

64 i‡(
size
<2) {

68 
pivŸ
 = 
size
/2;

69 
	`s‹t
(
¨r
, 
pivŸ
);

70 
	`s‹t
(&
¨r
[
pivŸ
], 
size
-pivot);

72 
i
 = 0;

73 
j
 = 
pivŸ
;

74 
k
 = 0;

75 
i
<
pivŸ
 && 
j
<
size
) {

76 i‡(
¨r
[
i
] <áº[
j
]) {

77 
tmp
[
k
++] = 
¨r
[
i
++];

80 
tmp
[
k
++] = 
¨r
[
j
++];

83 
i
<
pivŸ
) {

84 
tmp
[
k
++] = 
¨r
[
i
++];

86 
j
<
size
) {

87 
tmp
[
k
++] = 
¨r
[
j
++];

90 
	`mem˝y
(
¨r
, 
tmp
, 
size
*());

91 
	}
}

95 
	gA
[
SIZE
];

99 
	$öô¨øy
()

101 
i
;

106 
	`§™dom
(533);

108 
i
 = 0; i < 
SIZE
; i++) {

109 
A
[
i
] = 
	`øndom
();

111 
	}
}

115 
	$check
()

117 
i
;

119 
i
=0; i<
SIZE
-1; i++) {

120 i‡(
A
[
i
] > A[i+1]) {

121 
	`îrx
(1, "Failed: A[%d] is %d, A[%d] is %d",

122 
i
, 
A
[i], i+1, A[i+1]);

125 
	`w¨nx
("Passed.");

126 
	}
}

129 
	$maö
()

131 
	`öô¨øy
();

132 
	`s‹t
(
A
, 
SIZE
);

133 
	`check
();

135 
	}
}

	@os161/user/testbin/sty/sty.c

39 
	~<uni°d.h
>

40 
	~<îr.h
>

42 *
	gh¨gv
[2] = { (*)"hog", 
NULL
 };

44 
	#MAXPROCS
 6

	)

45 
	gpids
[
MAXPROCS
], 
	g≈ids
;

49 
	$hog
()

51 
pid
 = 
	`f‹k
();

52 
pid
) {

54 
	`îr
(1, "fork");

57 
	`execv
("/ã°bö/hog", 
h¨gv
);

58 
	`îr
(1, "/testbin/hog");

61 
pids
[
≈ids
++] = 
pid
;

64 
	}
}

68 
	$waôÆl
()

70 
i
, 
°©us
;

71 
i
=0; i<
≈ids
; i++) {

72 i‡(
	`waôpid
(
pids
[
i
], &
°©us
, 0)<0) {

73 
	`w¨n
("waôpid f‹ %d", 
pids
[
i
]);

75 i‡(
	`WIFSIGNALED
(
°©us
)) {

76 
	`w¨nx
("pid %d: sig«»%d", 
pids
[
i
], 
	`WTERMSIG
(
°©us
));

78 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

79 
	`w¨nx
("pid %d:Éxô %d", 
pids
[
i
], 
	`WEXITSTATUS
(
°©us
));

82 
	}
}

85 
	$maö
()

87 
	`hog
();

88 
	`hog
();

89 
	`hog
();

90 
	`hog
();

91 
	`hog
();

92 
	`hog
();

94 
	`waôÆl
();

96 
	}
}

	@os161/user/testbin/tail/tail.c

39 
	~<uni°d.h
>

40 
	~<°dlib.h
>

41 
	~<îr.h
>

43 
	#BUFSIZE
 1000

	)

48 
	gbuf„r
[
BUFSIZE
];

52 
	$èû
(
fûe
, 
off_t
 
whîe
, c⁄° *
fûíame
)

54 
Àn
;

56 i‡(
	`l£ek
(
fûe
, 
whîe
, 
SEEK_SET
)<0) {

57 
	`îr
(1, "%s", 
fûíame
);

60 (
Àn
 = 
	`ªad
(
fûe
, 
buf„r
, (buffer))) > 0) {

61 
	`wrôe
(
STDOUT_FILENO
, 
buf„r
, 
Àn
);

63 
	}
}

66 
	$maö
(
¨gc
, **
¨gv
)

68 
fûe
;

70 i‡(
¨gc
 < 3) {

71 
	`îrx
(1, "Usage:Åail <file> <location>");

73 
fûe
 = 
	`›í
(
¨gv
[1], 
O_RDONLY
);

74 i‡(
fûe
 < 0) {

75 
	`îr
(1, "%s", 
¨gv
[1]);

77 
	`èû
(
fûe
, 
	`©oi
(
¨gv
[2]),árgv[1]);

78 
	`˛o£
(
fûe
);

80 
	}
}

	@os161/user/testbin/tictac/tictac.c

41 
	~<°dio.h
>

42 
	~<uni°d.h
>

44 
	#NEWLINE
 012

	)

45 
	#EMPTY
 0

	)

46 
	#X_PLAYER
 1

	)

47 
	#O_PLAYER
 2

	)

48 
	#X_MARKER
 1

	)

49 
	#O_MARKER
 2

	)

50 
	#DIM
 3

	)

51 
	#DIMCHAR
 "2"

	)

52 
	#MAXSTRING
 100

	)

54 íum { 
	mFALSE
, 
	mTRUE
 } 
	tboﬁ
;

57 
boﬁ
 
ask_ye¢o
(c⁄° *
msg
);

58 
boﬁ
 
do_move
(
∂ayî
);

59 
öôülize_bﬂrd
();

60 
boﬁ
 
is_wö
(
x
, 
y
);

61 
ªad_°rög
(*
buf
, 
Àngth
);

62 
¥öt_bﬂrd
();

63 
¥öt_ö°ru˘i⁄s
();

64 
boﬁ
 
wö_cﬁumn
(
y
, 
m¨kî
);

65 
boﬁ
 
wö_düg_À·
(
x
, 
y
, 
m¨kî
);

66 
boﬁ
 
wö_düg_right
(
x
, 
y
, 
m¨kî
);

67 
boﬁ
 
wö_row
(
x
, 
m¨kî
);

68 
boﬁ
 
Såcmp
(c⁄° *
a
, c⁄° *
b
);

74 
	gbﬂrd
[
DIM
][DIM];

79 
	$maö
()

81 
boﬁ
 
wö
 = 
FALSE
;

82 
move
, 
max_moves
;

83 
∂ayî
;

85 
	`¥öt_ö°ru˘i⁄s
();

86 
max_moves
 = 
DIM
 * DIM;

88 
TRUE
) {

89 
	`öôülize_bﬂrd
();

90 
move
 = 1; movê<
max_moves
; move++) {

91 
∂ayî
 = 
move
 % 2 == 0 ? 2 : 1;

92 
wö
 = 
	`do_move
(
∂ayî
);

93 
	`¥öt_bﬂrd
();

94 i‡(
wö
) {

95 
	`¥ötf
("Pœyî %d, you WON!\n\n", 
∂ayî
);

103 i‡(!
wö
)

104 
	`¥ötf
("Tie Game!\n\n");

105 i‡(!
	`ask_ye¢o
("Do you wishÅoÖlayágain?"))

109 
	}
}

122 
	$¥öt_ö°ru˘i⁄s
()

124 
	`¥ötf
("WelcomeÅoÅic-tac-toe!\n");

125 
	`¥ötf
("Player 1álwaysÖlays XándÖlayer 2álwaysÖlay O\n");

126 
	`¥ötf
("GoodÜuck!\n\n\n");

127 
	}
}

140 
	$¥öt_bﬂrd
()

142 
i
, 
j
;

145 
	`¥ötf
("\n 0 1 2\n");

147 
i
 = 0; i < 
DIM
; i++) {

149 
	`¥ötf
(" %d ", 
i
);

150 
j
 = 0; j < 
DIM
; j++) {

151 
bﬂrd
[
i
][
j
]) {

152 
EMPTY
: 
	`¥ötf
(" "); ;

153 
X_MARKER
: 
	`¥ötf
(" X "); ;

154 
O_MARKER
: 
	`¥ötf
(" O "); ;

155 : 
	`¥ötf
("???"); ;

158 
	`¥ötf
("\n");

160 
	`¥ötf
("\n");

161 
	}
}

178 
boﬁ


179 
	$ask_ye¢o
(c⁄° *
msg
)

181 
™swî
[
MAXSTRING
];

183 
TRUE
) {

184 
	`¥ötf
("%†[yes/no] ", 
msg
);

185 i‡(
	`ªad_°rög
(
™swî
, 
MAXSTRING
) < 0)

186 (
FALSE
);

187 i‡(
	`Såcmp
(
™swî
, "yes"))

188 (
TRUE
);

189 i‡(
	`Såcmp
(
™swî
, "no"))

190 (
FALSE
);

192 
	`¥ötf
("PleaseánswerÉither yes orÇo\n");

194 
	}
}

212 
boﬁ


213 
	$do_move
(
∂ayî
)

215 
x
, 
y
;

216 
boﬁ
 
fú°
;

217 
™swî
[
MAXSTRING
];

218 
cx
;

220 
fú°
 = 
TRUE
;

221 
	`¥ötf
("Pœyî %d (%c), you∏move\n", 
∂ayî
,

222 
∂ayî
 =
X_PLAYER
 ? 'X' : 'O');

224 
TRUE
) {

225 
	`¥ötf
("WhichÑow [0-%d]: ", 
DIM
-1);

226 i‡(
	`ªad_°rög
(
™swî
, 
MAXSTRING
) < 0)

227 (
FALSE
);

228 
cx
 = 
™swî
[0];

229 
x
 = 
cx
 - '0';

230 i‡(
x
 < 0 || x >
DIM
) {

231 
	`¥ötf
("InvÆidÑow; mu° bê>0ánd < %d\n", 
DIM
-1);

234 
	`¥ötf
("Which cﬁum¿[0-%d]: ", 
DIM
-1);

235 i‡(
	`ªad_°rög
(
™swî
, 
MAXSTRING
) < 0)

236 (
FALSE
);

237 
cx
 = 
™swî
[0];

238 
y
 = 
cx
 - '0';

239 i‡(
y
 < 0 || y >
DIM
) {

240 
	`¥ötf
("Invalid column; must be >= 0ánd < %d\n",

241 
DIM
-1);

245 i‡(
bﬂrd
[
x
][
y
] !
EMPTY
) {

246 
	`¥ötf
("ThatÜocation is occupied;ÖleaseÅryágain\n");

247 
	`¥öt_bﬂrd
();

251 
bﬂrd
[
x
][
y
] = 
∂ayî
 =
X_PLAYER
 ? 
X_MARKER
 : 
O_MARKER
;

253 (
	`is_wö
(
x
, 
y
));

255 
	}
}

279 
boﬁ


280 
	$is_wö
(
x
, 
y
)

282 
m¨kî
;

284 
m¨kî
 = 
bﬂrd
[
x
][
y
];

292 (
	`wö_row
(
x
, 
m¨kî
Ë|| 
	`wö_cﬁumn
(
y
, marker) ||

293 
	`wö_düg_À·
(
x
, 
y
, 
m¨kî
Ë|| 
	`wö_düg_right
(x, y, marker));

294 
	}
}

299 
boﬁ


300 
	$wö_cﬁumn
(
y
, 
m¨kî
)

302 
i
;

303 
i
 = 0; i < 
DIM
; i++)

304 i‡(
bﬂrd
[
i
][
y
] !
m¨kî
)

305 (
FALSE
);

306 (
TRUE
);

307 
	}
}

309 
boﬁ


310 
	$wö_row
(
x
, 
m¨kî
)

312 
i
;

313 
i
 = 0; i < 
DIM
; i++)

314 i‡(
bﬂrd
[
x
][
i
] !
m¨kî
)

315 (
FALSE
);

316 (
TRUE
);

317 
	}
}

319 
boﬁ


320 
	$wö_düg_À·
(
x
, 
y
, 
m¨kî
)

322 
i
;

325 i‡(
x
 !
y
)

326 (
FALSE
);

328 
i
 = 0; i < 
DIM
; i++)

329 i‡(
bﬂrd
[
i
][i] !
m¨kî
)

330 (
FALSE
);

331 (
TRUE
);

332 
	}
}

334 
boﬁ


335 
	$wö_düg_right
(
x
, 
y
, 
m¨kî
)

337 
i
;

340 i‡(
x
 + 
y
 !
DIM
 - 1)

341 (
FALSE
);

342 
i
 = 0; i < 
DIM
; i++)

343 i‡(
bﬂrd
[
i
][
DIM
 - 1 - i] !
m¨kî
)

344 (
FALSE
);

345 (
TRUE
);

346 
	}
}

349 
	$öôülize_bﬂrd
()

351 
i
, 
j
;

353 
i
 = 0; i < 
DIM
; i++)

354 
j
 = 0; j < 
DIM
; j++)

355 
bﬂrd
[
i
][
j
] = 
EMPTY
;

356 
	}
}

359 
	$ªad_°rög
(*
buf
, 
Àngth
)

361 
ch¨_ªad
;

362 
i
;

364 
i
 = 0;

365 (
ch¨_ªad
 = 
	`gëch¨
()Ë!
EOF
 && ch¨_ªad !
NEWLINE
 &&

366 
i
 < 
Àngth
) {

367 
buf
[
i
] = (Ë
ch¨_ªad
;

368 
i
++;

369 
	`putch¨
(
ch¨_ªad
);

372 i‡(
ch¨_ªad
 =
EOF
)

379 i‡(
i
 >
Àngth
)

380 
i
--;

381 
buf
[
i
] = 0;

382 (
i
);

383 
	}
}

385 
boﬁ


386 
	$Såcmp
(c⁄° *
a
, c⁄° *
b
)

388 i‡(
a
 =
NULL
)

389 (
b
 =
NULL
);

390 i‡(
b
 =
NULL
)

391 (
FALSE
);

393 *
a
 && *
b
)

394 i‡(*
a
++ !*
b
++)

395 (
FALSE
);

397 (*
a
 =*
b
);

399 
	}
}

	@os161/user/testbin/triplehuge/triple.c

36 
	~<°dio.h
>

37 
	~<uni°d.h
>

38 
	~<îr.h
>

39 
	~"åùÀ.h
"

42 
pid_t


43 
	$•awnv
(c⁄° *
¥og
, **
¨gv
)

45 
pid_t
 
pid
 = 
	`f‹k
();

46 
pid
) {

48 
	`îr
(1, "fork");

51 
	`execv
(
¥og
, 
¨gv
);

52 
	`îr
(1, "%s:Éxecv", 
¥og
);

57  
pid
;

58 
	}
}

62 
	$dowaô
(
ödex
, 
pid
)

64 
°©us
;

66 i‡(
	`waôpid
(
pid
, &
°©us
, 0)<0) {

67 
	`w¨n
("waôpid f‹ c›y #%d (pid %d)", 
ödex
, 
pid
);

70 i‡(
	`WIFSIGNALED
(
°©us
)) {

71 
	`w¨nx
("c›y #%d (pid %d): sig«»%d", 
ödex
, 
pid
,

72 
	`WTERMSIG
(
°©us
));

75 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

76 
	`w¨nx
("c›y #%d (pid %d):Éxô %d", 
ödex
, 
pid
,

77 
	`WEXITSTATUS
(
°©us
));

81 
	}
}

84 
	$åùÀ
(c⁄° *
¥og
)

86 
pid_t
 
pids
[3];

87 
i
, 
Áûuªs
 = 0;

88 *
¨gs
[2];

91 
¨gs
[0]=(*)
¥og
;

92 
¨gs
[1]=
NULL
;

94 
	`w¨nx
("Sèπög:Ñu¬ögÅhªêc›õ†o‡%s...", 
¥og
);

96 
i
=0; i<3; i++) {

97 
pids
[
i
]=
	`•awnv
(
¨gs
[0],árgs);

100 
i
=0; i<3; i++) {

101 
Áûuªs
 +
	`dowaô
(
i
, 
pids
[i]);

104 i‡(
Áûuªs
 > 0) {

105 
	`w¨nx
("%d faûuªs", 
Áûuªs
);

108 
	`w¨nx
("Congratulations! YouÖassed.");

110 
	}
}

	@os161/user/testbin/triplehuge/triple.h

30 
åùÀ
(c⁄° *
¥og
);

	@os161/user/testbin/triplehuge/triplehuge.c

38 
	~"åùÀ.h
"

41 
	$maö
()

43 
	`åùÀ
("/testbin/huge");

45 
	}
}

	@os161/user/testbin/triplemat/triple.c

36 
	~<°dio.h
>

37 
	~<uni°d.h
>

38 
	~<îr.h
>

39 
	~"åùÀ.h
"

42 
pid_t


43 
	$•awnv
(c⁄° *
¥og
, **
¨gv
)

45 
pid_t
 
pid
 = 
	`f‹k
();

46 
pid
) {

48 
	`îr
(1, "fork");

51 
	`execv
(
¥og
, 
¨gv
);

52 
	`îr
(1, "%s:Éxecv", 
¥og
);

57  
pid
;

58 
	}
}

62 
	$dowaô
(
ödex
, 
pid
)

64 
°©us
;

66 i‡(
	`waôpid
(
pid
, &
°©us
, 0)<0) {

67 
	`w¨n
("waôpid f‹ c›y #%d (pid %d)", 
ödex
, 
pid
);

70 i‡(
	`WIFSIGNALED
(
°©us
)) {

71 
	`w¨nx
("c›y #%d (pid %d): sig«»%d", 
ödex
, 
pid
,

72 
	`WTERMSIG
(
°©us
));

75 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

76 
	`w¨nx
("c›y #%d (pid %d):Éxô %d", 
ödex
, 
pid
,

77 
	`WEXITSTATUS
(
°©us
));

81 
	}
}

84 
	$åùÀ
(c⁄° *
¥og
)

86 
pid_t
 
pids
[3];

87 
i
, 
Áûuªs
 = 0;

88 *
¨gs
[2];

91 
¨gs
[0]=(*)
¥og
;

92 
¨gs
[1]=
NULL
;

94 
	`w¨nx
("Sèπög:Ñu¬ögÅhªêc›õ†o‡%s...", 
¥og
);

96 
i
=0; i<3; i++) {

97 
pids
[
i
]=
	`•awnv
(
¨gs
[0],árgs);

100 
i
=0; i<3; i++) {

101 
Áûuªs
 +
	`dowaô
(
i
, 
pids
[i]);

104 i‡(
Áûuªs
 > 0) {

105 
	`w¨nx
("%d faûuªs", 
Áûuªs
);

108 
	`w¨nx
("Congratulations! YouÖassed.");

110 
	}
}

	@os161/user/testbin/triplemat/triple.h

30 
åùÀ
(c⁄° *
¥og
);

	@os161/user/testbin/triplemat/triplemat.c

38 
	~"åùÀ.h
"

41 
	$maö
()

43 
	`åùÀ
("/testbin/matmult");

45 
	}
}

	@os161/user/testbin/triplesort/triple.c

36 
	~<°dio.h
>

37 
	~<uni°d.h
>

38 
	~<îr.h
>

39 
	~"åùÀ.h
"

42 
pid_t


43 
	$•awnv
(c⁄° *
¥og
, **
¨gv
)

45 
pid_t
 
pid
 = 
	`f‹k
();

46 
pid
) {

48 
	`îr
(1, "fork");

51 
	`execv
(
¥og
, 
¨gv
);

52 
	`îr
(1, "%s:Éxecv", 
¥og
);

57  
pid
;

58 
	}
}

62 
	$dowaô
(
ödex
, 
pid
)

64 
°©us
;

66 i‡(
	`waôpid
(
pid
, &
°©us
, 0)<0) {

67 
	`w¨n
("waôpid f‹ c›y #%d (pid %d)", 
ödex
, 
pid
);

70 i‡(
	`WIFSIGNALED
(
°©us
)) {

71 
	`w¨nx
("c›y #%d (pid %d): sig«»%d", 
ödex
, 
pid
,

72 
	`WTERMSIG
(
°©us
));

75 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

76 
	`w¨nx
("c›y #%d (pid %d):Éxô %d", 
ödex
, 
pid
,

77 
	`WEXITSTATUS
(
°©us
));

81 
	}
}

84 
	$åùÀ
(c⁄° *
¥og
)

86 
pid_t
 
pids
[3];

87 
i
, 
Áûuªs
 = 0;

88 *
¨gs
[2];

91 
¨gs
[0]=(*)
¥og
;

92 
¨gs
[1]=
NULL
;

94 
	`w¨nx
("Sèπög:Ñu¬ögÅhªêc›õ†o‡%s...", 
¥og
);

96 
i
=0; i<3; i++) {

97 
pids
[
i
]=
	`•awnv
(
¨gs
[0],árgs);

100 
i
=0; i<3; i++) {

101 
Áûuªs
 +
	`dowaô
(
i
, 
pids
[i]);

104 i‡(
Áûuªs
 > 0) {

105 
	`w¨nx
("%d faûuªs", 
Áûuªs
);

108 
	`w¨nx
("Congratulations! YouÖassed.");

110 
	}
}

	@os161/user/testbin/triplesort/triple.h

30 
åùÀ
(c⁄° *
¥og
);

	@os161/user/testbin/triplesort/triplesort.c

38 
	~"åùÀ.h
"

41 
	$maö
()

43 
	`åùÀ
("/testbin/sort");

45 
	}
}

	@os161/user/testbin/userthreads/userthreads.c

52 
	~<uni°d.h
>

53 
	~<°dio.h
>

55 
	#NTHREADS
 3

	)

56 
	#MAX
 1<<25

	)

61 vﬁ©ûê
	gcou¡
 = 0;

64 
ThªadRu¬î
();

65 
BœdeRu¬î
();

68 
	$maö
(
¨gc
, *
¨gv
[])

70 
i
;

72 ()
¨gc
;

73 ()
¨gv
;

75 
i
=0; i<
NTHREADS
; i++) {

76 i‡(
i
)

77 
	`thªadf‹k
(
ThªadRu¬î
);

79 
	`thªadf‹k
(
BœdeRu¬î
);

82 
	`¥ötf
("Parent hasÜeft.\n");

84 
	}
}

92 
	$BœdeRu¬î
()

94 
cou¡
 < 
MAX
) {

95 i‡(
cou¡
 % 500 == 0)

96 
	`¥ötf
("Blade ");

97 
cou¡
++;

99 
	}
}

102 
	$ThªadRu¬î
()

104 
cou¡
 < 
MAX
) {

105 i‡(
cou¡
 % 513 == 0)

106 
	`¥ötf
(" Runner\n");

107 
cou¡
++;

109 
	}
}

	@os161/user/testbin/zero/zero.c

38 
	~<°dio.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

47 
	gd©a_°uff
[] = {

60 
	#SUM_OF_DATA_STUFF
 525

	)

66 
	gbss_°uff
[3000];

70 
	$check_d©a
()

72 
i
, 
num
, 
k
;

74 
num
 = (
d©a_°uff
) / (data_stuff[0]);

75 
k
=
i
=0; i<
num
; i++) {

76 
k
 +
d©a_°uff
[
i
];

78 i‡(
k
 !
SUM_OF_DATA_STUFF
) {

79 
	`w¨nx
("My initialized data sumsÅoÅhe wrong value!");

80 
	`w¨nx
("GŸ: %u Ex≥˘ed: %u", 
k
, 
SUM_OF_DATA_STUFF
);

81 
	`îrx
(1, "FAILED");

83 
	}
}

87 
	$check_bss
()

89 
i
, 
num
;

91 
num
 = (
bss_°uff
) / (bss_stuff[0]);

92 
i
=0; i<
num
; i++) {

93 i‡(
bss_°uff
[
i
] != 0) {

94 
	`w¨nx
("BSSÉntryát index %u (address %p)Çot zero!",

95 
i
, &
bss_°uff
[i]);

96 
	`w¨nx
("Found: 0x%x", 
bss_°uff
[
i
]);

97 
	`îrx
(1, "FAILED");

100 
	}
}

104 
	$check_sbrk
()

106 *
ba£
;

107 
i
;

110 
	#SBRK_SIZE
 10000

	)

112 
ba£
 = 
	`sbrk
(
SBRK_SIZE
);

113 i‡(
ba£
 == (*)-1) {

114 i‡(
î∫o
 =
EUNIMP
) {

115 
	`¥ötf
("I guess you haven't implemented sbrk yet.\n");

118 
	`îr
(1, "sbrk");

121 
i
=0; i<
SBRK_SIZE
; i++) {

122 i‡(
ba£
[
i
] != 0) {

123 
	`w¨nx
("Byteát offset %u (address %p)Çot zero",

124 
i
, &
ba£
[i]);

125 
	`w¨nx
("GŸ: 0x%x", ()
ba£
[
i
]);

126 
	`w¨nx
("Ba£ o‡sbrkÑegi⁄: %p", 
ba£
);

127 
	`îrx
(1, "FAILED");

130 
	}
}

134 
	$maö
()

136 
	`¥ötf
("zero:Öhase 1: checking .bss\n");

137 
	`check_d©a
();

138 
	`check_bss
();

140 
	`¥ötf
("zero:Öhase 2: checking sbrk()\n");

141 
	`check_sbrk
();

143 
	`¥ötf
("zero:Öassed\n");

145 
	}
}

	@os161/user/uw-testbin/argtest/argtest.c

9 
	~<°dio.h
>

12 
	$maö
(
¨gc
, *
¨gv
[])

14 c⁄° *
tmp
;

15 
i
;

17 
	`¥ötf
("¨g¯ : %d\n", 
¨gc
);

18 
	`¥ötf
("&tm∞ : %p\n", &
tmp
);

19 
	`¥ötf
("&ò : %p\n", &
i
);

20 
	`¥ötf
("&¨g¯ : %p\n", &
¨gc
);

21 
	`¥ötf
("&¨gv : %p\n", &
¨gv
);

22 
	`¥ötf
("¨gv : %p\n", 
¨gv
);

23 
	`¥ötf
("\n");

25 
i
=0; i<=
¨gc
; i++) {

26 
	`¥ötf
("&¨gv[%d] : %p\n", 
i
, &
¨gv
[i]);

28 
	`¥ötf
("\n");

30 
i
=0; i<=
¨gc
; i++) {

31 
	`¥ötf
("¨gv[%d] : %p\n", 
i
, 
¨gv
[i]);

33 
	`¥ötf
("\n");

35 
i
=0; i<=
¨gc
; i++) {

36 
tmp
 = 
¨gv
[
i
];

37 i‡(
tmp
 =
NULL
) {

38 
tmp
 = "[NULL]";

40 
	`¥ötf
("¨gv[%d] -> %s\n", 
i
, 
tmp
);

44 
	}
}

	@os161/user/uw-testbin/argtesttest/argtesttest.c

10 
	~<uni°d.h
>

11 
	~<îr.h
>

13 *
	gx¨gv
[4] = { (*)"¨gã°ã°", (*)"fú°", (*)"£c⁄d", 
NULL
 };

17 
	$•awnv
(c⁄° *
¥og
, **
¨gv
)

19 
pid_t
 
pid
 = 
	`f‹k
();

20 
pid
) {

22 
	`îr
(1, "fork");

25 
	`execv
(
¥og
, 
¨gv
);

26 
	`îr
(1, "%s", 
¥og
);

31 
	}
}

34 
	$maö
()

36 
	`•awnv
("/ã°bö/¨gã°", 
x¨gv
);

38 
	}
}

	@os161/user/uw-testbin/conc-io/conc-io.c

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<uni°d.h
>

14 
	#PROCS
 (4)

	)

15 
	#BUF_SIZE
 (10)

	)

16 
	#NUM_WRITES
 (500)

	)

17 
	#TOTAL_WRITES
 (
NUM_WRITES
 * 
PROCS
)

	)

19 c⁄° *
	gto_wrôe
 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

20 
do_wrôes
(
c
);

23 
	$maö
()

25 
buf„r
[
BUF_SIZE
];

26 
°©us
 = -1;

27 
rc
[
PROCS
];

28 
pid_t
 
pid
[
PROCS
];

29 
rvÆ
 = -1;

30 
id
 = -1;

31 
i
,
k
;

33 
rvÆ
 = 
	`›í
("TESTFILE", 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
);

35 i‡(
rvÆ
 < 0)

37 
	`¥ötf
("### TEST FAILED: UnableÅo create file\n");

38 
	`exô
(0);

40 
	`˛o£
(
rvÆ
);

43 
i
=0; i<
PROCS
; i++) {

44 
pid
[
i
] = 
	`f‹k
();

45 i‡(
pid
[
i
] < 0) {

46 
	`¥ötf
("F‹k %d faûed\n", 
i
);

47 
	`exô
(0);

51 i‡(
pid
[
i
] == 0) {

52 
	`do_wrôes
(
to_wrôe
[
i
]);

53 
	`¥ötf
("Pro˚s†numbî %d i†d⁄e\n", 
i
);

54 
	`exô
(0);

59 
i
=0; i<
PROCS
; i++) {

60 i‡(
pid
[
i
] < 0) {

61 
	`¥ötf
("### TEST FAILED: UnableÅo createÖrocesses\n");

66 
i
=0; i<
PROCS
; i++) {

67 
rc
[
i
] = 
	`waôpid
(
pid
[i], &
°©us
, 0);

68 i‡(
rc
[
i
] !
pid
[i]) {

69 
	`¥ötf
("### TEST FAILED: wait forÖrocesses failed\n");

71 
	`¥ötf
("D⁄êwaôög f‹Öro˚s†numbî %d\n", 
i
);

75 
id
 = 
	`›í
("TESTFILE", 
O_RDWR
);

76 i‡(
id
 < 0)

78 
	`¥ötf
("### TEST FAILED: UnableÅo open file\n");

79 
	`exô
(1);

83 
i
=0; i<
TOTAL_WRITES
; i++)

85 
rvÆ
 = 
	`ªad
(
id
, 
buf„r
, 
BUF_SIZE
);

87 
k
=0; k<(
BUF_SIZE
-1); k++) {

88 i‡(
buf„r
[
k
] != buffer[k+1]) {

89 
	`¥ötf
("### TEST FAILED; Writes wereÇotátomic\n");

90 
	`¥ötf
("buffer[%d] = %c != buffer[%d] = %c\n",

91 
k
, 
buf„r
[k], k+1, buffer[k+1]);

92 
	`˛o£
(
id
);

93 
	`exô
(1);

98 
rvÆ
 = 
	`˛o£
(
id
);

100 i‡(
rvÆ
 < 0)

102 
	`¥ötf
("### TEST FAILED: UnableÅo close file\n");

104 
	`¥ötf
("PASSED\n");

106 
	`exô
(0);

108 
	}
}

111 
	$do_wrôes
(
c
)

113 
rvÆ
 = 0;

114 
id
 = -1;

115 
i
 = 0;

116 
j
 = 0;

117 
buf„r
[
BUF_SIZE
];

118 vﬁ©ûê
tŸÆ
 = 0;

120 
j
=0; j<
BUF_SIZE
; j++) {

121 
buf„r
[
j
] = 
c
;

124 
id
 = 
	`›í
("TESTFILE", 
O_RDWR
);

126 i‡(
id
 < 0) {

127 
	`¥ötf
("### TEST FAILED: UnableÅo open file\n");

128 
	`_exô
(1);

131 
i
 = 0; i < 
NUM_WRITES
; i++) {

132 
rvÆ
 = 
	`wrôe
(
id
, 
buf„r
, 
BUF_SIZE
);

134 i‡(
rvÆ
 !
BUF_SIZE
) {

135 
	`¥ötf
("### TEST FAILED: U«bÀÅÿwrôê%d byã†tÿfûe\n", 
BUF_SIZE
);

136 
	`˛o£
(
id
);

137 
	`_exô
(1);

141 
j
=0; j<
BUF_SIZE
; j++) {

142 
buf„r
[
j
] = 
c
;

143 
tŸÆ
 +
j
;

147 
rvÆ
 = 
	`˛o£
(
id
);

149 i‡(
rvÆ
 < 0) {

150 
	`¥ötf
("### TEST FAILED: UnableÅo close file\n");

151 
	`_exô
(1);

154 
	}
}

	@os161/user/uw-testbin/files1/files1.c

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<uni°d.h
>

17 
	~<î∫o.h
>

18 
	~"../lib/ã°utûs.h
"

21 
	$maö
()

23 
f1
, 
f2
;

24 
i
 = 42;

25 
j
 = -999;

26 
ötbuf
 = 0;

27 
rc
 = 0;

28 
ßve_î∫o
 = 0;

34 
f1
 = 
	`›í
("FILE1", 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
);

35 
	`TEST_POSITIVE
(
f1
, "UnableÅo open FILE1");

38 
f2
 = 
	`›í
("FILE2", 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
);

39 
	`TEST_POSITIVE
(
f2
, "UnableÅo open FILE2");

41 
	`TEST_NOT_EQUAL
(
f1
, 
f2
, "fd f1 == f2");

44 
rc
 = 
	`wrôe
(
f1
, (*Ë&
i
, (i));

45 
	`TEST_EQUAL
(
rc
, (
i
), "writeÅo f1 doesÇot write/returnÖroper value");

48 
rc
 = 
	`wrôe
(
f2
, (*Ë&
j
, (j));

49 
	`TEST_EQUAL
(
rc
, (
j
), "writeÅo f2 doesÇot write/returnÖroper value");

51 
rc
 = 
	`˛o£
(
f1
);

52 
	`TEST_EQUAL
(
rc
, 
SUCCESS
, "close f1 failed");

54 
rc
 = 
	`˛o£
(
f1
);

55 
ßve_î∫o
 = 
î∫o
;

57 
	`TEST_NEGATIVE
(
rc
, "close f1 secondÅime didn't fail");

59 
rc
 = 
	`˛o£
(
f2
);

60 
	`TEST_EQUAL
(
rc
, 
SUCCESS
, "close f2 failed");

62 
f1
 = 
	`›í
("FILE1", 
O_RDONLY
);

63 
	`TEST_POSITIVE
(
f1
, "UnableÅo open FILE1,áfter Close");

65 
f2
 = 
	`›í
("FILE2", 
O_RDONLY
);

66 
	`TEST_POSITIVE
(
f1
, "UnableÅo open FILE2,áfter Close");

68 
	`TEST_NOT_EQUAL
(
f1
, 
f2
, "fd f1 == f2");

70 
rc
 = 
	`ªad
(
f1
, (*Ë&
ötbuf
, (intbuf));

71 
	`TEST_EQUAL
(
rc
, (
ötbuf
),

73 
	`TEST_EQUAL
(
ötbuf
, 
i
,

76 
rc
 = 
	`ªad
(
f2
, (*Ë&
ötbuf
, (intbuf));

77 
	`TEST_EQUAL
(
rc
, (
j
), "read from f2 doesÇotÑead/returnÖroper value");

78 
	`TEST_EQUAL
(
ötbuf
, 
j
, "read from f2 didÇot get correct value");

80 
	`TEST_STATS
();

82 
	`exô
(0);

83 
	}
}

	@os161/user/uw-testbin/files2/files2.c

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<uni°d.h
>

17 
	~<î∫o.h
>

18 
	~<f˙é.h
>

19 
	~"../lib/ã°utûs.h
"

25 
	#USING_ERR_CODES


	)

28 
	#BOGUS_NAME
 "ZZ12ZT"

	)

33 
	#COUNT_LIMIT
 (4*1024)

	)

35 
	gfd_¨øy
[
COUNT_LIMIT
];

38 
	$maö
()

40 
f1
, 
f2
, 
f3
;

41 
i
 = 42;

42 
j
 = -999;

43 
rc
 = 0;

44 
cou¡
 = 0;

45 
ßved_î∫o
 = 0;

51 
rc
 = 
	`›í
("FILE1", 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
);

52 
	`TEST_POSITIVE
(
rc
, "UnableÅo create FILE1 (assumesÅhat it doesn'tÉxist)");

55 
rc
 = 
	`›í
("FILE2", 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
);

56 
	`TEST_POSITIVE
(
rc
, "UnableÅo create FILE2 (assumesÅhat it doesn'tÉxist)");

59 
f1
 = 
	`›í
("FILE1", 
O_RDWR
);

60 
	`TEST_POSITIVE
(
f1
, "UnableÅo open FILE1 firstÅime");

62 
f2
 = 
	`›í
("FILE1", 
O_RDWR
);

63 
	`TEST_POSITIVE
(
f2
, "UnableÅo open FILE1 secondÅime");

65 
f3
 = 
	`›í
("FILE1", 
O_RDWR
);

66 
	`TEST_POSITIVE
(
f3
, "UnableÅo open FILE1ÅhirdÅime");

69 
	`TEST_NOT_EQUAL
(
f1
, 
f2
, "Using same fd for multiple opens f1 = f2");

70 
	`TEST_NOT_EQUAL
(
f2
, 
f3
, "Using same fd for multiple opens f2 = f3");

72 
rc
 = 
	`˛o£
(
f1
);

73 
	`TEST_EQUAL
(
rc
, 
SUCCESS
, "UnableÅo close f1");

74 
rc
 = 
	`˛o£
(
f2
);

75 
	`TEST_EQUAL
(
rc
, 
SUCCESS
, "UnableÅo close f2");

76 
rc
 = 
	`˛o£
(
f3
);

77 
	`TEST_EQUAL
(
rc
, 
SUCCESS
, "UnableÅo close f3");

80 
rc
 = 
	`wrôe
(
f1
, (*Ë&
i
, (i));

81 
ßved_î∫o
 = 
î∫o
;

82 
	`TEST_NEGATIVE
(
rc
, "writeÅo closed file f1 should fail");

83 #ifde‡
USING_ERR_CODES


84 
	`TEST_EQUAL
(
ßved_î∫o
, 
EBADF
, "Expected EBADF when writingÅo closed file f1");

88 
rc
 = 
	`ªad
(
f2
, (*Ë&
j
, (j));

89 
ßved_î∫o
 = 
î∫o
;

90 
	`TEST_NEGATIVE
(
rc
, "read from closed file f2 should fail");

91 #ifde‡
USING_ERR_CODES


92 
	`TEST_EQUAL
(
ßved_î∫o
, 
EBADF
, "Expected EBADF whenÑeading from closed file f2");

95 
rc
 = 
	`˛o£
(0xdeadbeef);

96 
ßved_î∫o
 = 
î∫o
;

97 
	`TEST_NEGATIVE
(
rc
, "close on invalid file id didn'tÑeturnÉrror code");

98 #ifde‡
USING_ERR_CODES


99 
	`TEST_EQUAL
(
ßved_î∫o
, 
EBADF
, "Expected EBADF when closing invalid file fd");

102 
rc
 = 
	`›í
(
BOGUS_NAME
, 
O_RDWR
);

103 
ßved_î∫o
 = 
î∫o
;

104 
	`TEST_NEGATIVE
(
rc
, "openÇon-existant fileÑeturns incorrect value");

105 #ifde‡
USING_ERR_CODES


106 
	`TEST_EQUAL
(
ßved_î∫o
, 
ENOENT
, "Expected ENOENT when openingÇonÉxistant file");

110 
f1
 = 
	`›í
("FILE1", 
O_RDONLY
);

111 
	`TEST_POSITIVE
(
f1
, "UnableÅo open FILE1");

114 
rc
 = 
	`wrôe
(
f1
, "hello", 5);

115 
ßved_î∫o
 = 
î∫o
;

116 
	`TEST_NEGATIVE
(
rc
, "TryingÅo writeÅoÑead only file doesÇot fail");

117 #ifde‡
USING_ERR_CODES


118 
	`TEST_EQUAL
(
ßved_î∫o
, 
EBADF
, "Expected EBAD whenÅryingÅo writeÅoÑead only file");

122 
f2
 = 
	`›í
("FILE2", 
O_WRONLY
);

123 
	`TEST_POSITIVE
(
f1
, "UnableÅo open FILE2");

126 
rc
 = 
	`ªad
(
f2
, &
i
, 1);

127 
ßved_î∫o
 = 
î∫o
;

128 
	`TEST_NEGATIVE
(
rc
, "TryingÅoÑead from write only file doesÇot fail");

129 #ifde‡
USING_ERR_CODES


130 
	`TEST_EQUAL
(
ßved_î∫o
, 
EBADF
, "Expected EBAD whenÅryingÅoÑead from write only file");

133 
rc
 = 
	`˛o£
(
f1
);

134 
	`TEST_EQUAL
(
rc
, 
SUCCESS
, "UnableÅo close f1");

136 
rc
 = 
	`˛o£
(
f2
);

137 
	`TEST_EQUAL
(
rc
, 
SUCCESS
, "UnableÅo close f2");

140 
f1
 = 
	`›í
("FILE1", 
O_RDWR
);

141 
ßved_î∫o
 = 
î∫o
;

142 i‡(
f1
 >= 0) {

143 
fd_¨øy
[
cou¡
] = 
f1
;

144 
cou¡
++;

146 } 
f1
 >0 && 
cou¡
 < 
COUNT_LIMIT
);

148 i‡(
cou¡
 =
COUNT_LIMIT
) {

149 
	`¥ötf
("WARNING: THERE MAY NOT BE A LIMIT ON THE NUMBER OF OPEN FILES\n");

151 
	`TEST_NEGATIVE
(
f1
, "OpeningÅoo many files doesn'tÑeturnÉrror code");

152 #ifde‡
USING_ERR_CODES


153 
	`TEST_EQUAL_ONE_OF
(
ßved_î∫o
, 
EMFILE
, 
ENFILE
, "Expected one of EMFILE or ENFILE when openingÅoo many files");

157 
	`TEST_POSITIVE
(
cou¡
, "Count of open filesÉxpectedÅo be > 0");

158 
	`¥ötf
("Numbî o‡fûe†›íed = %d\n", 
cou¡
);

161 
i
=0; i<
cou¡
; i++) {

162 
rc
 = 
	`˛o£
(
fd_¨øy
[
i
]);

163 
	`TEST_EQUAL
(
rc
, 0, "Expected closeÅoÑeturn 0 for success");

167 
rc
 = 
	`›í
((*Ë0xffffffff, 
O_RDWR
);

168 
ßved_î∫o
 = 
î∫o
;

169 
	`TEST_NEGATIVE
(
rc
, "open file using badáddress doesn'tÑeturnÉrror code");

170 #ifde‡
USING_ERR_CODES


171 
	`TEST_EQUAL
(
ßved_î∫o
, 
EFAULT
, "Expected EFAULT for invalidáddress for filename");

174 
	`TEST_STATS
();

176 
	`exô
(0);

177 
	}
}

	@os161/user/uw-testbin/hogparty/hogparty.c

10 
	~<uni°d.h
>

11 
	~<îr.h
>

13 *
	gxh¨gv
[2] = { (*)"xhog", 
NULL
 };

14 *
	gyh¨gv
[2] = { (*)"yhog", 
NULL
 };

15 *
	gzh¨gv
[2] = { (*)"zhog", 
NULL
 };

19 
	$•awnv
(c⁄° *
¥og
, **
¨gv
)

21 
pid_t
 
pid
 = 
	`f‹k
();

22 
pid
) {

24 
	`îr
(1, "fork");

27 
	`execv
(
¥og
, 
¨gv
);

28 
	`îr
(1, "%s", 
¥og
);

33 
	}
}

36 
	$maö
()

38 
	`•awnv
("/uw-ã°bö/xhog", 
xh¨gv
);

39 
	`•awnv
("/uw-ã°bö/yhog", 
yh¨gv
);

40 
	`•awnv
("/uw-ã°bö/zhog", 
zh¨gv
);

42 
	}
}

	@os161/user/uw-testbin/lib/testutils.c

17 
	~<°dio.h
>

18 
	~"ã°utûs.h
"

21 
	gã°_num
 = 0;

22 
	gnum_Áûuªs
 = 0;

23 
	gvîbo£
 = 0;

27 
	$¥öt_loˇti⁄
(c⁄° *
fûe
, c⁄° *
func
, 
löe
, c⁄° *
ö_ã°
)

29 
	`¥ötf
(" %†: fun˘i⁄ = %s,Üöê%dÅe° wa†%s\n", 
fûe
, 
func
, 
löe
, 
ö_ã°
);

30 
	}
}

34 
	$ã°_equÆ
(
vÆ
, 
ex≥˘ed_vÆ
, c⁄° *
°r
,

35 c⁄° *
fûe
, c⁄° *
func
, 
löe
)

37 
Áûed
 = 0;

38 c⁄° *
out
 = "SUCCESS";

40 
ã°_num
++;

42 i‡(
vÆ
 !
ex≥˘ed_vÆ
) {

43 
num_Áûuªs
++;

44 
Áûed
 = 1;

45 
out
 = "FAILURE";

48 i‡(
Áûed
 || 
vîbo£
) {

49 
	`¥ötf
("%s ON TEST = %d : Got %d :Éxpected %d\n",

50 
out
, 
ã°_num
, 
vÆ
, 
ex≥˘ed_vÆ
);

52 i‡(
Áûed
) {

53 
	`¥ötf
(" %s\n", 
°r
);

55 
	`¥öt_loˇti⁄
(
fûe
, 
func
, 
löe
, 
__FUNCTION__
);

58 
	}
}

62 
	$ã°_equÆ_⁄e_of
(
vÆ
, 
ex≥˘ed_vÆ1
, 
ex≥˘ed_vÆ2
, c⁄° *
°r
,

63 c⁄° *
fûe
, c⁄° *
func
, 
löe
)

65 
Áûed
 = 0;

66 c⁄° *
out
 = "SUCCESS";

68 
ã°_num
++;

70 i‡(
vÆ
 !
ex≥˘ed_vÆ1
 && vÆ !
ex≥˘ed_vÆ2
) {

71 
num_Áûuªs
++;

72 
Áûed
 = 1;

73 
out
 = "FAILURE";

76 i‡(
Áûed
 || 
vîbo£
) {

77 
	`¥ötf
("%s ON TEST = %d : Got %d :Éxpected one of %d or %d\n",

78 
out
, 
ã°_num
, 
vÆ
, 
ex≥˘ed_vÆ1
, 
ex≥˘ed_vÆ2
);

80 i‡(
Áûed
) {

81 
	`¥ötf
(" %s\n", 
°r
);

83 
	`¥öt_loˇti⁄
(
fûe
, 
func
, 
löe
, 
__FUNCTION__
);

86 
	}
}

90 
	$ã°_posôive
(
vÆ
, c⁄° *
°r
,

91 c⁄° *
fûe
, c⁄° *
func
, 
löe
)

93 
Áûed
 = 0;

94 c⁄° *
out
 = "SUCCESS";

96 
ã°_num
++;

98 i‡(
vÆ
 <= 0) {

99 
num_Áûuªs
++;

100 
Áûed
 = 1;

101 
out
 = "FAILURE";

104 i‡(
Áûed
 || 
vîbo£
) {

105 
	`¥ötf
("%s ON TEST = %d : Got %d :Éxpected Positive Value\n",

106 
out
, 
ã°_num
, 
vÆ
);

108 i‡(
Áûed
) {

109 
	`¥ötf
(" %s\n", 
°r
);

111 
	`¥öt_loˇti⁄
(
fûe
, 
func
, 
löe
, 
__FUNCTION__
);

113 
	}
}

117 
	$ã°_√g©ive
(
vÆ
, c⁄° *
°r
,

118 c⁄° *
fûe
, c⁄° *
func
, 
löe
)

120 
Áûed
 = 0;

121 c⁄° *
out
 = "SUCCESS";

123 
ã°_num
++;

125 i‡(
vÆ
 >= 0) {

126 
num_Áûuªs
++;

127 
Áûed
 = 1;

128 
out
 = "FAILURE";

131 i‡(
Áûed
 || 
vîbo£
) {

132 
	`¥ötf
("%s ON TEST = %d : Got %d :Éxpected Negative Value\n",

133 
out
, 
ã°_num
, 
vÆ
);

135 i‡(
Áûed
) {

136 
	`¥ötf
(" %s\n", 
°r
);

138 
	`¥öt_loˇti⁄
(
fûe
, 
func
, 
löe
, 
__FUNCTION__
);

140 
	}
}

144 
	$ã°_nŸ_equÆ
(
vÆ1
, 
vÆ2
, c⁄° *
°r
,

145 c⁄° *
fûe
, c⁄° *
func
, 
löe
)

147 
Áûed
 = 0;

148 c⁄° *
out
 = "SUCCESS";

150 
ã°_num
++;

152 i‡(
vÆ1
 =
vÆ2
) {

153 
num_Áûuªs
++;

154 
Áûed
 = 1;

155 
out
 = "FAILURE";

158 i‡(
Áûed
 || 
vîbo£
) {

159 
	`¥ötf
("%s ON TEST = %d : Got %d : Expectedánything but %d\n",

160 
out
, 
ã°_num
, 
vÆ1
, 
vÆ2
);

162 i‡(
Áûed
) {

163 
	`¥ötf
(" %s\n", 
°r
);

165 
	`¥öt_loˇti⁄
(
fûe
, 
func
, 
löe
, 
__FUNCTION__
);

167 
	}
}

171 
	$ã°_ª£t_°©s
()

173 
num_Áûuªs
 = 0;

174 
ã°_num
 = 0;

175 
	}
}

178 
	$ã°_vîbo£_⁄
()

180 
	`¥ötf
("TEST VERBOSE ON\n");

181 
vîbo£
 = 1;

182 
	}
}

185 
	$ã°_vîbo£_off
()

187 
	`¥ötf
("TEST VERBOSE OFF\n");

188 
vîbo£
 = 0;

189 
	}
}

192 
	$ã°_¥öt_°©s
(c⁄° *
fûe
, c⁄° * 
func
, 
löe
)

194 
	`¥ötf
("TEST STATS for %s : from function = %s,Üine = %d\n",

195 
fûe
, 
func
, 
löe
);

196 
	`¥ötf
(" Number of failures = %d Number of successes = %d Number of Tests = %d\n",

197 
num_Áûuªs
, 
ã°_num
 -Çum_failures,Åest_num);

198 
	`¥ötf
("\n");

199 
	}
}

202 #ifde‡
UNIT_TEST


204 
	$maö
()

206 
	`TEST_VERBOSE_ON
();

208 
	`TEST_EQUAL
(1, 1, "ShouldÖass\n");

209 
	`TEST_EQUAL
(1, 2, "Should fail\n");

210 
	`TEST_EQUAL_ONE_OF
(1, 1, 2, "ShouldÖass\n");

211 
	`TEST_EQUAL_ONE_OF
(1, 2, 1, "ShouldÖass\n");

212 
	`TEST_EQUAL_ONE_OF
(1, 2, 3, "Should fail\n");

213 
	`TEST_NOT_EQUAL
(1, 2, "ShouldÖass\n");

214 
	`TEST_NOT_EQUAL
(2, 1, "ShouldÖass\n");

215 
	`TEST_NOT_EQUAL
(2, 2, "Should fail\n");

217 
	`TEST_NEGATIVE
(-1, "ShouldÖass\n");

218 
	`TEST_NEGATIVE
(0, "Should fail\n");

219 
	`TEST_NEGATIVE
(1, "Should fail\n");

220 
	`TEST_POSITIVE
(1, "ShouldÖass\n");

221 
	`TEST_POSITIVE
(0, "Should fail\n");

222 
	`TEST_POSITIVE
(-1, "Should fail\n");

224 
	`TEST_STATS
();

225 
	`¥ötf
("Should have 7Öassesánd 7 failures\n");

226 
	}
}

	@os161/user/uw-testbin/lib/testutils.h

1 #i‚de‡
TESTUTILS_H


2 
	#TESTUTILS_H


	)

4 
	#SUCCESS
 (0)

	)

6 
	#TEST_EQUAL
(
a
, 
b
, 
s
) \

7 
	`ã°_equÆ
(
a
, 
b
, 
s
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
)

	)

9 
	#TEST_EQUAL_ONE_OF
(
a
, 
b
, 
c
, 
s
) \

10 
	`ã°_equÆ_⁄e_of
(
a
, 
b
, 
c
, 
s
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
)

	)

12 
	#TEST_NOT_EQUAL
(
a
, 
b
, 
s
) \

13 
	`ã°_nŸ_equÆ
(
a
, 
b
, 
s
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
)

	)

15 
	#TEST_NEGATIVE
(
a
, 
s
) \

16 
	`ã°_√g©ive
(
a
, 
s
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
)

	)

18 
	#TEST_POSITIVE
(
a
, 
s
) \

19 
	`ã°_posôive
(
a
, 
s
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
)

	)

21 
	#TEST_STATS
() \

22 
	`ã°_¥öt_°©s
–
__FILE__
, 
__FUNCTION__
, 
__LINE__
)

	)

24 
	#TEST_VERBOSE_ON
() \

25 
	`ã°_vîbo£_⁄
()

	)

27 
	#TEST_VERBOSE_OFF
() \

28 
	`ã°_vîbo£_off
()

	)

30 
ã°_equÆ
(
ªt_vÆ
, 
ex≥˘ed_vÆ
, c⁄° *
°r
,

31 c⁄° *
fûe
, c⁄° * 
func
, 
löe
);

32 
ã°_equÆ_⁄e_of
(
vÆ
, 
ex≥˘ed_vÆ1
, 
ex≥˘ed_vÆ2
, c⁄° *
°r
,

33 c⁄° *
fûe
, c⁄° *
func
, 
löe
);

34 
ã°_posôive
(
ªt_vÆ
, c⁄° *
°r
,

35 c⁄° *
fûe
, c⁄° * 
func
, 
löe
);

36 
ã°_√g©ive
(
ªt_vÆ
, c⁄° *
°r
,

37 c⁄° *
fûe
, c⁄° * 
func
, 
löe
);

38 
ã°_nŸ_equÆ
(
ªt_vÆ
, 
ex≥˘ed_vÆ
, c⁄° *
°r
,

39 c⁄° *
fûe
, c⁄° * 
func
, 
löe
);

40 
ã°_¥öt_°©s
(c⁄° *
fûe
, c⁄° * 
func
, 
löe
);

41 
ã°_ª£t_°©s
();

42 
ã°_vîbo£_⁄
();

43 
ã°_vîbo£_off
();

	@os161/user/uw-testbin/onefork/onefork.c

10 
	~<uni°d.h
>

11 
	~<°rög.h
>

12 
	~<°dlib.h
>

13 
	~<°dio.h
>

14 
	~<îr.h
>

17 
	$maö
(
¨gc
, *
¨gv
[])

19 ()
¨gc
;

20 ()
¨gv
;

21 
pid_t
 
pid
;

22 
pid
 = 
	`f‹k
();

23 i‡(
pid
 < 0) {

24 
	`w¨n
("fork");

26 i‡(
pid
 == 0) {

28 
	`putch¨
('C');

29 
	`putch¨
('\n');

33 
	`putch¨
('P');

34 
	`putch¨
('\n');

37 
	}
}

	@os161/user/uw-testbin/pidcheck/pidcheck.c

10 
	~<uni°d.h
>

11 
	~<°rög.h
>

12 
	~<°dlib.h
>

13 
	~<°dio.h
>

14 
	~<îr.h
>

18 vﬁ©ûê
	gtŸ
;

21 
	$maö
(
¨gc
, *
¨gv
[])

23 ()
¨gc
;

24 ()
¨gv
;

25 
pid_t
 
pid
,
pid2
;

26 
i
;

27 
pid
 = 
	`f‹k
();

28 i‡(
pid
 < 0) {

29 
	`w¨n
("fork");

31 i‡(
pid
 == 0) {

33 
pid2
 = 
	`gëpid
();

35 
	`¥ötf
("C: %d\n",
pid2
);

40 
tŸ
 = 0;

41 
i
=0;i<1000000;i++) {

42 
tŸ
++;

45 
	`¥ötf
("PC: %d\n",
pid
);

47 
pid2
 = 
	`gëpid
();

48 
	`¥ötf
("PP: %d\n",
pid2
);

51 
	}
}

	@os161/user/uw-testbin/romemwrite/romemwrite.c

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

19 
	#INVAL_INSN
 0x0000003f

	)

22 
	$maö
()

24 *
x
 = (*Ë
maö
;

26 
	`¥ötf
("TryingÅo writeÅoÅheÅext segment\n");

27 
	`¥ötf
("ThisÖrogram should fail ifÅheÅext segment isÑead-only.\n");

28 
	`¥ötf
("However,Åhe kernel shouldÇot crash...\n");

30 *
x
 = 
INVAL_INSN
;

32 
	`¥ötf
("IF THIS PRINTS, THE TEST FAILED\n");

33 
	`exô
(1);

34 
	}
}

	@os161/user/uw-testbin/segments/segments.c

4 
	~<uni°d.h
>

6 
	#N
 (200)

	)

8 
	gx
 = 0xdeadbeef;

9 
	gt1
;

10 
	gt2
;

11 
	gt3
;

12 
	g¨øy
[4096];

13 c⁄° *
	g°r
 = "Hello World\n";

14 c⁄° 
	gz
 = 0xabcddcba;

16 
	sexam∂e
 {

17 
	mypos
;

18 
	mxpos
;

22 
	$maö
()

24 
cou¡
 = 0;

25 c⁄° 
vÆue
 = 1;

26 
t1
 = 
N
;

27 
t2
 = 2;

28 
cou¡
 = 
x
 + 
t1
;

29 
t2
 = 
z
 +Å2 + 
vÆue
;

31 
	`ªboŸ
(
RB_POWEROFF
);

33 
	}
}

	@os161/user/uw-testbin/sparse/sparse.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

20 
	#PageSize
 4096

	)

21 
	#NumPages
 128

	)

24 
	#AºaySize
 (2*
NumPages
*
PageSize
)

	)

25 
	g•¨£
[
AºaySize
];

28 
	$maö
()

30 
i
,
j
;

32 
	`¥ötf
("StartingÅhe sparseÖrogram\n");

36 
i
=0; i<
AºaySize
; i+=(10*
PageSize
)) {

37 
•¨£
[
i
]= 'a';

40 
	`¥ötf
("stage [1] done\n");

43 
j
=0; j<5; j++) {

44 
i
=0; i<
AºaySize
; i+=(10*
PageSize
)) {

45 
•¨£
[
i
] += 1;

49 
	`¥ötf
("stage [2] done\n");

53 
i
=0; i<
AºaySize
; i+=(10*
PageSize
)) {

54 i‡(
•¨£
[
i
] != ('a'+5)) {

55 
	`¥ötf
("Te° faûed! U√x≥˘ed vÆuê©áºayÖosôi⁄ %d\n", 
i
);

60 
	`¥ötf
("SUCCESS\n");

63 
	}
}

	@os161/user/uw-testbin/syscall/syscall.c

2 
	~<uni°d.h
>

3 
	~<î∫o.h
>

6 
	$maö
()

8 
x
;

9 
x
 = 
	`˛o£
(999);

10 i‡(
x
 < 0) {

11  
î∫o
;

13  
x
;

15 
	}
}

	@os161/user/uw-testbin/tlbfaulter/tlbfaulter.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

24 
	#PageSize
 4096

	)

25 
	#TLBSize
 64

	)

28 
	#AºaySize
 ((
TLBSize
+5)*
PageSize
)

	)

29 
	gébã°
[
AºaySize
];

32 
	$maö
()

34 
i
,
j
;

36 
	`¥ötf
("StartingÅheÅlbfaulterÖrogram\n");

39 
i
=0; i<
AºaySize
; i++) {

40 
ébã°
[
i
]= 'a';

43 
	`¥ötf
("tlbfaulter:árray initialization completed\n");

46 
j
=0; j<5; j++) {

47 
i
=0; i<
AºaySize
; i+=
PageSize
) {

48 
ébã°
[
i
] += 1;

52 
	`¥ötf
("tlbfaulter:árray updates completed\n");

55 
i
=0; i<
AºaySize
; i+=
PageSize
) {

56 i‡(
ébã°
[
i
] != ('a'+5)) {

57 
	`¥ötf
("Te° faûed! U√x≥˘ed vÆuê©áºayÖosôi⁄ %d\n", 
i
);

62 
	`¥ötf
("SUCCESS\n");

65 
	}
}

	@os161/user/uw-testbin/vm-crash1/vm-crash1.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 #i‡
deföed
(
__mùs__
)

5 
	#INSN_TYPE
 

	)

6 
	#INVAL_INSN
 0x0000003f

	)

13 
	$maö
()

16 
INSN_TYPE
 *
x
 = (INSN_TYPE *Ë
maö
;

17 *
x
 = 
INVAL_INSN
;

19 
	`¥ötf
("IF THIS PRINTS THE TEST FAILED\n");

20 
	`exô
(1);

21 
	}
}

	@os161/user/uw-testbin/vm-crash2/vm-crash2.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

9 c⁄° *
	g°r
 =

89 
	$maö
()

91 
Àn
 = 
	`°æí
(
°r
);

92 *
loˇti⁄
;

94 
loˇti⁄
 = (*Ë&
°r
[
Àn
-5];

95 *
loˇti⁄
 = 'B';

96 
	`¥ötf
("IF THIS PRINTS THE TEST FAILED\n");

98 
	`exô
(1);

99 
	}
}

	@os161/user/uw-testbin/vm-crash3/vm-crash3.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 #i‡
deföed
(
__mùs__
)

6 
	#INSN_TYPE
 

	)

7 
	#INVAL_INSN
 0x0000003f

	)

12 
wrôe_to_code
();

13 
ªad_d©a
();

14 
wrôe_d©a
();

17 
	$wrôe_to_code
()

19 
	`func_150
();

21 
INSN_TYPE
 *
x
 = (INSN_TYPE *Ë
func_150
;

22 *
x
 = 
INVAL_INSN
;

24 
	`¥ötf
("IF THIS PRINTS THE TEST FAILED\n");

25 
	}
}

27 
ˇŒ_Æl
();

29 
	#PAGE_SIZE
 (4096)

	)

30 
	#PAGES
 (128)

	)

31 
	#SIZE
 (
PAGE_SIZE
 * 
PAGES
 / ())

	)

32 
	#NUM_REFS
 (2)

	)

34 
	g¨øy
[
SIZE
];

37 
	$wrôe_d©a
()

39 
ªfs
 = 0;

40 
i
 = 0;

42 
ªfs
 = 0;Ñef†< 
NUM_REFS
-1;Ñefs++) {

43 
i
=0; i<
SIZE
; i+
PAGE_SIZE
) {

44 
¨øy
[
i
] = i;

47 
	}
}

50 
	$ªad_d©a
()

52 
i
 = 0;

54 
i
=0; i<
SIZE
; i+
PAGE_SIZE
) {

55 i‡(
¨øy
[
i
] != i) {

56 
	`¥ötf
("FAILEDáºay[%d] = %u !%d\n", 
i
, 
¨øy
[i], i);

57 
	`exô
(1);

60 
	}
}

64 
	$maö
()

66 
i
 = 0;

68 
i
=0; i<5; i++) {

69 
	`ˇŒ_Æl
();

70 
	`wrôe_d©a
();

71 
	`ˇŒ_Æl
();

72 
	`ªad_d©a
();

76 
	`wrôe_to_code
();

77 
	`exô
(0);

78 
	}
}

	@os161/user/uw-testbin/vm-data1/vm-data1.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	#PAGE_SIZE
 (4096)

	)

5 
	#PAGES
 (128)

	)

6 
	#SIZE
 (
PAGE_SIZE
 * 
PAGES
 / ())

	)

7 
	#NUM_REFS
 (5)

	)

10 
	g¨øy
[
SIZE
];

13 
	$maö
()

15 
i
 = 0;

16 
ªfs
 = 0;

18 
ªfs
 = 0;Ñef†< 
NUM_REFS
-1;Ñefs++) {

19 
i
=0; i<
SIZE
; i++) {

20 
¨øy
[
i
] = i;

24 
i
=0; i<
SIZE
; i++) {

25 i‡(
¨øy
[
i
] != i) {

26 
	`¥ötf
("FAILEDáºay[%d] = %u !%d\n", 
i
, 
¨øy
[i], i);

27 
	`exô
(1);

31 
	`¥ötf
("SUCCEEDED\n");

32 
	`exô
(0);

33 
	}
}

	@os161/user/uw-testbin/vm-data2/vm-data2.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	#PAGE_SIZE
 (4096)

	)

5 
	#PAGES
 (2048Ë

	)

6 
	#SIZE
 (
PAGE_SIZE
 * 
PAGES
 / ())

	)

7 
	#NUM_REFS
 (2)

	)

8 
	#PAGES_TO_TOUCH
 (1536Ë

	)

11 
	g¨øy
[
SIZE
];

14 
	$maö
()

16 
i
 = 0;

17 
ödex
 = 0;

18 
ªfs
 = 0;

20 
ªfs
 = 0;Ñef†< 
NUM_REFS
;Ñefs++) {

21 
i
=0; i<
PAGES_TO_TOUCH
; i++) {

22 
ödex
 = 
i
 * 
PAGE_SIZE
 / ();

23 
¨øy
[
ödex
] = 
i
;

27 
i
=0; i<
PAGES_TO_TOUCH
; i++) {

28 
ödex
 = 
i
 * 
PAGE_SIZE
 / ();

29 i‡(
¨øy
[
ödex
] !
i
) {

30 
	`¥ötf
("FAILEDáºay[%d] = %u !%d\n", 
i
, 
¨øy
[
ödex
], i);

31 
	`exô
(1);

35 
	`¥ötf
("SUCCEEDED\n");

36 
	`exô
(0);

37 
	}
}

	@os161/user/uw-testbin/vm-data3/vm-data3.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

10 
ˇŒ_Æl
();

11 
wrôe_d©a
();

12 
ªad_d©a
();

14 
	#PAGE_SIZE
 (4096)

	)

15 
	#PAGES
 (128)

	)

16 
	#SIZE
 (
PAGE_SIZE
 * 
PAGES
 / ())

	)

17 
	#NUM_REFS
 (2)

	)

19 
	g¨øy
[
SIZE
];

22 
	$wrôe_d©a
()

24 
ªfs
 = 0;

25 
i
 = 0;

27 
ªfs
 = 0;Ñef†< 
NUM_REFS
-1;Ñefs++) {

28 
i
=0; i<
SIZE
; i+
PAGE_SIZE
) {

29 
¨øy
[
i
] = i;

32 
	}
}

35 
	$ªad_d©a
()

37 
i
 = 0;

39 
i
=0; i<
SIZE
; i+
PAGE_SIZE
) {

40 i‡(
¨øy
[
i
] != i) {

41 
	`¥ötf
("FAILEDáºay[%d] = %u !%d\n", 
i
, 
¨øy
[i], i);

42 
	`exô
(1);

45 
	}
}

49 
	$maö
()

51 
i
 = 0;

53 
i
=0; i<5; i++) {

54 
	`ˇŒ_Æl
();

55 
	`wrôe_d©a
();

56 
	`ˇŒ_Æl
();

57 
	`ªad_d©a
();

60 
	`¥ötf
("SUCCEEDED\n");

61 
	`exô
(0);

62 
	}
}

	@os161/user/uw-testbin/vm-funcs/vm-funcs.c

6 
ˇŒ_Æl_lo›
(
cou¡
);

7 
ˇŒ_Æl
();

10 
	#FUNCTION_LOOP
 (2)

	)

13 
	#PROTFUNC
(
num
Ë
func_
##
	`num
();

	)

14 
PROTFUNC
(0); PROTFUNC(1); PROTFUNC(2); PROTFUNC(3); PROTFUNC(4);

15 
PROTFUNC
(5); PROTFUNC(6); PROTFUNC(7); PROTFUNC(8); PROTFUNC(9);

16 
PROTFUNC
(10); PROTFUNC(11); PROTFUNC(12); PROTFUNC(13); PROTFUNC(14);

17 
PROTFUNC
(15); PROTFUNC(16); PROTFUNC(17); PROTFUNC(18); PROTFUNC(19);

18 
PROTFUNC
(20); PROTFUNC(21); PROTFUNC(22); PROTFUNC(23); PROTFUNC(24);

19 
PROTFUNC
(25); PROTFUNC(26); PROTFUNC(27); PROTFUNC(28); PROTFUNC(29);

20 
PROTFUNC
(30); PROTFUNC(31); PROTFUNC(32); PROTFUNC(33); PROTFUNC(34);

21 
PROTFUNC
(35); PROTFUNC(36); PROTFUNC(37); PROTFUNC(38); PROTFUNC(39);

22 
PROTFUNC
(40); PROTFUNC(41); PROTFUNC(42); PROTFUNC(43); PROTFUNC(44);

23 
PROTFUNC
(45); PROTFUNC(46); PROTFUNC(47); PROTFUNC(48); PROTFUNC(49);

24 
PROTFUNC
(50); PROTFUNC(51); PROTFUNC(52); PROTFUNC(53); PROTFUNC(54);

25 
PROTFUNC
(55); PROTFUNC(56); PROTFUNC(57); PROTFUNC(58); PROTFUNC(59);

26 
PROTFUNC
(60); PROTFUNC(61); PROTFUNC(62); PROTFUNC(63); PROTFUNC(64);

27 
PROTFUNC
(65); PROTFUNC(66); PROTFUNC(67); PROTFUNC(68); PROTFUNC(69);

28 
PROTFUNC
(70); PROTFUNC(71); PROTFUNC(72); PROTFUNC(73); PROTFUNC(74);

29 
PROTFUNC
(75); PROTFUNC(76); PROTFUNC(77); PROTFUNC(78); PROTFUNC(79);

30 
PROTFUNC
(80); PROTFUNC(81); PROTFUNC(82); PROTFUNC(83); PROTFUNC(84);

31 
PROTFUNC
(85); PROTFUNC(86); PROTFUNC(87); PROTFUNC(88); PROTFUNC(89);

32 
PROTFUNC
(90); PROTFUNC(91); PROTFUNC(92); PROTFUNC(93); PROTFUNC(94);

33 
PROTFUNC
(95); PROTFUNC(96); PROTFUNC(97); PROTFUNC(98); PROTFUNC(99);

34 
PROTFUNC
(100); PROTFUNC(101); PROTFUNC(102); PROTFUNC(103); PROTFUNC(104);

35 
PROTFUNC
(105); PROTFUNC(106); PROTFUNC(107); PROTFUNC(108); PROTFUNC(109);

36 
PROTFUNC
(110); PROTFUNC(111); PROTFUNC(112); PROTFUNC(113); PROTFUNC(114);

37 
PROTFUNC
(115); PROTFUNC(116); PROTFUNC(117); PROTFUNC(118); PROTFUNC(119);

38 
PROTFUNC
(120); PROTFUNC(121); PROTFUNC(122); PROTFUNC(123); PROTFUNC(124);

39 
PROTFUNC
(125); PROTFUNC(126); PROTFUNC(127); PROTFUNC(128); PROTFUNC(129);

40 
PROTFUNC
(130); PROTFUNC(131); PROTFUNC(132); PROTFUNC(133); PROTFUNC(134);

41 
PROTFUNC
(135); PROTFUNC(136); PROTFUNC(137); PROTFUNC(138); PROTFUNC(139);

42 
PROTFUNC
(140); PROTFUNC(141); PROTFUNC(142); PROTFUNC(143); PROTFUNC(144);

43 
PROTFUNC
(145); PROTFUNC(146); PROTFUNC(147); PROTFUNC(148); PROTFUNC(149);

44 
PROTFUNC
(150); PROTFUNC(151); PROTFUNC(152); PROTFUNC(153); PROTFUNC(154);

45 
PROTFUNC
(155); PROTFUNC(156); PROTFUNC(157); PROTFUNC(158); PROTFUNC(159);

46 
PROTFUNC
(160); PROTFUNC(161); PROTFUNC(162); PROTFUNC(163); PROTFUNC(164);

47 
PROTFUNC
(165); PROTFUNC(166); PROTFUNC(167); PROTFUNC(168); PROTFUNC(169);

48 
PROTFUNC
(170); PROTFUNC(171); PROTFUNC(172); PROTFUNC(173); PROTFUNC(174);

49 
PROTFUNC
(175); PROTFUNC(176); PROTFUNC(177); PROTFUNC(178); PROTFUNC(179);

50 
PROTFUNC
(180); PROTFUNC(181); PROTFUNC(182); PROTFUNC(183); PROTFUNC(184);

51 
PROTFUNC
(185); PROTFUNC(186); PROTFUNC(187); PROTFUNC(188); PROTFUNC(189);

52 
PROTFUNC
(190); PROTFUNC(191); PROTFUNC(192); PROTFUNC(193); PROTFUNC(194);

53 
PROTFUNC
(195); PROTFUNC(196); PROTFUNC(197); PROTFUNC(198); PROTFUNC(199);

54 
PROTFUNC
(200); PROTFUNC(201); PROTFUNC(202); PROTFUNC(203); PROTFUNC(204);

55 
PROTFUNC
(205); PROTFUNC(206); PROTFUNC(207); PROTFUNC(208); PROTFUNC(209);

56 
PROTFUNC
(210); PROTFUNC(211); PROTFUNC(212); PROTFUNC(213); PROTFUNC(214);

57 
PROTFUNC
(215); PROTFUNC(216); PROTFUNC(217); PROTFUNC(218); PROTFUNC(219);

58 
PROTFUNC
(220); PROTFUNC(221); PROTFUNC(222); PROTFUNC(223); PROTFUNC(224);

59 
PROTFUNC
(225); PROTFUNC(226); PROTFUNC(227); PROTFUNC(228); PROTFUNC(229);

60 
PROTFUNC
(230); PROTFUNC(231); PROTFUNC(232); PROTFUNC(233); PROTFUNC(234);

61 
PROTFUNC
(235); PROTFUNC(236); PROTFUNC(237); PROTFUNC(238); PROTFUNC(239);

62 
PROTFUNC
(240); PROTFUNC(241); PROTFUNC(242); PROTFUNC(243); PROTFUNC(244);

63 
PROTFUNC
(245); PROTFUNC(246); PROTFUNC(247); PROTFUNC(248); PROTFUNC(249);

64 
PROTFUNC
(250); PROTFUNC(251); PROTFUNC(252); PROTFUNC(253); PROTFUNC(254);

65 
PROTFUNC
(255); PROTFUNC(256); PROTFUNC(257); PROTFUNC(258); PROTFUNC(259);

66 
PROTFUNC
(260); PROTFUNC(261); PROTFUNC(262); PROTFUNC(263); PROTFUNC(264);

67 
PROTFUNC
(265); PROTFUNC(266); PROTFUNC(267); PROTFUNC(268); PROTFUNC(269);

68 
PROTFUNC
(270); PROTFUNC(271); PROTFUNC(272); PROTFUNC(273); PROTFUNC(274);

69 
PROTFUNC
(275); PROTFUNC(276); PROTFUNC(277); PROTFUNC(278); PROTFUNC(279);

70 
PROTFUNC
(280); PROTFUNC(281); PROTFUNC(282); PROTFUNC(283); PROTFUNC(284);

71 
PROTFUNC
(285); PROTFUNC(286); PROTFUNC(287); PROTFUNC(288); PROTFUNC(289);

72 
PROTFUNC
(290); PROTFUNC(291); PROTFUNC(292); PROTFUNC(293); PROTFUNC(294);

73 
PROTFUNC
(295); PROTFUNC(296); PROTFUNC(297); PROTFUNC(298); PROTFUNC(299);

79 
	#FUNC
(
num
) \

80 
func_
##
	`num
() \

82 
i
; \

83 vﬁ©ûê
l
 = 10; \

84 vﬁ©ûê
m
 = 11; \

85 vﬁ©ûê
n
 = 12; \

87 
i
=0; i<
FUNCTION_LOOP
; i++) { \

88 
l
 =Ü + 
m
 - 
n
 + 
i
; \

89 
m
 = 
l
 + m - 
n
 + 
i
; \

90 
n
 = 
l
 + 
m
 -Ç + 
i
; \

91 
l
 =Ü + 
m
 - 
n
 + 
i
; \

92 
m
 = 
l
 + m - 
n
 + 
i
; \

93 
n
 = 
l
 + 
m
 -Ç + 
i
; \

94 
l
 =Ü + 
m
 - 
n
 + 
i
; \

95 
m
 = 
l
 + m - 
n
 + 
i
; \

96 
n
 = 
l
 + 
m
 -Ç + 
i
; \

97 
l
 =Ü + 
m
 - 
n
 + 
i
; \

98 
m
 = 
l
 + m - 
n
 + 
i
; \

99 
n
 = 
l
 + 
m
 -Ç + 
i
; \

100 
l
 =Ü + 
m
 - 
n
 + 
i
; \

101 
m
 = 
l
 + m - 
n
 + 
i
; \

102 
n
 = 
l
 + 
m
 -Ç + 
i
; \

103 
l
 =Ü + 
m
 - 
n
 + 
i
; \

105 
i
=0; i<
FUNCTION_LOOP
; i++) { \

106 
m
 = 
l
 + m - 
n
 + 
i
; \

107 
l
 =Ü + 
m
 - 
n
 + 
i
; \

108 
n
 = 
l
 + 
m
 -Ç + 
i
; \

109 
m
 = 
l
 + m - 
n
 + 
i
; \

110 
m
 = 
l
 + m - 
n
 + 
i
; \

111 
l
 =Ü + 
m
 - 
n
 + 
i
; \

112 
n
 = 
l
 + 
m
 -Ç + 
i
; \

113 
m
 = 
l
 + m - 
n
 + 
i
; \

114 
l
 =Ü + 
m
 - 
n
 + 
i
; \

115 
n
 = 
l
 + 
m
 -Ç + 
i
; \

116 
m
 = 
l
 + m - 
n
 + 
i
; \

117 
l
 =Ü + 
m
 - 
n
 + 
i
; \

118 
n
 = 
l
 + 
m
 -Ç + 
i
; \

120 
i
=0; i<
FUNCTION_LOOP
; i++) { \

121 
n
 = 
l
 + 
m
 -Ç + 
i
; \

122 
m
 = 
l
 + m - 
n
 + 
i
; \

123 
l
 =Ü + 
m
 - 
n
 + 
i
; \

124 
n
 = 
l
 + 
m
 -Ç + 
i
; \

125 
m
 = 
l
 + m - 
n
 + 
i
; \

126 
l
 =Ü + 
m
 - 
n
 + 
i
; \

127 
n
 = 
l
 + 
m
 -Ç + 
i
; \

129 
i
=0; i<
FUNCTION_LOOP
; i++) { \

130 
l
 =Ü + 
m
 - 
n
 + 
i
; \

131 
n
 = 
l
 + 
m
 -Ç + 
i
; \

132 
m
 = 
l
 + m - 
n
 + 
i
; \

133 
l
 =Ü + 
m
 - 
n
 + 
i
; \

134 
n
 = 
l
 + 
m
 -Ç + 
i
; \

135 
m
 = 
l
 + m - 
n
 + 
i
; \

136 
l
 =Ü + 
m
 - 
n
 + 
i
; \

137 
m
 = 
l
 + m - 
n
 + 
i
; \

138 
l
 =Ü + 
m
 - 
n
 + 
i
; \

139 
n
 = 
l
 + 
m
 -Ç + 
i
; \

140 
m
 = 
l
 + m - 
n
 + 
i
; \

141 
l
 =Ü + 
m
 - 
n
 + 
i
; \

142 
n
 = 
l
 + 
m
 -Ç + 
i
; \

143 
m
 = 
l
 + m - 
n
 + 
i
; \

144 
l
 =Ü + 
m
 - 
n
 + 
i
; \

145 
m
 = 
l
 + m - 
n
 + 
i
; \

149  
l
 + 
m
 + 
n
; \

150 }

	)

154 
FUNC
(0); FUNC(1); FUNC(2); FUNC(3); FUNC(4);

155 
FUNC
(5); FUNC(6); FUNC(7); FUNC(8); FUNC(9);

156 
FUNC
(10); FUNC(11); FUNC(12); FUNC(13); FUNC(14);

157 
FUNC
(15); FUNC(16); FUNC(17); FUNC(18); FUNC(19);

158 
FUNC
(20); FUNC(21); FUNC(22); FUNC(23); FUNC(24);

159 
FUNC
(25); FUNC(26); FUNC(27); FUNC(28); FUNC(29);

160 
FUNC
(30); FUNC(31); FUNC(32); FUNC(33); FUNC(34);

161 
FUNC
(35); FUNC(36); FUNC(37); FUNC(38); FUNC(39);

162 
FUNC
(40); FUNC(41); FUNC(42); FUNC(43); FUNC(44);

163 
FUNC
(45); FUNC(46); FUNC(47); FUNC(48); FUNC(49);

164 
FUNC
(50); FUNC(51); FUNC(52); FUNC(53); FUNC(54);

165 
FUNC
(55); FUNC(56); FUNC(57); FUNC(58); FUNC(59);

166 
FUNC
(60); FUNC(61); FUNC(62); FUNC(63); FUNC(64);

167 
FUNC
(65); FUNC(66); FUNC(67); FUNC(68); FUNC(69);

168 
FUNC
(70); FUNC(71); FUNC(72); FUNC(73); FUNC(74);

169 
FUNC
(75); FUNC(76); FUNC(77); FUNC(78); FUNC(79);

170 
FUNC
(80); FUNC(81); FUNC(82); FUNC(83); FUNC(84);

171 
FUNC
(85); FUNC(86); FUNC(87); FUNC(88); FUNC(89);

172 
FUNC
(90); FUNC(91); FUNC(92); FUNC(93); FUNC(94);

173 
FUNC
(95); FUNC(96); FUNC(97); FUNC(98); FUNC(99);

174 
FUNC
(100); FUNC(101); FUNC(102); FUNC(103); FUNC(104);

175 
FUNC
(105); FUNC(106); FUNC(107); FUNC(108); FUNC(109);

176 
FUNC
(110); FUNC(111); FUNC(112); FUNC(113); FUNC(114);

177 
FUNC
(115); FUNC(116); FUNC(117); FUNC(118); FUNC(119);

178 
FUNC
(120); FUNC(121); FUNC(122); FUNC(123); FUNC(124);

179 
FUNC
(125); FUNC(126); FUNC(127); FUNC(128); FUNC(129);

180 
FUNC
(130); FUNC(131); FUNC(132); FUNC(133); FUNC(134);

181 
FUNC
(135); FUNC(136); FUNC(137); FUNC(138); FUNC(139);

182 
FUNC
(140); FUNC(141); FUNC(142); FUNC(143); FUNC(144);

183 
FUNC
(145); FUNC(146); FUNC(147); FUNC(148); FUNC(149);

184 
FUNC
(150); FUNC(151); FUNC(152); FUNC(153); FUNC(154);

185 
FUNC
(155); FUNC(156); FUNC(157); FUNC(158); FUNC(159);

186 
FUNC
(160); FUNC(161); FUNC(162); FUNC(163); FUNC(164);

187 
FUNC
(165); FUNC(166); FUNC(167); FUNC(168); FUNC(169);

188 
FUNC
(170); FUNC(171); FUNC(172); FUNC(173); FUNC(174);

189 
FUNC
(175); FUNC(176); FUNC(177); FUNC(178); FUNC(179);

190 
FUNC
(180); FUNC(181); FUNC(182); FUNC(183); FUNC(184);

191 
FUNC
(185); FUNC(186); FUNC(187); FUNC(188); FUNC(189);

192 
FUNC
(190); FUNC(191); FUNC(192); FUNC(193); FUNC(194);

193 
FUNC
(195); FUNC(196); FUNC(197); FUNC(198); FUNC(199);

194 
FUNC
(200); FUNC(201); FUNC(202); FUNC(203); FUNC(204);

195 
FUNC
(205); FUNC(206); FUNC(207); FUNC(208); FUNC(209);

196 
FUNC
(210); FUNC(211); FUNC(212); FUNC(213); FUNC(214);

197 
FUNC
(215); FUNC(216); FUNC(217); FUNC(218); FUNC(219);

198 
FUNC
(220); FUNC(221); FUNC(222); FUNC(223); FUNC(224);

199 
FUNC
(225); FUNC(226); FUNC(227); FUNC(228); FUNC(229);

200 
FUNC
(230); FUNC(231); FUNC(232); FUNC(233); FUNC(234);

201 
FUNC
(235); FUNC(236); FUNC(237); FUNC(238); FUNC(239);

202 
FUNC
(240); FUNC(241); FUNC(242); FUNC(243); FUNC(244);

203 
FUNC
(245); FUNC(246); FUNC(247); FUNC(248); FUNC(249);

204 
FUNC
(250); FUNC(251); FUNC(252); FUNC(253); FUNC(254);

205 
FUNC
(255); FUNC(256); FUNC(257); FUNC(258); FUNC(259);

206 
FUNC
(260); FUNC(261); FUNC(262); FUNC(263); FUNC(264);

207 
FUNC
(265); FUNC(266); FUNC(267); FUNC(268); FUNC(269);

208 
FUNC
(270); FUNC(271); FUNC(272); FUNC(273); FUNC(274);

209 
FUNC
(275); FUNC(276); FUNC(277); FUNC(278); FUNC(279);

210 
FUNC
(280); FUNC(281); FUNC(282); FUNC(283); FUNC(284);

211 
FUNC
(285); FUNC(286); FUNC(287); FUNC(288); FUNC(289);

212 
FUNC
(290); FUNC(291); FUNC(292); FUNC(293); FUNC(294);

213 
FUNC
(295); FUNC(296); FUNC(297); FUNC(298); FUNC(299);

215 
	#CALLFUNC
(
i
) \

216 
func_
##
	`i
()

	)

219 
	$ˇŒ_Æl
()

221 
	`CALLFUNC
(0); CALLFUNC(1); CALLFUNC(2); CALLFUNC(3); CALLFUNC(4);

222 
	`CALLFUNC
(5); CALLFUNC(6); CALLFUNC(7); CALLFUNC(8); CALLFUNC(9);

223 
	`CALLFUNC
(10); CALLFUNC(11); CALLFUNC(12); CALLFUNC(13); CALLFUNC(14);

224 
	`CALLFUNC
(15); CALLFUNC(16); CALLFUNC(17); CALLFUNC(18); CALLFUNC(19);

225 
	`CALLFUNC
(20); CALLFUNC(21); CALLFUNC(22); CALLFUNC(23); CALLFUNC(24);

226 
	`CALLFUNC
(25); CALLFUNC(26); CALLFUNC(27); CALLFUNC(28); CALLFUNC(29);

227 
	`CALLFUNC
(30); CALLFUNC(31); CALLFUNC(32); CALLFUNC(33); CALLFUNC(34);

228 
	`CALLFUNC
(35); CALLFUNC(36); CALLFUNC(37); CALLFUNC(38); CALLFUNC(39);

229 
	`CALLFUNC
(40); CALLFUNC(41); CALLFUNC(42); CALLFUNC(43); CALLFUNC(44);

230 
	`CALLFUNC
(45); CALLFUNC(46); CALLFUNC(47); CALLFUNC(48); CALLFUNC(49);

231 
	`CALLFUNC
(50); CALLFUNC(51); CALLFUNC(52); CALLFUNC(53); CALLFUNC(54);

232 
	`CALLFUNC
(55); CALLFUNC(56); CALLFUNC(57); CALLFUNC(58); CALLFUNC(59);

233 
	`CALLFUNC
(60); CALLFUNC(61); CALLFUNC(62); CALLFUNC(63); CALLFUNC(64);

234 
	`CALLFUNC
(65); CALLFUNC(66); CALLFUNC(67); CALLFUNC(68); CALLFUNC(69);

235 
	`CALLFUNC
(70); CALLFUNC(71); CALLFUNC(72); CALLFUNC(73); CALLFUNC(74);

236 
	`CALLFUNC
(75); CALLFUNC(76); CALLFUNC(77); CALLFUNC(78); CALLFUNC(79);

237 
	`CALLFUNC
(80); CALLFUNC(81); CALLFUNC(82); CALLFUNC(83); CALLFUNC(84);

238 
	`CALLFUNC
(85); CALLFUNC(86); CALLFUNC(87); CALLFUNC(88); CALLFUNC(89);

239 
	`CALLFUNC
(90); CALLFUNC(91); CALLFUNC(92); CALLFUNC(93); CALLFUNC(94);

240 
	`CALLFUNC
(95); CALLFUNC(96); CALLFUNC(97); CALLFUNC(98); CALLFUNC(99);

241 
	`CALLFUNC
(100); CALLFUNC(101); CALLFUNC(102); CALLFUNC(103); CALLFUNC(104);

242 
	`CALLFUNC
(105); CALLFUNC(106); CALLFUNC(107); CALLFUNC(108); CALLFUNC(109);

243 
	`CALLFUNC
(110); CALLFUNC(111); CALLFUNC(112); CALLFUNC(113); CALLFUNC(114);

244 
	`CALLFUNC
(115); CALLFUNC(116); CALLFUNC(117); CALLFUNC(118); CALLFUNC(119);

245 
	`CALLFUNC
(120); CALLFUNC(121); CALLFUNC(122); CALLFUNC(123); CALLFUNC(124);

246 
	`CALLFUNC
(125); CALLFUNC(126); CALLFUNC(127); CALLFUNC(128); CALLFUNC(129);

247 
	`CALLFUNC
(130); CALLFUNC(131); CALLFUNC(132); CALLFUNC(133); CALLFUNC(134);

248 
	`CALLFUNC
(135); CALLFUNC(136); CALLFUNC(137); CALLFUNC(138); CALLFUNC(139);

249 
	`CALLFUNC
(140); CALLFUNC(141); CALLFUNC(142); CALLFUNC(143); CALLFUNC(144);

250 
	`CALLFUNC
(145); CALLFUNC(146); CALLFUNC(147); CALLFUNC(148); CALLFUNC(149);

251 
	`CALLFUNC
(150); CALLFUNC(151); CALLFUNC(152); CALLFUNC(153); CALLFUNC(154);

252 
	`CALLFUNC
(155); CALLFUNC(156); CALLFUNC(157); CALLFUNC(158); CALLFUNC(159);

253 
	`CALLFUNC
(160); CALLFUNC(161); CALLFUNC(162); CALLFUNC(163); CALLFUNC(164);

254 
	`CALLFUNC
(165); CALLFUNC(166); CALLFUNC(167); CALLFUNC(168); CALLFUNC(169);

255 
	`CALLFUNC
(170); CALLFUNC(171); CALLFUNC(172); CALLFUNC(173); CALLFUNC(174);

256 
	`CALLFUNC
(175); CALLFUNC(176); CALLFUNC(177); CALLFUNC(178); CALLFUNC(179);

257 
	`CALLFUNC
(180); CALLFUNC(181); CALLFUNC(182); CALLFUNC(183); CALLFUNC(184);

258 
	`CALLFUNC
(185); CALLFUNC(186); CALLFUNC(187); CALLFUNC(188); CALLFUNC(189);

259 
	`CALLFUNC
(190); CALLFUNC(191); CALLFUNC(192); CALLFUNC(193); CALLFUNC(194);

260 
	`CALLFUNC
(195); CALLFUNC(196); CALLFUNC(197); CALLFUNC(198); CALLFUNC(199);

261 
	`CALLFUNC
(200); CALLFUNC(201); CALLFUNC(202); CALLFUNC(203); CALLFUNC(204);

262 
	`CALLFUNC
(205); CALLFUNC(206); CALLFUNC(207); CALLFUNC(208); CALLFUNC(209);

263 
	`CALLFUNC
(210); CALLFUNC(211); CALLFUNC(212); CALLFUNC(213); CALLFUNC(214);

264 
	`CALLFUNC
(215); CALLFUNC(216); CALLFUNC(217); CALLFUNC(218); CALLFUNC(219);

265 
	`CALLFUNC
(220); CALLFUNC(221); CALLFUNC(222); CALLFUNC(223); CALLFUNC(224);

266 
	`CALLFUNC
(225); CALLFUNC(226); CALLFUNC(227); CALLFUNC(228); CALLFUNC(229);

267 
	`CALLFUNC
(230); CALLFUNC(231); CALLFUNC(232); CALLFUNC(233); CALLFUNC(234);

268 
	`CALLFUNC
(235); CALLFUNC(236); CALLFUNC(237); CALLFUNC(238); CALLFUNC(239);

269 
	`CALLFUNC
(240); CALLFUNC(241); CALLFUNC(242); CALLFUNC(243); CALLFUNC(244);

270 
	`CALLFUNC
(245); CALLFUNC(246); CALLFUNC(247); CALLFUNC(248); CALLFUNC(249);

271 
	`CALLFUNC
(250); CALLFUNC(251); CALLFUNC(252); CALLFUNC(253); CALLFUNC(254);

272 
	`CALLFUNC
(255); CALLFUNC(256); CALLFUNC(257); CALLFUNC(258); CALLFUNC(259);

273 
	`CALLFUNC
(260); CALLFUNC(261); CALLFUNC(262); CALLFUNC(263); CALLFUNC(264);

274 
	`CALLFUNC
(265); CALLFUNC(266); CALLFUNC(267); CALLFUNC(268); CALLFUNC(269);

275 
	`CALLFUNC
(270); CALLFUNC(271); CALLFUNC(272); CALLFUNC(273); CALLFUNC(274);

276 
	`CALLFUNC
(275); CALLFUNC(276); CALLFUNC(277); CALLFUNC(278); CALLFUNC(279);

277 
	`CALLFUNC
(280); CALLFUNC(281); CALLFUNC(282); CALLFUNC(283); CALLFUNC(284);

278 
	`CALLFUNC
(285); CALLFUNC(286); CALLFUNC(287); CALLFUNC(288); CALLFUNC(289);

279 
	`CALLFUNC
(290); CALLFUNC(291); CALLFUNC(292); CALLFUNC(293); CALLFUNC(294);

280 
	`CALLFUNC
(295); CALLFUNC(296); CALLFUNC(297); CALLFUNC(298); CALLFUNC(299);

281 
	}
}

284 
	$ˇŒ_Æl_lo›
(
cou¡
)

286 
i
 = 0;

287 
i
=0; i<
cou¡
; i++) {

288 
	`ˇŒ_Æl
();

290 
	}
}

	@os161/user/uw-testbin/vm-mix1-exec/vm-mix1-exec.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

6 *
	g¨gv
[2] = { (*)"vm-mix1", 
NULL
 };

9 
	$maö
()

11 
	`execv
("vm-mix1/vm-mix1", 
¨gv
);

12 
	`exô
(0);

13 
	}
}

	@os161/user/uw-testbin/vm-mix1-fork/vm-mix1-fork.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

15 
ˇŒ_Æl
();

16 
wrôe_d©a
(
¨øy
[], 
°¨t
);

17 
ªad_d©a
(
¨øy
[], 
°¨t
, c⁄° *
¨øy_«me
);

18 
¥öt_d©a
(
¨øy
[]);

19 
do_w‹k
(
°¨t
);

21 
	#PAGE_SIZE
 (4096)

	)

22 
	#DATA_BYTES
 (3 * 1024 * 1024)

	)

23 
	#PAGES
 (
DATA_BYTES
 / 
PAGE_SIZE
)

	)

24 
	#ELEM_SIZE
 (())

	)

25 
	#ELEMS
 ((
PAGE_SIZE
 * 
PAGES
 / ()Ë/ 2)

	)

26 
	#ELEMS_PER_PAGE
 (
PAGE_SIZE
 / 
ELEM_SIZE
)

	)

27 
	#NUM_REFS
 (2)

	)

29 
	#STACK_PAGES_USED
 (9)

	)

30 
	#STACK_ARRAY_ELEMS
 (
PAGE_SIZE
 * 
STACK_PAGES_USED
 / ())

	)

32 
	göô
[] = {

41 
	#INIT_ARRAY_ELEMS
 ((
öô
Ë/ ())

	)

43 
	g¨øy1
[
ELEMS
];

44 
	g¨øy2
[
ELEMS
];

47 
	$wrôe_d©a
(
¨øy
[], 
°¨t
)

49 
ªf
 = 0;

50 
i
 = 0;

52 
ªf
 = 0;Ñe‡< 
NUM_REFS
-1;Ñef++) {

53 
i
=0; i<
ELEMS
; i++) {

54 
¨øy
[
i
] = 
°¨t
 + (ò/ 
ELEMS_PER_PAGE
);

57 
	}
}

60 
	$ªad_d©a
(
¨øy
[], 
°¨t
, c⁄° *
¨øy_«me
)

62 
ªf
 = 0;

63 
i
 = 0;

65 
ªf
 = 0;Ñe‡< 
NUM_REFS
-1;Ñef++) {

66 
i
=0; i<
ELEMS
; i++) {

67 i‡(
¨øy
[
i
] !(
°¨t
 + (ò/ 
ELEMS_PER_PAGE
))) {

68 
	`¥ötf
("FAILED in file %sátÜine %d %s[%d] = %u != %uÑef = %d\n",

69 
__FILE__
, 
__LINE__
, 
¨øy_«me
, 
i
, 
¨øy
[i], i, 
ªf
+1);

70 
	`exô
(1);

74 
	}
}

77 
	$¥öt_d©a
(
¨øy
[])

79 
i
 = 0;

80 
cou¡
 = 0;

82 
i
=0; i<
ELEMS
; i+(
ELEMS_PER_PAGE
)) {

83 
	`¥ötf
("[%10u] = %10u ", 
i
, 
¨øy
[i]);

84 i‡(((
cou¡
+1) % 4) == 0) {

85 
	`¥ötf
("\n");

87 
cou¡
++;

89 
	`¥ötf
("\n");

90 
	}
}

93 
	$do_w‹k
(
°¨t
)

95 
°ack_¨øy
[
STACK_ARRAY_ELEMS
];

96 
i
 = 0;

97 
¨øy1_°¨t
 = 
°¨t
;

98 
¨øy2_°¨t
 = 
°¨t
 + (
ELEMS
 / (
ELEMS_PER_PAGE
)) + 10;

100 
	`¥ötf
("Checkög unöôülizedáºay1Öid = %d\n", 
	`gëpid
());

102 
i
=0; i<
ELEMS
; i++) {

103 i‡(
¨øy1
[
i
] != 0) {

104 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay1[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy1
[i], 0);

105 
	`exô
(1);

109 
	`¥ötf
("Checkög unöôülizedáºay2Öid = %d\n", 
	`gëpid
());

111 
i
=0; i<
ELEMS
; i++) {

112 i‡(
¨øy2
[
i
] != 0) {

113 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay2[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy2
[i], 0);

114 
	`exô
(1);

118 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

119 
°ack_¨øy
[
i
] = i * 1000;

122 
i
=0; i<2; i++) {

123 
	`ˇŒ_Æl
();

124 
	`wrôe_d©a
(
¨øy1
, 
¨øy1_°¨t
);

125 
	`ˇŒ_Æl
();

126 
	`¥ötf
("Checkög inôülizedáºay1Öid = %d\n", 
	`gëpid
());

127 
	`ªad_d©a
(
¨øy1
, 
¨øy1_°¨t
, "array1");

131 
	`¥ötf
("Checkög inôülizedáºay2ágaöÖid = %d\n", 
	`gëpid
());

132 
i
=0; i<
ELEMS
; i++) {

133 i‡(
¨øy2
[
i
] != 0) {

134 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay2[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy2
[i], 0);

135 
	`exô
(1);

139 
	`¥ötf
("Checkög inôülized sèck_¨øyÖid = %d\n", 
	`gëpid
());

140 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

141 i‡(
°ack_¨øy
[
i
] != i * 1000) {

142 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: sèck_¨øy[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
°ack_¨øy
[i], i);

143 
	`exô
(1);

147 
	`¥ötf
("Checkög inôülized inôÖid = %d\n", 
	`gëpid
());

149 
i
=0; i<
INIT_ARRAY_ELEMS
; i++) {

150 i‡(
öô
[
i
] != i) {

151 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: inô[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
öô
[i], i);

152 
	`exô
(1);

156 
i
=0; i<2; i++) {

157 
	`ˇŒ_Æl
();

158 
	`wrôe_d©a
(
¨øy2
, 
¨øy2_°¨t
);

159 
	`ˇŒ_Æl
();

160 
	`¥ötf
("Checkög inôülizedáºay2Öid = %d\n", 
	`gëpid
());

161 
	`ªad_d©a
(
¨øy2
, 
¨øy2_°¨t
, "array2");

164 
	`¥ötf
("Checkög inôülized sèck_¨øyÖid = %d\n", 
	`gëpid
());

165 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

166 i‡(
°ack_¨øy
[
i
] != i * 1000) {

167 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: sèck_¨øy[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
°ack_¨øy
[i], i);

168 
	`exô
(1);

173 
	`¥ötf
("Checkög inôülized inôÖid = %d\n", 
	`gëpid
());

174 
i
=0; i<
INIT_ARRAY_ELEMS
; i++) {

175 i‡(
öô
[
i
] != i) {

176 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: inô[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
öô
[i], i);

177 
	`exô
(1);

182 
	`¥ötf
("Checkög inôülizedáºay1 f‹Åhêœ°Åimêpid = %d\n", 
	`gëpid
());

183 
	`ªad_d©a
(
¨øy1
, 
¨øy1_°¨t
, "array1");

184 
	`¥ötf
("Checkög inôülizedáºay2 f‹Åhêœ°Åimêpid = %d\n", 
	`gëpid
());

185 
	`ªad_d©a
(
¨øy2
, 
¨øy2_°¨t
, "array2");

188 
	`¥ötf
("Pid = %d SUCCEEDED\n", 
	`gëpid
());

189 
	}
}

192 
	$maö
()

194 
pid
 = 0;

195 
rc
 = 0;

196 
°©us
 = 0;

198 #ifde‡
DEBUG


199 
	`¥ötf
("PAGE_SIZE = %d\n", 
PAGE_SIZE
);

200 
	`¥ötf
("DATA_BYTES = %d\n", 
DATA_BYTES
);

201 
	`¥ötf
("ELEMS = %d\n", 
ELEMS
);

202 
	`¥ötf
("ELEMS_PER_PAGE = %d\n", 
ELEMS_PER_PAGE
);

203 
	`¥ötf
("PAGES = %d\n", 
PAGES
);

204 
	`¥ötf
("AºayÉÀmít†%d\n", 
ELEMS
);

205 
	`¥ötf
("Page†≥∏¨øy = %d\n", ((
ELEMS
 * ()Ë/ 
PAGE_SIZE
));

208 
pid
 = 
	`f‹k
();

209 i‡(
pid
 < 0) {

210 
	`¥ötf
("UnableÅo fork\n");

211 
	`exô
(1);

214 i‡(
pid
 == 0) {

215 
	`¥ötf
("ChûdÖid = %d cÆlög do_w‹k\n", 
	`gëpid
());

216 
	`do_w‹k
(20);

217 #ifde‡
DEBUG_CHILD


218 
	`¥ötf
("array 1\n");

219 
	`¥öt_d©a
(
¨øy1
);

220 
	`¥ötf
("array 2\n");

221 
	`¥öt_d©a
(
¨øy2
);

223 
	`exô
(0);

226 
	`¥ötf
("P¨íàpid = %d cÆlög do_w‹k\n", 
	`gëpid
());

227 
	`do_w‹k
(1);

228 #ifde‡
DEBUG_PARENT


229 
	`¥ötf
("array 1\n");

230 
	`¥öt_d©a
(
¨øy1
);

231 
	`¥ötf
("array 2\n");

232 
	`¥öt_d©a
(
¨øy2
);

234 
rc
 = 
	`waôpid
(
pid
, &
°©us
, 0);

235 
	`exô
(0);

236 
	}
}

	@os161/user/uw-testbin/vm-mix1/vm-mix1.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

13 
ˇŒ_Æl
();

14 
wrôe_d©a
(
¨øy
[], 
°¨t
);

15 
ªad_d©a
(
¨øy
[], 
°¨t
, c⁄° *
¨øy_«me
);

16 
¥öt_d©a
(
¨øy
[]);

17 
do_w‹k
(
°¨t
);

19 
	#PAGE_SIZE
 (4096)

	)

20 
	#DATA_BYTES
 (3 * 1024 * 1024)

	)

21 
	#PAGES
 (
DATA_BYTES
 / 
PAGE_SIZE
)

	)

22 
	#ELEM_SIZE
 (())

	)

23 
	#ELEMS
 ((
PAGE_SIZE
 * 
PAGES
 / ()Ë/ 2)

	)

24 
	#ELEMS_PER_PAGE
 (
PAGE_SIZE
 / 
ELEM_SIZE
)

	)

25 
	#NUM_REFS
 (2)

	)

27 
	#STACK_PAGES_USED
 (9)

	)

28 
	#STACK_ARRAY_ELEMS
 (
PAGE_SIZE
 * 
STACK_PAGES_USED
 / ())

	)

30 
	göô
[] = {

39 
	#INIT_ARRAY_ELEMS
 ((
öô
Ë/ ())

	)

41 
	g¨øy1
[
ELEMS
];

42 
	g¨øy2
[
ELEMS
];

45 
	$wrôe_d©a
(
¨øy
[], 
°¨t
)

47 
ªf
 = 0;

48 
i
 = 0;

50 
ªf
 = 0;Ñe‡< 
NUM_REFS
-1;Ñef++) {

51 
i
=0; i<
ELEMS
; i++) {

52 
¨øy
[
i
] = 
°¨t
 + (ò/ 
ELEMS_PER_PAGE
);

55 
	}
}

58 
	$ªad_d©a
(
¨øy
[], 
°¨t
, c⁄° *
¨øy_«me
)

60 
ªf
 = 0;

61 
i
 = 0;

63 
ªf
 = 0;Ñe‡< 
NUM_REFS
-1;Ñef++) {

64 
i
=0; i<
ELEMS
; i++) {

65 i‡(
¨øy
[
i
] !(
°¨t
 + (ò/ 
ELEMS_PER_PAGE
))) {

66 
	`¥ötf
("FAILED in file %sátÜine %d %s[%d] = %u != %uÑef = %d\n",

67 
__FILE__
, 
__LINE__
, 
¨øy_«me
, 
i
, 
¨øy
[i], i, 
ªf
+1);

68 
	`exô
(1);

72 
	}
}

75 
	$¥öt_d©a
(
¨øy
[])

77 
i
 = 0;

78 
cou¡
 = 0;

80 
i
=0; i<
ELEMS
; i+(
ELEMS_PER_PAGE
)) {

81 
	`¥ötf
("[%10u] = %10u ", 
i
, 
¨øy
[i]);

82 i‡(((
cou¡
+1) % 4) == 0) {

83 
	`¥ötf
("\n");

85 
cou¡
++;

87 
	`¥ötf
("\n");

88 
	}
}

91 
	$do_w‹k
(
°¨t
)

93 
°ack_¨øy
[
STACK_ARRAY_ELEMS
];

94 
i
 = 0;

95 
¨øy1_°¨t
 = 
°¨t
;

96 
¨øy2_°¨t
 = 
°¨t
 + (
ELEMS
 / (
ELEMS_PER_PAGE
)) + 10;

98 
	`¥ötf
("Checking uninitializedárray1\n");

100 
i
=0; i<
ELEMS
; i++) {

101 i‡(
¨øy1
[
i
] != 0) {

102 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay1[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy1
[i], 0);

103 
	`exô
(1);

107 
	`¥ötf
("Checking uninitializedárray2\n");

109 
i
=0; i<
ELEMS
; i++) {

110 i‡(
¨øy2
[
i
] != 0) {

111 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay2[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy2
[i], 0);

112 
	`exô
(1);

116 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

117 
°ack_¨øy
[
i
] = i * 1000;

120 
i
=0; i<2; i++) {

121 
	`ˇŒ_Æl
();

122 
	`wrôe_d©a
(
¨øy1
, 
¨øy1_°¨t
);

123 
	`ˇŒ_Æl
();

124 
	`¥ötf
("Checking initializedárray1\n");

125 
	`ªad_d©a
(
¨øy1
, 
¨øy1_°¨t
, "array1");

129 
	`¥ötf
("Checking initializedárray2ágain\n");

130 
i
=0; i<
ELEMS
; i++) {

131 i‡(
¨øy2
[
i
] != 0) {

132 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay2[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy2
[i], 0);

133 
	`exô
(1);

137 
	`¥ötf
("Checking initialized stack_array\n");

138 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

139 i‡(
°ack_¨øy
[
i
] != i * 1000) {

140 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: sèck_¨øy[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
°ack_¨øy
[i], i);

141 
	`exô
(1);

145 
	`¥ötf
("Checking initialized init\n");

147 
i
=0; i<
INIT_ARRAY_ELEMS
; i++) {

148 i‡(
öô
[
i
] != i) {

149 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: inô[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
öô
[i], i);

150 
	`exô
(1);

154 
i
=0; i<2; i++) {

155 
	`ˇŒ_Æl
();

156 
	`wrôe_d©a
(
¨øy2
, 
¨øy2_°¨t
);

157 
	`ˇŒ_Æl
();

158 
	`¥ötf
("Checking initializedárray2\n");

159 
	`ªad_d©a
(
¨øy2
, 
¨øy2_°¨t
, "array2");

162 
	`¥ötf
("Checking initialized stack_array\n");

163 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

164 i‡(
°ack_¨øy
[
i
] != i * 1000) {

165 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: sèck_¨øy[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
°ack_¨øy
[i], i);

166 
	`exô
(1);

171 
	`¥ötf
("Checking initialized init\n");

172 
i
=0; i<
INIT_ARRAY_ELEMS
; i++) {

173 i‡(
öô
[
i
] != i) {

174 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: inô[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
öô
[i], i);

175 
	`exô
(1);

180 
	`¥ötf
("Checking initializedárray1 forÅheÜastÅime\n");

181 
	`ªad_d©a
(
¨øy1
, 
¨øy1_°¨t
, "array1");

182 
	`¥ötf
("Checking initializedárray2 forÅheÜastÅime\n");

183 
	`ªad_d©a
(
¨øy2
, 
¨øy2_°¨t
, "array2");

186 
	`¥ötf
("SUCCEEDED\n");

187 
	}
}

190 
	$maö
()

193 #ifde‡
DEBUG


194 
	`¥ötf
("PAGE_SIZE = %d\n", 
PAGE_SIZE
);

195 
	`¥ötf
("DATA_BYTES = %d\n", 
DATA_BYTES
);

196 
	`¥ötf
("ELEMS = %d\n", 
ELEMS
);

197 
	`¥ötf
("ELEMS_PER_PAGE = %d\n", 
ELEMS_PER_PAGE
);

198 
	`¥ötf
("PAGES = %d\n", 
PAGES
);

199 
	`¥ötf
("AºayÉÀmít†%d\n", 
ELEMS
);

200 
	`¥ötf
("Page†≥∏¨øy = %d\n", ((
ELEMS
 * ()Ë/ 
PAGE_SIZE
));

203 
	`do_w‹k
(1);

204 #ifde‡
DEBUG


205 
	`¥ötf
("array 1\n");

206 
	`¥öt_d©a
(
¨øy1
);

207 
	`¥ötf
("array 2\n");

208 
	`¥öt_d©a
(
¨øy2
);

210 
	`exô
(0);

211 
	}
}

	@os161/user/uw-testbin/vm-mix2/vm-mix2.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

13 
ˇŒ_Æl_lo›
(
cou¡
);

14 
wrôe_d©a
(
¨øy
[], 
°¨t
);

15 
ªad_d©a
(
¨øy
[], 
°¨t
, c⁄° *
¨øy_«me
);

16 
¥öt_d©a
(
¨øy
[]);

17 
do_w‹k
(
°¨t
);

19 
	#PAGE_SIZE
 (4096)

	)

20 
	#DATA_BYTES
 (3 * 1024 * 1024)

	)

21 
	#PAGES
 (
DATA_BYTES
 / 
PAGE_SIZE
)

	)

22 
	#ELEM_SIZE
 (())

	)

23 
	#ELEMS
 ((
PAGE_SIZE
 * 
PAGES
 / ()Ë/ 2)

	)

24 
	#ELEMS_PER_PAGE
 (
PAGE_SIZE
 / 
ELEM_SIZE
)

	)

26 
	#TLB_SIZE
 (64)

	)

27 
	#LOCAL_REFS
 (
TLB_SIZE
 - 6Ë

	)

29 
	#STACK_PAGES_USED
 (9)

	)

30 
	#STACK_ARRAY_ELEMS
 (
PAGE_SIZE
 * 
STACK_PAGES_USED
 / ())

	)

32 
	#MIN
(
a
,
b
Ë(◊ < bË?á : b)

	)

34 
	göô
[] = {

43 
	#INIT_ARRAY_ELEMS
 ((
öô
Ë/ ())

	)

45 
	g¨øy1
[
ELEMS
];

46 
	g¨øy2
[
ELEMS
];

49 
	$wrôe_d©a
(
¨øy
[], 
°¨t
)

51 
i
 = 0;

52 
k
 = 0;

53 
íd
 = 0;

55 
k
=0; k<
ELEMS
; k +
PAGE_SIZE
) {

56 
íd
 = 
	`MIN
(
ELEMS
, (
k
 + (
LOCAL_REFS
 * 
ELEMS_PER_PAGE
)));

57 
i
=
k
; i<
íd
; i++) {

58 
¨øy
[
i
] = 
°¨t
 + (ò/ 
ELEMS_PER_PAGE
);

60 #ifde‡
DEBUG


61 
	`¥ötf
("‰om k = %dÅÿò%dÉnd %d\n", 
i
, 
k
, 
íd
);

64 
	}
}

67 
	$ªad_d©a
(
¨øy
[], 
°¨t
, c⁄° *
¨øy_«me
)

69 
i
 = 0;

70 
j
 = 
°¨t
;

72 
j
 = 
°¨t
;

73 
i
=0; i<
ELEMS
; i++) {

74 i‡(
¨øy
[
i
] !(
°¨t
 + (ò/ 
ELEMS_PER_PAGE
))) {

75 
	`¥ötf
("FAILED in file %sátÜine %d %s[%d] = %u != %u\n",

76 
__FILE__
, 
__LINE__
, 
¨øy_«me
, 
i
, 
¨øy
[i], i);

77 
	`exô
(1);

80 
	}
}

83 
	$¥öt_d©a
(
¨øy
[])

85 
i
 = 0;

86 
cou¡
 = 0;

88 
i
=0; i<
ELEMS
; i+(
ELEMS_PER_PAGE
)) {

89 
	`¥ötf
("[%10u] = %10u ", 
i
, 
¨øy
[i]);

90 i‡(((
cou¡
+1) % 4) == 0) {

91 
	`¥ötf
("\n");

93 
cou¡
++;

95 
	`¥ötf
("\n");

96 
	}
}

99 
	$do_w‹k
(
°¨t
)

101 
°ack_¨øy
[
STACK_ARRAY_ELEMS
];

102 
i
 = 0;

103 
¨øy1_°¨t
 = 
°¨t
;

104 
¨øy2_°¨t
 = 
°¨t
 + (
ELEMS
 / (
ELEMS_PER_PAGE
)) + 10;

106 
	`¥ötf
("Checking uninitializedárray1\n");

108 
i
=0; i<
ELEMS
; i++) {

109 i‡(
¨øy1
[
i
] != 0) {

110 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay1[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy1
[i], 0);

111 
	`exô
(1);

115 
	`¥ötf
("Checking uninitializedárray2\n");

117 
i
=0; i<
ELEMS
; i++) {

118 i‡(
¨øy2
[
i
] != 0) {

119 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay2[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy2
[i], 0);

120 
	`exô
(1);

124 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

125 
°ack_¨øy
[
i
] = i * 1000;

128 
i
=0; i<2; i++) {

129 
	`ˇŒ_Æl_lo›
(1);

130 
	`wrôe_d©a
(
¨øy1
, 
¨øy1_°¨t
);

131 
	`ˇŒ_Æl_lo›
(1);

132 
	`¥ötf
("Checking initializedárray1\n");

133 
	`ªad_d©a
(
¨øy1
, 
¨øy1_°¨t
, "array1");

137 
	`¥ötf
("Checking initializedárray2ágain\n");

138 
i
=0; i<
ELEMS
; i++) {

139 i‡(
¨øy2
[
i
] != 0) {

140 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay2[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy2
[i], 0);

141 
	`exô
(1);

145 
	`¥ötf
("Checking initialized stack_array\n");

146 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

147 i‡(
°ack_¨øy
[
i
] != i * 1000) {

148 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: sèck_¨øy[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
°ack_¨øy
[i], i);

149 
	`exô
(1);

153 
	`¥ötf
("Checking initialized init\n");

155 
i
=0; i<
INIT_ARRAY_ELEMS
; i++) {

156 i‡(
öô
[
i
] != i) {

157 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: inô[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
öô
[i], i);

158 
	`exô
(1);

162 
i
=0; i<2; i++) {

163 
	`ˇŒ_Æl_lo›
(20);

164 
	`wrôe_d©a
(
¨øy2
, 
¨øy2_°¨t
);

165 
	`ˇŒ_Æl_lo›
(20);

166 
	`¥ötf
("Checking initializedárray2\n");

167 
	`ªad_d©a
(
¨øy2
, 
¨øy2_°¨t
, "array2");

170 
	`¥ötf
("Checking initialized stack_array\n");

171 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

172 i‡(
°ack_¨øy
[
i
] != i * 1000) {

173 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: sèck_¨øy[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
°ack_¨øy
[i], i);

174 
	`exô
(1);

179 
	`¥ötf
("Checking initialized init\n");

180 
i
=0; i<
INIT_ARRAY_ELEMS
; i++) {

181 i‡(
öô
[
i
] != i) {

182 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: inô[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
öô
[i], i);

183 
	`exô
(1);

188 
	`¥ötf
("Checking initializedárray1 forÅheÜastÅime\n");

189 
	`ªad_d©a
(
¨øy1
, 
¨øy1_°¨t
, "array1");

190 
	`¥ötf
("Checking initializedárray2 forÅheÜastÅime\n");

191 
	`ªad_d©a
(
¨øy2
, 
¨øy2_°¨t
, "array2");

194 
	`¥ötf
("SUCCEEDED\n");

195 
	}
}

198 
	$maö
()

201 #ifde‡
DEBUG


202 
	`¥ötf
("PAGE_SIZE = %d\n", 
PAGE_SIZE
);

203 
	`¥ötf
("DATA_BYTES = %d\n", 
DATA_BYTES
);

204 
	`¥ötf
("ELEMS = %d\n", 
ELEMS
);

205 
	`¥ötf
("ELEMS_PER_PAGE = %d\n", 
ELEMS_PER_PAGE
);

206 
	`¥ötf
("PAGES = %d\n", 
PAGES
);

207 
	`¥ötf
("AºayÉÀmít†%d\n", 
ELEMS
);

208 
	`¥ötf
("Page†≥∏¨øy = %d\n", ((
ELEMS
 * ()Ë/ 
PAGE_SIZE
));

211 
	`do_w‹k
(1);

212 #ifde‡
DEBUG


213 
	`¥ötf
("array 1\n");

214 
	`¥öt_d©a
(
¨øy1
);

215 
	`¥ötf
("array 2\n");

216 
	`¥öt_d©a
(
¨øy2
);

218 
	`exô
(0);

219 
	}
}

	@os161/user/uw-testbin/vm-stack1/vm-stack1.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	#PAGE_SIZE
 (4096)

	)

5 
	#PAGES
 (9)

	)

6 
	#SIZE
 (
PAGE_SIZE
 * 
PAGES
 / ())

	)

9 
	$maö
()

11 
¨øy
[
SIZE
];

12 
i
 = 0;

14 
i
=0; i<
SIZE
; i++) {

15 
¨øy
[
i
] = i;

18 
i
=0; i<
SIZE
; i++) {

19 i‡(
¨øy
[
i
] != i) {

20 
	`¥ötf
("FAILEDáºay[%d] = %u !%d\n", 
i
, 
¨øy
[i], i);

21 
	`exô
(1);

25 
	`¥ötf
("SUCCEEDED\n");

26 
	`exô
(0);

27 
	}
}

	@os161/user/uw-testbin/vm-stack2/vm-stack2.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	#PAGE_SIZE
 (4096)

	)

5 
	#STACK_PAGES_USED
 (9)

	)

6 
	#STACK_ARRAY_ELEMS
 (
PAGE_SIZE
 * 
STACK_PAGES_USED
 / ())

	)

7 
	#UNINIT_PAGES
 (9)

	)

8 
	#UNINIT_ARRAY_ELEMS
 (
PAGE_SIZE
 * 
UNINIT_PAGES
 / ())

	)

10 
	gunöô
[
UNINIT_ARRAY_ELEMS
];

11 
	göô
[] = {

20 
	#INIT_ARRAY_ELEMS
 ((
öô
Ë/ ())

	)

23 
	$maö
()

25 
¨øy
[
STACK_ARRAY_ELEMS
];

26 
i
 = 0;

29 
i
=0; i<
UNINIT_ARRAY_ELEMS
; i++) {

30 i‡(
unöô
[
i
] != 0) {

31 
	`¥ötf
("FAILED unöô[%d] = %u !%d\n", 
i
, 
unöô
[i], 0);

32 
	`exô
(1);

37 
i
=0; i<
UNINIT_ARRAY_ELEMS
; i++) {

38 
unöô
[
i
] = i * 100;

42 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

43 
¨øy
[
i
] = i * 1000;

47 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

48 i‡(
¨øy
[
i
] != i * 1000) {

49 
	`¥ötf
("FAILEDáºay[%d] = %u !%d\n", 
i
, 
¨øy
[i], i);

50 
	`exô
(1);

55 
i
=0; i<
UNINIT_ARRAY_ELEMS
; i++) {

56 i‡(
unöô
[
i
] != i * 100) {

57 
	`¥ötf
("FAILED unöô[%d] = %u !%d\n", 
i
, 
unöô
[i], i);

58 
	`exô
(1);

63 
i
=0; i<
INIT_ARRAY_ELEMS
; i++) {

64 i‡(
öô
[
i
] != i) {

65 
	`¥ötf
("FAILED inô[%d] = %u !%d\n", 
i
, 
öô
[i], i);

66 
	`exô
(1);

70 
	`¥ötf
("SUCCEEDED\n");

71 
	`exô
(0);

72 
	}
}

	@os161/user/uw-testbin/widefork/widefork.c

17 
	~<uni°d.h
>

18 
	~<°dlib.h
>

19 
	~<°dio.h
>

20 
	~<îr.h
>

22 
dof‹k
();

23 
dowaô
(,);

26 
	$dof‹k
(
chûdnum
)

28 
pid_t
 
pid
;

29 
pid
 = 
	`f‹k
();

30 i‡(
pid
 < 0) {

31 
	`îrx
(1,"f‹k %d",
chûdnum
);

33 i‡(
pid
 == 0) {

35 
	`putch¨
('A'+
chûdnum
-1);

36 
	`putch¨
('\n');

37 
	`_exô
(
chûdnum
);

39 (
pid
);

40 
	}
}

43 
	$dowaô
(
chûdpid
, 
chûdnum
)

45 
rvÆ
;

46 i‡(
	`waôpid
(
chûdpid
,&
rvÆ
,0) < 0) {

47 
	`w¨nx
("waitpid 1");

50 i‡(
	`WIFEXITED
(
rvÆ
)) {

51 i‡((
	`WEXITSTATUS
(
rvÆ
)Ë=
chûdnum
) {

52 
	`putch¨
('a'+
chûdnum
-1);

53 
	`putch¨
('\n');

57 
	`putch¨
('x');

58 
	`putch¨
('\n');

60 
	}
}

63 
	$maö
(
¨gc
, *
¨gv
[])

65 ()
¨gc
;

66 ()
¨gv
;

67 
pid_t
 
pid1
,
pid2
,
pid3
;

68 
	`putch¨
('P');

69 
	`putch¨
('\n');

70 
pid1
 = 
	`dof‹k
(1);

71 
	`putch¨
('P');

72 
	`putch¨
('\n');

73 
pid2
 = 
	`dof‹k
(2);

74 
	`putch¨
('P');

75 
	`putch¨
('\n');

76 
pid3
 = 
	`dof‹k
(3);

77 
	`dowaô
(
pid1
,1);

78 
	`dowaô
(
pid2
,2);

79 
	`dowaô
(
pid3
,3);

81 
	}
}

	@os161/user/uw-testbin/writeread/writeread.c

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<as£π.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

10 
	~<f˙é.h
>

11 
	~"../lib/ã°utûs.h
"

13 
	#NUM_TIMES
 (1)

	)

14 
	#NUM_INTS
 (4*1024)

	)

17 
	$maö
()

19 
i
, 
rc
, 
fd
;

20 
wrôe_¨øy
[
NUM_INTS
];

21 
ªad_¨øy
[
NUM_INTS
];

27 
i
=0; i<
NUM_INTS
; i++) {

28 
wrôe_¨øy
[
i
] = i;

32 
fd
 = 
	`›í
("WRITE_READ_FILE", 
O_WRONLY
 | 
O_CREAT
);

33 
	`TEST_POSITIVE
(
fd
, "Open fileÇamed WRITE_READ_FILE failed\n");

35 
i
=0; i<
NUM_TIMES
; i++) {

36 
rc
 = 
	`wrôe
(
fd
, 
wrôe_¨øy
, (write_array));

37 
	`TEST_EQUAL
(
rc
, (
wrôe_¨øy
), "FailedÅo writeáll ofÅheárray");

40 
	`˛o£
(
fd
);

43 
fd
 = 
	`›í
("WRITE_READ_FILE", 
O_RDONLY
);

44 
	`TEST_POSITIVE
(
fd
, "Open fileÇamed WRITE_READ_FILE failed\n");

46 
i
=0; i<
NUM_TIMES
; i++) {

47 
rc
 = 
	`ªad
(
fd
, 
ªad_¨øy
, (read_array));

48 
	`TEST_EQUAL
(
rc
, (
ªad_¨øy
), "FailedÅoÑeadáll ofÅheárray");

49 
i
=0; i<
NUM_INTS
; i++) {

50 
	`TEST_EQUAL
(
ªad_¨øy
[
i
], 
wrôe_¨øy
[i], "ValueÑeadÇotÉqualÅo value written");

54 
	`TEST_STATS
();

56 
	`exô
(0);

57 
	}
}

	@os161/user/uw-testbin/xhog/xhog.c

35 
	~<°dio.h
>

38 
	$maö
()

40 vﬁ©ûê
i
;

42 
i
=0; i<50000; i++) {

43 i‡(
i
%10000 == 0) {

44 
	`putch¨
('x');

47 
	`putch¨
('\n');

50 
	}
}

	@os161/user/uw-testbin/yhog/yhog.c

35 
	~<°dio.h
>

38 
	$maö
()

40 vﬁ©ûê
i
;

42 
i
=0; i<50000; i++) {

43 i‡(
i
%10000 == 0) {

44 
	`putch¨
('y');

47 
	`putch¨
('\n');

50 
	}
}

	@os161/user/uw-testbin/zhog/zhog.c

35 
	~<°dio.h
>

38 
	$maö
()

40 vﬁ©ûê
i
;

42 
i
=0; i<50000; i++) {

43 i‡(
i
%10000 == 0) {

44 
	`putch¨
('z');

47 
	`putch¨
('\n');

50 
	}
}

	@test/os161/common/gcc-millicode/adddi3.c

38 
	~"l⁄gl⁄g.h
"

47 
	$__adddi3
(
a
, 
b
)

49 
uu
 
Ø
, 
bb
, 
sum
;

51 
Ø
.
Œ
 = 
a
;

52 
bb
.
Œ
 = 
b
;

53 
sum
.
ui
[
L
] = 
Ø
.ui[L] + 
bb
.ui[L];

54 
sum
.
ui
[
H
] = 
Ø
.ui[H] + 
bb
.ui[H] + (sum.ui[
L
] < bb.ui[L]);

55  (
sum
.
Œ
);

56 
	}
}

	@test/os161/common/gcc-millicode/anddi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__™ddi3
(
a
, 
b
)

46 
uu
 
Ø
, 
bb
;

48 
Ø
.
Œ
 = 
a
;

49 
bb
.
Œ
 = 
b
;

50 
Ø
.
ui
[0] &
bb
.ui[0];

51 
Ø
.
ui
[1] &
bb
.ui[1];

52  (
Ø
.
Œ
);

53 
	}
}

	@test/os161/common/gcc-millicode/ashldi3.c

38 
	~"l⁄gl⁄g.h
"

45 
	$__ashldi3
(
a
, 
shi·
)

47 
uu
 
Ø
;

49 i‡(
shi·
 == 0)

50 (
a
);

51 
Ø
.
Œ
 = 
a
;

52 i‡(
shi·
 >
INT_BITS
) {

53 
Ø
.
ui
[
H
] =áa.ui[
L
] << (
shi·
 - 
INT_BITS
);

54 
Ø
.
ui
[
L
] = 0;

56 
Ø
.
ui
[
H
] = (Ø.ui[H] << 
shi·
) |

57 (
Ø
.
ui
[
L
] >> (
INT_BITS
 - 
shi·
));

58 
Ø
.
ui
[
L
] <<
shi·
;

60  (
Ø
.
Œ
);

61 
	}
}

	@test/os161/common/gcc-millicode/ashrdi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__ashrdi3
(
a
, 
shi·
)

46 
uu
 
Ø
;

48 i‡(
shi·
 == 0)

49 (
a
);

50 
Ø
.
Œ
 = 
a
;

51 i‡(
shi·
 >
INT_BITS
) {

52 
s
;

62 
s
 = (
Ø
.
si
[
H
] >> (
INT_BITS
 - 1)) >> 1;

64 
Ø
.
ui
[
L
] =áa.
si
[
H
] >> (
shi·
 - 
INT_BITS
);

65 
Ø
.
ui
[
H
] = 
s
;

67 
Ø
.
ui
[
L
] = (Ø.ui[L] >> 
shi·
) |

68 (
Ø
.
ui
[
H
] << (
INT_BITS
 - 
shi·
));

70 
Ø
.
si
[
H
] >>
shi·
;

72  (
Ø
.
Œ
);

73 
	}
}

	@test/os161/common/gcc-millicode/cmpdi2.c

38 
	~"l⁄gl⁄g.h
"

46 
	$__cmpdi2
(
a
, 
b
)

48 
uu
 
Ø
, 
bb
;

50 
Ø
.
Œ
 = 
a
;

51 
bb
.
Œ
 = 
b
;

52  (
Ø
.
si
[
H
] < 
bb
.si[H] ? 0 :áa.si[H] > bb.si[H] ? 2 :

53 
Ø
.
ui
[
L
] < 
bb
.ui[L] ? 0 :áa.ui[L] > bb.ui[L] ? 2 : 1);

54 
	}
}

	@test/os161/common/gcc-millicode/divdi3.c

38 
	~"l⁄gl⁄g.h
"

45 
	$__divdi3
(
a
, 
b
)

47 
ua
, 
ub
, 
uq
;

48 
√g
 = 0;

50 
ua
 = 
a
;

51 
ub
 = 
b
;

53 i‡(
a
 < 0)

54 
ua
 = -ua, 
√g
 ^= 1;

55 i‡(
b
 < 0)

56 
ub
 = -ub, 
√g
 ^= 1;

58 
uq
 = 
	`__qdivªm
(
ua
, 
ub
, 
NULL
);

59 i‡(
√g
)

60 
uq
 = - uq;

61  
uq
;

62 
	}
}

	@test/os161/common/gcc-millicode/iordi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__i‹di3
(
a
, 
b
)

46 
uu
 
Ø
, 
bb
;

48 
Ø
.
Œ
 = 
a
;

49 
bb
.
Œ
 = 
b
;

50 
Ø
.
ui
[0] |
bb
.ui[0];

51 
Ø
.
ui
[1] |
bb
.ui[1];

52  (
Ø
.
Œ
);

53 
	}
}

	@test/os161/common/gcc-millicode/longlong.h

56 #i‡
deföed
(
_KERNEL
)

57 
	~<ty≥s.h
>

58 
	~<ídün.h
>

60 
	~<sys/ty≥s.h
>

61 
	~<sys/ídün.h
>

64 
	~<limôs.h
>

70 
	uuu
 {

71 
	mŒ
;

72 
	muŒ
;

73 
	msi
[2];

74 
	mui
[2];

80 #i‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


81 
	#H
 1

	)

82 
	#L
 0

	)

85 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


86 
	#H
 0

	)

87 
	#L
 1

	)

96 
	#LONGLONG_BITS
 ((Ë* 
CHAR_BIT
)

	)

97 
	#INT_BITS
 ((Ë* 
CHAR_BIT
)

	)

98 
	#HALF_BITS
 ((Ë* 
CHAR_BIT
 / 2)

	)

110 
	#HHALF
(
x
Ë(()(xË>> 
HALF_BITS
)

	)

111 
	#LHALF
(
x
Ë(()(xË& ((()1 << 
HALF_BITS
Ë- 1))

	)

112 
	#LHUP
(
x
Ë(()(xË<< 
HALF_BITS
)

	)

114 
__adddi3
 ( , );

115 
__™ddi3
 ( , );

116 
__ashldi3
 ( , );

117 
__ashrdi3
 ( , );

118 
__cmpdi2
 ( , );

119 
__divdi3
 ( , );

120 
__i‹di3
 ( , );

121 
__lshldi3
 ( , );

122 
__lshrdi3
 ( , );

123 
__moddi3
 ( , );

124 
__muldi3
 ( , );

125 
__√gdi2
 ( );

126 
__⁄e_cm∂di2
 ( );

127 
__subdi3
 ( , );

128 
__ucmpdi2
 (, );

129 
__udivdi3
 (, );

130 
__umoddi3
 (, );

131 
__x‹di3
 ( , );

133 #i‚de‡
_KERNEL


134 
__fixdfdi
 ();

135 
__fixsfdi
 ();

136 
__fixunsdfdi
 ();

137 
__fixunssfdi
 ();

138 
__Êﬂtdidf
 ();

139 
__Êﬂtdisf
 ();

140 
__Êﬂtunsdidf
();

143 
__qdivªm
 (, ,

	@test/os161/common/gcc-millicode/lshldi3.c

38 
	~"l⁄gl⁄g.h
"

45 
	$__lshldi3
(
a
, 
shi·
)

47 
uu
 
Ø
;

49 i‡(
shi·
 == 0)

50 (
a
);

51 
Ø
.
Œ
 = 
a
;

52 i‡(
shi·
 >
INT_BITS
) {

53 
Ø
.
ui
[
H
] =áa.ui[
L
] << (
shi·
 - 
INT_BITS
);

54 
Ø
.
ui
[
L
] = 0;

56 
Ø
.
ui
[
H
] = (Ø.ui[H] << 
shi·
) |

57 (
Ø
.
ui
[
L
] >> (
INT_BITS
 - 
shi·
));

58 
Ø
.
ui
[
L
] <<
shi·
;

60  (
Ø
.
Œ
);

61 
	}
}

	@test/os161/common/gcc-millicode/lshrdi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__lshrdi3
(
a
, 
shi·
)

46 
uu
 
Ø
;

48 i‡(
shi·
 == 0)

49 (
a
);

50 
Ø
.
Œ
 = 
a
;

51 i‡(
shi·
 >
INT_BITS
) {

52 
Ø
.
ui
[
L
] =áa.ui[
H
] >> (
shi·
 - 
INT_BITS
);

53 
Ø
.
ui
[
H
] = 0;

55 
Ø
.
ui
[
L
] = (Ø.ui[L] >> 
shi·
) |

56 (
Ø
.
ui
[
H
] << (
INT_BITS
 - 
shi·
));

57 
Ø
.
ui
[
H
] >>
shi·
;

59  (
Ø
.
Œ
);

60 
	}
}

	@test/os161/common/gcc-millicode/moddi3.c

38 
	~"l⁄gl⁄g.h
"

46 
	$__moddi3
(
a
, 
b
)

48 
ua
, 
ub
, 
ur
;

49 
√g
 = 0;

51 
ua
 = 
a
;

52 
ub
 = 
b
;

54 i‡(
a
 < 0)

55 
ua
 = -ua, 
√g
 ^= 1;

56 i‡(
b
 < 0)

57 
ub
 = -ub;

58 ()
	`__qdivªm
(
ua
, 
ub
, &
ur
);

59 i‡(
√g
)

60 
ur
 = -ur;

61  (
ur
);

62 
	}
}

	@test/os161/common/gcc-millicode/muldi3.c

38 
	~"l⁄gl⁄g.h
"

97 
__lmulq
(, );

100 
	$__muldi3
(
a
, 
b
)

102 
uu
 
u
, 
v
, 
low
, 
¥od
;

103 
high
, 
mid
, 
udiff
, 
vdiff
;

104 
√gÆl
, 
√gmid
;

105 
	#u1
 
u
.
ui
[
H
]

	)

106 
	#u0
 
u
.
ui
[
L
]

	)

107 
	#v1
 
v
.
ui
[
H
]

	)

108 
	#v0
 
v
.
ui
[
L
]

	)

115 i‡(
a
 >= 0)

116 
u
.
Œ
 = 
a
, 
√gÆl
 = 0;

118 
u
.
Œ
 = -
a
, 
√gÆl
 = 1;

119 i‡(
b
 >= 0)

120 
v
.
Œ
 = 
b
;

122 
v
.
Œ
 = -
b
, 
√gÆl
 ^= 1;

124 i‡(
u1
 =0 && 
v1
 == 0) {

130 
¥od
.
Œ
 = 
	`__lmulq
(
u0
, 
v0
);

138 
low
.
Œ
 = 
	`__lmulq
(
u0
, 
v0
);

140 i‡(
u1
 >
u0
)

141 
√gmid
 = 0, 
udiff
 = 
u1
 - 
u0
;

143 
√gmid
 = 1, 
udiff
 = 
u0
 - 
u1
;

144 i‡(
v0
 >
v1
)

145 
vdiff
 = 
v0
 - 
v1
;

147 
vdiff
 = 
v1
 - 
v0
, 
√gmid
 ^= 1;

148 
mid
 = 
udiff
 * 
vdiff
;

150 
high
 = 
u1
 * 
v1
;

155 
¥od
.
ui
[
H
] = 
high
 + (
√gmid
 ? -
mid
 : midË+ 
low
.ui[
L
] +

156 
low
.
ui
[
H
];

157 
¥od
.
ui
[
L
] = 
low
.ui[L];

159  (
√gÆl
 ? -
¥od
.
Œ
 :Örod.ll);

160 #unde‡
u1


161 #unde‡
u0


162 #unde‡
v1


163 #unde‡
v0


164 
	}
}

184 
	$__lmulq
(
u
, 
v
)

186 
u1
, 
u0
, 
v1
, 
v0
, 
udiff
, 
vdiff
, 
high
, 
mid
, 
low
;

187 
¥odh
, 
¥odl
, 
was
;

188 
uu
 
¥od
;

189 
√g
;

191 
u1
 = 
	`HHALF
(
u
);

192 
u0
 = 
	`LHALF
(
u
);

193 
v1
 = 
	`HHALF
(
v
);

194 
v0
 = 
	`LHALF
(
v
);

196 
low
 = 
u0
 * 
v0
;

199 i‡(
u1
 =0 && 
v1
 == 0)

200  (
low
);

202 i‡(
u1
 >
u0
)

203 
udiff
 = 
u1
 - 
u0
, 
√g
 = 0;

205 
udiff
 = 
u0
 - 
u1
, 
√g
 = 1;

206 i‡(
v0
 >
v1
)

207 
vdiff
 = 
v0
 - 
v1
;

209 
vdiff
 = 
v1
 - 
v0
, 
√g
 ^= 1;

210 
mid
 = 
udiff
 * 
vdiff
;

212 
high
 = 
u1
 * 
v1
;

215 
¥odh
 = 
high
 + 
	`HHALF
(high);

216 
¥odl
 = 
	`LHUP
(
high
);

219 i‡(
√g
) {

220 
was
 = 
¥odl
;

221 
¥odl
 -
	`LHUP
(
mid
);

222 
¥odh
 -
	`HHALF
(
mid
Ë+ (
¥odl
 > 
was
);

224 
was
 = 
¥odl
;

225 
¥odl
 +
	`LHUP
(
mid
);

226 
¥odh
 +
	`HHALF
(
mid
Ë+ (
¥odl
 < 
was
);

230 
was
 = 
¥odl
;

231 
¥odl
 +
	`LHUP
(
low
);

232 
¥odh
 +
	`HHALF
(
low
Ë+ (
¥odl
 < 
was
);

234 i‡((
¥odl
 +
low
) <Üow)

235 
¥odh
++;

238 
¥od
.
ui
[
H
] = 
¥odh
;

239 
¥od
.
ui
[
L
] = 
¥odl
;

240  (
¥od
.
Œ
);

241 
	}
}

	@test/os161/common/gcc-millicode/negdi2.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__√gdi2
(
a
)

46 
uu
 
Ø
, 
ªs
;

48 
Ø
.
Œ
 = 
a
;

49 
ªs
.
ui
[
L
] = -
Ø
.ui[L];

50 
ªs
.
ui
[
H
] = -
Ø
.ui[H] - (ªs.ui[
L
] > 0);

51  (
ªs
.
Œ
);

52 
	}
}

	@test/os161/common/gcc-millicode/notdi2.c

38 
	~"l⁄gl⁄g.h
"

45 
	$__⁄e_cm∂di2
(
a
)

47 
uu
 
Ø
;

49 
Ø
.
Œ
 = 
a
;

50 
Ø
.
ui
[0] = ~aa.ui[0];

51 
Ø
.
ui
[1] = ~aa.ui[1];

52  (
Ø
.
Œ
);

53 
	}
}

	@test/os161/common/gcc-millicode/qdivrem.c

43 
	~"l⁄gl⁄g.h
"

45 
	#B
 (()1 << 
HALF_BITS
Ë

	)

48 
	#COMBINE
(
a
, 
b
Ë((()◊Ë<< 
HALF_BITS
Ë| (b))

	)

51 #i‡
UINT_MAX
 =0xffffffffU && 
USHRT_MAX
 >= 0xffff

52 
	tdigô
;

54 
	tdigô
;

57 
shl
(
digô
 *
p
, 
Àn
, 
sh
);

68 
	$__qdivªm
(
uŒ
, 
vŒ
,

69 *
¨q
)

71 
uu
 
tmp
;

72 
digô
 *
u
, *
v
, *
q
;

73 
digô
 
v1
, 
v2
;

74 
qh©
, 
rh©
, 
t
;

75 
m
, 
n
, 
d
, 
j
, 
i
;

76 
digô
 
u•a˚
[5], 
v•a˚
[5], 
q•a˚
[5];

81 i‡(
vŒ
 == 0) {

83 vﬁ©ûêc⁄° 
zîo
 = 0;

85 
tmp
.
ui
[
H
] =Åmp.ui[
L
] = 1 / 
zîo
;

86 i‡(
¨q
)

87 *
¨q
 = 
uŒ
;

88  (
tmp
.
Œ
);

90 i‡(
uŒ
 < 
vŒ
) {

91 i‡(
¨q
)

92 *
¨q
 = 
uŒ
;

95 
u
 = &
u•a˚
[0];

96 
v
 = &
v•a˚
[0];

97 
q
 = &
q•a˚
[0];

112 
tmp
.
uŒ
 = ull;

113 
u
[0] = 0;

114 
u
[1] = (
digô
)
	`HHALF
(
tmp
.
ui
[
H
]);

115 
u
[2] = (
digô
)
	`LHALF
(
tmp
.
ui
[
H
]);

116 
u
[3] = (
digô
)
	`HHALF
(
tmp
.
ui
[
L
]);

117 
u
[4] = (
digô
)
	`LHALF
(
tmp
.
ui
[
L
]);

118 
tmp
.
uŒ
 = 
vŒ
;

119 
v
[1] = (
digô
)
	`HHALF
(
tmp
.
ui
[
H
]);

120 
v
[2] = (
digô
)
	`LHALF
(
tmp
.
ui
[
H
]);

121 
v
[3] = (
digô
)
	`HHALF
(
tmp
.
ui
[
L
]);

122 
v
[4] = (
digô
)
	`LHALF
(
tmp
.
ui
[
L
]);

123 
n
 = 4; 
v
[1] == 0; v++) {

124 i‡(--
n
 == 1) {

125 
rbj
;

126 
digô
 
q1
, 
q2
, 
q3
, 
q4
;

136 
t
 = 
v
[2];

137 
q1
 = (
digô
)(
u
[1] / 
t
);

138 
rbj
 = 
	`COMBINE
(
u
[1] % 
t
, u[2]);

139 
q2
 = (
digô
)(
rbj
 / 
t
);

140 
rbj
 = 
	`COMBINE
‘bj % 
t
, 
u
[3]);

141 
q3
 = (
digô
)(
rbj
 / 
t
);

142 
rbj
 = 
	`COMBINE
‘bj % 
t
, 
u
[4]);

143 
q4
 = (
digô
)(
rbj
 / 
t
);

144 i‡(
¨q
)

145 *
¨q
 = 
rbj
 % 
t
;

146 
tmp
.
ui
[
H
] = 
	`COMBINE
(
q1
, 
q2
);

147 
tmp
.
ui
[
L
] = 
	`COMBINE
(
q3
, 
q4
);

148  (
tmp
.
Œ
);

157 
m
 = 4 - 
n
; 
u
[1] == 0; u++)

158 
m
--;

159 
i
 = 4 - 
m
; --i >= 0;)

160 
q
[
i
] = 0;

161 
q
 +4 - 
m
;

169 
d
 = 0;

170 
t
 = 
v
[1];Å < 
B
 / 2;Å <<= 1)

171 
d
++;

172 i‡(
d
 > 0) {

173 
	`shl
(&
u
[0], 
m
 + 
n
, 
d
);

174 
	`shl
(&
v
[1], 
n
 - 1, 
d
);

179 
j
 = 0;

180 
v1
 = 
v
[1];

181 
v2
 = 
v
[2];

183 
digô
 
uj0
, 
uj1
, 
uj2
;

193 
uj0
 = 
u
[
j
 + 0];

194 
uj1
 = 
u
[
j
 + 1];

195 
uj2
 = 
u
[
j
 + 2];

196 i‡(
uj0
 =
v1
) {

197 
qh©
 = 
B
;

198 
rh©
 = 
uj1
;

199 
qh©_too_big
;

201 
¬
 = 
	`COMBINE
(
uj0
, 
uj1
);

202 
qh©
 = 
¬
 / 
v1
;

203 
rh©
 = 
¬
 % 
v1
;

205 
v2
 * 
qh©
 > 
	`COMBINE
(
rh©
, 
uj2
)) {

206 
qh©_too_big
:

207 
qh©
--;

208 i‡((
rh©
 +
v1
Ë>
B
)

217 
t
 = 0, 
i
 = 
n
; i > 0; i--) {

218 
t
 = 
u
[
i
 + 
j
] - 
v
[i] * 
qh©
 -Å;

219 
u
[
i
 + 
j
] = (
digô
)
	`LHALF
(
t
);

220 
t
 = (
B
 - 
	`HHALF
(t)) & (B - 1);

222 
t
 = 
u
[
j
] -Å;

223 
u
[
j
] = (
digô
)
	`LHALF
(
t
);

230 i‡(
	`HHALF
(
t
)) {

231 
qh©
--;

232 
t
 = 0, 
i
 = 
n
; i > 0; i--) {

233 
t
 +
u
[
i
 + 
j
] + 
v
[i];

234 
u
[
i
 + 
j
] = (
digô
)
	`LHALF
(
t
);

235 
t
 = 
	`HHALF
(t);

237 
u
[
j
] = (
digô
)
	`LHALF
(u[j] + 
t
);

239 
q
[
j
] = (
digô
)
qh©
;

240 } ++
j
 <
m
);

247 i‡(
¨q
) {

248 i‡(
d
) {

249 
i
 = 
m
 + 
n
; i > m; --i)

250 
u
[
i
] = (
digô
)((()u[i] >> 
d
) |

251 
	`LHALF
(()
u
[
i
 - 1] <<

252 (
HALF_BITS
 - 
d
)));

253 
u
[
i
] = 0;

255 
tmp
.
ui
[
H
] = 
	`COMBINE
(
u•a˚
[1], uspace[2]);

256 
tmp
.
ui
[
L
] = 
	`COMBINE
(
u•a˚
[3], uspace[4]);

257 *
¨q
 = 
tmp
.
Œ
;

260 
tmp
.
ui
[
H
] = 
	`COMBINE
(
q•a˚
[1], qspace[2]);

261 
tmp
.
ui
[
L
] = 
	`COMBINE
(
q•a˚
[3], qspace[4]);

262  (
tmp
.
Œ
);

263 
	}
}

271 
	$shl
(
digô
 *
p
, 
Àn
, 
sh
)

273 
i
;

275 
i
 = 0; i < 
Àn
; i++)

276 
p
[
i
] = (
digô
)(
	`LHALF
((Ì[i] << 
sh
) |

277 (()
p
[
i
 + 1] >> (
HALF_BITS
 - 
sh
)));

278 
p
[
i
] = (
digô
)(
	`LHALF
((Ì[i] << 
sh
));

279 
	}
}

	@test/os161/common/gcc-millicode/subdi3.c

38 
	~"l⁄gl⁄g.h
"

46 
	$__subdi3
(
a
, 
b
)

48 
uu
 
Ø
, 
bb
, 
diff
;

50 
Ø
.
Œ
 = 
a
;

51 
bb
.
Œ
 = 
b
;

52 
diff
.
ui
[
L
] = 
Ø
.ui[L] - 
bb
.ui[L];

53 
diff
.
ui
[
H
] = 
Ø
.ui[H] - 
bb
.ui[H] - (diff.ui[
L
] >áa.ui[L]);

54  (
diff
.
Œ
);

55 
	}
}

	@test/os161/common/gcc-millicode/ucmpdi2.c

38 
	~"l⁄gl⁄g.h
"

45 
	$__ucmpdi2
(
a
, 
b
)

47 
uu
 
Ø
, 
bb
;

49 
Ø
.
uŒ
 = 
a
;

50 
bb
.
uŒ
 = 
b
;

51  (
Ø
.
ui
[
H
] < 
bb
.ui[H] ? 0 :áa.ui[H] > bb.ui[H] ? 2 :

52 
Ø
.
ui
[
L
] < 
bb
.ui[L] ? 0 :áa.ui[L] > bb.ui[L] ? 2 : 1);

53 
	}
}

	@test/os161/common/gcc-millicode/udivdi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__udivdi3
(
a
, 
b
)

47  
	`__qdivªm
(
a
, 
b
, 
NULL
);

48 
	}
}

	@test/os161/common/gcc-millicode/umoddi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__umoddi3
(
a
, 
b
)

46 
r
;

48 ()
	`__qdivªm
(
a
, 
b
, &
r
);

49  (
r
);

50 
	}
}

	@test/os161/common/gcc-millicode/xordi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__x‹di3
(
a
, 
b
)

46 
uu
 
Ø
, 
bb
;

48 
Ø
.
Œ
 = 
a
;

49 
bb
.
Œ
 = 
b
;

50 
Ø
.
ui
[0] ^
bb
.ui[0];

51 
Ø
.
ui
[1] ^
bb
.ui[1];

52  (
Ø
.
Œ
);

53 
	}
}

	@test/os161/common/libc/printf/__printf.c

40 #ifde‡
_KERNEL


41 
	~<ty≥s.h
>

42 
	~<lib.h
>

43 
	#as£π
 
KASSERT


	)

46 
	~<sys/ty≥s.h
>

47 
	~<as£π.h
>

48 
	~<°döt.h
>

49 
	~<°dio.h
>

50 
	~<°rög.h
>

53 
	~<°d¨g.h
>

64 
	#USE_LONGLONG


	)

69 #ifde‡
USE_LONGLONG


70 
	#INTTYPE
 

	)

72 
	#INTTYPE
 

	)

84 
	#NUMBER_BUF_SIZE
 (((
INTTYPE
Ë* 
CHAR_BIT
Ë/ 3 + 2)

	)

91 (*
	m£ndfunc
)(*
	m˛õ¡d©a
, c⁄° *
	m°r
, 
size_t
 
	mÀn
);

92 *
	m˛õ¡d©a
;

95 
va_li°
 
	m≠
;

98 
	mch¨cou¡
;

101 
	mö_p˘
;

105 
	mINTSZ
,

106 
	mLONGSZ
,

107 #ifde‡
USE_LONGLONG


108 
	mLLONGSZ
,

110 } 
	msize
;

113 
INTTYPE
 
	mnum
;

116 
	msign
;

119 
	m•acög
;

122 
	mright•c
;

125 
	mfûlch¨
;

128 
	mba£
;

131 
	mba£¥efix
;

134 
	mÆtf‹m©
;

135 } 
	tPF
;

145 
	$__pf_¥öt
(
PF
 *
pf
, c⁄° *
txt
, 
size_t
 
Àn
)

147 
pf
->
	`£ndfunc
’f->
˛õ¡d©a
, 
txt
, 
Àn
);

148 
pf
->
ch¨cou¡
 +
Àn
;

149 
	}
}

156 
	$__pf_ídfõld
(
PF
 *
pf
)

158 
pf
->
ö_p˘
 = 0;

159 
pf
->
size
 = 
INTSZ
;

160 
pf
->
num
 = 0;

161 
pf
->
sign
 = 0;

162 
pf
->
•acög
 = 0;

163 
pf
->
right•c
 = 0;

164 
pf
->
fûlch¨
 = ' ';

165 
pf
->
ba£
 = 0;

166 
pf
->
ba£¥efix
 = 0;

167 
pf
->
Ætf‹m©
 = 0;

168 
	}
}

180 
	$__pf_modifõr
(
PF
 *
pf
, 
ch
)

182 
ch
) {

184 
pf
->
Ætf‹m©
 = 1;

187 
pf
->
right•c
 = 1;

190 i‡(
pf
->
size
==
LONGSZ
) {

191 #ifde‡
USE_LONGLONG


192 
pf
->
size
 = 
LLONGSZ
;

196 
pf
->
size
 = 
LONGSZ
;

200 i‡(
pf
->
•acög
>0) {

205 
pf
->
•acög
 =Öf->spacing*10;

211 
pf
->
fûlch¨
 = '0';

220 
	`as£π
(
ch
>'0' && ch<='9');

225 
pf
->
•acög
 =Öf->•acög*10 + (
ch
-'0');

228 
	}
}

237 
	$__pf_gënum
(
PF
 *
pf
, 
ch
)

239 i‡(
ch
=='p') {

246 
pf
->
num
 = (
uöçå_t
Ë
	`va_¨g
’f->
≠
, *);

248 i‡(
ch
=='d') {

250 
INTTYPE
 
sig√dnum
=0;

251 
pf
->
size
) {

252 
INTSZ
:

254 
sig√dnum
 = 
	`va_¨g
(
pf
->
≠
, );

256 
LONGSZ
:

258 
sig√dnum
 = 
	`va_¨g
(
pf
->
≠
, );

260 #ifde‡
USE_LONGLONG


261 
LLONGSZ
:

263 
sig√dnum
 = 
	`va_¨g
(
pf
->
≠
, );

271 i‡(
sig√dnum
 < 0) {

272 
pf
->
sign
 = -1;

273 
pf
->
num
 = -
sig√dnum
;

276 
pf
->
num
 = 
sig√dnum
;

281 
pf
->
size
) {

282 
INTSZ
:

284 
pf
->
num
 = 
	`va_¨g
’f->
≠
, );

286 
LONGSZ
:

288 
pf
->
num
 = 
	`va_¨g
’f->
≠
, );

290 #ifde‡
USE_LONGLONG


291 
LLONGSZ
:

293 
pf
->
num
 = 
	`va_¨g
’f->
≠
, );

298 
	}
}

312 
	$__pf_£tba£
(
PF
 *
pf
, 
ch
)

314 
ch
) {

317 
pf
->
ba£
 = 10;

321 
pf
->
ba£
 = 16;

324 
pf
->
ba£
 = 8;

327 i‡(
pf
->
Ætf‹m©
 || 
ch
=='p') {

328 
pf
->
ba£¥efix
 = 1;

330 
	}
}

337 
	$__pf_fûl
(
PF
 *
pf
, 
•c
)

339 
f
 = 
pf
->
fûlch¨
;

340 
i
;

341 
i
=0; i<
•c
; i++) {

342 
	`__pf_¥öt
(
pf
, &
f
, 1);

344 
	}
}

354 
	$__pf_¥öt°uff
(
PF
 *
pf
,

355 c⁄° *
¥efix
, c⁄° *
¥efix2
,

356 c⁄° *
°uff
)

359 
Àn
 = 
	`°æí
(
¥efix
)+°æí(
¥efix2
)+°æí(
°uff
);

362 
•c
 = 
pf
->
•acög
;

363 i‡(
•c
 > 
Àn
) {

364 
•c
 -
Àn
;

367 
•c
 = 0;

371 i‡(
•c
 > 0 && 
pf
->
right•c
==0 &&Öf->
fûlch¨
!='0') {

372 
	`__pf_fûl
(
pf
, 
•c
);

376 
	`__pf_¥öt
(
pf
, 
¥efix
, 
	`°æí
(prefix));

377 
	`__pf_¥öt
(
pf
, 
¥efix2
, 
	`°æí
(prefix2));

380 i‡(
•c
 > 0 && 
pf
->
right•c
==0 &&Öf->
fûlch¨
=='0') {

381 
	`__pf_fûl
(
pf
, 
•c
);

385 
	`__pf_¥öt
(
pf
, 
°uff
, 
	`°æí
(stuff));

388 i‡(
•c
 > 0 && 
pf
->
right•c
!=0) {

389 
	`__pf_fûl
(
pf
, 
•c
);

391 
	}
}

402 
	$__pf_¥öäum
(
PF
 *
pf
)

405 c⁄° *c⁄° 
digôs
 = "0123456789abcdef";

407 
buf
[
NUMBER_BUF_SIZE
];

408 *
x
;

409 
INTTYPE
 
xnum
;

410 c⁄° *
b¥efix
;

411 c⁄° *
•ªfix
;

414 
x
 = 
buf
+(buf)-1;

417 *
x
-- = 0;

420 
xnum
 = 
pf
->
num
;

431 *
x
 = 
digôs
[
xnum
 % 
pf
->
ba£
];

436 
x
--;

441 
xnum
 = xnum / 
pf
->
ba£
;

446 } 
xnum
 > 0);

454 
x
++;

459 i‡(
pf
->
ba£¥efix
 &&Öf->
ba£
==16) {

460 
b¥efix
 = "0x";

462 i‡(
pf
->
ba£¥efix
 &&Öf->
ba£
==8) {

463 
b¥efix
 = "0";

466 
b¥efix
 = "";

472 
•ªfix
 = 
pf
->
sign
 ? "-" : "";

477 
	`__pf_¥öt°uff
(
pf
, 
•ªfix
, 
b¥efix
, 
x
);

478 
	}
}

485 
	$__pf_£nd
(
PF
 *
pf
, 
ch
)

488 
	`as£π
(
ch
!=0);

490 i‡(
pf
->
ö_p˘
==0 && 
ch
!='%') {

495 
c
 = 
ch
;

496 
	`__pf_¥öt
(
pf
, &
c
, 1);

498 i‡(
pf
->
ö_p˘
==0) {

502 
pf
->
ö_p˘
 = 1;

504 i‡(
	`°rchr
("#-l0123456789", 
ch
)) {

509 
	`__pf_modifõr
(
pf
, 
ch
);

511 i‡(
	`°rchr
("doupx", 
ch
)) {

517 
	`__pf_gënum
(
pf
, 
ch
);

518 
	`__pf_£tba£
(
pf
, 
ch
);

519 
	`__pf_¥öäum
(
pf
);

520 
	`__pf_ídfõld
(
pf
);

522 i‡(
ch
=='s') {

526 c⁄° *
°r
 = 
	`va_¨g
(
pf
->
≠
, const *);

527 i‡(
°r
==
NULL
) {

528 
°r
 = "(null)";

530 
	`__pf_¥öt°uff
(
pf
, "", "", 
°r
);

531 
	`__pf_ídfõld
(
pf
);

539 
x
[2];

540 i‡(
ch
=='c') {

541 
x
[0] = 
	`va_¨g
(
pf
->
≠
, );

544 
x
[0] = 
ch
;

546 
x
[1] = 0;

547 
	`__pf_¥öt°uff
(
pf
, "", "", 
x
);

548 
	`__pf_ídfõld
(
pf
);

550 
	}
}

558 
__v¥ötf
((*
func
)(*
˛õ¡d©a
, c⁄° *
°r
, 
size_t
 
Àn
),

559 *
˛õ¡d©a
, c⁄° *
f‹m©
, 
va_li°
 
≠
)

561 
PF
 
pf
;

562 
i
;

564 
pf
.
£ndfunc
 = 
func
;

565 
pf
.
˛õ¡d©a
 = clientdata;

566 
pf
.
≠
 =áp;

567 
pf
.
ch¨cou¡
 = 0;

568 
	`__pf_ídfõld
(&
pf
);

570 
i
=0; 
f‹m©
[i]; i++) {

571 
	`__pf_£nd
(&
pf
, 
f‹m©
[
i
]);

574  
pf
.
ch¨cou¡
;

575 
	}
}

	@test/os161/common/libc/printf/snprintf.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

40 
	~<°dio.h
>

44 
	~<°d¨g.h
>

61 *
	mbuf
;

62 
size_t
 
	mbuÊí
;

63 
size_t
 
	mbuÂos
;

64 } 
	tSNP
;

75 
	$__¢¥ötf_£nd
(*
myd©a
, c⁄° *
d©a
, 
size_t
 
Àn
)

77 
SNP
 *
¢p
 = 
myd©a
;

78 
i
;

81 
i
=0; i<
Àn
; i++) {

84 i‡(
¢p
->
buÂos
 < s≈->
buÊí
) {

87 
¢p
->
buf
[¢p->
buÂos
] = 
d©a
[
i
];

90 
¢p
->
buÂos
++;

93 
	}
}

99 
	$v¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, 
va_li°
 
≠
)

101 
ch¨s
;

102 
SNP
 
¢p
;

111 
¢p
.
buf
 = buf;

112 i‡(
Àn
==0) {

113 
¢p
.
buÊí
 = 0;

116 
¢p
.
buÊí
 = 
Àn
-1;

118 
¢p
.
buÂos
 = 0;

121 
ch¨s
 = 
	`__v¥ötf
(
__¢¥ötf_£nd
, &
¢p
, 
fmt
, 
≠
);

130 i‡(
Àn
 > 0) {

131 
buf
[
¢p
.
buÂos
] = 0;

141  
ch¨s
;

142 
	}
}

148 
	$¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, ...)

150 
ch¨s
;

151 
va_li°
 
≠
;

152 
	`va_°¨t
(
≠
, 
fmt
);

153 
ch¨s
 = 
	`v¢¥ötf
(
buf
, 
Àn
, 
fmt
, 
≠
);

154 
	`va_íd
(
≠
);

155  
ch¨s
;

156 
	}
}

	@test/os161/common/libc/stdlib/atoi.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°dlib.h
>

40 
	~<°rög.h
>

50 
	$©oi
(c⁄° *
s
)

52 c⁄° 
digôs
[] = "0123456789";

53 
vÆ
=0;

54 
√g
=0;

57 *
s
==' ' || *s=='\t') {

58 
s
++;

62 i‡(*
s
=='-') {

63 
√g
=1;

64 
s
++;

66 i‡(*
s
=='+') {

67 
s
++;

71 *
s
) {

72 c⁄° *
whîe
;

73 
digô
;

76 
whîe
 = 
	`°rchr
(
digôs
, *
s
);

77 i‡(
whîe
==
NULL
) {

83 
digô
 = (
whîe
 - 
digôs
);

88 
vÆ
 = vÆ*10 + 
digô
;

91 
s
++;

95 i‡(
√g
) {

96  -
vÆ
;

100  
vÆ
;

101 
	}
}

	@test/os161/common/libc/string/bzero.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°döt.h
>

40 
	~<°rög.h
>

49 
	$bzîo
(*
vblock
, 
size_t
 
Àn
)

51 *
block
 = 
vblock
;

52 
size_t
 
i
;

64 i‡((
uöçå_t
)
block
 % () == 0 &&

65 
Àn
 % () == 0) {

66 *
lb
 = (*)
block
;

67 
i
=0; i<
Àn
/(); i++) {

68 
lb
[
i
] = 0;

72 
i
=0; i<
Àn
; i++) {

73 
block
[
i
] = 0;

76 
	}
}

	@test/os161/common/libc/string/memcpy.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°döt.h
>

40 
	~<°rög.h
>

48 
	$mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
)

50 
size_t
 
i
;

65 i‡((
uöçå_t
)
d°
 % () == 0 &&

66 (
uöçå_t
)
§c
 % () == 0 &&

67 
Àn
 % () == 0) {

69 *
d
 = 
d°
;

70 c⁄° *
s
 = 
§c
;

72 
i
=0; i<
Àn
/(); i++) {

73 
d
[
i
] = 
s
[i];

77 *
d
 = 
d°
;

78 c⁄° *
s
 = 
§c
;

80 
i
=0; i<
Àn
; i++) {

81 
d
[
i
] = 
s
[i];

85  
d°
;

86 
	}
}

	@test/os161/common/libc/string/memmove.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°döt.h
>

40 
	~<°rög.h
>

49 
	$memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
)

51 
size_t
 
i
;

78 i‡((
uöçå_t
)
d°
 < (uöçå_t)
§c
) {

83  
	`mem˝y
(
d°
, 
§c
, 
Àn
);

91 i‡((
uöçå_t
)
d°
 % () == 0 &&

92 (
uöçå_t
)
§c
 % () == 0 &&

93 
Àn
 % () == 0) {

95 *
d
 = 
d°
;

96 c⁄° *
s
 = 
§c
;

103 
i
=
Àn
/(); i>0; i--) {

104 
d
[
i
-1] = 
s
[i-1];

108 *
d
 = 
d°
;

109 c⁄° *
s
 = 
§c
;

111 
i
=
Àn
; i>0; i--) {

112 
d
[
i
-1] = 
s
[i-1];

116  
d°
;

117 
	}
}

	@test/os161/common/libc/string/strcat.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

47 
	$°rˇt
(*
de°
, c⁄° *
§c
)

49 
size_t
 
off£t
;

51 
off£t
 = 
	`°æí
(
de°
);

52 
	`°r˝y
(
de°
+
off£t
, 
§c
);

53  
de°
;

54 
	}
}

	@test/os161/common/libc/string/strchr.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

47 
	$°rchr
(c⁄° *
s
, 
ch_¨g
)

50 c⁄° 
ch
 = 
ch_¨g
;

53 *
s
) {

55 i‡(*
s
 =
ch
) {

56  (*)
s
;

58 
s
++;

62 i‡(*
s
 =
ch
) {

63  (*)
s
;

67  
NULL
;

68 
	}
}

	@test/os161/common/libc/string/strcmp.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

48 
	$°rcmp
(c⁄° *
a
, c⁄° *
b
)

50 
size_t
 
i
;

66 
i
=0; 
a
[i]!=0 &&á[i]==
b
[i]; i++) {

83 i‡(()
a
[
i
] > ()
b
[i]) {

86 i‡(
a
[
i
] =
b
[i]) {

90 
	}
}

	@test/os161/common/libc/string/strcpy.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

46 
	$°r˝y
(*
de°
, c⁄° *
§c
)

48 
size_t
 
i
;

53 
i
=0; 
§c
[i]; i++) {

54 
de°
[
i
] = 
§c
[i];

60 
de°
[
i
] = 0;

62  
de°
;

63 
	}
}

	@test/os161/common/libc/string/strlen.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

46 
size_t


47 
	$°æí
(c⁄° *
°r
)

49 
size_t
 
ªt
 = 0;

51 
°r
[
ªt
]) {

52 
ªt
++;

54  
ªt
;

55 
	}
}

	@test/os161/common/libc/string/strrchr.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

47 
	$°ºchr
(c⁄° *
s
, 
ch_¨g
)

50 c⁄° 
ch
 = 
ch_¨g
;

53 
size_t
 
i
 = 
	`°æí
(
s
)+1;

56 
i
 > 0) {

59 
i
--;

62 i‡(
s
[
i
] =
ch
) {

63  (*)(
s
+
i
);

68  
NULL
;

69 
	}
}

	@test/os161/common/libc/string/strtok_r.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

50 
	$°πok_r
(*
°rög
, c⁄° *
£ps
, **
c⁄ãxt
)

52 *
hód
;

53 *
èû
;

56 i‡(
°rög
) {

57 *
c⁄ãxt
 = 
°rög
;

61 
hód
 = *
c⁄ãxt
;

62 i‡(
hód
 =
NULL
) {

63  
NULL
;

67 *
hód
 && 
	`°rchr
(
£ps
, *head)) {

68 
hód
++;

72 i‡(*
hód
 == 0) {

74 *
c⁄ãxt
 = 
NULL
;

75  
NULL
;

79 
èû
 = 
hód
;

80 *
èû
 && !
	`°rchr
(
£ps
, *tail)) {

81 
èû
++;

85 i‡(*
èû
 == 0) {

86 *
c⁄ãxt
 = 
NULL
;

89 *
èû
 = 0;

90 
èû
++;

91 *
c⁄ãxt
 = 
èû
;

95  
hód
;

96 
	}
}

	@test/os161/kern/arch/mips/include/current.h

30 #i‚de‡
_MIPS_CURRENT_H_


31 
	#_MIPS_CURRENT_H_


	)

79 
thªad
 *
cuπhªad
 
asm
("$23");

80 #unde‡
__NEED_CURTHREAD


81 
	#__NEED_CURCPU


	)

84 
	#INIT_CURCPU
(
˝u
, 
thªad
Ë(
cuπhªad
 = (thªad), 
cur˝u
 = (˝u))

	)

	@test/os161/kern/arch/mips/include/elf.h

30 #i‚de‡
_MIPS_ELF_H_


31 
	#_MIPS_ELF_H_


	)

39 
	#EM_MACHINE
 
EM_MIPS


	)

42 
	#R_MIPS_NONE
 0

	)

43 
	#R_MIPS_16
 1

	)

44 
	#R_MIPS_32
 2

	)

45 
	#R_MIPS_REL32
 3

	)

46 
	#R_MIPS_26
 4

	)

47 
	#R_MIPS_HI16
 5

	)

48 
	#R_MIPS_LO16
 6

	)

49 
	#R_MIPS_GPREL16
 7

	)

50 
	#R_MIPS_LITERAL
 8

	)

51 
	#R_MIPS_GOT16
 9

	)

52 
	#R_MIPS_PC16
 10

	)

53 
	#R_MIPS_CALL16
 11

	)

54 
	#R_MIPS_GPREL32
 12

	)

	@test/os161/kern/arch/mips/include/kern/endian.h

30 #i‚de‡
_KERN_MIPS_ENDIAN_H_


31 
	#_KERN_MIPS_ENDIAN_H_


	)

42 
	#_BYTE_ORDER
 
_BIG_ENDIAN


	)

	@test/os161/kern/arch/mips/include/kern/regdefs.h

36 #i‚de‡
_KERN_MIPS_REGDEFS_H_


37 
	#_KERN_MIPS_REGDEFS_H_


	)

40 
	#z0
 
$0


	)

41 
	#AT
 
$1


	)

42 
	#v0
 
$2


	)

43 
	#v1
 
$3


	)

44 
	#a0
 
$4


	)

45 
	#a1
 
$5


	)

46 
	#a2
 
$6


	)

47 
	#a3
 
$7


	)

48 
	#t0
 
$8


	)

49 
	#t1
 
$9


	)

50 
	#t2
 
$10


	)

51 
	#t3
 
$11


	)

52 
	#t4
 
$12


	)

53 
	#t5
 
$13


	)

54 
	#t6
 
$14


	)

55 
	#t7
 
$15


	)

56 
	#s0
 
$16


	)

57 
	#s1
 
$17


	)

58 
	#s2
 
$18


	)

59 
	#s3
 
$19


	)

60 
	#s4
 
$20


	)

61 
	#s5
 
$21


	)

62 
	#s6
 
$22


	)

63 
	#s7
 
$23


	)

64 
	#t8
 
$24


	)

65 
	#t9
 
$25


	)

66 
	#k0
 
$26


	)

67 
	#k1
 
$27


	)

68 
	#gp
 
$28


	)

69 
	#•
 
$29


	)

70 
	#s8
 
$30


	)

71 
	#ø
 
$31


	)

	@test/os161/kern/arch/mips/include/kern/setjmp.h

30 #i‚de‡
_MIPS_SETJMP_H_


31 
	#_MIPS_SETJMP_H_


	)

41 
	#__JB_REGS
 11

	)

44 
uöt32_t
 
	tjmp_buf
[
__JB_REGS
];

	@test/os161/kern/arch/mips/include/kern/signal.h

31 #i‚de‡
_KERN_MIPS_SIGNAL_H_


32 
	#_KERN_MIPS_SIGNAL_H_


	)

41 
	ssigc⁄ãxt
 {

	@test/os161/kern/arch/mips/include/kern/types.h

30 #i‚de‡
_KERN_MIPS_TYPES_H_


31 
	#_KERN_MIPS_TYPES_H_


	)

43 
	t__i8
;

44 
	t__i16
;

45 
	t__i32
;

46 
	t__i64
;

48 
	t__u8
;

49 
	t__u16
;

50 
	t__u32
;

51 
	t__u64
;

54 
	t__öçå_t
;

55 
	t__uöçå_t
;

65 
	t__size_t
;

66 
	t__ssize_t
;

67 
	t__±rdiff_t
;

69 
	t__size_t
;

70 
	t__ssize_t
;

71 
	t__±rdiff_t
;

75 
	#__CHAR_BIT
 8

	)

	@test/os161/kern/arch/mips/include/specialreg.h

30 #i‚de‡
_MIPS_SPECIALREG_H_


31 
	#_MIPS_SPECIALREG_H_


	)

37 
	#c0_ödex
 
$0


	)

38 
	#c0_øndom
 
$1


	)

39 
	#c0_íåylo
 
$2


	)

42 
	#c0_c⁄ãxt
 
$4


	)

45 
	#c0_vaddr
 
$8


	)

46 
	#c0_cou¡
 
$9


	)

47 
	#c0_íåyhi
 
$10


	)

48 
	#c0_com∑ª
 
$11


	)

49 
	#c0_°©us
 
$12


	)

50 
	#c0_ˇu£
 
$13


	)

51 
	#c0_ïc
 
$14


	)

52 
	#c0_¥id
 
$15


	)

61 
	#CST_IEc
 0x00000001

	)

62 
	#CST_KUc
 0x00000002

	)

63 
	#CST_IEp
 0x00000004

	)

64 
	#CST_KUp
 0x00000008

	)

65 
	#CST_IEo
 0x00000010

	)

66 
	#CST_KUo
 0x00000020

	)

67 
	#CST_MODEMASK
 0x0000003‡

	)

68 
	#CST_IRQMASK
 0x0000ff00

	)

69 
	#CST_BEV
 0x00400000

	)

74 
	#CCA_UTLB
 0x00000001

	)

75 
	#CCA_CODE
 0x0000003¯

	)

76 
	#CCA_IRQS
 0x0000ff00

	)

77 
	#CCA_COPN
 0x30000000

	)

78 
	#CCA_JD
 0x80000000

	)

80 
	#CCA_CODESHIFT
 2

	)

85 
	#CIN_P
 0x80000000

	)

86 
	#CIN_INDEX
 0x00003f00

	)

88 
	#CIN_INDEXSHIFT
 8

	)

105 
	#CTX_VSHIFT
 0x001ffff¯

	)

106 
	#CTX_PTBASE
 0xf„00000

	)

108 
	#CTX_PTBASESHIFT
 21

	)

113 
	#EXADDR_UTLB
 0x80000000

	)

114 
	#EXADDR_GENERAL
 0x80000080

	)

	@test/os161/kern/arch/mips/include/spinlock.h

30 #i‚de‡
_MIPS_SPINLOCK_H_


31 
	#_MIPS_SPINLOCK_H_


	)

33 
	~<cdefs.h
>

37 
	t•ölock_d©a_t
;

40 
	#SPINLOCK_DATA_INITIALIZER
 0

	)

43 
•ölock_d©a_£t
(vﬁ©ûê
•ölock_d©a_t
 *
sd
, 
vÆ
);

44 
•ölock_d©a_t
 
•ölock_d©a_gë
(vﬁ©ûê•ölock_d©a_à*
sd
);

45 
•ölock_d©a_t
 
•ölock_d©a_ã°™d£t
(vﬁ©ûê•ölock_d©a_à*
sd
);

49 
SPINLOCK_INLINE


51 
	$•ölock_d©a_£t
(vﬁ©ûê
•ölock_d©a_t
 *
sd
, 
vÆ
)

53 *
sd
 = 
vÆ
;

54 
	}
}

56 
SPINLOCK_INLINE


57 
•ölock_d©a_t


58 
	$•ölock_d©a_gë
(vﬁ©ûê
•ölock_d©a_t
 *
sd
)

60  *
sd
;

61 
	}
}

63 
SPINLOCK_INLINE


64 
•ölock_d©a_t


65 
	$•ölock_d©a_ã°™d£t
(vﬁ©ûê
•ölock_d©a_t
 *
sd
)

67 
•ölock_d©a_t
 
x
;

68 
•ölock_d©a_t
 
y
;

81 
y
 = 1;

82 
__asm
 volatile(

89 : "Ù" (
x
), "+r" (
y
Ë: "r" (
sd
));

90 i‡(
y
 == 0) {

93  
x
;

94 
	}
}

	@test/os161/kern/arch/mips/include/thread.h

30 #i‚de‡
_MIPS_THREAD_H_


31 
	#_MIPS_THREAD_H_


	)

38 
	~<£tjmp.h
>

40 (*
	tbadÁu…func_t
)();

42 
	sthªad_machdï
 {

43 
badÁu…func_t
 
tm_badÁu…func
;

44 
jmp_buf
 
tm_c›yjmp
;

	@test/os161/kern/arch/mips/include/tlb.h

30 #i‚de‡
_MIPS_TLB_H_


31 
	#_MIPS_TLB_H_


	)

58 
éb_øndom
(
uöt32_t
 
íåyhi
, uöt32_à
íåylo
);

59 
éb_wrôe
(
uöt32_t
 
íåyhi
, uöt32_à
íåylo
, uöt32_à
ödex
);

60 
éb_ªad
(
uöt32_t
 *
íåyhi
, uöt32_à*
íåylo
, uöt32_à
ödex
);

61 
éb_¥obe
(
uöt32_t
 
íåyhi
, uöt32_à
íåylo
);

80 
	#TLBHI_VPAGE
 0xfffff000

	)

84 
	#TLBLO_PPAGE
 0xfffff000

	)

85 
	#TLBLO_NOCACHE
 0x00000800

	)

86 
	#TLBLO_DIRTY
 0x00000400

	)

87 
	#TLBLO_VALID
 0x00000200

	)

95 
	#TLBHI_INVALID
(
íåyno
Ë((0x80000+”¡ryno))<<12)

	)

96 
	#TLBLO_INVALID
(Ë(0)

	)

102 
	#NUM_TLB
 64

	)

	@test/os161/kern/arch/mips/include/trapframe.h

30 #i‚de‡
_MIPS_TRAPFRAME_H_


31 
	#_MIPS_TRAPFRAME_H_


	)

40 
	så≠‰ame
 {

41 
uöt32_t
 
	mtf_vaddr
;

42 
uöt32_t
 
	mtf_°©us
;

43 
uöt32_t
 
	mtf_ˇu£
;

44 
uöt32_t
 
	mtf_lo
;

45 
uöt32_t
 
	mtf_hi
;

46 
uöt32_t
 
	mtf_ø
;

47 
uöt32_t
 
	mtf_©
;

48 
uöt32_t
 
	mtf_v0
;

49 
uöt32_t
 
	mtf_v1
;

50 
uöt32_t
 
	mtf_a0
;

51 
uöt32_t
 
	mtf_a1
;

52 
uöt32_t
 
	mtf_a2
;

53 
uöt32_t
 
	mtf_a3
;

54 
uöt32_t
 
	mtf_t0
;

55 
uöt32_t
 
	mtf_t1
;

56 
uöt32_t
 
	mtf_t2
;

57 
uöt32_t
 
	mtf_t3
;

58 
uöt32_t
 
	mtf_t4
;

59 
uöt32_t
 
	mtf_t5
;

60 
uöt32_t
 
	mtf_t6
;

61 
uöt32_t
 
	mtf_t7
;

62 
uöt32_t
 
	mtf_s0
;

63 
uöt32_t
 
	mtf_s1
;

64 
uöt32_t
 
	mtf_s2
;

65 
uöt32_t
 
	mtf_s3
;

66 
uöt32_t
 
	mtf_s4
;

67 
uöt32_t
 
	mtf_s5
;

68 
uöt32_t
 
	mtf_s6
;

69 
uöt32_t
 
	mtf_s7
;

70 
uöt32_t
 
	mtf_t8
;

71 
uöt32_t
 
	mtf_t9
;

72 
uöt32_t
 
	mtf_k0
;

73 
uöt32_t
 
	mtf_k1
;

74 
uöt32_t
 
	mtf_gp
;

75 
uöt32_t
 
	mtf_•
;

76 
uöt32_t
 
	mtf_s8
;

77 
uöt32_t
 
	mtf_ïc
;

83 
	#EX_IRQ
 0

	)

84 
	#EX_MOD
 1

	)

85 
	#EX_TLBL
 2

	)

86 
	#EX_TLBS
 3

	)

87 
	#EX_ADEL
 4

	)

88 
	#EX_ADES
 5

	)

89 
	#EX_IBE
 6

	)

90 
	#EX_DBE
 7

	)

91 
	#EX_SYS
 8

	)

92 
	#EX_BP
 9

	)

93 
	#EX_RI
 10

	)

94 
	#EX_CPU
 11

	)

95 
	#EX_OVF
 12

	)

101 
mùs_u£rmode
(
å≠‰ame
 *
tf
);

106 
vaddr_t
 
˝u°acks
[];

107 
vaddr_t
 
˝uthªads
[];

	@test/os161/kern/arch/mips/include/types.h

30 #i‚de‡
_MIPS_TYPES_H_


31 
	#_MIPS_TYPES_H_


	)

43 
__u32
 
	t∑ddr_t
;

44 
__u32
 
	tvaddr_t
;

	@test/os161/kern/arch/mips/include/vm.h

30 #i‚de‡
_MIPS_VM_H_


31 
	#_MIPS_VM_H_


	)

38 
	#PAGE_SIZE
 4096

	)

39 
	#PAGE_FRAME
 0xfffff000

	)

51 
	#MIPS_KUSEG
 0x00000000

	)

52 
	#MIPS_KSEG0
 0x80000000

	)

53 
	#MIPS_KSEG1
 0xa0000000

	)

54 
	#MIPS_KSEG2
 0xc0000000

	)

68 
	#PADDR_TO_KVADDR
(
∑ddr
Ë(’addr)+
MIPS_KSEG0
)

	)

74 
	#USERSPACETOP
 
MIPS_KSEG0


	)

84 
	#USERSTACK
 
USERSPACETOP


	)

101 
øm_boŸ°øp
();

102 
∑ddr_t
 
øm_°ólmem
(
≈ages
);

103 
øm_gësize
(
∑ddr_t
 *
lo
,Öaddr_à*
hi
);

111 
	sébshoŸdown
 {

115 
addr•a˚
 *
	mts_addr•a˚
;

116 
vaddr_t
 
	mts_vaddr
;

119 
	#TLBSHOOTDOWN_MAX
 16

	)

	@test/os161/kern/arch/mips/locore/trap.c

30 
	~<ty≥s.h
>

31 
	~<sig«l.h
>

32 
	~<lib.h
>

33 
	~<mùs/•ecüÃeg.h
>

34 
	~<mùs/å≠‰ame.h
>

35 
	~<˝u.h
>

36 
	~<•l.h
>

37 
	~<thªad.h
>

38 
	~<cuºít.h
>

39 
	~<vm.h
>

40 
	~<maöbus.h
>

41 
	~<sysˇŒ.h
>

45 
asm_u£rmode
(
å≠‰ame
 *
tf
);

48 
mùs_å≠
(
å≠‰ame
 *
tf
);

52 
	#NTRAPCODES
 13

	)

53 c⁄° *c⁄° 
	gå≠codíames
[
NTRAPCODES
] = {

74 
	$kûl_cuπhªad
(
vaddr_t
 
ïc
, 
code
, vaddr_à
vaddr
)

76 
sig
 = 0;

78 
	`KASSERT
(
code
 < 
NTRAPCODES
);

79 
code
) {

80 
EX_IRQ
:

81 
EX_IBE
:

82 
EX_DBE
:

83 
EX_SYS
:

85 
	`KASSERT
(0);

86 
sig
 = 
SIGABRT
;

88 
EX_MOD
:

89 
EX_TLBL
:

90 
EX_TLBS
:

91 
sig
 = 
SIGSEGV
;

93 
EX_ADEL
:

94 
EX_ADES
:

95 
sig
 = 
SIGBUS
;

97 
EX_BP
:

98 
sig
 = 
SIGTRAP
;

100 
EX_RI
:

101 
sig
 = 
SIGILL
;

103 
EX_CPU
:

104 
sig
 = 
SIGSEGV
;

106 
EX_OVF
:

107 
sig
 = 
SIGFPE
;

115 
	`k¥ötf
("Fatal user modeÅrap %u sig %d (%s,Épc 0x%x, vaddr 0x%x)\n",

116 
code
, 
sig
, 
å≠codíames
[code], 
ïc
, 
vaddr
);

117 
	`∑nic
("I don't know howÅo handleÅhis\n");

118 
	}
}

126 
	$mùs_å≠
(
å≠‰ame
 *
tf
)

128 
uöt32_t
 
code
;

129 
boﬁ
 
isuéb
, 
iskîn
;

130 
•l
;

133 
	`KASSERT
((
å≠‰ame
)==(37*4));

138 
code
 = (
tf
->
tf_ˇu£
 & 
CCA_CODE
Ë>> 
CCA_CODESHIFT
;

139 
isuéb
 = (
tf
->
tf_ˇu£
 & 
CCA_UTLB
) != 0;

140 
iskîn
 = (
tf
->
tf_°©us
 & 
CST_KUp
) == 0;

142 
	`KASSERT
(
code
 < 
NTRAPCODES
);

145 i‡(
cuπhªad
 !
NULL
 && cuπhªad->
t_°ack
 != NULL) {

146 
	`KASSERT
((
vaddr_t
)
tf
 > (vaddr_t)
cuπhªad
->
t_°ack
);

147 
	`KASSERT
((
vaddr_t
)
tf
 < (vaddr_t)(
cuπhªad
->
t_°ack


148 + 
STACK_SIZE
));

152 i‡(
code
 =
EX_IRQ
) {

153 
ﬁd_ö
;

154 
boﬁ
 
dﬂdju°
;

156 
ﬁd_ö
 = 
cuπhªad
->
t_ö_öãºu±
;

157 
cuπhªad
->
t_ö_öãºu±
 = 1;

176 i‡(
cuπhªad
->
t_cur•l
 == 0) {

177 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

178 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

179 
cuπhªad
->
t_cur•l
 = 
IPL_HIGH
;

180 
cuπhªad
->
t_ùlhigh_cou¡
++;

181 
dﬂdju°
 = 
åue
;

184 
dﬂdju°
 = 
Ál£
;

187 
	`maöbus_öãºu±
(
tf
);

189 i‡(
dﬂdju°
) {

190 
	`KASSERT
(
cuπhªad
->
t_cur•l
 =
IPL_HIGH
);

191 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 1);

192 
cuπhªad
->
t_ùlhigh_cou¡
--;

193 
cuπhªad
->
t_cur•l
 = 0;

196 
cuπhªad
->
t_ö_öãºu±
 = 
ﬁd_ö
;

197 
d⁄e2
;

211 
•l
 = 
	`•lhigh
();

212 
	`•lx
(
•l
);

215 i‡(
code
 =
EX_SYS
) {

217 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

218 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

220 
	`DEBUG
(
DB_SYSCALL
, "syscall: #%d,árgs %x %x %x %x\n",

221 
tf
->
tf_v0
,Åf->
tf_a0
,Åf->
tf_a1
,Åf->
tf_a2
,Åf->
tf_a3
);

223 
	`sysˇŒ
(
tf
);

224 
d⁄e
;

232 
code
) {

233 
EX_MOD
:

234 i‡(
	`vm_Áu…
(
VM_FAULT_READONLY
, 
tf
->
tf_vaddr
)==0) {

235 
d⁄e
;

238 
EX_TLBL
:

239 i‡(
	`vm_Áu…
(
VM_FAULT_READ
, 
tf
->
tf_vaddr
)==0) {

240 
d⁄e
;

243 
EX_TLBS
:

244 i‡(
	`vm_Áu…
(
VM_FAULT_WRITE
, 
tf
->
tf_vaddr
)==0) {

245 
d⁄e
;

248 
EX_IBE
:

249 
EX_DBE
:

259 
	`∑nic
("Bu†îr‹Éx˚±i⁄, PC=0x%x\n", 
tf
->
tf_ïc
);

269 i‡(!
iskîn
) {

274 
	`kûl_cuπhªad
(
tf
->
tf_ïc
, 
code
,Åf->
tf_vaddr
);

275 
d⁄e
;

299 i‡(
cuπhªad
 !
NULL
 &&

300 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 !
NULL
) {

301 
tf
->
tf_ïc
 = (
vaddr_t
Ë
cuπhªad
->
t_machdï
.
tm_badÁu…func
;

302 
d⁄e
;

309 
	`k¥ötf
("∑nic: F©ÆÉx˚±i⁄ %u (%sËö kî√»mode\n", 
code
,

310 
å≠codíames
[
code
]);

311 
	`k¥ötf
("panic: EPC 0x%x,Éxception vaddr 0x%x\n",

312 
tf
->
tf_ïc
,Åf->
tf_vaddr
);

314 
	`∑nic
("I can't handleÅhis... IÅhink I'll just dieÇow...\n");

316 
d⁄e
:

321 
	`˝u_úqoff
();

322 
d⁄e2
:

330 i‡(
cuπhªad
->
t_°ack
 =
NULL
) {

334 
˝uthªads
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
;

335 
˝u°acks
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
->
t_°ack
 + 
STACK_SIZE
;

346 
	`KASSERT
(
	`SAME_STACK
(
˝u°acks
[
cur˝u
->
c_numbî
]-1, (
vaddr_t
)
tf
));

347 
	}
}

367 
	$mùs_u£rmode
(
å≠‰ame
 *
tf
)

376 
	`•l0
();

377 
	`˝u_úqoff
();

379 
˝uthªads
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
;

380 
˝u°acks
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
->
t_°ack
 + 
STACK_SIZE
;

397 
	`KASSERT
(
	`SAME_STACK
(
˝u°acks
[
cur˝u
->
c_numbî
]-1, (
vaddr_t
)
tf
));

402 
	`asm_u£rmode
(
tf
);

403 
	}
}

418 
	$íãr_√w_¥o˚ss
(
¨gc
, 
u£Ωå_t
 
¨gv
, 
vaddr_t
 
°ack
, vaddr_à
íåy
)

420 
å≠‰ame
 
tf
;

422 
	`bzîo
(&
tf
, (tf));

424 
tf
.
tf_°©us
 = 
CST_IRQMASK
 | 
CST_IEp
 | 
CST_KUp
;

425 
tf
.
tf_ïc
 = 
íåy
;

426 
tf
.
tf_a0
 = 
¨gc
;

427 
tf
.
tf_a1
 = (
vaddr_t
)
¨gv
;

428 
tf
.
tf_•
 = 
°ack
;

430 
	`mùs_u£rmode
(&
tf
);

431 
	}
}

	@test/os161/kern/arch/mips/syscall/syscall.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/sysˇŒ.h
>

33 
	~<lib.h
>

34 
	~<mùs/å≠‰ame.h
>

35 
	~<thªad.h
>

36 
	~<cuºít.h
>

37 
	~<sysˇŒ.h
>

79 
	$sysˇŒ
(
å≠‰ame
 *
tf
)

81 
ˇŒno
;

82 
öt32_t
 
ªtvÆ
;

83 
îr
;

85 
	`KASSERT
(
cuπhªad
 !
NULL
);

86 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

87 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

89 
ˇŒno
 = 
tf
->
tf_v0
;

100 
ªtvÆ
 = 0;

102 
ˇŒno
) {

103 
SYS_ªboŸ
:

104 
îr
 = 
	`sys_ªboŸ
(
tf
->
tf_a0
);

107 
SYS___time
:

108 
îr
 = 
	`sys___time
((
u£Ωå_t
)
tf
->
tf_a0
,

109 (
u£Ωå_t
)
tf
->
tf_a1
);

111 #ifde‡
UW


112 
SYS_wrôe
:

113 
îr
 = 
	`sys_wrôe
(()
tf
->
tf_a0
,

114 (
u£Ωå_t
)
tf
->
tf_a1
,

115 ()
tf
->
tf_a2
,

116 (*)(&
ªtvÆ
));

118 
SYS__exô
:

119 
	`sys__exô
(()
tf
->
tf_a0
);

121 
	`∑nic
("unexpectedÑeturn from sys__exit");

123 
SYS_gëpid
:

124 
îr
 = 
	`sys_gëpid
((
pid_t
 *)&
ªtvÆ
);

126 
SYS_waôpid
:

127 
îr
 = 
	`sys_waôpid
((
pid_t
)
tf
->
tf_a0
,

128 (
u£Ωå_t
)
tf
->
tf_a1
,

129 ()
tf
->
tf_a2
,

130 (
pid_t
 *)&
ªtvÆ
);

137 
	`k¥ötf
("Unknow¿sysˇŒ %d\n", 
ˇŒno
);

138 
îr
 = 
ENOSYS
;

143 i‡(
îr
) {

149 
tf
->
tf_v0
 = 
îr
;

150 
tf
->
tf_a3
 = 1;

154 
tf
->
tf_v0
 = 
ªtvÆ
;

155 
tf
->
tf_a3
 = 0;

163 
tf
->
tf_ïc
 += 4;

166 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

168 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

169 
	}
}

180 
	$íãr_f‹ked_¥o˚ss
(
å≠‰ame
 *
tf
)

182 ()
tf
;

183 
	}
}

	@test/os161/kern/arch/mips/thread/cpu.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<mùs/•ecüÃeg.h
>

37 
	~<mùs/å≠‰ame.h
>

38 
	~<∂©f‹m/max˝us.h
>

39 
	~<˝u.h
>

40 
	~<thªad.h
>

59 
vaddr_t
 
	g˝u°acks
[
MAXCPUS
];

60 
vaddr_t
 
	g˝uthªads
[
MAXCPUS
];

68 
	$˝u_machdï_öô
(
˝u
 *
c
)

70 
vaddr_t
 
°ackpoöãr
;

72 
	`KASSERT
(
c
->
c_numbî
 < 
MAXCPUS
);

74 i‡(
c
->
c_cuπhªad
->
t_°ack
 =
NULL
) {

84 
°ackpoöãr
 = (
vaddr_t
Ë
c
->
c_cuπhªad
->
t_°ack
;

86 
°ackpoöãr
 +
STACK_SIZE
;

88 
˝u°acks
[
c
->
c_numbî
] = 
°ackpoöãr
;

89 
˝uthªads
[
c
->
c_numbî
] = (
vaddr_t
)c->
c_cuπhªad
;

91 
	}
}

100 
	$˝u_idítify
()

104 
	}
}

130 
	#GET_STATUS
(
x
Ë
__asm
 vﬁ©ûe("mfc0 %0,$12" : "Ù" (x))

	)

131 
	#SET_STATUS
(
x
Ë
__asm
 vﬁ©ûe("mtc0 %0,$12" :: "r" (x))

	)

137 
	$˝u_úq⁄
()

139 
uöt32_t
 
x
;

141 
	`GET_STATUS
(
x
);

142 
x
 |
CST_IEc
;

143 
	`SET_STATUS
(
x
);

144 
	}
}

150 
	$˝u_úqoff
()

152 
uöt32_t
 
x
;

154 
	`GET_STATUS
(
x
);

155 
x
 &~(
uöt32_t
)
CST_IEc
;

156 
	`SET_STATUS
(
x
);

157 
	}
}

164 
	$˝u_úq⁄off
()

166 
uöt32_t
 
x
, 
x⁄
, 
xoff
;

168 
	`GET_STATUS
(
x
);

169 
x⁄
 = 
x
 | 
CST_IEc
;

170 
xoff
 = 
x
 & ~(
uöt32_t
)
CST_IEc
;

171 
	`SET_STATUS
(
x⁄
);

172 
__asm
 volatile("nop;Çop;Çop;Çop");

173 
	`SET_STATUS
(
xoff
);

174 
	}
}

192 
ölöe


194 
	$waô
()

207 
__asm
 volatile(

214 
	}
}

220 
	$˝u_idÀ
()

222 
	`waô
();

223 
	`˝u_úq⁄off
();

224 
	}
}

230 
	$˝u_hÆt
()

232 
	`˝u_úqoff
();

234 
	`waô
();

236 
	}
}

	@test/os161/kern/arch/mips/thread/switchframe.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<thªad.h
>

33 
	~<thªad¥iv©e.h
>

35 
	~"swôch‰ame.h
"

38 
mùs_thªad°¨t
( );

55 
swôch‰ame_öô
(
thªad
 *thread,

56 (*
íåypoöt
)(*
d©a1
, 
d©a2
),

57 *
d©a1
, 
d©a2
)

59 
vaddr_t
 
°ackt›
;

60 
swôch‰ame
 *
sf
;

67 
°ackt›
 = ((
vaddr_t
)
thªad
->
t_°ack
Ë+ 
STACK_SIZE
;

68 
sf
 = ((
swôch‰ame
 *Ë
°ackt›
) - 1;

71 
	`bzîo
(
sf
, (*sf));

91 
sf
->
sf_s0
 = (
uöt32_t
)
íåypoöt
;

92 
sf
->
sf_s1
 = (
uöt32_t
)
d©a1
;

93 
sf
->
sf_s2
 = (
uöt32_t
)
d©a2
;

94 
sf
->
sf_ø
 = (
uöt32_t
)
mùs_thªad°¨t
;

97 
thªad
->
t_c⁄ãxt
 = 
sf
;

98 
	}
}

	@test/os161/kern/arch/mips/thread/switchframe.h

30 #i‚de‡
_MIPS_SWITCHFRAME_H_


31 
	#_MIPS_SWITCHFRAME_H_


	)

39 
	sswôch‰ame
 {

40 
uöt32_t
 
	msf_s0
;

41 
uöt32_t
 
	msf_s1
;

42 
uöt32_t
 
	msf_s2
;

43 
uöt32_t
 
	msf_s3
;

44 
uöt32_t
 
	msf_s4
;

45 
uöt32_t
 
	msf_s5
;

46 
uöt32_t
 
	msf_s6
;

47 
uöt32_t
 
	msf_s8
;

48 
uöt32_t
 
	msf_gp
;

49 
uöt32_t
 
	msf_ø
;

	@test/os161/kern/arch/mips/thread/thread_machdep.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<thªad.h
>

37 
	~<thªad¥iv©e.h
>

40 
	$thªad_machdï_öô
(
thªad_machdï
 *
tm
)

42 
tm
->
tm_badÁu…func
 = 
NULL
;

43 
	}
}

46 
	$thªad_machdï_˛ónup
(
thªad_machdï
 *
tm
)

48 
	`KASSERT
(
tm
->
tm_badÁu…func
 =
NULL
);

49 
	}
}

	@test/os161/kern/arch/mips/vm/dumbvm.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<•l.h
>

34 
	~<•ölock.h
>

35 
	~<¥oc.h
>

36 
	~<cuºít.h
>

37 
	~<mùs/éb.h
>

38 
	~<addr•a˚.h
>

39 
	~<vm.h
>

49 
	#DUMBVM_STACKPAGES
 12

	)

54 
•ölock
 
	g°ólmem_lock
 = 
SPINLOCK_INITIALIZER
;

57 
	$vm_boŸ°øp
()

60 
	}
}

63 
∑ddr_t


64 
	$gëµages
(
≈ages
)

66 
∑ddr_t
 
addr
;

68 
	`•ölock_acquúe
(&
°ólmem_lock
);

70 
addr
 = 
	`øm_°ólmem
(
≈ages
);

72 
	`•ölock_ªÀa£
(&
°ólmem_lock
);

73  
addr
;

74 
	}
}

77 
vaddr_t


78 
	$Æloc_k∑ges
(
≈ages
)

80 
∑ddr_t
 
∑
;

81 
∑
 = 
	`gëµages
(
≈ages
);

82 i‡(
∑
==0) {

85  
	`PADDR_TO_KVADDR
(
∑
);

86 
	}
}

89 
	$‰ì_k∑ges
(
vaddr_t
 
addr
)

93 ()
addr
;

94 
	}
}

97 
	$vm_ébshoŸdown_Æl
()

99 
	`∑nic
("dumbvmÅriedÅo doÅlb shootdown?!\n");

100 
	}
}

103 
	$vm_ébshoŸdown
(c⁄° 
ébshoŸdown
 *
ts
)

105 ()
ts
;

106 
	`∑nic
("dumbvmÅriedÅo doÅlb shootdown?!\n");

107 
	}
}

110 
	$vm_Áu…
(
Áu…ty≥
, 
vaddr_t
 
Áu…addªss
)

112 
vaddr_t
 
vba£1
, 
vt›1
, 
vba£2
, 
vt›2
, 
°ackba£
, 
°ackt›
;

113 
∑ddr_t
 
∑ddr
;

114 
i
;

115 
uöt32_t
 
ehi
, 
ño
;

116 
addr•a˚
 *
as
;

117 
•l
;

119 
Áu…addªss
 &
PAGE_FRAME
;

121 
	`DEBUG
(
DB_VM
, "dumbvm: fau…: 0x%x\n", 
Áu…addªss
);

123 
Áu…ty≥
) {

124 
VM_FAULT_READONLY
:

126 
	`∑nic
("dumbvm: got VM_FAULT_READONLY\n");

127 
VM_FAULT_READ
:

128 
VM_FAULT_WRITE
:

131  
EINVAL
;

134 i‡(
cuΩroc
 =
NULL
) {

140  
EFAULT
;

143 
as
 = 
	`cuΩroc_gëas
();

144 i‡(
as
 =
NULL
) {

149  
EFAULT
;

153 
	`KASSERT
(
as
->
as_vba£1
 != 0);

154 
	`KASSERT
(
as
->
as_pba£1
 != 0);

155 
	`KASSERT
(
as
->
as_≈ages1
 != 0);

156 
	`KASSERT
(
as
->
as_vba£2
 != 0);

157 
	`KASSERT
(
as
->
as_pba£2
 != 0);

158 
	`KASSERT
(
as
->
as_≈ages2
 != 0);

159 
	`KASSERT
(
as
->
as_°ackpba£
 != 0);

160 
	`KASSERT
((
as
->
as_vba£1
 & 
PAGE_FRAME
) ==ás->as_vbase1);

161 
	`KASSERT
((
as
->
as_pba£1
 & 
PAGE_FRAME
) ==ás->as_pbase1);

162 
	`KASSERT
((
as
->
as_vba£2
 & 
PAGE_FRAME
) ==ás->as_vbase2);

163 
	`KASSERT
((
as
->
as_pba£2
 & 
PAGE_FRAME
) ==ás->as_pbase2);

164 
	`KASSERT
((
as
->
as_°ackpba£
 & 
PAGE_FRAME
) ==ás->as_stackpbase);

166 
vba£1
 = 
as
->
as_vba£1
;

167 
vt›1
 = 
vba£1
 + 
as
->
as_≈ages1
 * 
PAGE_SIZE
;

168 
vba£2
 = 
as
->
as_vba£2
;

169 
vt›2
 = 
vba£2
 + 
as
->
as_≈ages2
 * 
PAGE_SIZE
;

170 
°ackba£
 = 
USERSTACK
 - 
DUMBVM_STACKPAGES
 * 
PAGE_SIZE
;

171 
°ackt›
 = 
USERSTACK
;

173 i‡(
Áu…addªss
 >
vba£1
 && fau…addªs†< 
vt›1
) {

174 
∑ddr
 = (
Áu…addªss
 - 
vba£1
Ë+ 
as
->
as_pba£1
;

176 i‡(
Áu…addªss
 >
vba£2
 && fau…addªs†< 
vt›2
) {

177 
∑ddr
 = (
Áu…addªss
 - 
vba£2
Ë+ 
as
->
as_pba£2
;

179 i‡(
Áu…addªss
 >
°ackba£
 && fau…addªs†< 
°ackt›
) {

180 
∑ddr
 = (
Áu…addªss
 - 
°ackba£
Ë+ 
as
->
as_°ackpba£
;

183  
EFAULT
;

187 
	`KASSERT
((
∑ddr
 & 
PAGE_FRAME
) ==Öaddr);

190 
•l
 = 
	`•lhigh
();

192 
i
=0; i<
NUM_TLB
; i++) {

193 
	`éb_ªad
(&
ehi
, &
ño
, 
i
);

194 i‡(
ño
 & 
TLBLO_VALID
) {

197 
ehi
 = 
Áu…addªss
;

198 
ño
 = 
∑ddr
 | 
TLBLO_DIRTY
 | 
TLBLO_VALID
;

199 
	`DEBUG
(
DB_VM
, "dumbvm: 0x%x -> 0x%x\n", 
Áu…addªss
, 
∑ddr
);

200 
	`éb_wrôe
(
ehi
, 
ño
, 
i
);

201 
	`•lx
(
•l
);

205 
	`k¥ötf
("dumbvm: Ran out of TLBÉntries - cannot handleÖage fault\n");

206 
	`•lx
(
•l
);

207  
EFAULT
;

208 
	}
}

210 
addr•a˚
 *

211 
	$as_¸óã
()

213 
addr•a˚
 *
as
 = 
	`kmÆloc
((addrspace));

214 i‡(
as
==
NULL
) {

215  
NULL
;

218 
as
->
as_vba£1
 = 0;

219 
as
->
as_pba£1
 = 0;

220 
as
->
as_≈ages1
 = 0;

221 
as
->
as_vba£2
 = 0;

222 
as
->
as_pba£2
 = 0;

223 
as
->
as_≈ages2
 = 0;

224 
as
->
as_°ackpba£
 = 0;

226  
as
;

227 
	}
}

230 
	$as_de°roy
(
addr•a˚
 *
as
)

232 
	`k‰ì
(
as
);

233 
	}
}

236 
	$as_a˘iv©e
()

238 
i
, 
•l
;

239 
addr•a˚
 *
as
;

241 
as
 = 
	`cuΩroc_gëas
();

242 #ifde‡
UW


245 i‡(
as
 =
NULL
) {

250 
•l
 = 
	`•lhigh
();

252 
i
=0; i<
NUM_TLB
; i++) {

253 
	`éb_wrôe
(
	`TLBHI_INVALID
(
i
), 
	`TLBLO_INVALID
(), i);

256 
	`•lx
(
•l
);

257 
	}
}

260 
	$as_dó˘iv©e
()

263 
	}
}

266 
	$as_deföe_ªgi⁄
(
addr•a˚
 *
as
, 
vaddr_t
 
vaddr
, 
size_t
 
sz
,

267 
ªadabÀ
, 
wrôóbÀ
, 
execuèbÀ
)

269 
size_t
 
≈ages
;

272 
sz
 +
vaddr
 & ~(
vaddr_t
)
PAGE_FRAME
;

273 
vaddr
 &
PAGE_FRAME
;

276 
sz
 = (sz + 
PAGE_SIZE
 - 1Ë& 
PAGE_FRAME
;

278 
≈ages
 = 
sz
 / 
PAGE_SIZE
;

281 ()
ªadabÀ
;

282 ()
wrôóbÀ
;

283 ()
execuèbÀ
;

285 i‡(
as
->
as_vba£1
 == 0) {

286 
as
->
as_vba£1
 = 
vaddr
;

287 
as
->
as_≈ages1
 = 
≈ages
;

291 i‡(
as
->
as_vba£2
 == 0) {

292 
as
->
as_vba£2
 = 
vaddr
;

293 
as
->
as_≈ages2
 = 
≈ages
;

300 
	`k¥ötf
("dumbvm: Warning:Åoo manyÑegions\n");

301  
EUNIMP
;

302 
	}
}

306 
	$as_zîo_ªgi⁄
(
∑ddr_t
 
∑ddr
, 
≈ages
)

308 
	`bzîo
((*)
	`PADDR_TO_KVADDR
(
∑ddr
), 
≈ages
 * 
PAGE_SIZE
);

309 
	}
}

312 
	$as_¥ï¨e_lﬂd
(
addr•a˚
 *
as
)

314 
	`KASSERT
(
as
->
as_pba£1
 == 0);

315 
	`KASSERT
(
as
->
as_pba£2
 == 0);

316 
	`KASSERT
(
as
->
as_°ackpba£
 == 0);

318 
as
->
as_pba£1
 = 
	`gëµages
◊s->
as_≈ages1
);

319 i‡(
as
->
as_pba£1
 == 0) {

320  
ENOMEM
;

323 
as
->
as_pba£2
 = 
	`gëµages
◊s->
as_≈ages2
);

324 i‡(
as
->
as_pba£2
 == 0) {

325  
ENOMEM
;

328 
as
->
as_°ackpba£
 = 
	`gëµages
(
DUMBVM_STACKPAGES
);

329 i‡(
as
->
as_°ackpba£
 == 0) {

330  
ENOMEM
;

333 
	`as_zîo_ªgi⁄
(
as
->
as_pba£1
,ás->
as_≈ages1
);

334 
	`as_zîo_ªgi⁄
(
as
->
as_pba£2
,ás->
as_≈ages2
);

335 
	`as_zîo_ªgi⁄
(
as
->
as_°ackpba£
, 
DUMBVM_STACKPAGES
);

338 
	}
}

341 
	$as_com∂ëe_lﬂd
(
addr•a˚
 *
as
)

343 ()
as
;

345 
	}
}

348 
	$as_deföe_°ack
(
addr•a˚
 *
as
, 
vaddr_t
 *
°ack±r
)

350 
	`KASSERT
(
as
->
as_°ackpba£
 != 0);

352 *
°ack±r
 = 
USERSTACK
;

354 
	}
}

357 
	$as_c›y
(
addr•a˚
 *
ﬁd
, addr•a˚ **
ªt
)

359 
addr•a˚
 *
√w
;

361 
√w
 = 
	`as_¸óã
();

362 i‡(
√w
==
NULL
) {

363  
ENOMEM
;

366 
√w
->
as_vba£1
 = 
ﬁd
->as_vbase1;

367 
√w
->
as_≈ages1
 = 
ﬁd
->as_npages1;

368 
√w
->
as_vba£2
 = 
ﬁd
->as_vbase2;

369 
√w
->
as_≈ages2
 = 
ﬁd
->as_npages2;

372 i‡(
	`as_¥ï¨e_lﬂd
(
√w
)) {

373 
	`as_de°roy
(
√w
);

374  
ENOMEM
;

377 
	`KASSERT
(
√w
->
as_pba£1
 != 0);

378 
	`KASSERT
(
√w
->
as_pba£2
 != 0);

379 
	`KASSERT
(
√w
->
as_°ackpba£
 != 0);

381 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_pba£1
),

382 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_pba£1
),

383 
ﬁd
->
as_≈ages1
*
PAGE_SIZE
);

385 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_pba£2
),

386 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_pba£2
),

387 
ﬁd
->
as_≈ages2
*
PAGE_SIZE
);

389 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_°ackpba£
),

390 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_°ackpba£
),

391 
DUMBVM_STACKPAGES
*
PAGE_SIZE
);

393 *
ªt
 = 
√w
;

395 
	}
}

	@test/os161/kern/arch/mips/vm/ram.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<vm.h
>

33 
	~<maöbus.h
>

36 
vaddr_t
 
	gfú°‰ì
;

38 
∑ddr_t
 
	gfú°∑ddr
;

39 
∑ddr_t
 
	gœ°∑ddr
;

46 
	$øm_boŸ°øp
()

48 
size_t
 
ømsize
;

51 
ømsize
 = 
	`maöbus_ømsize
();

60 i‡(
ømsize
 > 508*1024*1024) {

61 
ømsize
 = 508*1024*1024;

64 
œ°∑ddr
 = 
ømsize
;

70 
fú°∑ddr
 = 
fú°‰ì
 - 
MIPS_KSEG0
;

72 
	`k¥ötf
("%ukÖhysical memoryávailable\n",

73 (
œ°∑ddr
-
fú°∑ddr
)/1024);

74 
	}
}

94 
∑ddr_t


95 
	$øm_°ólmem
(
≈ages
)

97 
size_t
 
size
;

98 
∑ddr_t
 
∑ddr
;

100 
size
 = 
≈ages
 * 
PAGE_SIZE
;

102 i‡(
fú°∑ddr
 + 
size
 > 
œ°∑ddr
) {

106 
∑ddr
 = 
fú°∑ddr
;

107 
fú°∑ddr
 +
size
;

109  
∑ddr
;

110 
	}
}

121 
	$øm_gësize
(
∑ddr_t
 *
lo
,Öaddr_à*
hi
)

123 *
lo
 = 
fú°∑ddr
;

124 *
hi
 = 
œ°∑ddr
;

125 
fú°∑ddr
 = 
œ°∑ddr
 = 0;

126 
	}
}

	@test/os161/kern/arch/sys161/dev/lamebus_machdep.c

30 
	~<ty≥s.h
>

31 
	~<kîn/uni°d.h
>

32 
	~<lib.h
>

33 
	~<mùs/å≠‰ame.h
>

34 
	~<˝u.h
>

35 
	~<•l.h
>

36 
	~<˛ock.h
>

37 
	~<thªad.h
>

38 
	~<cuºít.h
>

39 
	~<synch.h
>

40 
	~<maöbus.h
>

41 
	~<sys161/bus.h
>

42 
	~<œmebus/œmebus.h
>

43 
	~"autoc⁄f.h
"

51 
	#CPU_FREQUENCY
 25000000

	)

62 
	$mùs_timî_£t
(
uöt32_t
 
cou¡
)

68 
__asm
 volatile(

73 :: "r" (
cou¡
));

74 
	}
}

81 
œmebus_so·c
 *
	gœmebus
;

84 
	$maöbus_boŸ°øp
()

87 
	`KASSERT
(
cuπhªad
->
t_cur•l
 > 0);

90 
œmebus
 = 
	`œmebus_öô
();

93 
	`œmebus_föd_˝us
(
œmebus
);

98 
	`k¥ötf
("lamebus0 (system main bus)\n");

105 
	`•l0
();

111 
	`autoc⁄f_œmebus
(
œmebus
, 0);

116 
	`mùs_timî_£t
(
CPU_FREQUENCY
 / 
HZ
);

117 
	}
}

123 
	$maöbus_°¨t_˝us
()

125 
	`œmebus_°¨t_˝us
(
œmebus
);

126 
	}
}

134 
	$œmebus_m≠_¨ó
(
œmebus_so·c
 *
bus
, 
¶Ÿ
, 
uöt32_t
 
off£t
)

136 
uöt32_t
 
addªss
;

138 ()
bus
;

140 
	`KASSERT
(
¶Ÿ
 >0 && slŸ < 
LB_NSLOTS
);

142 
addªss
 = 
LB_BASEADDR
 + 
¶Ÿ
*
LB_SLOT_SIZE
 + 
off£t
;

143  (*)
addªss
;

144 
	}
}

149 
uöt32_t


150 
	$œmebus_ªad_ªgi°î
(
œmebus_so·c
 *
bus
, 
¶Ÿ
, 
uöt32_t
 
off£t
)

152 
uöt32_t
 *
±r
 = 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
);

154  *
±r
;

155 
	}
}

161 
	$œmebus_wrôe_ªgi°î
(
œmebus_so·c
 *
bus
, 
¶Ÿ
,

162 
uöt32_t
 
off£t
, uöt32_à
vÆ
)

164 
uöt32_t
 *
±r
 = 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
);

166 *
±r
 = 
vÆ
;

167 
	}
}

174 
	$maöbus_powîoff
()

182 
	`œmebus_powîoff
(
œmebus
);

183 
	}
}

189 
	$maöbus_ªboŸ
()

198 
	`k¥ötf
("CannotÑeboot -Öowering off instead, sorry.\n");

199 
	`maöbus_powîoff
();

200 
	}
}

208 
	$maöbus_hÆt
()

210 
	`˝u_hÆt
();

211 
	}
}

221 
	$maöbus_∑nic
()

223 
	`maöbus_powîoff
();

224 
	}
}

230 
uöt32_t


231 
	$maöbus_ømsize
()

233  
	`œmebus_ømsize
();

234 
	}
}

240 
	$maöbus_£nd_ùi
(
˝u
 *
èrgë
)

242 
	`œmebus_as£π_ùi
(
œmebus
, 
èrgë
);

243 
	}
}

250 
	#LAMEBUS_IRQ_BIT
 0x00000400

	)

251 
	#LAMEBUS_IPI_BIT
 0x00000800

	)

252 
	#MIPS_TIMER_BIT
 0x00008000

	)

255 
	$maöbus_öãºu±
(
å≠‰ame
 *
tf
)

257 
uöt32_t
 
ˇu£
;

260 
	`KASSERT
(
cuπhªad
->
t_cur•l
 > 0);

262 
ˇu£
 = 
tf
->
tf_ˇu£
;

263 i‡(
ˇu£
 & 
LAMEBUS_IRQ_BIT
) {

264 
	`œmebus_öãºu±
(
œmebus
);

266 i‡(
ˇu£
 & 
LAMEBUS_IPI_BIT
) {

267 
	`öãΩro˚ss‹_öãºu±
();

268 
	`œmebus_˛ór_ùi
(
œmebus
, 
cur˝u
);

270 i‡(
ˇu£
 & 
MIPS_TIMER_BIT
) {

272 
	`mùs_timî_£t
(
CPU_FREQUENCY
 / 
HZ
);

274 
	`h¨d˛ock
();

277 
	`∑nic
("Unknow¿öãºu±; cau£Ñegi°î i†%08x\n", 
ˇu£
);

279 
	}
}

	@test/os161/kern/arch/sys161/include/bus.h

30 #i‚de‡
_SYS161_BUS_H_


31 
	#_SYS161_BUS_H_


	)

40 
	~<machöe/vm.h
>

41 
	~<œmebus/œmebus.h
>

43 
	#bus_wrôe_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
, 
vÆ
) \

44 
	`œmebus_wrôe_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
, 
vÆ
)

	)

46 
	#bus_ªad_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
) \

47 
	`œmebus_ªad_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
)

	)

49 
	#bus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
) \

50 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
)

	)

57 
	#LB_BASEADDR
 (
MIPS_KSEG1
 + 0x1„00000)

	)

	@test/os161/kern/arch/sys161/include/maxcpus.h

30 #i‚de‡
_SYS161_MAXCPUS_H_


31 
	#_SYS161_MAXCPUS_H_


	)

42 
	#MAXCPUS
 32

	)

	@test/os161/kern/dev/generic/beep.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<gíîic/bìp.h
>

34 
	~"autoc⁄f.h
"

47 
bìp_so·c
 *
	gthe_bìp
 = 
NULL
;

50 
	$c⁄fig_bìp
(
bìp_so·c
 *
bs
, 
unô
)

53 i‡(
unô
!=0) {

54  
ENODEV
;

57 
	`KASSERT
(
the_bìp
==
NULL
);

58 
the_bìp
 = 
bs
;

60 
	}
}

63 
	$bìp
()

65 i‡(
the_bìp
!=
NULL
) {

66 
the_bìp
->
	`bs_bìp
—he_bìp->
bs_devd©a
);

69 
	`k¥ötf
("beep: Warning:Ço beep device\n");

71 
	}
}

	@test/os161/kern/dev/generic/beep.h

30 #i‚de‡
_GENERIC_BEEP_H_


31 
	#_GENERIC_BEEP_H_


	)

38 
	sbìp_so·c
 {

39 *
	mbs_devd©a
;

40 (*
	mbs_bìp
)(*
	mdevd©a
);

	@test/os161/kern/dev/generic/console.c

53 
	~<ty≥s.h
>

54 
	~<kîn/î∫o.h
>

55 
	~<lib.h
>

56 
	~<uio.h
>

57 
	~<thªad.h
>

58 
	~<cuºít.h
>

59 
	~<synch.h
>

60 
	~<gíîic/c⁄sﬁe.h
>

61 
	~<vfs.h
>

62 
	~<devi˚.h
>

63 
	~"autoc⁄f.h
"

68 
c⁄_so·c
 *
	gthe_c⁄sﬁe
 = 
NULL
;

74 
lock
 *
	gc⁄_u£æock_ªad
 = 
NULL
;

75 
lock
 *
	gc⁄_u£æock_wrôe
 = 
NULL
;

84 
	#DELAYBUFSIZE
 1024

	)

85 
	gdñayed_outbuf
[
DELAYBUFSIZE
];

86 
size_t
 
	gdñayed_outbuf_pos
=0;

90 
	$putch_dñayed
(
ch
)

97 
	`KASSERT
(
dñayed_outbuf_pos
 < (
dñayed_outbuf
));

98 
dñayed_outbuf
[
dñayed_outbuf_pos
++] = 
ch
;

99 
	}
}

103 
	$Êush_dñay_buf
()

105 
size_t
 
i
;

106 
i
=0; i<
dñayed_outbuf_pos
; i++) {

107 
	`putch
(
dñayed_outbuf
[
i
]);

109 
dñayed_outbuf_pos
 = 0;

110 
	}
}

120 
	$putch_pﬁÀd
(
c⁄_so·c
 *
cs
, 
ch
)

122 
cs
->
	`cs_£ndpﬁÀd
(cs->
cs_devd©a
, 
ch
);

123 
	}
}

127 
	$putch_¥ï¨e_pﬁÀd
(
c⁄_so·c
 *
cs
)

129 i‡(
cs
->
cs_°¨çﬁlög
 !
NULL
) {

130 
cs
->
	`cs_°¨çﬁlög
(cs->
cs_devd©a
);

132 
	}
}

136 
	$putch_com∂ëe_pﬁÀd
(
c⁄_so·c
 *
cs
)

138 i‡(
cs
->
cs_ídpﬁlög
 !
NULL
) {

139 
cs
->
	`cs_ídpﬁlög
(cs->
cs_devd©a
);

141 
	}
}

150 
	$putch_öå
(
c⁄_so·c
 *
cs
, 
ch
)

152 
	`P
(
cs
->
cs_w£m
);

153 
cs
->
	`cs_£nd
(cs->
cs_devd©a
, 
ch
);

154 
	}
}

161 
	$gëch_öå
(
c⁄_so·c
 *
cs
)

163 
ªt
;

165 
	`P
(
cs
->
cs_r£m
);

166 
ªt
 = 
cs
->
cs_gŸch¨s
[cs->
cs_gŸch¨s_èû
];

167 
cs
->
cs_gŸch¨s_èû
 =

168 (
cs
->
cs_gŸch¨s_èû
 + 1Ë% 
CONSOLE_INPUT_BUFFER_SIZE
;

169  
ªt
;

170 
	}
}

182 
	$c⁄_öput
(*
vcs
, 
ch
)

184 
c⁄_so·c
 *
cs
 = 
vcs
;

185 
√xthód
;

187 
√xthód
 = (
cs
->
cs_gŸch¨s_hód
 + 1Ë% 
CONSOLE_INPUT_BUFFER_SIZE
;

188 i‡(
√xthód
 =
cs
->
cs_gŸch¨s_èû
) {

193 
cs
->
cs_gŸch¨s
[cs->
cs_gŸch¨s_hód
] = 
ch
;

194 
cs
->
cs_gŸch¨s_hód
 = 
√xthód
;

196 
	`V
(
cs
->
cs_r£m
);

197 
	}
}

203 
	$c⁄_°¨t
(*
vcs
)

205 
c⁄_so·c
 *
cs
 = 
vcs
;

207 
	`V
(
cs
->
cs_w£m
);

208 
	}
}

221 
	$putch
(
ch
)

223 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

225 i‡(
cs
==
NULL
) {

226 
	`putch_dñayed
(
ch
);

228 i‡(
cuπhªad
->
t_ö_öãºu±
 || cuπhªad->
t_ùlhigh_cou¡
 > 0) {

229 
	`putch_pﬁÀd
(
cs
, 
ch
);

232 
	`putch_öå
(
cs
, 
ch
);

234 
	}
}

237 
	$putch_¥ï¨e
()

239 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

241 i‡(
cs
 =
NULL
) {

244 i‡(
cuπhªad
->
t_ö_öãºu±
 || cuπhªad->
t_ùlhigh_cou¡
 > 0) {

245 
	`putch_¥ï¨e_pﬁÀd
(
cs
);

250 
	}
}

253 
	$putch_com∂ëe
()

255 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

257 i‡(
cs
 =
NULL
) {

260 i‡(
cuπhªad
->
t_ö_öãºu±
 || cuπhªad->
t_ùlhigh_cou¡
 > 0) {

261 
	`putch_com∂ëe_pﬁÀd
(
cs
);

266 
	}
}

269 
	$gëch
()

271 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

272 
	`KASSERT
(
cs
 !
NULL
);

273 
	`KASSERT
(!
cuπhªad
->
t_ö_öãºu±
 && cuπhªad->
t_ùlhigh_cou¡
 == 0);

275  
	`gëch_öå
(
cs
);

276 
	}
}

286 
	$c⁄_›í
(
devi˚
 *
dev
, 
›íÊags
)

288 ()
dev
;

289 ()
›íÊags
;

291 
	}
}

295 
	$c⁄_˛o£
(
devi˚
 *
dev
)

297 ()
dev
;

299 
	}
}

303 
	$c⁄_io
(
devi˚
 *
dev
, 
uio
 *uio)

305 
ªsu…
;

306 
ch
;

307 
lock
 *
lk
;

309 ()
dev
;

311 i‡(
uio
->
uio_rw
==
UIO_READ
) {

312 
lk
 = 
c⁄_u£æock_ªad
;

315 
lk
 = 
c⁄_u£æock_wrôe
;

318 
	`KASSERT
(
lk
 !
NULL
);

319 
	`lock_acquúe
(
lk
);

321 
uio
->
uio_ªsid
 > 0) {

322 i‡(
uio
->
uio_rw
==
UIO_READ
) {

323 
ch
 = 
	`gëch
();

324 i‡(
ch
=='\r') {

325 
ch
 = '\n';

327 
ªsu…
 = 
	`uiomove
(&
ch
, 1, 
uio
);

328 i‡(
ªsu…
) {

329 
	`lock_ªÀa£
(
lk
);

330  
ªsu…
;

332 i‡(
ch
=='\n') {

337 
ªsu…
 = 
	`uiomove
(&
ch
, 1, 
uio
);

338 i‡(
ªsu…
) {

339 
	`lock_ªÀa£
(
lk
);

340  
ªsu…
;

342 i‡(
ch
=='\n') {

343 
	`putch
('\r');

345 
	`putch
(
ch
);

348 
	`lock_ªÀa£
(
lk
);

350 
	}
}

354 
	$c⁄_io˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

357 ()
dev
;

358 ()
›
;

359 ()
d©a
;

360  
EINVAL
;

361 
	}
}

365 
	$©èch_c⁄sﬁe_to_vfs
(
c⁄_so·c
 *
cs
)

367 
devi˚
 *
dev
;

368 
ªsu…
;

370 
dev
 = 
	`kmÆloc
((*dev));

371 i‡(
dev
==
NULL
) {

372  
ENOMEM
;

375 
dev
->
d_›í
 = 
c⁄_›í
;

376 
dev
->
d_˛o£
 = 
c⁄_˛o£
;

377 
dev
->
d_io
 = 
c⁄_io
;

378 
dev
->
d_io˘l
 = 
c⁄_io˘l
;

379 
dev
->
d_blocks
 = 0;

380 
dev
->
d_blocksize
 = 1;

381 
dev
->
d_d©a
 = 
cs
;

383 
ªsu…
 = 
	`vfs_adddev
("c⁄", 
dev
, 0);

384 i‡(
ªsu…
) {

385 
	`k‰ì
(
dev
);

386  
ªsu…
;

390 
	}
}

399 
	$c⁄fig_c⁄
(
c⁄_so·c
 *
cs
, 
unô
)

401 
£m≠h‹e
 *
r£m
, *
w£m
;

402 
lock
 *
æk
, *
wlk
;

411 i‡(
unô
>0) {

412 
	`KASSERT
(
the_c⁄sﬁe
!=
NULL
);

413  
ENODEV
;

415 
	`KASSERT
(
the_c⁄sﬁe
==
NULL
);

417 
r£m
 = 
	`£m_¸óã
("consoleÑead", 0);

418 i‡(
r£m
 =
NULL
) {

419  
ENOMEM
;

421 
w£m
 = 
	`£m_¸óã
("console write", 1);

422 i‡(
w£m
 =
NULL
) {

423 
	`£m_de°roy
(
r£m
);

424  
ENOMEM
;

426 
æk
 = 
	`lock_¸óã
("console-lock-read");

427 i‡(
æk
 =
NULL
) {

428 
	`£m_de°roy
(
r£m
);

429 
	`£m_de°roy
(
w£m
);

430  
ENOMEM
;

432 
wlk
 = 
	`lock_¸óã
("console-lock-write");

433 i‡(
wlk
 =
NULL
) {

434 
	`lock_de°roy
(
æk
);

435 
	`£m_de°roy
(
r£m
);

436 
	`£m_de°roy
(
w£m
);

437  
ENOMEM
;

440 
cs
->
cs_r£m
 = 
r£m
;

441 
cs
->
cs_w£m
 = 
w£m
;

442 
cs
->
cs_gŸch¨s_hód
 = 0;

443 
cs
->
cs_gŸch¨s_èû
 = 0;

445 
the_c⁄sﬁe
 = 
cs
;

446 
c⁄_u£æock_ªad
 = 
æk
;

447 
c⁄_u£æock_wrôe
 = 
wlk
;

449 
	`Êush_dñay_buf
();

451  
	`©èch_c⁄sﬁe_to_vfs
(
cs
);

452 
	}
}

	@test/os161/kern/dev/generic/console.h

30 #i‚de‡
_GENERIC_CONSOLE_H_


31 
	#_GENERIC_CONSOLE_H_


	)

40 
	#CONSOLE_INPUT_BUFFER_SIZE
 32

	)

42 
	sc⁄_so·c
 {

44 *
	mcs_devd©a
;

45 (*
	mcs_£nd
)(*
	mdevd©a
, 
	mch
);

46 (*
	mcs_£ndpﬁÀd
)(*
	mdevd©a
, 
	mch
);

47 (*
	mcs_°¨çﬁlög
)(*
	mdevd©a
);

48 (*
	mcs_ídpﬁlög
)(*
	mdevd©a
);

51 
£m≠h‹e
 *
	mcs_r£m
;

52 
£m≠h‹e
 *
	mcs_w£m
;

53 
	mcs_gŸch¨s
[
CONSOLE_INPUT_BUFFER_SIZE
];

54 
	mcs_gŸch¨s_hód
;

55 
	mcs_gŸch¨s_èû
;

61 
c⁄_öput
–*
cs
, 
ch
);

62 
c⁄_°¨t
–*
cs
);

	@test/os161/kern/dev/generic/random.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/f˙é.h
>

33 
	~<lib.h
>

34 
	~<uio.h
>

35 
	~<vfs.h
>

36 
	~<gíîic/øndom.h
>

37 
	~"autoc⁄f.h
"

50 
øndom_so·c
 *
	gthe_øndom
 = 
NULL
;

58 
	$ønd›í
(
devi˚
 *
dev
, 
›íÊags
)

60 ()
dev
;

62 i‡(
›íÊags
 !
O_RDONLY
) {

63  
EIO
;

67 
	}
}

74 
	$ønd˛o£
(
devi˚
 *
dev
)

76 ()
dev
;

78 
	}
}

85 
	$øndio
(
devi˚
 *
dev
, 
uio
 *uio)

87 
øndom_so·c
 *
rs
 = 
dev
->
d_d©a
;

89 i‡(
uio
->
uio_rw
 !
UIO_READ
) {

90  
EIO
;

93  
rs
->
	`rs_ªad
‘s->
rs_devd©a
, 
uio
);

94 
	}
}

101 
	$øndio˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

106 ()
dev
;

107 ()
›
;

108 ()
d©a
;

109  
EIOCTL
;

110 
	}
}

116 
	$c⁄fig_øndom
(
øndom_so·c
 *
rs
, 
unô
)

118 
ªsu…
;

121 i‡(
unô
!=0) {

122  
ENODEV
;

125 
	`KASSERT
(
the_øndom
==
NULL
);

126 
the_øndom
 = 
rs
;

128 
rs
->
rs_dev
.
d_›í
 = 
ønd›í
;

129 
rs
->
rs_dev
.
d_˛o£
 = 
ønd˛o£
;

130 
rs
->
rs_dev
.
d_io
 = 
øndio
;

131 
rs
->
rs_dev
.
d_io˘l
 = 
øndio˘l
;

132 
rs
->
rs_dev
.
d_blocks
 = 0;

133 
rs
->
rs_dev
.
d_blocksize
 = 1;

134 
rs
->
rs_dev
.
d_d©a
 =Ñs;

137 
ªsu…
 = 
	`vfs_adddev
("øndom", &
rs
->
rs_dev
, 0);

138 i‡(
ªsu…
) {

139  
ªsu…
;

143 
	}
}

150 
uöt32_t


151 
	$øndom
()

153 i‡(
the_øndom
==
NULL
) {

154 
	`∑nic
("NoÑandom device\n");

156  
the_øndom
->
	`rs_øndom
—he_øndom->
rs_devd©a
);

157 
	}
}

159 
uöt32_t


160 
	$øndmax
()

162 i‡(
the_øndom
==
NULL
) {

163 
	`∑nic
("NoÑandom device\n");

165  
the_øndom
->
	`rs_øndmax
—he_øndom->
rs_devd©a
);

166 
	}
}

	@test/os161/kern/dev/generic/random.h

30 #i‚de‡
_GENERIC_RANDOM_H_


31 
	#_GENERIC_RANDOM_H_


	)

33 
	~<devi˚.h
>

34 
	guio
;

36 
	søndom_so·c
 {

38 *
	mrs_devd©a
;

39 
uöt32_t
 (*
rs_øndom
)(*
	mdevd©a
);

40 
uöt32_t
 (*
rs_øndmax
)(*
	mdevd©a
);

41 (*
	mrs_ªad
)(*
	mdevd©a
, 
uio
 *
	muio
);

43 
devi˚
 
	mrs_dev
;

	@test/os161/kern/dev/generic/rtclock.c

43 
	~<ty≥s.h
>

44 
	~<kîn/î∫o.h
>

45 
	~<lib.h
>

46 
	~<˛ock.h
>

47 
	~<gíîic/π˛ock.h
>

48 
	~"autoc⁄f.h
"

50 
π˛ock_so·c
 *
	gthe_˛ock
 = 
NULL
;

53 
	$c⁄fig_π˛ock
(
π˛ock_so·c
 *
πc
, 
unô
)

56 i‡(
unô
!=0) {

57  
ENODEV
;

60 
	`KASSERT
(
the_˛ock
==
NULL
);

61 
the_˛ock
 = 
πc
;

63 
	}
}

66 
	$gëtime
(
time_t
 *
£cs
, 
uöt32_t
 *
n£cs
)

68 
	`KASSERT
(
the_˛ock
!=
NULL
);

69 
the_˛ock
->
	`πc_gëtime
—he_˛ock->
πc_devd©a
, 
£cs
, 
n£cs
);

70 
	}
}

	@test/os161/kern/dev/generic/rtclock.h

30 #i‚de‡
_GENERIC_RTCLOCK_H_


31 
	#_GENERIC_RTCLOCK_H_


	)

38 
	sπ˛ock_so·c
 {

39 *
	mπc_devd©a
;

41 (*
	mπc_gëtime
)(*
	mdevd©a
, 
time_t
 *
	m£cs
, 
uöt32_t
 *
	mn£cs
);

	@test/os161/kern/dev/lamebus/beep_ltimer.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/bìp.h
>

38 
	~<œmebus/…imî.h
>

39 
	~"autoc⁄f.h
"

41 
bìp_so·c
 *

42 
	$©èch_bìp_to_…imî
(
bì≤o
, 
…imî_so·c
 *
ls
)

44 
bìp_so·c
 *
bs
 = 
	`kmÆloc
((beep_softc));

45 i‡(
bs
==
NULL
) {

46  
NULL
;

49 ()
bì≤o
;

51 
bs
->
bs_devd©a
 = 
ls
;

52 
bs
->
bs_bìp
 = 
…imî_bìp
;

54  
bs
;

55 
	}
}

	@test/os161/kern/dev/lamebus/con_lscreen.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/c⁄sﬁe.h
>

38 
	~<œmebus/ls¸ìn.h
>

39 
	~"autoc⁄f.h
"

41 
c⁄_so·c
 *

42 
	$©èch_c⁄_to_ls¸ìn
(
c⁄¢o
, 
ls¸ìn_so·c
 *
ls
)

44 
c⁄_so·c
 *
cs
 = 
	`kmÆloc
((con_softc));

45 i‡(
cs
==
NULL
) {

46  
NULL
;

49 
cs
->
cs_devd©a
 = 
ls
;

50 
cs
->
cs_£nd
 = 
ls¸ìn_wrôe
;

51 
cs
->
cs_£ndpﬁÀd
 = 
ls¸ìn_wrôe
;

52 
cs
->
cs_°¨çﬁlög
 = 
NULL
;

53 
cs
->
cs_ídpﬁlög
 = 
NULL
;

55 
ls
->
ls_devd©a
 = 
cs
;

56 
ls
->
ls_°¨t
 = 
c⁄_°¨t
;

57 
ls
->
ls_öput
 = 
c⁄_öput
;

59  
cs
;

60 
	}
}

	@test/os161/kern/dev/lamebus/con_lser.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/c⁄sﬁe.h
>

38 
	~<œmebus/l£r.h
>

39 
	~"autoc⁄f.h
"

41 
c⁄_so·c
 *

42 
	$©èch_c⁄_to_l£r
(
c⁄¢o
, 
l£r_so·c
 *
ls
)

44 
c⁄_so·c
 *
cs
 = 
	`kmÆloc
((con_softc));

45 i‡(
cs
==
NULL
) {

46  
NULL
;

49 ()
c⁄¢o
;

51 
cs
->
cs_devd©a
 = 
ls
;

52 
cs
->
cs_£nd
 = 
l£r_wrôe
;

53 
cs
->
cs_£ndpﬁÀd
 = 
l£r_wrôïﬁÀd
;

54 
cs
->
cs_°¨çﬁlög
 = 
l£r_°¨çﬁlög
;

55 
cs
->
cs_ídpﬁlög
 = 
l£r_ídpﬁlög
;

57 
ls
->
ls_devd©a
 = 
cs
;

58 
ls
->
ls_°¨t
 = 
c⁄_°¨t
;

59 
ls
->
ls_öput
 = 
c⁄_öput
;

61  
cs
;

62 
	}
}

	@test/os161/kern/dev/lamebus/emu.c

43 
	~<ty≥s.h
>

44 
	~<kîn/î∫o.h
>

45 
	~<kîn/f˙é.h
>

46 
	~<°©.h
>

47 
	~<lib.h
>

48 
	~<¨øy.h
>

49 
	~<uio.h
>

50 
	~<synch.h
>

51 
	~<œmebus/emu.h
>

52 
	~<∂©f‹m/bus.h
>

53 
	~<vfs.h
>

54 
	~<emufs.h
>

55 
	~"autoc⁄f.h
"

58 
	#REG_HANDLE
 0

	)

59 
	#REG_OFFSET
 4

	)

60 
	#REG_IOLEN
 8

	)

61 
	#REG_OPER
 12

	)

62 
	#REG_RESULT
 16

	)

65 
	#EMU_BUFFER
 32768

	)

68 
	#EMU_OP_OPEN
 1

	)

69 
	#EMU_OP_CREATE
 2

	)

70 
	#EMU_OP_EXCLCREATE
 3

	)

71 
	#EMU_OP_CLOSE
 4

	)

72 
	#EMU_OP_READ
 5

	)

73 
	#EMU_OP_READDIR
 6

	)

74 
	#EMU_OP_WRITE
 7

	)

75 
	#EMU_OP_GETSIZE
 8

	)

76 
	#EMU_OP_TRUNC
 9

	)

79 
	#EMU_RES_SUCCESS
 1

	)

80 
	#EMU_RES_BADHANDLE
 2

	)

81 
	#EMU_RES_BADOP
 3

	)

82 
	#EMU_RES_BADPATH
 4

	)

83 
	#EMU_RES_BADSIZE
 5

	)

84 
	#EMU_RES_EXISTS
 6

	)

85 
	#EMU_RES_ISDIR
 7

	)

86 
	#EMU_RES_MEDIA
 8

	)

87 
	#EMU_RES_NOHANDLES
 9

	)

88 
	#EMU_RES_NOSPACE
 10

	)

89 
	#EMU_RES_NOTDIR
 11

	)

90 
	#EMU_RES_UNKNOWN
 12

	)

91 
	#EMU_RES_UNSUPP
 13

	)

102 
ölöe


103 
uöt32_t


104 
	$emu_ºeg
(
emu_so·c
 *
sc
, 
uöt32_t
 
ªg
)

106  
	`bus_ªad_ªgi°î
(
sc
->
e_busd©a
, sc->
e_bu•os
, 
ªg
);

107 
	}
}

113 
ölöe


115 
	$emu_wªg
(
emu_so·c
 *
sc
, 
uöt32_t
 
ªg
, uöt32_à
vÆ
)

117 
	`bus_wrôe_ªgi°î
(
sc
->
e_busd©a
, sc->
e_bu•os
, 
ªg
, 
vÆ
);

118 
	}
}

124 
	$emu_úq
(*
dev
)

126 
emu_so·c
 *
sc
 = 
dev
;

128 
sc
->
e_ªsu…
 = 
	`emu_ºeg
(sc, 
REG_RESULT
);

129 
	`emu_wªg
(
sc
, 
REG_RESULT
, 0);

131 
	`V
(
sc
->
e_£m
);

132 
	}
}

139 
uöt32_t


140 
	$å™¶©e_îr
(
emu_so·c
 *
sc
, 
uöt32_t
 
code
)

142 
code
) {

143 
EMU_RES_SUCCESS
:  0;

144 
EMU_RES_BADHANDLE
:

145 
EMU_RES_BADOP
:

146 
EMU_RES_BADSIZE
:

147 
	`∑nic
("emu%d: gŸ f©ÆÑesu… codê%d\n", 
sc
->
e_unô
, 
code
);

148 
EMU_RES_BADPATH
:  
ENOENT
;

149 
EMU_RES_EXISTS
:  
EEXIST
;

150 
EMU_RES_ISDIR
:  
EISDIR
;

151 
EMU_RES_MEDIA
:  
EIO
;

152 
EMU_RES_NOHANDLES
:  
ENFILE
;

153 
EMU_RES_NOSPACE
:  
ENOSPC
;

154 
EMU_RES_NOTDIR
:  
ENOTDIR
;

155 
EMU_RES_UNKNOWN
:  
EIO
;

156 
EMU_RES_UNSUPP
:  
EUNIMP
;

158 
	`k¥ötf
("emu%d: Unknow¿ªsu… codê%d\n", 
sc
->
e_unô
, 
code
);

159  
EAGAIN
;

160 
	}
}

167 
	$emu_waôd⁄e
(
emu_so·c
 *
sc
)

169 
	`P
(
sc
->
e_£m
);

170  
	`å™¶©e_îr
(
sc
, sc->
e_ªsu…
);

171 
	}
}

181 
	$emu_›í
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, c⁄° *
«me
,

182 
boﬁ
 
¸óã
, boﬁ 
ex˛
, 
mode_t
 
mode
,

183 
uöt32_t
 *
√wh™dÀ
, *
√wisdú
)

185 
uöt32_t
 
›
;

186 
ªsu…
;

188 i‡(
	`°æí
(
«me
)+1 > 
EMU_MAXIO
) {

189  
ENAMETOOLONG
;

192 i‡(
¸óã
 && 
ex˛
) {

193 
›
 = 
EMU_OP_EXCLCREATE
;

195 i‡(
¸óã
) {

196 
›
 = 
EMU_OP_CREATE
;

199 
›
 = 
EMU_OP_OPEN
;

203 ()
mode
;

205 
	`lock_acquúe
(
sc
->
e_lock
);

207 
	`°r˝y
(
sc
->
e_iobuf
, 
«me
);

208 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
	`°æí
(
«me
));

209 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

210 
	`emu_wªg
(
sc
, 
REG_OPER
, 
›
);

211 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

213 i‡(
ªsu…
==0) {

214 *
√wh™dÀ
 = 
	`emu_ºeg
(
sc
, 
REG_HANDLE
);

215 *
√wisdú
 = 
	`emu_ºeg
(
sc
, 
REG_IOLEN
)>0;

218 
	`lock_ªÀa£
(
sc
->
e_lock
);

219  
ªsu…
;

220 
	}
}

229 
	$emu_˛o£
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
)

231 
ªsu…
;

232 
boﬁ
 
möe
;

233 
ªåõs
 = 0;

235 
möe
 = 
	`lock_do_i_hﬁd
(
sc
->
e_lock
);

236 i‡(!
möe
) {

237 
	`lock_acquúe
(
sc
->
e_lock
);

243 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

244 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_CLOSE
);

245 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

247 i‡(
ªsu…
==
EIO
 && 
ªåõs
 < 10) {

248 
	`k¥ötf
("emu%d: I/OÉrror on close,Ñetrying\n",

249 
sc
->
e_unô
);

250 
ªåõs
++;

256 i‡(!
möe
) {

257 
	`lock_ªÀa£
(
sc
->
e_lock
);

259  
ªsu…
;

260 
	}
}

267 
	$emu_d‹ód
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

268 
uöt32_t
 
›
, 
uio
 *uio)

270 
ªsu…
;

272 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

274 
	`lock_acquúe
(
sc
->
e_lock
);

276 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

277 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

278 
	`emu_wªg
(
sc
, 
REG_OFFSET
, 
uio
->
uio_off£t
);

279 
	`emu_wªg
(
sc
, 
REG_OPER
, 
›
);

280 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

281 i‡(
ªsu…
) {

282 
out
;

285 
ªsu…
 = 
	`uiomove
(
sc
->
e_iobuf
, 
	`emu_ºeg
(sc, 
REG_IOLEN
), 
uio
);

287 
uio
->
uio_off£t
 = 
	`emu_ºeg
(
sc
, 
REG_OFFSET
);

289 
out
:

290 
	`lock_ªÀa£
(
sc
->
e_lock
);

291  
ªsu…
;

292 
	}
}

299 
	$emu_ªad
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

300 
uio
 *uio)

302  
	`emu_d‹ód
(
sc
, 
h™dÀ
, 
Àn
, 
EMU_OP_READ
, 
uio
);

303 
	}
}

310 
	$emu_ªaddú
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

311 
uio
 *uio)

313  
	`emu_d‹ód
(
sc
, 
h™dÀ
, 
Àn
, 
EMU_OP_READDIR
, 
uio
);

314 
	}
}

321 
	$emu_wrôe
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

322 
uio
 *uio)

324 
ªsu…
;

326 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_WRITE
);

328 
	`lock_acquúe
(
sc
->
e_lock
);

330 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

331 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

332 
	`emu_wªg
(
sc
, 
REG_OFFSET
, 
uio
->
uio_off£t
);

334 
ªsu…
 = 
	`uiomove
(
sc
->
e_iobuf
, 
Àn
, 
uio
);

335 i‡(
ªsu…
) {

336 
out
;

339 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_WRITE
);

340 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

342 
out
:

343 
	`lock_ªÀa£
(
sc
->
e_lock
);

344  
ªsu…
;

345 
	}
}

352 
	$emu_gësize
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, 
off_t
 *
ªtvÆ
)

354 
ªsu…
;

356 
	`lock_acquúe
(
sc
->
e_lock
);

358 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

359 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_GETSIZE
);

360 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

361 i‡(
ªsu…
==0) {

362 *
ªtvÆ
 = 
	`emu_ºeg
(
sc
, 
REG_IOLEN
);

365 
	`lock_ªÀa£
(
sc
->
e_lock
);

366  
ªsu…
;

367 
	}
}

374 
	$emu_åunc
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, 
off_t
 
Àn
)

376 
ªsu…
;

378 
	`lock_acquúe
(
sc
->
e_lock
);

380 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

381 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

382 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_TRUNC
);

383 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

385 
	`lock_ªÀa£
(
sc
->
e_lock
);

386  
ªsu…
;

387 
	}
}

399 
emufs_lﬂdvnode
(
emufs_fs
 *
ef
, 
uöt32_t
 
h™dÀ
, 
isdú
,

400 
emufs_vnode
 **
ªt
);

407 
	$emufs_›í
(
vnode
 *
v
, 
›íÊags
)

417 i‡(
›íÊags
 & 
O_APPEND
) {

418  
EUNIMP
;

421 ()
v
;

424 
	}
}

431 
	$emufs_›ídú
(
vnode
 *
v
, 
›íÊags
)

433 
›íÊags
 & 
O_ACCMODE
) {

434 
O_RDONLY
:

436 
O_WRONLY
:

437 
O_RDWR
:

439  
EISDIR
;

441 i‡(
›íÊags
 & 
O_APPEND
) {

442  
EISDIR
;

445 ()
v
;

447 
	}
}

454 
	$emufs_˛o£
(
vnode
 *
v
)

456 ()
v
;

458 
	}
}

467 
	$emufs_ª˛aim
(
vnode
 *
v
)

469 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

470 
emufs_fs
 *
ef
 = 
v
->
vn_fs
->
fs_d©a
;

471 
ix
, 
i
, 
num
;

472 
ªsu…
;

479 
	`vfs_biglock_acquúe
();

480 
	`lock_acquúe
(
ef
->
ef_emu
->
e_lock
);

482 i‡(
ev
->
ev_v
.
vn_ªfcou¡
 != 1) {

483 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

484 
	`vfs_biglock_ªÀa£
();

485  
EBUSY
;

489 
ªsu…
 = 
	`emu_˛o£
(
ev
->
ev_emu
,Év->
ev_h™dÀ
);

490 i‡(
ªsu…
) {

491 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

492 
	`vfs_biglock_ªÀa£
();

493  
ªsu…
;

496 
num
 = 
	`vnodóºay_num
(
ef
->
ef_vnodes
);

497 
ix
 = 
num
;

498 
i
=0; i<
num
; i++) {

499 
vnode
 *
vx
;

501 
vx
 = 
	`vnodóºay_gë
(
ef
->
ef_vnodes
, 
i
);

502 i‡(
vx
 =
v
) {

503 
ix
 = 
i
;

507 i‡(
ix
 =
num
) {

508 
	`∑nic
("emu%d:Ñeclaim vnode %uÇot in vnodeÖool\n",

509 
ef
->
ef_emu
->
e_unô
, 
ev
->
ev_h™dÀ
);

512 
	`vnodóºay_ªmove
(
ef
->
ef_vnodes
, 
ix
);

513 
	`VOP_CLEANUP
(&
ev
->
ev_v
);

515 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

516 
	`vfs_biglock_ªÀa£
();

518 
	`k‰ì
(
ev
);

520 
	}
}

527 
	$emufs_ªad
(
vnode
 *
v
, 
uio
 *uio)

529 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

530 
uöt32_t
 
amt
;

531 
size_t
 
ﬁdªsid
;

532 
ªsu…
;

534 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

536 
uio
->
uio_ªsid
 > 0) {

537 
amt
 = 
uio
->
uio_ªsid
;

538 i‡(
amt
 > 
EMU_MAXIO
) {

539 
amt
 = 
EMU_MAXIO
;

542 
ﬁdªsid
 = 
uio
->
uio_ªsid
;

544 
ªsu…
 = 
	`emu_ªad
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

545 i‡(
ªsu…
) {

546  
ªsu…
;

549 i‡(
uio
->
uio_ªsid
 =
ﬁdªsid
) {

556 
	}
}

563 
	$emufs_gëdúíåy
(
vnode
 *
v
, 
uio
 *uio)

565 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

566 
uöt32_t
 
amt
;

568 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

570 
amt
 = 
uio
->
uio_ªsid
;

571 i‡(
amt
 > 
EMU_MAXIO
) {

572 
amt
 = 
EMU_MAXIO
;

575  
	`emu_ªaddú
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

576 
	}
}

583 
	$emufs_wrôe
(
vnode
 *
v
, 
uio
 *uio)

585 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

586 
uöt32_t
 
amt
;

587 
size_t
 
ﬁdªsid
;

588 
ªsu…
;

590 
	`KASSERT
(
uio
->
uio_rw
==
UIO_WRITE
);

592 
uio
->
uio_ªsid
 > 0) {

593 
amt
 = 
uio
->
uio_ªsid
;

594 i‡(
amt
 > 
EMU_MAXIO
) {

595 
amt
 = 
EMU_MAXIO
;

598 
ﬁdªsid
 = 
uio
->
uio_ªsid
;

600 
ªsu…
 = 
	`emu_wrôe
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

601 i‡(
ªsu…
) {

602  
ªsu…
;

605 i‡(
uio
->
uio_ªsid
 =
ﬁdªsid
) {

612 
	}
}

619 
	$emufs_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

625 ()
v
;

626 ()
›
;

627 ()
d©a
;

629  
EINVAL
;

630 
	}
}

637 
	$emufs_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

639 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

640 
ªsu…
;

642 
	`bzîo
(
°©buf
, (
°©
));

644 
ªsu…
 = 
	`emu_gësize
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, &
°©buf
->
°_size
);

645 i‡(
ªsu…
) {

646  
ªsu…
;

649 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

650 i‡(
ªsu…
) {

651  
ªsu…
;

653 
°©buf
->
°_mode
 |= 0644;

654 
°©buf
->
°_∆ök
 = 1;

655 
°©buf
->
°_blocks
 = 0;

658 
	}
}

665 
	$emufs_fûe_gëty≥
(
vnode
 *
v
, 
uöt32_t
 *
ªsu…
)

667 ()
v
;

668 *
ªsu…
 = 
S_IFREG
;

670 
	}
}

677 
	$emufs_dú_gëty≥
(
vnode
 *
v
, 
uöt32_t
 *
ªsu…
)

679 ()
v
;

680 *
ªsu…
 = 
S_IFDIR
;

682 
	}
}

689 
	$emufs_åy£ek
(
vnode
 *
v
, 
off_t
 
pos
)

691 i‡(
pos
<0) {

692  
EINVAL
;

696 ()
v
;

699 
	}
}

706 
	$emufs_fsync
(
vnode
 *
v
)

708 ()
v
;

710 
	}
}

717 
	$emufs_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

719 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

720  
	`emu_åunc
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
Àn
);

721 
	}
}

728 
	$emufs_¸ót
(
vnode
 *
dú
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

729 
vnode
 **
ªt
)

731 
emufs_vnode
 *
ev
 = 
dú
->
vn_d©a
;

732 
emufs_fs
 *
ef
 = 
dú
->
vn_fs
->
fs_d©a
;

733 
emufs_vnode
 *
√wguy
;

734 
uöt32_t
 
h™dÀ
;

735 
ªsu…
;

736 
isdú
;

738 
ªsu…
 = 
	`emu_›í
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
«me
, 
åue
, 
ex˛
, 
mode
,

739 &
h™dÀ
, &
isdú
);

740 i‡(
ªsu…
) {

741  
ªsu…
;

744 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
h™dÀ
, 
isdú
, &
√wguy
);

745 i‡(
ªsu…
) {

746 
	`emu_˛o£
(
ev
->
ev_emu
, 
h™dÀ
);

747  
ªsu…
;

750 *
ªt
 = &
√wguy
->
ev_v
;

752 
	}
}

759 
	$emufs_lookup
(
vnode
 *
dú
, *
∑th«me
, vnodê**
ªt
)

761 
emufs_vnode
 *
ev
 = 
dú
->
vn_d©a
;

762 
emufs_fs
 *
ef
 = 
dú
->
vn_fs
->
fs_d©a
;

763 
emufs_vnode
 *
√wguy
;

764 
uöt32_t
 
h™dÀ
;

765 
ªsu…
;

766 
isdú
;

768 
ªsu…
 = 
	`emu_›í
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
∑th«me
, 
Ál£
, false, 0,

769 &
h™dÀ
, &
isdú
);

770 i‡(
ªsu…
) {

771  
ªsu…
;

774 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
h™dÀ
, 
isdú
, &
√wguy
);

775 i‡(
ªsu…
) {

776 
	`emu_˛o£
(
ev
->
ev_emu
, 
h™dÀ
);

777  
ªsu…
;

780 *
ªt
 = &
√wguy
->
ev_v
;

782 
	}
}

789 
	$emufs_look∑ª¡
(
vnode
 *
dú
, *
∑th«me
, vnodê**
ªt
,

790 *
buf
, 
size_t
 
Àn
)

792 *
s
;

794 
s
 = 
	`°ºchr
(
∑th«me
, '/');

795 i‡(
s
==
NULL
) {

797 i‡(
	`°æí
(
∑th«me
)+1 > 
Àn
) {

798  
ENAMETOOLONG
;

800 
	`VOP_INCREF
(
dú
);

801 *
ªt
 = 
dú
;

802 
	`°r˝y
(
buf
, 
∑th«me
);

806 *
s
 = 0;

807 
s
++;

808 i‡(
	`°æí
(
s
)+1 > 
Àn
) {

809  
ENAMETOOLONG
;

811 
	`°r˝y
(
buf
, 
s
);

813  
	`emufs_lookup
(
dú
, 
∑th«me
, 
ªt
);

814 
	}
}

821 
	$emufs_«mefûe
(
vnode
 *
v
, 
uio
 *uio)

823 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

824 
emufs_fs
 *
ef
 = 
v
->
vn_fs
->
fs_d©a
;

826 i‡(
ev
 =
ef
->
ef_roŸ
) {

833 ()
uio
;

835  
EUNIMP
;

836 
	}
}

843 
	$emufs_mm≠
(
vnode
 *
v
)

845 ()
v
;

846  
EUNIMP
;

847 
	}
}

857 
	$emufs_dú_åy£ek
(
vnode
 *
v
, 
off_t
 
pos
)

859 ()
v
;

860 ()
pos
;

861  
EUNIMP
;

862 
	}
}

866 
	$emufs_symlök
(
vnode
 *
v
, c⁄° *
c⁄ã¡s
, c⁄° *
«me
)

868 ()
v
;

869 ()
c⁄ã¡s
;

870 ()
«me
;

871  
EUNIMP
;

872 
	}
}

876 
	$emufs_mkdú
(
vnode
 *
v
, c⁄° *
«me
, 
mode_t
 
mode
)

878 ()
v
;

879 ()
«me
;

880 ()
mode
;

881  
EUNIMP
;

882 
	}
}

886 
	$emufs_lök
(
vnode
 *
v
, c⁄° *
«me
, vnodê*
èrgë
)

888 ()
v
;

889 ()
«me
;

890 ()
èrgë
;

891  
EUNIMP
;

892 
	}
}

896 
	$emufs_ªmove
(
vnode
 *
v
, c⁄° *
«me
)

898 ()
v
;

899 ()
«me
;

900  
EUNIMP
;

901 
	}
}

905 
	$emufs_rmdú
(
vnode
 *
v
, c⁄° *
«me
)

907 ()
v
;

908 ()
«me
;

909  
EUNIMP
;

910 
	}
}

914 
	$emufs_ª«me
(
vnode
 *
v1
, c⁄° *
n1
,

915 
vnode
 *
v2
, c⁄° *
n2
)

917 ()
v1
;

918 ()
n1
;

919 ()
v2
;

920 ()
n2
;

921  
EUNIMP
;

922 
	}
}

941 
	$emufs_void_›_isdú
(
vnode
 *
v
)

943 ()
v
;

944  
EISDIR
;

945 
	}
}

949 
	$emufs_uio_›_isdú
(
vnode
 *
v
, 
uio
 *uio)

951 ()
v
;

952 ()
uio
;

953  
EISDIR
;

954 
	}
}

958 
	$emufs_uio_›_nŸdú
(
vnode
 *
v
, 
uio
 *uio)

960 ()
v
;

961 ()
uio
;

962  
ENOTDIR
;

963 
	}
}

967 
	$emufs_«me_›_nŸdú
(
vnode
 *
v
, c⁄° *
«me
)

969 ()
v
;

970 ()
«me
;

971  
ENOTDIR
;

972 
	}
}

976 
	$emufs_ªadlök_nŸlök
(
vnode
 *
v
, 
uio
 *uio)

978 ()
v
;

979 ()
uio
;

980  
EINVAL
;

981 
	}
}

985 
	$emufs_¸ót_nŸdú
(
vnode
 *
v
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

986 
vnode
 **
ªtvÆ
)

988 ()
v
;

989 ()
«me
;

990 ()
ex˛
;

991 ()
mode
;

992 ()
ªtvÆ
;

993  
ENOTDIR
;

994 
	}
}

998 
	$emufs_symlök_nŸdú
(
vnode
 *
v
, c⁄° *
c⁄ã¡s
, c⁄° *
«me
)

1000 ()
v
;

1001 ()
c⁄ã¡s
;

1002 ()
«me
;

1003  
ENOTDIR
;

1004 
	}
}

1008 
	$emufs_mkdú_nŸdú
(
vnode
 *
v
, c⁄° *
«me
, 
mode_t
 
mode
)

1010 ()
v
;

1011 ()
«me
;

1012 ()
mode
;

1013  
ENOTDIR
;

1014 
	}
}

1018 
	$emufs_lök_nŸdú
(
vnode
 *
v
, c⁄° *
«me
, vnodê*
èrgë
)

1020 ()
v
;

1021 ()
«me
;

1022 ()
èrgë
;

1023  
ENOTDIR
;

1024 
	}
}

1028 
	$emufs_ª«me_nŸdú
(
vnode
 *
v1
, c⁄° *
n1
,

1029 
vnode
 *
v2
, c⁄° *
n2
)

1031 ()
v1
;

1032 ()
n1
;

1033 ()
v2
;

1034 ()
n2
;

1035  
ENOTDIR
;

1036 
	}
}

1040 
	$emufs_lookup_nŸdú
(
vnode
 *
v
, *
∑th«me
, vnodê**
ªsu…
)

1042 ()
v
;

1043 ()
∑th«me
;

1044 ()
ªsu…
;

1045  
ENOTDIR
;

1046 
	}
}

1050 
	$emufs_look∑ª¡_nŸdú
(
vnode
 *
v
, *
∑th«me
, vnodê**
ªsu…
,

1051 *
buf
, 
size_t
 
Àn
)

1053 ()
v
;

1054 ()
∑th«me
;

1055 ()
ªsu…
;

1056 ()
buf
;

1057 ()
Àn
;

1058  
ENOTDIR
;

1059 
	}
}

1064 
	$emufs_åunˇã_isdú
(
vnode
 *
v
, 
off_t
 
Àn
)

1066 ()
v
;

1067 ()
Àn
;

1068  
ENOTDIR
;

1069 
	}
}

1076 c⁄° 
vnode_›s
 
	gemufs_fûe›s
 = {

1077 
VOP_MAGIC
,

1079 
emufs_›í
,

1080 
emufs_˛o£
,

1081 
emufs_ª˛aim
,

1083 
emufs_ªad
,

1084 
emufs_ªadlök_nŸlök
,

1085 
emufs_uio_›_nŸdú
,

1086 
emufs_wrôe
,

1087 
emufs_io˘l
,

1088 
emufs_°©
,

1089 
emufs_fûe_gëty≥
,

1090 
emufs_åy£ek
,

1091 
emufs_fsync
,

1092 
emufs_mm≠
,

1093 
emufs_åunˇã
,

1094 
emufs_uio_›_nŸdú
,

1096 
emufs_¸ót_nŸdú
,

1097 
emufs_symlök_nŸdú
,

1098 
emufs_mkdú_nŸdú
,

1099 
emufs_lök_nŸdú
,

1100 
emufs_«me_›_nŸdú
,

1101 
emufs_«me_›_nŸdú
,

1102 
emufs_ª«me_nŸdú
,

1104 
emufs_lookup_nŸdú
,

1105 
emufs_look∑ª¡_nŸdú
,

1111 c⁄° 
vnode_›s
 
	gemufs_dú›s
 = {

1112 
VOP_MAGIC
,

1114 
emufs_›ídú
,

1115 
emufs_˛o£
,

1116 
emufs_ª˛aim
,

1118 
emufs_uio_›_isdú
,

1119 
emufs_uio_›_isdú
,

1120 
emufs_gëdúíåy
,

1121 
emufs_uio_›_isdú
,

1122 
emufs_io˘l
,

1123 
emufs_°©
,

1124 
emufs_dú_gëty≥
,

1125 
emufs_dú_åy£ek
,

1126 
emufs_void_›_isdú
,

1127 
emufs_void_›_isdú
,

1128 
emufs_åunˇã_isdú
,

1129 
emufs_«mefûe
,

1131 
emufs_¸ót
,

1132 
emufs_symlök
,

1133 
emufs_mkdú
,

1134 
emufs_lök
,

1135 
emufs_ªmove
,

1136 
emufs_rmdú
,

1137 
emufs_ª«me
,

1139 
emufs_lookup
,

1140 
emufs_look∑ª¡
,

1148 
	$emufs_lﬂdvnode
(
emufs_fs
 *
ef
, 
uöt32_t
 
h™dÀ
, 
isdú
,

1149 
emufs_vnode
 **
ªt
)

1151 
vnode
 *
v
;

1152 
emufs_vnode
 *
ev
;

1153 
i
, 
num
;

1154 
ªsu…
;

1156 
	`vfs_biglock_acquúe
();

1157 
	`lock_acquúe
(
ef
->
ef_emu
->
e_lock
);

1159 
num
 = 
	`vnodóºay_num
(
ef
->
ef_vnodes
);

1160 
i
=0; i<
num
; i++) {

1161 
v
 = 
	`vnodóºay_gë
(
ef
->
ef_vnodes
, 
i
);

1162 
ev
 = 
v
->
vn_d©a
;

1163 i‡(
ev
->
ev_h™dÀ
 =
h™dÀ
) {

1166 
	`VOP_INCREF
(&
ev
->
ev_v
);

1168 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1169 
	`vfs_biglock_ªÀa£
();

1170 *
ªt
 = 
ev
;

1177 
ev
 = 
	`kmÆloc
((
emufs_vnode
));

1178 i‡(
ev
==
NULL
) {

1179 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1180  
ENOMEM
;

1183 
ev
->
ev_emu
 = 
ef
->
ef_emu
;

1184 
ev
->
ev_h™dÀ
 = 
h™dÀ
;

1186 
ªsu…
 = 
	`VOP_INIT
(&
ev
->
ev_v
, 
isdú
 ? &
emufs_dú›s
 : &
emufs_fûe›s
,

1187 &
ef
->
ef_fs
, 
ev
);

1188 i‡(
ªsu…
) {

1189 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1190 
	`vfs_biglock_ªÀa£
();

1191 
	`k‰ì
(
ev
);

1192  
ªsu…
;

1195 
ªsu…
 = 
	`vnodóºay_add
(
ef
->
ef_vnodes
, &
ev
->
ev_v
, 
NULL
);

1196 i‡(
ªsu…
) {

1198 
	`VOP_CLEANUP
(&
ev
->
ev_v
);

1199 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1200 
	`vfs_biglock_ªÀa£
();

1201 
	`k‰ì
(
ev
);

1202  
ªsu…
;

1205 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1206 
	`vfs_biglock_ªÀa£
();

1208 *
ªt
 = 
ev
;

1210 
	}
}

1225 
	$emufs_sync
(
fs
 *fs)

1227 ()
fs
;

1229 
	}
}

1236 
	$emufs_gëvﬁ«me
(
fs
 *fs)

1239 ()
fs
;

1240  
NULL
;

1241 
	}
}

1247 
vnode
 *

1248 
	$emufs_gëroŸ
(
fs
 *fs)

1250 
emufs_fs
 *
ef
;

1252 
	`KASSERT
(
fs
 !
NULL
);

1254 
ef
 = 
fs
->
fs_d©a
;

1256 
	`KASSERT
(
ef
 !
NULL
);

1257 
	`KASSERT
(
ef
->
ef_roŸ
 !
NULL
);

1259 
	`VOP_INCREF
(&
ef
->
ef_roŸ
->
ev_v
);

1260  &
ef
->
ef_roŸ
->
ev_v
;

1261 
	}
}

1268 
	$emufs_unmou¡
(
fs
 *fs)

1271 ()
fs
;

1272  
EBUSY
;

1273 
	}
}

1284 
	$emufs_addtovfs
(
emu_so·c
 *
sc
, c⁄° *
dev«me
)

1286 
emufs_fs
 *
ef
;

1287 
ªsu…
;

1289 
ef
 = 
	`kmÆloc
((
emufs_fs
));

1290 i‡(
ef
==
NULL
) {

1291  
ENOMEM
;

1294 
ef
->
ef_fs
.
fs_sync
 = 
emufs_sync
;

1295 
ef
->
ef_fs
.
fs_gëvﬁ«me
 = 
emufs_gëvﬁ«me
;

1296 
ef
->
ef_fs
.
fs_gëroŸ
 = 
emufs_gëroŸ
;

1297 
ef
->
ef_fs
.
fs_unmou¡
 = 
emufs_unmou¡
;

1298 
ef
->
ef_fs
.
fs_d©a
 =Éf;

1300 
ef
->
ef_emu
 = 
sc
;

1301 
ef
->
ef_roŸ
 = 
NULL
;

1302 
ef
->
ef_vnodes
 = 
	`vnodóºay_¸óã
();

1303 i‡(
ef
->
ef_vnodes
 =
NULL
) {

1304 
	`k‰ì
(
ef
);

1305  
ENOMEM
;

1308 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
EMU_ROOTHANDLE
, 1, &ef->
ef_roŸ
);

1309 i‡(
ªsu…
) {

1310 
	`k‰ì
(
ef
);

1311  
ªsu…
;

1314 
	`KASSERT
(
ef
->
ef_roŸ
!=
NULL
);

1316 
ªsu…
 = 
	`vfs_addfs
(
dev«me
, &
ef
->
ef_fs
);

1317 i‡(
ªsu…
) {

1318 
	`VOP_DECREF
(&
ef
->
ef_roŸ
->
ev_v
);

1319 
	`k‰ì
(
ef
);

1321  
ªsu…
;

1322 
	}
}

1333 
	$c⁄fig_emu
(
emu_so·c
 *
sc
, 
emuno
)

1335 
«me
[32];

1337 
sc
->
e_lock
 = 
	`lock_¸óã
("emufs-lock");

1338 i‡(
sc
->
e_lock
 =
NULL
) {

1339  
ENOMEM
;

1341 
sc
->
e_£m
 = 
	`£m_¸óã
("emufs-sem", 0);

1342 i‡(
sc
->
e_£m
 =
NULL
) {

1343 
	`lock_de°roy
(
sc
->
e_lock
);

1344 
sc
->
e_lock
 = 
NULL
;

1345  
ENOMEM
;

1347 
sc
->
e_iobuf
 = 
	`bus_m≠_¨ó
(sc->
e_busd©a
, sc->
e_bu•os
, 
EMU_BUFFER
);

1349 
	`¢¥ötf
(
«me
, “ame), "emu%d", 
emuno
);

1351  
	`emufs_addtovfs
(
sc
, 
«me
);

1352 
	}
}

	@test/os161/kern/dev/lamebus/emu.h

30 #i‚de‡
_LAMEBUS_EMU_H_


31 
	#_LAMEBUS_EMU_H_


	)

34 
	#EMU_MAXIO
 16384

	)

35 
	#EMU_ROOTHANDLE
 0

	)

43 
	semu_so·c
 {

45 *
	me_busd©a
;

46 
uöt32_t
 
	me_bu•os
;

47 
	me_unô
;

50 
lock
 *
	me_lock
;

51 
£m≠h‹e
 *
	me_£m
;

52 *
	me_iobuf
;

55 
uöt32_t
 
	me_ªsu…
;

59 
emu_úq
( *);

	@test/os161/kern/dev/lamebus/emu_att.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<œmebus/œmebus.h
>

37 
	~<œmebus/emu.h
>

38 
	~"autoc⁄f.h
"

41 
	#LOW_VERSION
 1

	)

43 
	#HIGH_VERSION
 1

	)

45 
emu_so·c
 *

46 
	$©èch_emu_to_œmebus
(
emuno
, 
œmebus_so·c
 *
sc
)

48 
emu_so·c
 *
es
;

49 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_EMUFS
,

50 
LOW_VERSION
, 
HIGH_VERSION
);

51 i‡(
¶Ÿ
 < 0) {

52  
NULL
;

55 
es
 = 
	`kmÆloc
((
emu_so·c
));

56 i‡(
es
==
NULL
) {

57  
NULL
;

60 
es
->
e_busd©a
 = 
sc
;

61 
es
->
e_bu•os
 = 
¶Ÿ
;

62 
es
->
e_unô
 = 
emuno
;

64 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

65 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
es
, 
emu_úq
);

67  
es
;

68 
	}
}

	@test/os161/kern/dev/lamebus/lamebus.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<˝u.h
>

37 
	~<•ölock.h
>

38 
	~<cuºít.h
>

39 
	~<œmebus/œmebus.h
>

42 
	#CFGREG_VID
 0

	)

43 
	#CFGREG_DID
 4

	)

44 
	#CFGREG_DRL
 8

	)

47 
	#CTLREG_RAMSZ
 0x200

	)

48 
	#CTLREG_IRQS
 0x204

	)

49 
	#CTLREG_PWR
 0x208

	)

50 
	#CTLREG_IRQE
 0x20c

	)

51 
	#CTLREG_CPUS
 0x210

	)

52 
	#CTLREG_CPUE
 0x214

	)

53 
	#CTLREG_SELF
 0x218

	)

56 
	#CTLCPU_CIRQE
 0x000

	)

57 
	#CTLCPU_CIPI
 0x004

	)

58 
	#CTLCPU_CRAM
 0x300

	)

65 
ölöe


66 
uöt32_t


67 
	$ªad_cfg_ªgi°î
(
œmebus_so·c
 *
lb
, 
¶Ÿ
, 
uöt32_t
 
off£t
)

70 
off£t
 +
LB_CONFIG_SIZE
*
¶Ÿ
;

71  
	`œmebus_ªad_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
);

72 
	}
}

78 
ölöe


80 
	$wrôe_cfg_ªgi°î
(
œmebus_so·c
 *
lb
, 
¶Ÿ
, 
uöt32_t
 
off£t
,

81 
uöt32_t
 
vÆ
)

83 
off£t
 +
LB_CONFIG_SIZE
*
¶Ÿ
;

84 
	`œmebus_wrôe_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

85 
	}
}

91 
ölöe


92 
uöt32_t


93 
	$ªad_˘l_ªgi°î
(
œmebus_so·c
 *
lb
, 
uöt32_t
 
off£t
)

96  
	`ªad_cfg_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
);

97 
	}
}

103 
ölöe


105 
	$wrôe_˘l_ªgi°î
(
œmebus_so·c
 *
lb
, 
uöt32_t
 
off£t
, uöt32_à
vÆ
)

107 
	`wrôe_cfg_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

108 
	}
}

114 
ölöe


116 
	$wrôe_˘l˝u_ªgi°î
(
œmebus_so·c
 *
lb
, 
hw_˝unum
,

117 
uöt32_t
 
off£t
, uöt32_à
vÆ
)

119 
off£t
 +
LB_CTLCPU_OFFSET
 + 
hw_˝unum
 * 
LB_CTLCPU_SIZE
;

120 
	`œmebus_wrôe_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

121 
	}
}

127 
	$œmebus_föd_˝us
(
œmebus_so·c
 *
œmebus
)

129 
uöt32_t
 
˝umask
, 
£lf
, 
bô
, 
vÆ
;

130 
i
, 
num˝us
, 
boŸ˝u
;

131 
hwnum
[32];

133 
˝umask
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_CPUS
);

134 
£lf
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_SELF
);

136 
num˝us
 = 0;

137 
boŸ˝u
 = 0;

138 
i
=0; i<32; i++) {

139 
bô
 = (
uöt32_t
)1 << 
i
;

140 i‡((
˝umask
 & 
bô
) != 0) {

141 i‡(
£lf
 & 
bô
) {

142 
boŸ˝u
 = 
num˝us
;

143 
cur˝u
->
c_h¨dw¨e_numbî
 = 
i
;

145 
hwnum
[
num˝us
] = 
i
;

146 
num˝us
++;

150 
i
=0; i<
num˝us
; i++) {

151 i‡(
i
 !
boŸ˝u
) {

152 
	`˝u_¸óã
(
hwnum
[
i
]);

162 
i
=0; i<
num˝us
; i++) {

163 i‡(
i
 !
boŸ˝u
) {

164 
vÆ
 = 0;

167 
vÆ
 = 0xffffffff;

169 
	`wrôe_˘l˝u_ªgi°î
(
œmebus
, 
hwnum
[
i
], 
CTLCPU_CIRQE
, 
vÆ
);

171 
	}
}

184 
	$œmebus_°¨t_˝us
(
œmebus_so·c
 *
œmebus
)

186 
uöt32_t
 
˝umask
, 
£lf
, 
bô
;

187 
uöt32_t
 
˘l˝uoff£t
;

188 
uöt32_t
 *
¸am
;

189 
i
;

190 
˝unum
;

192 
˝umask
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_CPUS
);

193 
£lf
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_SELF
);

196 
˝unum
 = 1;

197 
i
=0; i<32; i++) {

198 
bô
 = (
uöt32_t
)1 << 
i
;

199 i‡((
˝umask
 & 
bô
) != 0) {

200 i‡(
£lf
 & 
bô
) {

203 
˘l˝uoff£t
 = 
LB_CTLCPU_OFFSET
 + 
i
 * 
LB_CTLCPU_SIZE
;

204 
¸am
 = 
	`œmebus_m≠_¨ó
(
œmebus
,

205 
LB_CONTROLLER_SLOT
,

206 
˘l˝uoff£t
 + 
CTLCPU_CRAM
);

207 
¸am
[0] = (
uöt32_t
)
˝u_°¨t_£c⁄d¨y
;

208 
¸am
[1] = 
˝unum
++;

213 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_CPUE
, 
˝umask
);

214 
	}
}

228 
	$œmebus_¥obe
(
œmebus_so·c
 *
sc
,

229 
uöt32_t
 
víd‹id
, uöt32_à
devi˚id
,

230 
uöt32_t
 
lowvî
, uöt32_à
highvî
)

232 
¶Ÿ
;

233 
uöt32_t
 
vÆ
;

240 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

242 
¶Ÿ
=0; slŸ<
LB_NSLOTS
; slot++) {

243 i‡(
sc
->
ls_¶Ÿsöu£
 & (1<<
¶Ÿ
)) {

248 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_VID
);

249 i‡(
vÆ
!=
víd‹id
) {

254 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_DID
);

255 i‡(
vÆ
 !
devi˚id
) {

260 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_DRL
);

261 i‡(
vÆ
 < 
lowvî
 || vÆ > 
highvî
) {

268 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

269  
¶Ÿ
;

274 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

276 
	}
}

284 
	$œmebus_m¨k
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

286 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

287 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

289 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

291 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)!=0) {

292 
	`∑nic
("œmebus_m¨k: slŸ %dáÃódy i¿u£\n", 
¶Ÿ
);

295 
sc
->
ls_¶Ÿsöu£
 |
mask
;

297 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

298 
	}
}

304 
	$œmebus_unm¨k
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

306 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

307 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

309 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

311 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

312 
	`∑nic
("œmebus_m¨k: slŸ %dÇŸ m¨ked i¿u£\n", 
¶Ÿ
);

315 
sc
->
ls_¶Ÿsöu£
 &~
mask
;

317 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

318 
	}
}

325 
œmebus_©èch_öãºu±
(
œmebus_so·c
 *
sc
, 
¶Ÿ
,

326 *
devd©a
,

327 (*
úqfunc
)(*
devd©a
))

329 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

330 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

332 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

334 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

335 
	`∑nic
("lamebus_attach_interrupt: slot %dÇot marked in use\n",

336 
¶Ÿ
);

339 
	`KASSERT
(
sc
->
ls_devd©a
[
¶Ÿ
]==
NULL
);

340 
	`KASSERT
(
sc
->
ls_úqfuncs
[
¶Ÿ
]==
NULL
);

342 
sc
->
ls_devd©a
[
¶Ÿ
] = 
devd©a
;

343 
sc
->
ls_úqfuncs
[
¶Ÿ
] = 
úqfunc
;

345 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

346 
	}
}

353 
	$œmebus_dëach_öãºu±
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

355 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

356 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

358 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

360 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

361 
	`∑nic
("lamebus_detach_interrupt: slot %dÇot marked in use\n",

362 
¶Ÿ
);

365 
	`KASSERT
(
sc
->
ls_úqfuncs
[
¶Ÿ
]!=
NULL
);

367 
sc
->
ls_devd©a
[
¶Ÿ
] = 
NULL
;

368 
sc
->
ls_úqfuncs
[
¶Ÿ
] = 
NULL
;

370 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

371 
	}
}

377 
	$œmebus_mask_öãºu±
(
œmebus_so·c
 *
œmebus
, 
¶Ÿ
)

379 
uöt32_t
 
bôs
, 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

380 
	`KASSERT
(
¶Ÿ
 >0 && slŸ < 
LB_NSLOTS
);

382 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

383 
bôs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
);

384 
bôs
 &~
mask
;

385 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
, 
bôs
);

386 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

387 
	}
}

390 
	$œmebus_unmask_öãºu±
(
œmebus_so·c
 *
œmebus
, 
¶Ÿ
)

392 
uöt32_t
 
bôs
, 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

393 
	`KASSERT
(
¶Ÿ
 >0 && slŸ < 
LB_NSLOTS
);

395 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

396 
bôs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
);

397 
bôs
 |
mask
;

398 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
, 
bôs
);

399 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

400 
	}
}

407 
	$œmebus_öãºu±
(
œmebus_so·c
 *
œmebus
)

420 
¶Ÿ
;

421 
uöt32_t
 
mask
;

422 
uöt32_t
 
úqs
;

423 (*
h™dÀr
)(*);

424 *
d©a
;

427 
duds
 = 0;

428 
duds_this_time
 = 0;

431 
	`KASSERT
(
œmebus
 !
NULL
);

434 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

440 
úqs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQS
);

442 i‡(
úqs
 == 0) {

446 
	`k¥ötf
("lamebus: stray interrupt on cpu %u\n",

447 
cur˝u
->
c_numbî
);

448 
duds
++;

449 
duds_this_time
++;

469 
mask
=1, 
¶Ÿ
=0; slŸ<
LB_NSLOTS
; mask<<=1, slot++) {

470 i‡((
úqs
 & 
mask
) == 0) {

479 i‡((
œmebus
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

483 
duds
++;

484 
duds_this_time
++;

488 i‡(
œmebus
->
ls_úqfuncs
[
¶Ÿ
]==
NULL
) {

493 
duds
++;

494 
duds_this_time
++;

503 
h™dÀr
 = 
œmebus
->
ls_úqfuncs
[
¶Ÿ
];

504 
d©a
 = 
œmebus
->
ls_devd©a
[
¶Ÿ
];

505 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

507 
	`h™dÀr
(
d©a
);

509 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

517 
úqs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQS
);

539 i‡(
duds_this_time
 =0 && 
duds
 > 0) {

540 
	`k¥ötf
("œmebus: %d dud i¡îru±s\n", 
duds
);

541 
duds
 = 0;

544 i‡(
duds
 > 10000) {

545 
	`∑nic
("œmebus:Åoÿm™y (%dËdud i¡îru±s\n", 
duds
);

549 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

550 
	}
}

556 
	$œmebus_powîoff
(
œmebus_so·c
 *
œmebus
)

562 
	`˝u_úqoff
();

563 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_PWR
, 0);

566 
	`˝u_hÆt
();

567 
	}
}

572 
uöt32_t


573 
	$œmebus_ømsize
()

582  
	`ªad_˘l_ªgi°î
(
NULL
, 
CTLREG_RAMSZ
);

583 
	}
}

589 
	$œmebus_as£π_ùi
(
œmebus_so·c
 *
œmebus
, 
˝u
 *
èrgë
)

591 
	`wrôe_˘l˝u_ªgi°î
(
œmebus
, 
èrgë
->
c_h¨dw¨e_numbî
,

592 
CTLCPU_CIPI
, 1);

593 
	}
}

596 
	$œmebus_˛ór_ùi
(
œmebus_so·c
 *
œmebus
, 
˝u
 *
èrgë
)

598 
	`wrôe_˘l˝u_ªgi°î
(
œmebus
, 
èrgë
->
c_h¨dw¨e_numbî
,

599 
CTLCPU_CIPI
, 0);

600 
	}
}

606 
œmebus_so·c
 *

607 
	$œmebus_öô
()

609 
œmebus_so·c
 *
œmebus
;

610 
i
;

613 
œmebus
 = 
	`kmÆloc
((
œmebus_so·c
));

614 i‡(
œmebus
==
NULL
) {

615 
	`∑nic
("lamebus_init: Out of memory\n");

618 
	`•ölock_öô
(&
œmebus
->
ls_lock
);

623 
œmebus
->
ls_¶Ÿsöu£
 = 1 << 
LB_CONTROLLER_SLOT
;

625 
i
=0; i<
LB_NSLOTS
; i++) {

626 
œmebus
->
ls_devd©a
[
i
] = 
NULL
;

627 
œmebus
->
ls_úqfuncs
[
i
] = 
NULL
;

630  
œmebus
;

631 
	}
}

	@test/os161/kern/dev/lamebus/lamebus.h

30 #i‚de‡
_LAMEBUS_H_


31 
	#_LAMEBUS_H_


	)

33 
	~<˝u.h
>

34 
	~<•ölock.h
>

44 
	#LB_VENDOR_CS161
 1

	)

47 
	#LBCS161_BUSCTL
 1

	)

48 
	#LBCS161_TIMER
 2

	)

49 
	#LBCS161_DISK
 3

	)

50 
	#LBCS161_SERIAL
 4

	)

51 
	#LBCS161_SCREEN
 5

	)

52 
	#LBCS161_NET
 6

	)

53 
	#LBCS161_EMUFS
 7

	)

54 
	#LBCS161_TRACE
 8

	)

55 
	#LBCS161_RANDOM
 9

	)

58 
	#LB_CONTROLLER_SLOT
 31

	)

61 
	#LB_NSLOTS
 32

	)

64 
	#LB_CONFIG_SIZE
 1024

	)

67 
	#LB_CTLCPU_SIZE
 1024

	)

70 
	#LB_CTLCPU_OFFSET
 32768

	)

73 
	#LB_SLOT_SIZE
 65536

	)

76 (*
	tlb_úqfunc
)(*
	tdevd©a
);

81 
	sœmebus_so·c
 {

82 
•ölock
 
ls_lock
;

85 
uöt32_t
 
ls_¶Ÿsöu£
;

86 *
ls_devd©a
[
LB_NSLOTS
];

87 
lb_úqfunc
 
ls_úqfuncs
[
LB_NSLOTS
];

93 
œmebus_so·c
 *
	`œmebus_öô
();

98 
	`œmebus_föd_˝us
(
œmebus_so·c
 *
œmebus
);

103 
	`œmebus_°¨t_˝us
(
œmebus_so·c
 *
œmebus
);

112 
	`œmebus_¥obe
(
œmebus_so·c
 *,

113 
uöt32_t
 
víd‹id
, uöt32_à
devi˚id
,

114 
uöt32_t
 
lowvî
, uöt32_à
highvî
);

121 
	`œmebus_m¨k
(
œmebus_so·c
 *, 
¶Ÿ
);

122 
	`œmebus_unm¨k
(
œmebus_so·c
 *, 
¶Ÿ
);

127 
	`œmebus_©èch_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
,

128 *
devd©a
,

129 (*
úqfunc
)(*
devd©a
));

133 
	`œmebus_dëach_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
);

138 
	`œmebus_mask_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
);

139 
	`œmebus_unmask_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
);

144 
	`œmebus_öãºu±
(
œmebus_so·c
 *);

149 
	`œmebus_powîoff
(
œmebus_so·c
 *);

154 
size_t
 
	`œmebus_ømsize
();

159 
	`œmebus_as£π_ùi
(
œmebus_so·c
 *, 
˝u
 *
èrgë˝u
);

160 
	`œmebus_˛ór_ùi
(
œmebus_so·c
 *, 
˝u
 *
èrgë˝u
);

166 
uöt32_t
 
	`œmebus_ªad_ªgi°î
(
œmebus_so·c
 *, 
¶Ÿ
,

167 
uöt32_t
 
off£t
);

168 
	`œmebus_wrôe_ªgi°î
(
œmebus_so·c
 *, 
¶Ÿ
,

169 
uöt32_t
 
off£t
, uöt32_à
vÆ
);

174 *
	`œmebus_m≠_¨ó
(
œmebus_so·c
 *, 
¶Ÿ
,

175 
uöt32_t
 
off£t
);

	@test/os161/kern/dev/lamebus/lhd.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<lib.h
>

37 
	~<uio.h
>

38 
	~<synch.h
>

39 
	~<∂©f‹m/bus.h
>

40 
	~<vfs.h
>

41 
	~<œmebus/lhd.h
>

42 
	~"autoc⁄f.h
"

45 
	#LHD_REG_NSECT
 0

	)

46 
	#LHD_REG_STAT
 4

	)

47 
	#LHD_REG_SECT
 8

	)

48 
	#LHD_REG_RPM
 12

	)

51 
	#LHD_IDLE
 0

	)

52 
	#LHD_WORKING
 1

	)

53 
	#LHD_OK
 4

	)

54 
	#LHD_INVSECT
 12

	)

55 
	#LHD_MEDIA
 20

	)

56 
	#LHD_ISWRITE
 2

	)

57 
	#LHD_STATEMASK
 0x1d

	)

60 
	#LHD_BUFFER
 32768

	)

66 
ölöe


67 
uöt32_t
 
	$lhd_rdªg
(
lhd_so·c
 *
lh
, 
uöt32_t
 
ªg
)

69  
	`bus_ªad_ªgi°î
(
lh
->
lh_busd©a
,Üh->
lh_bu•os
, 
ªg
);

70 
	}
}

76 
ölöe


77 
	$lhd_wªg
(
lhd_so·c
 *
lh
, 
uöt32_t
 
ªg
, uöt32_à
vÆ
)

79 
	`bus_wrôe_ªgi°î
(
lh
->
lh_busd©a
,Üh->
lh_bu•os
, 
ªg
, 
vÆ
);

80 
	}
}

86 
	$lhd_code_to_î∫o
(
lhd_so·c
 *
lh
, 
code
)

88 
code
 & 
LHD_STATEMASK
) {

89 
LHD_OK
:  0;

90 
LHD_INVSECT
:  
EINVAL
;

91 
LHD_MEDIA
:  
EIO
;

93 
	`k¥ötf
("lhd%d: Unknow¿ªsu… codê%d\n", 
lh
->
lh_unô
, 
code
);

94  
EAGAIN
;

95 
	}
}

103 
	$lhd_iod⁄e
(
lhd_so·c
 *
lh
, 
îr
)

105 
lh
->
lh_ªsu…
 = 
îr
;

106 
	`V
(
lh
->
lh_d⁄e
);

107 
	}
}

115 
	$lhd_úq
(*
vlh
)

117 
lhd_so·c
 *
lh
 = 
vlh
;

118 
uöt32_t
 
vÆ
;

120 
vÆ
 = 
	`lhd_rdªg
(
lh
, 
LHD_REG_STAT
);

122 
vÆ
 & 
LHD_STATEMASK
) {

123 
LHD_IDLE
:

124 
LHD_WORKING
:

126 
LHD_OK
:

127 
LHD_INVSECT
:

128 
LHD_MEDIA
:

129 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 0);

130 
	`lhd_iod⁄e
(
lh
, 
	`lhd_code_to_î∫o
÷h, 
vÆ
));

133 
	}
}

140 
	$lhd_›í
(
devi˚
 *
d
, 
›íÊags
)

145 ()
d
;

146 ()
›íÊags
;

149 
	}
}

156 
	$lhd_˛o£
(
devi˚
 *
d
)

161 ()
d
;

164 
	}
}

171 
	$lhd_io˘l
(
devi˚
 *
d
, 
›
, 
u£Ωå_t
 
d©a
)

176 ()
d
;

177 ()
›
;

178 ()
d©a
;

179  
EIOCTL
;

180 
	}
}

190 
	$lhd_ª£t
(
lhd_so·c
 *
lh
)

192 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 0);

193 
	}
}

201 
	$lhd_io
(
devi˚
 *
d
, 
uio
 *uio)

203 
lhd_so·c
 *
lh
 = 
d
->
d_d©a
;

205 
uöt32_t
 
£˘‹
 = 
uio
->
uio_off£t
 / 
LHD_SECTSIZE
;

206 
uöt32_t
 
£˘off
 = 
uio
->
uio_off£t
 % 
LHD_SECTSIZE
;

207 
uöt32_t
 
Àn
 = 
uio
->
uio_ªsid
 / 
LHD_SECTSIZE
;

208 
uöt32_t
 
Ànoff
 = 
uio
->
uio_ªsid
 % 
LHD_SECTSIZE
;

209 
uöt32_t
 
i
;

210 
uöt32_t
 
°©vÆ
 = 
LHD_WORKING
;

211 
ªsu…
;

214 i‡(
£˘off
 !0 || 
Ànoff
 != 0) {

215  
EINVAL
;

219 i‡(
£˘‹
+
Àn
 > 
lh
->
lh_dev
.
d_blocks
) {

220  
EINVAL
;

224 i‡(
uio
->
uio_rw
==
UIO_WRITE
) {

225 
°©vÆ
 |
LHD_ISWRITE
;

229 
i
=0; i<
Àn
; i++) {

232 
	`P
(
lh
->
lh_˛ór
);

238 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

239 
ªsu…
 = 
	`uiomove
(
lh
->
lh_buf
, 
LHD_SECTSIZE
, 
uio
);

240 i‡(
ªsu…
) {

241 
	`V
(
lh
->
lh_˛ór
);

242  
ªsu…
;

247 
	`lhd_wªg
(
lh
, 
LHD_REG_SECT
, 
£˘‹
+
i
);

250 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 
°©vÆ
);

253 
	`P
(
lh
->
lh_d⁄e
);

256 
ªsu…
 = 
lh
->
lh_ªsu…
;

262 i‡(
ªsu…
==0 && 
uio
->
uio_rw
==
UIO_READ
) {

263 
ªsu…
 = 
	`uiomove
(
lh
->
lh_buf
, 
LHD_SECTSIZE
, 
uio
);

267 
	`V
(
lh
->
lh_˛ór
);

270 i‡(
ªsu…
) {

271  
ªsu…
;

276 
	}
}

282 
	$c⁄fig_lhd
(
lhd_so·c
 *
lh
, 
lhdno
)

284 
«me
[32];

287 
	`¢¥ötf
(
«me
, “ame), "lhd%d", 
lhdno
);

290 
lh
->
lh_buf
 = 
	`bus_m≠_¨ó
÷h->
lh_busd©a
,Üh->
lh_bu•os
, 
LHD_BUFFER
);

293 
lh
->
lh_˛ór
 = 
	`£m_¸óã
("lhd-clear", 1);

294 i‡(
lh
->
lh_˛ór
 =
NULL
) {

295  
ENOMEM
;

297 
lh
->
lh_d⁄e
 = 
	`£m_¸óã
("lhd-done", 0);

298 i‡(
lh
->
lh_d⁄e
 =
NULL
) {

299 
	`£m_de°roy
(
lh
->
lh_˛ór
);

300 
lh
->
lh_˛ór
 = 
NULL
;

301  
ENOMEM
;

305 
lh
->
lh_dev
.
d_›í
 = 
lhd_›í
;

306 
lh
->
lh_dev
.
d_˛o£
 = 
lhd_˛o£
;

307 
lh
->
lh_dev
.
d_io
 = 
lhd_io
;

308 
lh
->
lh_dev
.
d_io˘l
 = 
lhd_io˘l
;

309 
lh
->
lh_dev
.
d_blocks
 = 
	`bus_ªad_ªgi°î
÷h->
lh_busd©a
,Üh->
lh_bu•os
,

310 
LHD_REG_NSECT
);

311 
lh
->
lh_dev
.
d_blocksize
 = 
LHD_SECTSIZE
;

312 
lh
->
lh_dev
.
d_d©a
 =Üh;

315  
	`vfs_adddev
(
«me
, &
lh
->
lh_dev
, 1);

316 
	}
}

	@test/os161/kern/dev/lamebus/lhd.h

30 #i‚de‡
_LAMEBUS_LHD_H_


31 
	#_LAMEBUS_LHD_H_


	)

33 
	~<devi˚.h
>

38 
	#LHD_SECTSIZE
 512

	)

43 
	slhd_so·c
 {

45 *
	mlh_busd©a
;

46 
uöt32_t
 
	mlh_bu•os
;

47 
	mlh_unô
;

53 *
	mlh_buf
;

54 
	mlh_ªsu…
;

55 
£m≠h‹e
 *
	mlh_˛ór
;

56 
£m≠h‹e
 *
	mlh_d⁄e
;

58 
devi˚
 
	mlh_dev
;

62 
lhd_úq
( *);

	@test/os161/kern/dev/lamebus/lhd_att.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<œmebus/œmebus.h
>

36 
	~<œmebus/lhd.h
>

37 
	~"autoc⁄f.h
"

40 
	#LOW_VERSION
 2

	)

42 
	#HIGH_VERSION
 2

	)

44 
lhd_so·c
 *

45 
	$©èch_lhd_to_œmebus
(
lhdno
, 
œmebus_so·c
 *
sc
)

47 
lhd_so·c
 *
lh
;

48 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_DISK
,

49 
LOW_VERSION
, 
HIGH_VERSION
);

50 i‡(
¶Ÿ
 < 0) {

52  
NULL
;

55 
lh
 = 
	`kmÆloc
((
lhd_so·c
));

56 i‡(
lh
==
NULL
) {

58  
NULL
;

62 
lh
->
lh_busd©a
 = 
sc
;

63 
lh
->
lh_bu•os
 = 
¶Ÿ
;

64 
lh
->
lh_unô
 = 
lhdno
;

67 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

68 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
lh
, 
lhd_úq
);

70  
lh
;

71 
	}
}

	@test/os161/kern/dev/lamebus/lnet.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

34 
	~"autoc⁄f.h
"

37 
	$c⁄fig_ ë
(
 ë_so·c
 *
sc
, 
 ëno
)

39 ()
sc
;

41 
	`k¥ötf
(" ë%d: Nÿ√tw‹k suµ‹àö sy°em\n", 
 ëno
);

43  
ENODEV
;

44 
	}
}

	@test/os161/kern/dev/lamebus/lnet_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~"autoc⁄f.h
"

36 
	#LOW_VERSION
 1

	)

38 
	#HIGH_VERSION
 1

	)

40 
 ë_so·c
 *

41 
	$©èch_ ë_to_œmebus
(
 ëno
, 
œmebus_so·c
 *
sc
)

43 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_NET
,

44 
LOW_VERSION
, 
HIGH_VERSION
);

45 i‡(
¶Ÿ
 < 0) {

46  
NULL
;

49 
	`k¥ötf
(" ë%d: Nÿ√tw‹k suµ‹àö sy°em\n", 
 ëno
);

51  
NULL
;

52 
	}
}

	@test/os161/kern/dev/lamebus/lrandom.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<uio.h
>

36 
	~<∂©f‹m/bus.h
>

37 
	~<œmebus/Ã™dom.h
>

38 
	~"autoc⁄f.h
"

41 
	#LR_REG_RAND
 0

	)

44 
	#LR_RANDMAX
 0xffffffff

	)

47 
	$c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
Ã
, 
Ã™domno
)

49 ()
Ã™domno
;

50 ()
Ã
;

52 
	}
}

54 
uöt32_t


55 
	$Ã™dom_øndom
(*
devd©a
)

57 
Ã™dom_so·c
 *
Ã
 = 
devd©a
;

58  
	`bus_ªad_ªgi°î
(
Ã
->
Ã_bus
,Ür->
Ã_bu•os
, 
LR_REG_RAND
);

59 
	}
}

61 
uöt32_t


62 
	$Ã™dom_øndmax
(*
devd©a
)

64 ()
devd©a
;

65  
LR_RANDMAX
;

66 
	}
}

69 
	$Ã™dom_ªad
(*
devd©a
, 
uio
 *uio)

71 
Ã™dom_so·c
 *
Ã
 = 
devd©a
;

72 
uöt32_t
 
vÆ
;

73 
ªsu…
;

75 
uio
->
uio_ªsid
 > 0) {

76 
vÆ
 = 
	`bus_ªad_ªgi°î
(
Ã
->
Ã_bus
,Ür->
Ã_bu•os
,

77 
LR_REG_RAND
);

78 
ªsu…
 = 
	`uiomove
(&
vÆ
, (vÆ), 
uio
);

79 i‡(
ªsu…
) {

80  
ªsu…
;

85 
	}
}

	@test/os161/kern/dev/lamebus/lrandom.h

30 #i‚de‡
_LAMEBUS_LRANDOM_H_


31 
	#_LAMEBUS_LRANDOM_H_


	)

33 
	guio
;

35 
	sÃ™dom_so·c
 {

37 *
	mÃ_bus
;

38 
uöt32_t
 
	mÃ_bu•os
;

42 
uöt32_t
 
Ã™dom_øndom
–*
devd©a
);

43 
uöt32_t
 
Ã™dom_øndmax
–*
devd©a
);

44 
Ã™dom_ªad
–*, 
uio
 *);

	@test/os161/kern/dev/lamebus/lrandom_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~<œmebus/Ã™dom.h
>

34 
	~"autoc⁄f.h
"

37 
	#LOW_VERSION
 1

	)

39 
	#HIGH_VERSION
 1

	)

41 
Ã™dom_so·c
 *

42 
	$©èch_Ã™dom_to_œmebus
(
Ã™domno
, 
œmebus_so·c
 *
sc
)

44 
Ã™dom_so·c
 *
Ã
;

45 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_RANDOM
,

46 
LOW_VERSION
, 
HIGH_VERSION
);

47 i‡(
¶Ÿ
 < 0) {

48  
NULL
;

51 
Ã
 = 
	`kmÆloc
((
Ã™dom_so·c
));

52 i‡(
Ã
==
NULL
) {

53  
NULL
;

56 ()
Ã™domno
;

58 
Ã
->
Ã_bus
 = 
sc
;

59 
Ã
->
Ã_bu•os
 = 
¶Ÿ
;

61 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

63  
Ã
;

64 
	}
}

	@test/os161/kern/dev/lamebus/lscreen.c

36 
	~<ty≥s.h
>

37 
	~<lib.h
>

38 
	~<•ölock.h
>

39 
	~<∂©f‹m/bus.h
>

40 
	~<œmebus/ls¸ìn.h
>

41 
	~"autoc⁄f.h
"

44 
	#LSCR_REG_POSN
 0

	)

45 
	#LSCR_REG_SIZE
 4

	)

46 
	#LSCR_REG_CHAR
 8

	)

47 
	#LSCR_REG_RIRQ
 12

	)

50 
	#LSCR_IRQ_ENABLE
 1

	)

51 
	#LSCR_IRQ_ACTIVE
 2

	)

54 
	#LSCR_SCREEN
 32768

	)

58 
ölöe


60 
	$•lôxy
(
uöt32_t
 
xy
, *
x
, *
y
)

62 *
x
 = 
xy
 >> 16;

63 *
y
 = 
xy
 & 0xffff;

64 
	}
}

68 
ölöe


69 
uöt32_t


70 
	$mîgexy
(
x
, 
y
)

72 
uöt32_t
 
vÆ
 = 
x
;

74  (
vÆ
 << 16Ë| 
y
;

75 
	}
}

83 
	$ls¸ìn_úq
(*
vsc
)

85 
ls¸ìn_so·c
 *
sc
 = 
vsc
;

86 
uöt32_t
 
ch
, 
x
;

88 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

90 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSCR_REG_RIRQ
);

91 i‡(
x
 & 
LSCR_IRQ_ACTIVE
) {

92 
ch
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

93 
LSCR_REG_CHAR
);

94 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

95 
LSCR_REG_RIRQ
, 
LSCR_IRQ_ENABLE
);

97 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

98 i‡(
sc
->
ls_öput
) {

99 
sc
->
	`ls_öput
(sc->
ls_devd©a
, 
ch
);

103 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

105 
	}
}

114 
	$ls¸ìn_√wlöe
(
ls¸ìn_so·c
 *
sc
)

116 i‡(
sc
->
ls_cy
 >sc->
ls_height
-1) {

121 
	`memmove
(
sc
->
ls_s¸ìn
, sc->ls_s¸ì¿+ sc->
ls_width
,

122 
sc
->
ls_width
 * (sc->
ls_height
-1));

123 
	`bzîo
(
sc
->
ls_s¸ìn
 + sc->
ls_width
 * (sc->
ls_height
-1),

124 
sc
->
ls_width
);

127 
sc
->
ls_cy
++;

129 
sc
->
ls_cx
=0;

130 
	}
}

137 
	$ls¸ìn_ch¨
(
ls¸ìn_so·c
 *
sc
, 
ch
)

139 i‡(
sc
->
ls_cx
 >sc->
ls_width
) {

140 
	`ls¸ìn_√wlöe
(
sc
);

143 
sc
->
ls_s¸ìn
[sc->
ls_cy
*sc->
ls_width
 + sc->
ls_cx
] = 
ch
;

144 
sc
->
ls_cx
++;

145 
	}
}

152 
	$ls¸ìn_wrôe
(*
vsc
, 
ch
)

154 
ls¸ìn_so·c
 *
sc
 = 
vsc
;

155 
ccx
, 
ccy
;

157 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

159 
ch
) {

160 '\n': 
	`ls¸ìn_√wlöe
(
sc
); ;

161 : 
	`ls¸ìn_ch¨
(
sc
, 
ch
); ;

169 
ccx
 = 
sc
->
ls_cx
;

170 
ccy
 = 
sc
->
ls_cy
;

171 i‡(
ccx
==
sc
->
ls_width
) {

172 
ccx
--;

176 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

177 
LSCR_REG_POSN
, 
	`mîgexy
(
ccx
, 
ccy
));

179 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

180 
	}
}

188 
	$c⁄fig_ls¸ìn
(
ls¸ìn_so·c
 *
sc
, 
ls¸ì¬o
)

190 
uöt32_t
 
vÆ
;

192 ()
ls¸ì¬o
;

194 
	`•ölock_öô
(&
sc
->
ls_lock
);

200 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

201 
LSCR_REG_RIRQ
, 
LSCR_IRQ_ENABLE
);

206 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

207 
LSCR_REG_SIZE
);

208 
	`•lôxy
(
vÆ
, &
sc
->
ls_width
, &sc->
ls_height
);

213 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

214 
LSCR_REG_POSN
);

215 
	`•lôxy
(
vÆ
, &
sc
->
ls_cx
, &sc->
ls_cy
);

220 
sc
->
ls_s¸ìn
 = 
	`bus_m≠_¨ó
(sc->
ls_busd©a
, sc->
ls_bu•os
,

221 
LSCR_SCREEN
);

224 
	}
}

	@test/os161/kern/dev/lamebus/lscreen.h

30 #i‚de‡
_LAMEBUS_LSCREEN_H_


31 
	#_LAMEBUS_LSCREEN_H_


	)

36 
	sls¸ìn_so·c
 {

38 
•ölock
 
	mls_lock
;

39 
	mls_width
, 
	mls_height
;

40 
	mls_cx
, 
	mls_cy
;

41 *
	mls_s¸ìn
;

44 *
	mls_busd©a
;

45 
uöt32_t
 
	mls_bu•os
;

48 *
	mls_devd©a
;

49 (*
	mls_°¨t
)(*
	mdevd©a
);

50 (*
	mls_öput
)(*
	mdevd©a
, 
	mch
);

54 
ls¸ìn_úq
–*
sc
);

57 
ls¸ìn_wrôe
–*
sc
, 
ch
);

	@test/os161/kern/dev/lamebus/lscreen_att.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<œmebus/œmebus.h
>

36 
	~<œmebus/ls¸ìn.h
>

37 
	~"autoc⁄f.h
"

40 
	#LOW_VERSION
 1

	)

42 
	#HIGH_VERSION
 1

	)

44 
ls¸ìn_so·c
 *

45 
	$©èch_ls¸ìn_to_œmebus
(
ls¸ì¬o
, 
œmebus_so·c
 *
sc
)

47 
ls¸ìn_so·c
 *
ls
;

48 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_SCREEN
,

49 
LOW_VERSION
, 
HIGH_VERSION
);

50 i‡(
¶Ÿ
 < 0) {

52  
NULL
;

55 
ls
 = 
	`kmÆloc
((
ls¸ìn_so·c
));

56 i‡(
ls
==
NULL
) {

58  
NULL
;

62 
ls
->
ls_busd©a
 = 
sc
;

63 
ls
->
ls_bu•os
 = 
¶Ÿ
;

66 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

67 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
ls
, 
ls¸ìn_úq
);

69  
ls
;

70 
	}
}

	@test/os161/kern/dev/lamebus/lser.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<•ölock.h
>

33 
	~<∂©f‹m/bus.h
>

34 
	~<œmebus/l£r.h
>

35 
	~"autoc⁄f.h
"

38 
	#LSER_REG_CHAR
 0

	)

39 
	#LSER_REG_WIRQ
 4

	)

40 
	#LSER_REG_RIRQ
 8

	)

43 
	#LSER_IRQ_ENABLE
 1

	)

44 
	#LSER_IRQ_ACTIVE
 2

	)

47 
	$l£r_úq
(*
vsc
)

49 
l£r_so·c
 *
sc
 = 
vsc
;

50 
uöt32_t
 
x
;

51 
boﬁ
 
˛ór_to_wrôe
 = 
Ál£
;

52 
boﬁ
 
gŸ_a_ªad
 = 
Ál£
;

53 
uöt32_t
 
ch
 = 0;

55 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

57 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_WIRQ
);

58 i‡(
x
 & 
LSER_IRQ_ACTIVE
) {

59 
x
 = 
LSER_IRQ_ENABLE
;

60 
sc
->
ls_wbusy
 = 0;

61 
˛ór_to_wrôe
 = 
åue
;

62 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

63 
LSER_REG_WIRQ
, 
x
);

66 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_RIRQ
);

67 i‡(
x
 & 
LSER_IRQ_ACTIVE
) {

68 
x
 = 
LSER_IRQ_ENABLE
;

69 
ch
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

70 
LSER_REG_CHAR
);

71 
gŸ_a_ªad
 = 
åue
;

72 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

73 
LSER_REG_RIRQ
, 
x
);

76 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

78 i‡(
˛ór_to_wrôe
 && 
sc
->
ls_°¨t
 !
NULL
) {

79 
sc
->
	`ls_°¨t
(sc->
ls_devd©a
);

81 i‡(
gŸ_a_ªad
 && 
sc
->
ls_öput
 !
NULL
) {

82 
sc
->
	`ls_öput
(sc->
ls_devd©a
, 
ch
);

84 
	}
}

87 
	$l£r_wrôe
(*
vls
, 
ch
)

89 
l£r_so·c
 *
ls
 = 
vls
;

91 
	`•ölock_acquúe
(&
ls
->
ls_lock
);

93 i‡(
ls
->
ls_wbusy
) {

105 
	`∑nic
("lser: Not clearÅo write\n");

107 
ls
->
ls_wbusy
 = 
åue
;

109 
	`bus_wrôe_ªgi°î
(
ls
->
ls_busd©a
,Üs->
ls_bu•os
, 
LSER_REG_CHAR
, 
ch
);

111 
	`•ölock_ªÀa£
(&
ls
->
ls_lock
);

112 
	}
}

116 
	$l£r_pﬁl_u¡û_wrôe
(
l£r_so·c
 *
sc
)

118 
uöt32_t
 
vÆ
;

120 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
sc
->
ls_lock
));

123 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

124 
LSER_REG_WIRQ
);

126 (
vÆ
 & 
LSER_IRQ_ACTIVE
) == 0);

127 
	}
}

130 
	$l£r_wrôïﬁÀd
(*
vsc
, 
ch
)

132 
l£r_so·c
 *
sc
 = 
vsc
;

133 
boﬁ
 
úq≥ndög
 = 
Ál£
;

135 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

137 i‡(
sc
->
ls_wbusy
) {

138 
úq≥ndög
 = 
åue
;

139 
	`l£r_pﬁl_u¡û_wrôe
(
sc
);

141 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

142 
LSER_REG_WIRQ
, 
LSER_IRQ_ENABLE
);

146 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_CHAR
, 
ch
);

149 
	`l£r_pﬁl_u¡û_wrôe
(
sc
);

156 i‡(!
úq≥ndög
) {

157 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

158 
LSER_REG_WIRQ
, 
LSER_IRQ_ENABLE
);

161 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

162 
	}
}

170 
	$l£r_°¨çﬁlög
(*
vsc
)

172 
l£r_so·c
 *
sc
 = 
vsc
;

173 
sc
->
	`ls_masköãºu±
(sc->
ls_busd©a
, sc->
ls_bu•os
);

174 
	}
}

177 
	$l£r_ídpﬁlög
(*
vsc
)

179 
l£r_so·c
 *
sc
 = 
vsc
;

180 
sc
->
	`ls_unmasköãºu±
(sc->
ls_busd©a
, sc->
ls_bu•os
);

181 
	}
}

184 
	$c⁄fig_l£r
(
l£r_so·c
 *
sc
, 
l£∫o
)

186 ()
l£∫o
;

192 
	`•ölock_öô
(&
sc
->
ls_lock
);

193 
sc
->
ls_wbusy
 = 
Ál£
;

195 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

196 
LSER_REG_RIRQ
, 
LSER_IRQ_ENABLE
);

197 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

198 
LSER_REG_WIRQ
, 
LSER_IRQ_ENABLE
);

201 
	}
}

	@test/os161/kern/dev/lamebus/lser.h

30 #i‚de‡
_LAMEBUS_LSER_H_


31 
	#_LAMEBUS_LSER_H_


	)

33 
	~<•ölock.h
>

35 
	sl£r_so·c
 {

37 
•ölock
 
	mls_lock
;

38 vﬁ©ûê
boﬁ
 
	mls_wbusy
;

41 *
	mls_busd©a
;

42 
uöt32_t
 
	mls_bu•os
;

43 (*
	mls_masköãºu±
)(*
	mbusd©a
, 
uöt32_t
 
	mbu•os
);

44 (*
	mls_unmasköãºu±
)(*
	mbusd©a
, 
uöt32_t
 
	mbu•os
);

47 *
	mls_devd©a
;

48 (*
	mls_°¨t
)(*
	mdevd©a
);

49 (*
	mls_öput
)(*
	mdevd©a
, 
	mch
);

53 
l£r_úq
–*
sc
);

56 
l£r_wrôe
–*
sc
, 
ch
);

57 
l£r_°¨çﬁlög
–*
sc
);

58 
l£r_wrôïﬁÀd
–*
sc
, 
ch
);

59 
l£r_ídpﬁlög
–*
sc
);

	@test/os161/kern/dev/lamebus/lser_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~<œmebus/l£r.h
>

34 
	~"autoc⁄f.h
"

37 
	#LOW_VERSION
 1

	)

39 
	#HIGH_VERSION
 1

	)

46 
	$do_œmebus_mask_öãºu±
(*
bus
, 
uöt32_t
 
bu•os
)

48 
œmebus_so·c
 *
lb
 = 
bus
;

49 
	`œmebus_mask_öãºu±
(
lb
, 
bu•os
);

50 
	}
}

54 
	$do_œmebus_unmask_öãºu±
(*
bus
, 
uöt32_t
 
bu•os
)

56 
œmebus_so·c
 *
lb
 = 
bus
;

57 
	`œmebus_unmask_öãºu±
(
lb
, 
bu•os
);

58 
	}
}

63 
l£r_so·c
 *

64 
	$©èch_l£r_to_œmebus
(
l£∫o
, 
œmebus_so·c
 *
sc
)

66 
l£r_so·c
 *
ls
;

67 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_SERIAL
,

68 
LOW_VERSION
, 
HIGH_VERSION
);

69 i‡(
¶Ÿ
 < 0) {

70  
NULL
;

73 
ls
 = 
	`kmÆloc
((
l£r_so·c
));

74 i‡(
ls
==
NULL
) {

75  
NULL
;

78 ()
l£∫o
;

80 
ls
->
ls_busd©a
 = 
sc
;

81 
ls
->
ls_bu•os
 = 
¶Ÿ
;

82 
ls
->
ls_masköãºu±
 = 
do_œmebus_mask_öãºu±
;

83 
ls
->
ls_unmasköãºu±
 = 
do_œmebus_unmask_öãºu±
;

85 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

86 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
ls
, 
l£r_úq
);

88  
ls
;

89 
	}
}

	@test/os161/kern/dev/lamebus/ltimer.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<•l.h
>

36 
	~<˛ock.h
>

37 
	~<∂©f‹m/bus.h
>

38 
	~<œmebus/…imî.h
>

39 
	~"autoc⁄f.h
"

42 
	#LT_REG_SEC
 0

	)

43 
	#LT_REG_NSEC
 4

	)

44 
	#LT_REG_ROE
 8

	)

45 
	#LT_REG_IRQ
 12

	)

46 
	#LT_REG_COUNT
 16

	)

47 
	#LT_REG_SPKR
 20

	)

50 
	#LT_GRANULARITY
 1000000

	)

52 
boﬁ
 
	ghavëimî˛ock
;

58 
	$c⁄fig_…imî
(
…imî_so·c
 *
…
, 
…imîno
)

83 ()
…imîno
;

84 
…
->
…_h¨d˛ock
 = 0;

90 i‡(!
havëimî˛ock
) {

91 
havëimî˛ock
 = 
åue
;

92 
…
->
…_timî˛ock
 = 1;

95 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_ROE
, 1);

96 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_COUNT
,

97 
LT_GRANULARITY
);

101 
	}
}

107 
	$…imî_úq
(*
v…
)

109 
…imî_so·c
 *
…
 = 
v…
;

110 
uöt32_t
 
vÆ
;

112 
vÆ
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_IRQ
);

113 i‡(
vÆ
) {

118 i‡(
…
->
…_h¨d˛ock
) {

119 
	`h¨d˛ock
();

124 i‡(
…
->
…_timî˛ock
) {

125 
	`timî˛ock
();

128 
	}
}

136 
	$…imî_bìp
(*
v…
)

138 
…imî_so·c
 *
…
 = 
v…
;

140 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_SPKR
, 440);

141 
	}
}

149 
	$…imî_gëtime
(*
v…
, 
time_t
 *
£cs
, 
uöt32_t
 *
n£cs
)

151 
…imî_so·c
 *
…
 = 
v…
;

152 
uöt32_t
 
£cs1
, 
£cs2
;

153 
•l
;

170 
•l
 = 
	`•lhigh
();

172 
£cs1
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

173 
LT_REG_SEC
);

174 *
n£cs
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

175 
LT_REG_NSEC
);

176 
£cs2
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

177 
LT_REG_SEC
);

179 
	`•lx
(
•l
);

181 i‡(*
n£cs
 < 5000000) {

182 *
£cs
 = 
£cs2
;

185 *
£cs
 = 
£cs1
;

187 
	}
}

	@test/os161/kern/dev/lamebus/ltimer.h

30 #i‚de‡
_LAMEBUS_LTIMER_H_


31 
	#_LAMEBUS_LTIMER_H_


	)

36 
	s…imî_so·c
 {

38 
	m…_h¨d˛ock
;

39 
	m…_timî˛ock
;

42 *
	m…_bus
;

43 
uöt32_t
 
	m…_bu•os
;

48 
…imî_úq
–*
…
);

51 
…imî_bìp
–*
devd©a
);

52 
…imî_gëtime
–*
devd©a
,

53 
time_t
 *
£cs
, 
uöt32_t
 *
n£cs
);

	@test/os161/kern/dev/lamebus/ltimer_att.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<œmebus/œmebus.h
>

36 
	~<œmebus/…imî.h
>

37 
	~"autoc⁄f.h
"

40 
	#LOW_VERSION
 1

	)

42 
	#HIGH_VERSION
 1

	)

44 
…imî_so·c
 *

45 
	$©èch_…imî_to_œmebus
(
…imîno
, 
œmebus_so·c
 *
sc
)

47 
…imî_so·c
 *
…
;

48 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_TIMER
,

49 
LOW_VERSION
, 
HIGH_VERSION
);

50 i‡(
¶Ÿ
 < 0) {

52  
NULL
;

55 
…
 = 
	`kmÆloc
((
…imî_so·c
));

56 i‡(
…
==
NULL
) {

58  
NULL
;

61 ()
…imîno
;

64 
…
->
…_bus
 = 
sc
;

65 
…
->
…_bu•os
 = 
¶Ÿ
;

68 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

69 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
…
, 
…imî_úq
);

71  
…
;

72 
	}
}

	@test/os161/kern/dev/lamebus/ltrace.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<∂©f‹m/bus.h
>

33 
	~<œmebus/…ø˚.h
>

34 
	~"autoc⁄f.h
"

37 
	#LTRACE_REG_TRON
 0

	)

38 
	#LTRACE_REG_TROFF
 4

	)

39 
	#LTRACE_REG_DEBUG
 8

	)

40 
	#LTRACE_REG_DUMP
 12

	)

42 
…ø˚_so·c
 *
	gthe_åa˚
;

45 
	$…ø˚_⁄
(
uöt32_t
 
code
)

47 i‡(
the_åa˚
 !
NULL
) {

48 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

49 
LTRACE_REG_TRON
, 
code
);

51 
	}
}

54 
	$…ø˚_off
(
uöt32_t
 
code
)

56 i‡(
the_åa˚
 !
NULL
) {

57 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

58 
LTRACE_REG_TROFF
, 
code
);

60 
	}
}

63 
	$…ø˚_debug
(
uöt32_t
 
code
)

65 i‡(
the_åa˚
 !
NULL
) {

66 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

67 
LTRACE_REG_DEBUG
, 
code
);

69 
	}
}

72 
	$…ø˚_dump
(
uöt32_t
 
code
)

74 i‡(
the_åa˚
 !
NULL
) {

75 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

76 
LTRACE_REG_DUMP
, 
code
);

78 
	}
}

81 
	$c⁄fig_…ø˚
(
…ø˚_so·c
 *
sc
, 
…ø˚no
)

83 ()
…ø˚no
;

84 
the_åa˚
 = 
sc
;

86 
	}
}

	@test/os161/kern/dev/lamebus/ltrace.h

30 #i‚de‡
_LAMEBUS_LTRACE_H_


31 
	#_LAMEBUS_LTRACE_H_


	)

33 
	s…ø˚_so·c
 {

35 *
	m…_busd©a
;

36 
uöt32_t
 
	m…_bu•os
;

62 
…ø˚_⁄
(
uöt32_t
 
code
);

63 
…ø˚_off
(
uöt32_t
 
code
);

64 
…ø˚_debug
(
uöt32_t
 
code
);

65 
…ø˚_dump
(
uöt32_t
 
code
);

	@test/os161/kern/dev/lamebus/ltrace_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~<œmebus/…ø˚.h
>

34 
	~"autoc⁄f.h
"

37 
	#LOW_VERSION
 1

	)

39 
	#HIGH_VERSION
 1

	)

41 
…ø˚_so·c
 *

42 
	$©èch_…ø˚_to_œmebus
(
…ø˚no
, 
œmebus_so·c
 *
sc
)

44 
…ø˚_so·c
 *
…
;

45 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_TRACE
,

46 
LOW_VERSION
, 
HIGH_VERSION
);

47 i‡(
¶Ÿ
 < 0) {

48  
NULL
;

51 
…
 = 
	`kmÆloc
((
…ø˚_so·c
));

52 i‡(
…
==
NULL
) {

53  
NULL
;

56 ()
…ø˚no
;

58 
…
->
…_busd©a
 = 
sc
;

59 
…
->
…_bu•os
 = 
¶Ÿ
;

61 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

63  
…
;

64 
	}
}

	@test/os161/kern/dev/lamebus/random_lrandom.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/øndom.h
>

38 
	~<œmebus/Ã™dom.h
>

39 
	~"autoc⁄f.h
"

41 
øndom_so·c
 *

42 
	$©èch_øndom_to_Ã™dom
(
øndomno
, 
Ã™dom_so·c
 *
ls
)

44 
øndom_so·c
 *
rs
 = 
	`kmÆloc
((random_softc));

45 i‡(
rs
==
NULL
) {

46  
NULL
;

49 ()
øndomno
;

51 
rs
->
rs_devd©a
 = 
ls
;

52 
rs
->
rs_øndom
 = 
Ã™dom_øndom
;

53 
rs
->
rs_øndmax
 = 
Ã™dom_øndmax
;

54 
rs
->
rs_ªad
 = 
Ã™dom_ªad
;

56  
rs
;

57 
	}
}

	@test/os161/kern/dev/lamebus/rtclock_ltimer.c

41 
	~<ty≥s.h
>

42 
	~<lib.h
>

43 
	~<gíîic/π˛ock.h
>

44 
	~<œmebus/…imî.h
>

45 
	~"autoc⁄f.h
"

47 
π˛ock_so·c
 *

48 
	$©èch_π˛ock_to_…imî
(
π˛ockno
, 
…imî_so·c
 *
ls
)

54 
π˛ock_so·c
 *
πc
 = 
	`kmÆloc
((rtclock_softc));

55 i‡(
πc
==
NULL
) {

57  
NULL
;

60 ()
π˛ockno
;

62 
πc
->
πc_devd©a
 = 
ls
;

63 
πc
->
πc_gëtime
 = 
…imî_gëtime
;

65  
πc
;

66 
	}
}

	@test/os161/kern/fs/sfs/sfs_fs.c

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<lib.h
>

39 
	~<¨øy.h
>

40 
	~<bôm≠.h
>

41 
	~<uio.h
>

42 
	~<vfs.h
>

43 
	~<devi˚.h
>

44 
	~<sfs.h
>

47 
	#SFS_FS_BITMAPSIZE
(
sfs
Ë
	`SFS_BITMAPSIZE
((sfs)->
sfs_su≥r
.
•_nblocks
)

	)

48 
	#SFS_FS_BITBLOCKS
(
sfs
Ë
	`SFS_BITBLOCKS
((sfs)->
sfs_su≥r
.
•_nblocks
)

	)

70 
	$sfs_m≠io
(
sfs_fs
 *
sfs
, 
uio_rw
 
rw
)

72 
uöt32_t
 
j
, 
m≠size
;

73 *
bôd©a
;

74 
ªsu…
;

77 
m≠size
 = 
	`SFS_FS_BITBLOCKS
(
sfs
);

80 
bôd©a
 = 
	`bôm≠_gëd©a
(
sfs
->
sfs_‰ìm≠
);

83 
j
=0; j<
m≠size
; j++) {

86 *
±r
 = 
bôd©a
 + 
j
*
SFS_BLOCKSIZE
;

89 i‡(
rw
 =
UIO_READ
) {

90 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
±r
, 
SFS_MAP_LOCATION
+
j
);

93 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
±r
, 
SFS_MAP_LOCATION
+
j
);

97 i‡(
ªsu…
) {

98  
ªsu…
;

102 
	}
}

111 
	$sfs_sync
(
fs
 *fs)

113 
sfs_fs
 *
sfs
;

114 
i
, 
num
;

115 
ªsu…
;

117 
	`vfs_biglock_acquúe
();

149 
sfs
 = 
fs
->
fs_d©a
;

152 
num
 = 
	`vnodóºay_num
(
sfs
->
sfs_vnodes
);

153 
i
=0; i<
num
; i++) {

154 
vnode
 *
v
 = 
	`vnodóºay_gë
(
sfs
->
sfs_vnodes
, 
i
);

155 
	`VOP_FSYNC
(
v
);

159 i‡(
sfs
->
sfs_‰ìm≠dúty
) {

160 
ªsu…
 = 
	`sfs_m≠io
(
sfs
, 
UIO_WRITE
);

161 i‡(
ªsu…
) {

162 
	`vfs_biglock_ªÀa£
();

163  
ªsu…
;

165 
sfs
->
sfs_‰ìm≠dúty
 = 
Ál£
;

169 i‡(
sfs
->
sfs_su≥rdúty
) {

170 
ªsu…
 = 
	`sfs_wblock
(
sfs
, &sfs->
sfs_su≥r
, 
SFS_SB_LOCATION
);

171 i‡(
ªsu…
) {

172 
	`vfs_biglock_ªÀa£
();

173  
ªsu…
;

175 
sfs
->
sfs_su≥rdúty
 = 
Ál£
;

178 
	`vfs_biglock_ªÀa£
();

180 
	}
}

189 
	$sfs_gëvﬁ«me
(
fs
 *fs)

191 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

192 c⁄° *
ªt
;

194 
	`vfs_biglock_acquúe
();

195 
ªt
 = 
sfs
->
sfs_su≥r
.
•_vﬁ«me
;

196 
	`vfs_biglock_ªÀa£
();

198  
ªt
;

199 
	}
}

208 
	$sfs_unmou¡
(
fs
 *fs)

210 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

212 
	`vfs_biglock_acquúe
();

215 i‡(
	`vnodóºay_num
(
sfs
->
sfs_vnodes
) > 0) {

216 
	`vfs_biglock_ªÀa£
();

217  
EBUSY
;

221 
	`KASSERT
(
sfs
->
sfs_su≥rdúty
 =
Ál£
);

222 
	`KASSERT
(
sfs
->
sfs_‰ìm≠dúty
 =
Ál£
);

225 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

226 
	`bôm≠_de°roy
(
sfs
->
sfs_‰ìm≠
);

229 ()
sfs
->
sfs_devi˚
;

232 
	`k‰ì
(
sfs
);

235 
	`vfs_biglock_ªÀa£
();

237 
	}
}

255 
	$sfs_domou¡
(*
›ti⁄s
, 
devi˚
 *
dev
, 
fs
 **
ªt
)

257 
ªsu…
;

258 
sfs_fs
 *
sfs
;

260 
	`vfs_biglock_acquúe
();

263 ()
›ti⁄s
;

268 
	`KASSERT
((
sfs_su≥r
)==
SFS_BLOCKSIZE
);

269 
	`KASSERT
((
sfs_öode
)==
SFS_BLOCKSIZE
);

270 
	`KASSERT
(
SFS_BLOCKSIZE
 % (
sfs_dú
) == 0);

280 i‡(
dev
->
d_blocksize
 !
SFS_BLOCKSIZE
) {

281 
	`vfs_biglock_ªÀa£
();

282  
ENXIO
;

286 
sfs
 = 
	`kmÆloc
((
sfs_fs
));

287 i‡(
sfs
==
NULL
) {

288 
	`vfs_biglock_ªÀa£
();

289  
ENOMEM
;

293 
sfs
->
sfs_vnodes
 = 
	`vnodóºay_¸óã
();

294 i‡(
sfs
->
sfs_vnodes
 =
NULL
) {

295 
	`k‰ì
(
sfs
);

296 
	`vfs_biglock_ªÀa£
();

297  
ENOMEM
;

301 
sfs
->
sfs_devi˚
 = 
dev
;

304 
ªsu…
 = 
	`sfs_rblock
(
sfs
, &sfs->
sfs_su≥r
, 
SFS_SB_LOCATION
);

305 i‡(
ªsu…
) {

306 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

307 
	`k‰ì
(
sfs
);

308 
	`vfs_biglock_ªÀa£
();

309  
ªsu…
;

314 i‡(
sfs
->
sfs_su≥r
.
•_magic
 !
SFS_MAGIC
) {

315 
	`k¥ötf
("sfs: Wrong magicÇumber in superblock "

317 
sfs
->
sfs_su≥r
.
•_magic
,

318 
SFS_MAGIC
);

319 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

320 
	`k‰ì
(
sfs
);

321 
	`vfs_biglock_ªÀa£
();

322  
EINVAL
;

325 i‡(
sfs
->
sfs_su≥r
.
•_nblocks
 > 
dev
->
d_blocks
) {

326 
	`k¥ötf
("sfs: warning - fs has %u blocks, device has %u\n",

327 
sfs
->
sfs_su≥r
.
•_nblocks
, 
dev
->
d_blocks
);

331 
sfs
->
sfs_su≥r
.
•_vﬁ«me
[(sfs->sfs_super.sp_volname)-1] = 0;

334 
sfs
->
sfs_‰ìm≠
 = 
	`bôm≠_¸óã
(
	`SFS_FS_BITMAPSIZE
(sfs));

335 i‡(
sfs
->
sfs_‰ìm≠
 =
NULL
) {

336 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

337 
	`k‰ì
(
sfs
);

338 
	`vfs_biglock_ªÀa£
();

339  
ENOMEM
;

341 
ªsu…
 = 
	`sfs_m≠io
(
sfs
, 
UIO_READ
);

342 i‡(
ªsu…
) {

343 
	`bôm≠_de°roy
(
sfs
->
sfs_‰ìm≠
);

344 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

345 
	`k‰ì
(
sfs
);

346 
	`vfs_biglock_ªÀa£
();

347  
ªsu…
;

351 
sfs
->
sfs_absfs
.
fs_sync
 = 
sfs_sync
;

352 
sfs
->
sfs_absfs
.
fs_gëvﬁ«me
 = 
sfs_gëvﬁ«me
;

353 
sfs
->
sfs_absfs
.
fs_gëroŸ
 = 
sfs_gëroŸ
;

354 
sfs
->
sfs_absfs
.
fs_unmou¡
 = 
sfs_unmou¡
;

355 
sfs
->
sfs_absfs
.
fs_d©a
 = sfs;

358 
sfs
->
sfs_su≥rdúty
 = 
Ál£
;

359 
sfs
->
sfs_‰ìm≠dúty
 = 
Ál£
;

362 *
ªt
 = &
sfs
->
sfs_absfs
;

364 
	`vfs_biglock_ªÀa£
();

366 
	}
}

373 
	$sfs_mou¡
(c⁄° *
devi˚
)

375  
	`vfs_mou¡
(
devi˚
, 
NULL
, 
sfs_domou¡
);

376 
	}
}

	@test/os161/kern/fs/sfs/sfs_io.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<uio.h
>

34 
	~<vfs.h
>

35 
	~<devi˚.h
>

36 
	~<sfs.h
>

48 
	$sfs_rwblock
(
sfs_fs
 *
sfs
, 
uio
 *uio)

50 
ªsu…
;

51 
åõs
=0;

53 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

55 
	`DEBUG
(
DB_SFS
, "sfs: %s %llu\n",

56 
uio
->
uio_rw
 =
UIO_READ
 ? "read" : "write",

57 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
);

59 
ªåy
:

60 
ªsu…
 = 
sfs
->
sfs_devi˚
->
	`d_io
(sfs->sfs_devi˚, 
uio
);

61 i‡(
ªsu…
 =
EINVAL
) {

67 
	`∑nic
("sfs: d_ioÑeturned EINVAL\n");

69 i‡(
ªsu…
 =
EIO
) {

70 i‡(
åõs
 == 0) {

71 
åõs
++;

72 
	`k¥ötf
("sfs: block %llu I/OÉrror,Ñetrying\n",

73 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
);

74 
ªåy
;

76 i‡(
åõs
 < 10) {

77 
åõs
++;

78 
ªåy
;

81 
	`k¥ötf
("sfs: block %llu I/OÉrror, giving upáfter "

83 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
, 
åõs
);

86  
ªsu…
;

87 
	}
}

90 
	$sfs_rblock
(
sfs_fs
 *
sfs
, *
d©a
, 
uöt32_t
 
block
)

92 
iovec
 
iov
;

93 
uio
 
ku
;

95 
	`SFSUIO
(&
iov
, &
ku
, 
d©a
, 
block
, 
UIO_READ
);

96  
	`sfs_rwblock
(
sfs
, &
ku
);

97 
	}
}

100 
	$sfs_wblock
(
sfs_fs
 *
sfs
, *
d©a
, 
uöt32_t
 
block
)

102 
iovec
 
iov
;

103 
uio
 
ku
;

105 
	`SFSUIO
(&
iov
, &
ku
, 
d©a
, 
block
, 
UIO_WRITE
);

106  
	`sfs_rwblock
(
sfs
, &
ku
);

107 
	}
}

	@test/os161/kern/fs/sfs/sfs_vnode.c

35 
	~<ty≥s.h
>

36 
	~<kîn/î∫o.h
>

37 
	~<kîn/f˙é.h
>

38 
	~<°©.h
>

39 
	~<lib.h
>

40 
	~<¨øy.h
>

41 
	~<bôm≠.h
>

42 
	~<uio.h
>

43 
	~<synch.h
>

44 
	~<vfs.h
>

45 
	~<devi˚.h
>

46 
	~<sfs.h
>

49 
sfs_lﬂdvnode
(
sfs_fs
 *
sfs
, 
uöt32_t
 
öo
, 
ty≥
,

50 
sfs_vnode
 **
ªt
);

59 
	$sfs_˛órblock
(
sfs_fs
 *
sfs
, 
uöt32_t
 
block
)

62 
zîos
[
SFS_BLOCKSIZE
];

63  
	`sfs_wblock
(
sfs
, 
zîos
, 
block
);

64 
	}
}

69 
	$sfs_sync_öode
(
sfs_vnode
 *
sv
)

71 i‡(
sv
->
sv_dúty
) {

72 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

73 
ªsu…
 = 
	`sfs_wblock
(
sfs
, &
sv
->
sv_i
, sv->
sv_öo
);

74 i‡(
ªsu…
) {

75  
ªsu…
;

77 
sv
->
sv_dúty
 = 
Ál£
;

80 
	}
}

91 
	$sfs_bÆloc
(
sfs_fs
 *
sfs
, 
uöt32_t
 *
diskblock
)

93 
ªsu…
;

95 
ªsu…
 = 
	`bôm≠_Æloc
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

96 i‡(
ªsu…
) {

97  
ªsu…
;

99 
sfs
->
sfs_‰ìm≠dúty
 = 
åue
;

101 i‡(*
diskblock
 >
sfs
->
sfs_su≥r
.
•_nblocks
) {

102 
	`∑nic
("sfs: bÆloc: invÆid block %u\n", *
diskblock
);

106  
	`sfs_˛órblock
(
sfs
, *
diskblock
);

107 
	}
}

114 
	$sfs_b‰ì
(
sfs_fs
 *
sfs
, 
uöt32_t
 
diskblock
)

116 
	`bôm≠_unm¨k
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

117 
sfs
->
sfs_‰ìm≠dúty
 = 
åue
;

118 
	}
}

125 
	$sfs_bu£d
(
sfs_fs
 *
sfs
, 
uöt32_t
 
diskblock
)

127 i‡(
diskblock
 >
sfs
->
sfs_su≥r
.
•_nblocks
) {

128 
	`∑nic
("sfs: sfs_bused called on out ofÑange block %u\n",

129 
diskblock
);

131  
	`bôm≠_is£t
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

132 
	}
}

146 
	$sfs_bm≠
(
sfs_vnode
 *
sv
, 
uöt32_t
 
fûeblock
, 
dﬂŒoc
,

147 
uöt32_t
 *
diskblock
)

156 
uöt32_t
 
idbuf
[
SFS_DBPERIDB
];

158 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

159 
uöt32_t
 
block
;

160 
uöt32_t
 
idblock
;

161 
uöt32_t
 
idnum
, 
idoff
;

162 
ªsu…
;

164 
	`KASSERT
((
idbuf
)==
SFS_BLOCKSIZE
);

169 i‡(
fûeblock
 < 
SFS_NDIRECT
) {

173 
block
 = 
sv
->
sv_i
.
sfi_dúe˘
[
fûeblock
];

178 i‡(
block
==0 && 
dﬂŒoc
) {

179 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
block
);

180 i‡(
ªsu…
) {

181  
ªsu…
;

185 
sv
->
sv_i
.
sfi_dúe˘
[
fûeblock
] = 
block
;

186 
sv
->
sv_dúty
 = 
åue
;

192 i‡(
block
 !0 && !
	`sfs_bu£d
(
sfs
, block)) {

193 
	`∑nic
("sfs: Data block %u (block %u of file %u) "

194 "m¨ked fªe\n", 
block
, 
fûeblock
, 
sv
->
sv_öo
);

196 *
diskblock
 = 
block
;

206 
fûeblock
 -
SFS_NDIRECT
;

209 
idnum
 = 
fûeblock
 / 
SFS_DBPERIDB
;

210 
idoff
 = 
fûeblock
 % 
SFS_DBPERIDB
;

216 i‡(
idnum
 > 0) {

217  
EFBIG
;

221 
idblock
 = 
sv
->
sv_i
.
sfi_ödúe˘
;

223 i‡(
idblock
==0 && !
dﬂŒoc
) {

229 *
diskblock
 = 0;

232 i‡(
idblock
==0) {

239 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
idblock
);

240 i‡(
ªsu…
) {

241  
ªsu…
;

245 
sv
->
sv_i
.
sfi_ödúe˘
 = 
idblock
;

248 
sv
->
sv_dúty
 = 
åue
;

251 
	`bzîo
(
idbuf
, (idbuf));

257 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
idbuf
, 
idblock
);

258 i‡(
ªsu…
) {

259  
ªsu…
;

264 
block
 = 
idbuf
[
idoff
];

267 i‡(
block
==0 && 
dﬂŒoc
) {

268 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
block
);

269 i‡(
ªsu…
) {

270  
ªsu…
;

274 
idbuf
[
idoff
] = 
block
;

277 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
idbuf
, 
idblock
);

278 i‡(
ªsu…
) {

279  
ªsu…
;

284 i‡(
block
 !0 && !
	`sfs_bu£d
(
sfs
, block)) {

285 
	`∑nic
("sfs: Data block %u (block %u of file %u) marked free\n",

286 
block
, 
fûeblock
, 
sv
->
sv_öo
);

288 *
diskblock
 = 
block
;

290 
	}
}

308 
	$sfs_∑πülio
(
sfs_vnode
 *
sv
, 
uio
 *uio,

309 
uöt32_t
 
skù°¨t
, uöt32_à
Àn
)

318 
iobuf
[
SFS_BLOCKSIZE
];

320 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

321 
uöt32_t
 
diskblock
;

322 
uöt32_t
 
fûeblock
;

323 
ªsu…
;

326 
dﬂŒoc
 = (
uio
->
uio_rw
==
UIO_WRITE
);

328 
	`KASSERT
(
skù°¨t
 + 
Àn
 <
SFS_BLOCKSIZE
);

331 
fûeblock
 = 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
;

334 
ªsu…
 = 
	`sfs_bm≠
(
sv
, 
fûeblock
, 
dﬂŒoc
, &
diskblock
);

335 i‡(
ªsu…
) {

336  
ªsu…
;

339 i‡(
diskblock
 == 0) {

344 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

345 
	`bzîo
(
iobuf
, (iobuf));

351 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
iobuf
, 
diskblock
);

352 i‡(
ªsu…
) {

353  
ªsu…
;

360 
ªsu…
 = 
	`uiomove
(
iobuf
+
skù°¨t
, 
Àn
, 
uio
);

361 i‡(
ªsu…
) {

362  
ªsu…
;

368 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

369 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
iobuf
, 
diskblock
);

370 i‡(
ªsu…
) {

371  
ªsu…
;

376 
	}
}

383 
	$sfs_blockio
(
sfs_vnode
 *
sv
, 
uio
 *uio)

385 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

386 
uöt32_t
 
diskblock
;

387 
uöt32_t
 
fûeblock
;

388 
ªsu…
;

389 
dﬂŒoc
 = (
uio
->
uio_rw
==
UIO_WRITE
);

390 
off_t
 
ßveoff
;

391 
off_t
 
diskoff
;

392 
off_t
 
ßvîes
;

393 
off_t
 
diskªs
;

396 
fûeblock
 = 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
;

399 
ªsu…
 = 
	`sfs_bm≠
(
sv
, 
fûeblock
, 
dﬂŒoc
, &
diskblock
);

400 i‡(
ªsu…
) {

401  
ªsu…
;

404 i‡(
diskblock
 == 0) {

411 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

412  
	`uiomovezîos
(
SFS_BLOCKSIZE
, 
uio
);

419 
ßveoff
 = 
uio
->
uio_off£t
;

420 
diskoff
 = 
diskblock
 * 
SFS_BLOCKSIZE
;

421 
uio
->
uio_off£t
 = 
diskoff
;

426 
	`KASSERT
(
uio
->
uio_ªsid
 >
SFS_BLOCKSIZE
);

427 
ßvîes
 = 
uio
->
uio_ªsid
;

428 
diskªs
 = 
SFS_BLOCKSIZE
;

429 
uio
->
uio_ªsid
 = 
diskªs
;

431 
ªsu…
 = 
	`sfs_rwblock
(
sfs
, 
uio
);

437 
uio
->
uio_off£t
 = (uio->uio_off£à- 
diskoff
Ë+ 
ßveoff
;

438 
uio
->
uio_ªsid
 = (uio->uio_ªsid - 
diskªs
Ë+ 
ßvîes
;

440  
ªsu…
;

441 
	}
}

448 
	$sfs_io
(
sfs_vnode
 *
sv
, 
uio
 *uio)

450 
uöt32_t
 
blkoff
;

451 
uöt32_t
 
nblocks
, 
i
;

452 
ªsu…
 = 0;

453 
uöt32_t
 
exå¨esid
 = 0;

460 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

461 
off_t
 
size
 = 
sv
->
sv_i
.
sfi_size
;

462 
off_t
 
ídpos
 = 
uio
->
uio_off£t
 + uio->
uio_ªsid
;

464 i‡(
uio
->
uio_off£t
 >
size
) {

469 i‡(
ídpos
 > 
size
) {

470 
exå¨esid
 = 
ídpos
 - 
size
;

471 
	`KASSERT
(
uio
->
uio_ªsid
 > 
exå¨esid
);

472 
uio
->
uio_ªsid
 -
exå¨esid
;

479 
blkoff
 = 
uio
->
uio_off£t
 % 
SFS_BLOCKSIZE
;

480 i‡(
blkoff
 != 0) {

482 
uöt32_t
 
skù
 = 
blkoff
;

485 
uöt32_t
 
Àn
 = 
SFS_BLOCKSIZE
 - 
blkoff
;

488 i‡(
Àn
 > 
uio
->
uio_ªsid
) {

489 
Àn
 = 
uio
->
uio_ªsid
;

493 
ªsu…
 = 
	`sfs_∑πülio
(
sv
, 
uio
, 
skù
, 
Àn
);

494 i‡(
ªsu…
) {

495 
out
;

500 i‡(
uio
->
uio_ªsid
==0) {

501 
out
;

507 
	`KASSERT
(
uio
->
uio_off£t
 % 
SFS_BLOCKSIZE
 == 0);

508 
nblocks
 = 
uio
->
uio_ªsid
 / 
SFS_BLOCKSIZE
;

509 
i
=0; i<
nblocks
; i++) {

510 
ªsu…
 = 
	`sfs_blockio
(
sv
, 
uio
);

511 i‡(
ªsu…
) {

512 
out
;

519 
	`KASSERT
(
uio
->
uio_ªsid
 < 
SFS_BLOCKSIZE
);

521 i‡(
uio
->
uio_ªsid
 > 0) {

522 
ªsu…
 = 
	`sfs_∑πülio
(
sv
, 
uio
, 0, uio->
uio_ªsid
);

523 i‡(
ªsu…
) {

524 
out
;

528 
out
:

531 i‡(
uio
->
uio_rw
 =
UIO_WRITE
 &&

532 
uio
->
uio_off£t
 > (
off_t
)
sv
->
sv_i
.
sfi_size
) {

533 
sv
->
sv_i
.
sfi_size
 = 
uio
->
uio_off£t
;

534 
sv
->
sv_dúty
 = 
åue
;

538 
uio
->
uio_ªsid
 +
exå¨esid
;

541  
ªsu…
;

542 
	}
}

554 
	$sfs_ªaddú
(
sfs_vnode
 *
sv
, 
sfs_dú
 *
sd
, 
¶Ÿ
)

556 
iovec
 
iov
;

557 
uio
 
ku
;

558 
off_t
 
a˘uÆpos
;

559 
ªsu…
;

562 
a˘uÆpos
 = 
¶Ÿ
 * (
sfs_dú
);

565 
	`uio_köô
(&
iov
, &
ku
, 
sd
, (
sfs_dú
), 
a˘uÆpos
, 
UIO_READ
);

568 
ªsu…
 = 
	`sfs_io
(
sv
, &
ku
);

569 i‡(
ªsu…
) {

570  
ªsu…
;

574 i‡(
ku
.
uio_ªsid
 > 0) {

575 
	`∑nic
("sfs:Ñóddú: Sh‹àíåy (öodê%u)\n", 
sv
->
sv_öo
);

580 
	}
}

588 
	$sfs_wrôedú
(
sfs_vnode
 *
sv
, 
sfs_dú
 *
sd
, 
¶Ÿ
)

590 
iovec
 
iov
;

591 
uio
 
ku
;

592 
off_t
 
a˘uÆpos
;

593 
ªsu…
;

596 
	`KASSERT
(
¶Ÿ
>=0);

597 
a˘uÆpos
 = 
¶Ÿ
 * (
sfs_dú
);

600 
	`uio_köô
(&
iov
, &
ku
, 
sd
, (
sfs_dú
), 
a˘uÆpos
, 
UIO_WRITE
);

603 
ªsu…
 = 
	`sfs_io
(
sv
, &
ku
);

604 i‡(
ªsu…
) {

605  
ªsu…
;

609 i‡(
ku
.
uio_ªsid
 > 0) {

610 
	`∑nic
("sfs: wrôedú: Sh‹àwrôê(öÿ%u)\n", 
sv
->
sv_öo
);

615 
	}
}

624 
	$sfs_dú_√¡rõs
(
sfs_vnode
 *
sv
)

626 
off_t
 
size
;

628 
	`KASSERT
(
sv
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_DIR
);

630 
size
 = 
sv
->
sv_i
.
sfi_size
;

631 i‡(
size
 % (
sfs_dú
) != 0) {

632 
	`∑nic
("sfs: directory %u: Invalid size %llu\n",

633 
sv
->
sv_öo
, 
size
);

636  
size
 / (
sfs_dú
);

637 
	}
}

647 
	$sfs_dú_föd«me
(
sfs_vnode
 *
sv
, c⁄° *
«me
,

648 
uöt32_t
 *
öo
, *
¶Ÿ
, *
em±y¶Ÿ
)

650 
sfs_dú
 
tsd
;

651 
found
 = 0;

652 
√¡rõs
 = 
	`sfs_dú_√¡rõs
(
sv
);

653 
i
, 
ªsu…
;

656 
i
=0; i<
√¡rõs
; i++) {

659 
ªsu…
 = 
	`sfs_ªaddú
(
sv
, &
tsd
, 
i
);

660 i‡(
ªsu…
) {

661  
ªsu…
;

663 i‡(
tsd
.
sfd_öo
 =
SFS_NOINO
) {

665 i‡(
em±y¶Ÿ
 !
NULL
) {

666 *
em±y¶Ÿ
 = 
i
;

671 
tsd
.
sfd_«me
[(tsd.sfd_name)-1] = 0;

672 i‡(!
	`°rcmp
(
tsd
.
sfd_«me
, 
«me
)) {

675 
	`KASSERT
(
found
==0);

677 
found
 = 1;

678 i‡(
¶Ÿ
 !
NULL
) {

679 *
¶Ÿ
 = 
i
;

681 i‡(
öo
 !
NULL
) {

682 *
öo
 = 
tsd
.
sfd_öo
;

688  
found
 ? 0 : 
ENOENT
;

689 
	}
}

697 
	$sfs_dú_lök
(
sfs_vnode
 *
sv
, c⁄° *
«me
, 
uöt32_t
 
öo
, *
¶Ÿ
)

699 
em±y¶Ÿ
 = -1;

700 
ªsu…
;

701 
sfs_dú
 
sd
;

704 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, 
NULL
, NULL, &
em±y¶Ÿ
);

705 i‡(
ªsu…
!=0 &&Ñesu…!=
ENOENT
) {

706  
ªsu…
;

708 i‡(
ªsu…
==0) {

709  
EEXIST
;

712 i‡(
	`°æí
(
«me
)+1 > (
sd
.
sfd_«me
)) {

713  
ENAMETOOLONG
;

717 i‡(
em±y¶Ÿ
 < 0) {

718 
em±y¶Ÿ
 = 
	`sfs_dú_√¡rõs
(
sv
);

722 
	`bzîo
(&
sd
, (sd));

723 
sd
.
sfd_öo
 = 
öo
;

724 
	`°r˝y
(
sd
.
sfd_«me
, 
«me
);

727 i‡(
¶Ÿ
) {

728 *
¶Ÿ
 = 
em±y¶Ÿ
;

732  
	`sfs_wrôedú
(
sv
, &
sd
, 
em±y¶Ÿ
);

734 
	}
}

741 
	$sfs_dú_u∆ök
(
sfs_vnode
 *
sv
, 
¶Ÿ
)

743 
sfs_dú
 
sd
;

746 
	`bzîo
(&
sd
, (sd));

747 
sd
.
sfd_öo
 = 
SFS_NOINO
;

750  
	`sfs_wrôedú
(
sv
, &
sd
, 
¶Ÿ
);

751 
	}
}

759 
	$sfs_look⁄˚
(
sfs_vnode
 *
sv
, c⁄° *
«me
,

760 
sfs_vnode
 **
ªt
,

761 *
¶Ÿ
)

763 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

764 
uöt32_t
 
öo
;

765 
ªsu…
;

767 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, &
öo
, 
¶Ÿ
, 
NULL
);

768 i‡(
ªsu…
) {

769  
ªsu…
;

772 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
SFS_TYPE_INVAL
, 
ªt
);

773 i‡(
ªsu…
) {

774  
ªsu…
;

777 i‡((*
ªt
)->
sv_i
.
sfi_lökcou¡
 == 0) {

778 
	`∑nic
("sfs: Link count of file %u found in dir %u is 0\n",

779 (*
ªt
)->
sv_öo
, 
sv
->sv_ino);

783 
	}
}

794 
	$sfs_makeobj
(
sfs_fs
 *
sfs
, 
ty≥
, 
sfs_vnode
 **
ªt
)

796 
uöt32_t
 
öo
;

797 
ªsu…
;

804 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
öo
);

805 i‡(
ªsu…
) {

806  
ªsu…
;

813  
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
ty≥
, 
ªt
);

814 
	}
}

825 
	$sfs_›í
(
vnode
 *
v
, 
›íÊags
)

835 i‡(
›íÊags
 & 
O_APPEND
) {

836  
EUNIMP
;

839 ()
v
;

842 
	}
}

850 
	$sfs_›ídú
(
vnode
 *
v
, 
›íÊags
)

852 
›íÊags
 & 
O_ACCMODE
) {

853 
O_RDONLY
:

855 
O_WRONLY
:

856 
O_RDWR
:

858  
EISDIR
;

860 i‡(
›íÊags
 & 
O_APPEND
) {

861  
EISDIR
;

864 ()
v
;

866 
	}
}

876 
	$sfs_˛o£
(
vnode
 *
v
)

879  
	`VOP_FSYNC
(
v
);

880 
	}
}

889 
	$sfs_ª˛aim
(
vnode
 *
v
)

891 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

892 
sfs_fs
 *
sfs
 = 
v
->
vn_fs
->
fs_d©a
;

893 
ix
, 
i
, 
num
;

894 
ªsu…
;

896 
	`vfs_biglock_acquúe
();

903 i‡(
v
->
vn_ªfcou¡
 != 1) {

906 
	`KASSERT
(
v
->
vn_ªfcou¡
>1);

907 
v
->
vn_ªfcou¡
--;

909 
	`vfs_biglock_ªÀa£
();

910  
EBUSY
;

914 i‡(
sv
->
sv_i
.
sfi_lökcou¡
==0) {

915 
ªsu…
 = 
	`VOP_TRUNCATE
(&
sv
->
sv_v
, 0);

916 i‡(
ªsu…
) {

917 
	`vfs_biglock_ªÀa£
();

918  
ªsu…
;

923 
ªsu…
 = 
	`sfs_sync_öode
(
sv
);

924 i‡(
ªsu…
) {

925 
	`vfs_biglock_ªÀa£
();

926  
ªsu…
;

930 i‡(
sv
->
sv_i
.
sfi_lökcou¡
==0) {

931 
	`sfs_b‰ì
(
sfs
, 
sv
->
sv_öo
);

935 
num
 = 
	`vnodóºay_num
(
sfs
->
sfs_vnodes
);

936 
ix
 = 
num
;

937 
i
=0; i<
num
; i++) {

938 
vnode
 *
v2
 = 
	`vnodóºay_gë
(
sfs
->
sfs_vnodes
, 
i
);

939 
sfs_vnode
 *
sv2
 = 
v2
->
vn_d©a
;

940 i‡(
sv2
 =
sv
) {

941 
ix
 = 
i
;

945 i‡(
ix
 =
num
) {

946 
	`∑nic
("sfs:Ñeclaim vnode %uÇot in vnodeÖool\n",

947 
sv
->
sv_öo
);

949 
	`vnodóºay_ªmove
(
sfs
->
sfs_vnodes
, 
ix
);

951 
	`VOP_CLEANUP
(&
sv
->
sv_v
);

953 
	`vfs_biglock_ªÀa£
();

956 
	`k‰ì
(
sv
);

960 
	}
}

967 
	$sfs_ªad
(
vnode
 *
v
, 
uio
 *uio)

969 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

970 
ªsu…
;

972 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

974 
	`vfs_biglock_acquúe
();

975 
ªsu…
 = 
	`sfs_io
(
sv
, 
uio
);

976 
	`vfs_biglock_ªÀa£
();

978  
ªsu…
;

979 
	}
}

986 
	$sfs_wrôe
(
vnode
 *
v
, 
uio
 *uio)

988 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

989 
ªsu…
;

991 
	`KASSERT
(
uio
->
uio_rw
==
UIO_WRITE
);

993 
	`vfs_biglock_acquúe
();

994 
ªsu…
 = 
	`sfs_io
(
sv
, 
uio
);

995 
	`vfs_biglock_ªÀa£
();

997  
ªsu…
;

998 
	}
}

1005 
	$sfs_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

1011 ()
v
;

1012 ()
›
;

1013 ()
d©a
;

1015  
EINVAL
;

1016 
	}
}

1023 
	$sfs_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

1025 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1026 
ªsu…
;

1029 
	`bzîo
(
°©buf
, (
°©
));

1031 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

1032 i‡(
ªsu…
) {

1033  
ªsu…
;

1036 
°©buf
->
°_size
 = 
sv
->
sv_i
.
sfi_size
;

1039 
°©buf
->
°_∆ök
 = 0;

1040 
°©buf
->
°_blocks
 = 0;

1045 
	}
}

1052 
	$sfs_gëty≥
(
vnode
 *
v
, 
uöt32_t
 *
ªt
)

1054 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1056 
	`vfs_biglock_acquúe
();

1058 
sv
->
sv_i
.
sfi_ty≥
) {

1059 
SFS_TYPE_FILE
:

1060 *
ªt
 = 
S_IFREG
;

1061 
	`vfs_biglock_ªÀa£
();

1063 
SFS_TYPE_DIR
:

1064 *
ªt
 = 
S_IFDIR
;

1065 
	`vfs_biglock_ªÀa£
();

1068 
	`∑nic
("sfs: gettype: Invalid inodeÅype (inode %u,Åype %u)\n",

1069 
sv
->
sv_öo
, sv->
sv_i
.
sfi_ty≥
);

1070  
EINVAL
;

1071 
	}
}

1082 
	$sfs_åy£ek
(
vnode
 *
v
, 
off_t
 
pos
)

1084 i‡(
pos
<0) {

1085  
EINVAL
;

1089 ()
v
;

1092 
	}
}

1100 
	$sfs_fsync
(
vnode
 *
v
)

1102 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1103 
ªsu…
;

1105 
	`vfs_biglock_acquúe
();

1106 
ªsu…
 = 
	`sfs_sync_öode
(
sv
);

1107 
	`vfs_biglock_ªÀa£
();

1109  
ªsu…
;

1110 
	}
}

1117 
	$sfs_mm≠
(
vnode
 *
v
 )

1119 ()
v
;

1120  
EUNIMP
;

1121 
	}
}

1128 
	$sfs_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

1137 
uöt32_t
 
idbuf
[
SFS_DBPERIDB
];

1139 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1140 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

1143 
uöt32_t
 
blockÀn
 = 
	`DIVROUNDUP
(
Àn
, 
SFS_BLOCKSIZE
);

1145 
uöt32_t
 
i
, 
j
, 
block
;

1146 
uöt32_t
 
idblock
, 
ba£block
, 
highblock
;

1147 
ªsu…
;

1148 
ha¢⁄zîo
, 
iddúty
;

1150 
	`KASSERT
((
idbuf
)==
SFS_BLOCKSIZE
);

1152 
	`vfs_biglock_acquúe
();

1158 
i
=0; i<
SFS_NDIRECT
; i++) {

1159 
block
 = 
sv
->
sv_i
.
sfi_dúe˘
[
i
];

1160 i‡(
i
 >
blockÀn
 && 
block
 != 0) {

1161 
	`sfs_b‰ì
(
sfs
, 
block
);

1162 
sv
->
sv_i
.
sfi_dúe˘
[
i
] = 0;

1163 
sv
->
sv_dúty
 = 
åue
;

1168 
idblock
 = 
sv
->
sv_i
.
sfi_ödúe˘
;

1171 
ba£block
 = 
SFS_NDIRECT
;

1174 
highblock
 = 
ba£block
 + 
SFS_DBPERIDB
 - 1;

1176 i‡(
blockÀn
 < 
highblock
 && 
idblock
 != 0) {

1180 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
idbuf
, 
idblock
);

1181 i‡(
ªsu…
) {

1182 
	`vfs_biglock_ªÀa£
();

1183  
ªsu…
;

1186 
ha¢⁄zîo
 = 0;

1187 
iddúty
 = 0;

1188 
j
=0; j<
SFS_DBPERIDB
; j++) {

1190 i‡(
blockÀn
 < 
ba£block
+
j
 && 
idbuf
[j] != 0) {

1191 
	`sfs_b‰ì
(
sfs
, 
idbuf
[
j
]);

1192 
idbuf
[
j
] = 0;

1193 
iddúty
 = 1;

1196 i‡(
idbuf
[
j
]!=0) {

1197 
ha¢⁄zîo
=1;

1201 i‡(!
ha¢⁄zîo
) {

1203 
	`sfs_b‰ì
(
sfs
, 
idblock
);

1204 
sv
->
sv_i
.
sfi_ödúe˘
 = 0;

1205 
sv
->
sv_dúty
 = 
åue
;

1207 i‡(
iddúty
) {

1209 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
idbuf
, 
idblock
);

1210 i‡(
ªsu…
) {

1211 
	`vfs_biglock_ªÀa£
();

1212  
ªsu…
;

1218 
sv
->
sv_i
.
sfi_size
 = 
Àn
;

1221 
sv
->
sv_dúty
 = 
åue
;

1223 
	`vfs_biglock_ªÀa£
();

1225 
	}
}

1235 
	$sfs_«mefûe
(
vnode
 *
vv
, 
uio
 *uio)

1237 
sfs_vnode
 *
sv
 = 
vv
->
vn_d©a
;

1238 
	`KASSERT
(
sv
->
sv_öo
 =
SFS_ROOT_LOCATION
);

1242 ()
uio
;

1245 
	}
}

1253 
	$sfs_¸ót
(
vnode
 *
v
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

1254 
vnode
 **
ªt
)

1256 
sfs_fs
 *
sfs
 = 
v
->
vn_fs
->
fs_d©a
;

1257 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1258 
sfs_vnode
 *
√wguy
;

1259 
uöt32_t
 
öo
;

1260 
ªsu…
;

1262 
	`vfs_biglock_acquúe
();

1265 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, &
öo
, 
NULL
, NULL);

1266 i‡(
ªsu…
!=0 &&Ñesu…!=
ENOENT
) {

1267 
	`vfs_biglock_ªÀa£
();

1268  
ªsu…
;

1272 i‡(
ªsu…
==0 && 
ex˛
) {

1273 
	`vfs_biglock_ªÀa£
();

1274  
EEXIST
;

1277 i‡(
ªsu…
==0) {

1279 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
SFS_TYPE_INVAL
, &
√wguy
);

1280 i‡(
ªsu…
) {

1281 
	`vfs_biglock_ªÀa£
();

1282  
ªsu…
;

1284 *
ªt
 = &
√wguy
->
sv_v
;

1285 
	`vfs_biglock_ªÀa£
();

1290 
ªsu…
 = 
	`sfs_makeobj
(
sfs
, 
SFS_TYPE_FILE
, &
√wguy
);

1291 i‡(
ªsu…
) {

1292 
	`vfs_biglock_ªÀa£
();

1293  
ªsu…
;

1297 ()
mode
;

1300 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
«me
, 
√wguy
->
sv_öo
, 
NULL
);

1301 i‡(
ªsu…
) {

1302 
	`VOP_DECREF
(&
√wguy
->
sv_v
);

1303 
	`vfs_biglock_ªÀa£
();

1304  
ªsu…
;

1308 
√wguy
->
sv_i
.
sfi_lökcou¡
++;

1311 
√wguy
->
sv_dúty
 = 
åue
;

1313 *
ªt
 = &
√wguy
->
sv_v
;

1315 
	`vfs_biglock_ªÀa£
();

1317 
	}
}

1326 
	$sfs_lök
(
vnode
 *
dú
, c⁄° *
«me
, vnodê*
fûe
)

1328 
sfs_vnode
 *
sv
 = 
dú
->
vn_d©a
;

1329 
sfs_vnode
 *
f
 = 
fûe
->
vn_d©a
;

1330 
ªsu…
;

1332 
	`KASSERT
(
fûe
->
vn_fs
 =
dú
->vn_fs);

1334 
	`vfs_biglock_acquúe
();

1337 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
«me
, 
f
->
sv_öo
, 
NULL
);

1338 i‡(
ªsu…
) {

1339 
	`vfs_biglock_ªÀa£
();

1340  
ªsu…
;

1344 
f
->
sv_i
.
sfi_lökcou¡
++;

1345 
f
->
sv_dúty
 = 
åue
;

1347 
	`vfs_biglock_ªÀa£
();

1349 
	}
}

1356 
	$sfs_ªmove
(
vnode
 *
dú
, c⁄° *
«me
)

1358 
sfs_vnode
 *
sv
 = 
dú
->
vn_d©a
;

1359 
sfs_vnode
 *
vi˘im
;

1360 
¶Ÿ
;

1361 
ªsu…
;

1363 
	`vfs_biglock_acquúe
();

1366 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
«me
, &
vi˘im
, &
¶Ÿ
);

1367 i‡(
ªsu…
) {

1368 
	`vfs_biglock_ªÀa£
();

1369  
ªsu…
;

1373 
ªsu…
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ
);

1374 i‡(
ªsu…
==0) {

1376 
	`KASSERT
(
vi˘im
->
sv_i
.
sfi_lökcou¡
 > 0);

1377 
vi˘im
->
sv_i
.
sfi_lökcou¡
--;

1378 
vi˘im
->
sv_dúty
 = 
åue
;

1382 
	`VOP_DECREF
(&
vi˘im
->
sv_v
);

1384 
	`vfs_biglock_ªÀa£
();

1385  
ªsu…
;

1386 
	}
}

1396 
	$sfs_ª«me
(
vnode
 *
d1
, c⁄° *
n1
,

1397 
vnode
 *
d2
, c⁄° *
n2
)

1399 
sfs_vnode
 *
sv
 = 
d1
->
vn_d©a
;

1400 
sfs_vnode
 *
g1
;

1401 
¶Ÿ1
, 
¶Ÿ2
;

1402 
ªsu…
, 
ªsu…2
;

1404 
	`vfs_biglock_acquúe
();

1406 
	`KASSERT
(
d1
==
d2
);

1407 
	`KASSERT
(
sv
->
sv_öo
 =
SFS_ROOT_LOCATION
);

1410 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
n1
, &
g1
, &
¶Ÿ1
);

1411 i‡(
ªsu…
) {

1412 
	`vfs_biglock_ªÀa£
();

1413  
ªsu…
;

1417 
	`KASSERT
(
g1
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_FILE
);

1427 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
n2
, 
g1
->
sv_öo
, &
¶Ÿ2
);

1428 i‡(
ªsu…
) {

1429 
puke
;

1433 
g1
->
sv_i
.
sfi_lökcou¡
++;

1434 
g1
->
sv_dúty
 = 
åue
;

1437 
ªsu…
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ1
);

1438 i‡(
ªsu…
) {

1439 
puke_h¨dî
;

1446 
	`KASSERT
(
g1
->
sv_i
.
sfi_lökcou¡
>0);

1447 
g1
->
sv_i
.
sfi_lökcou¡
--;

1448 
g1
->
sv_dúty
 = 
åue
;

1451 
	`VOP_DECREF
(&
g1
->
sv_v
);

1453 
	`vfs_biglock_ªÀa£
();

1456 
puke_h¨dî
:

1460 
ªsu…2
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ2
);

1461 i‡(
ªsu…2
) {

1462 
	`k¥ötf
("sfs:Ñíame: %s\n", 
	`°ªº‹
(
ªsu…
));

1463 
	`k¥ötf
("sfs:Ñename: while cleaning up: %s\n",

1464 
	`°ªº‹
(
ªsu…2
));

1465 
	`∑nic
("sfs:Ñename: CannotÑecover\n");

1467 
g1
->
sv_i
.
sfi_lökcou¡
--;

1468 
puke
:

1470 
	`VOP_DECREF
(&
g1
->
sv_v
);

1471 
	`vfs_biglock_ªÀa£
();

1472  
ªsu…
;

1473 
	}
}

1484 
	$sfs_look∑ª¡
(
vnode
 *
v
, *
∑th
, vnodê**
ªt
,

1485 *
buf
, 
size_t
 
buÊí
)

1487 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1489 
	`vfs_biglock_acquúe
();

1491 i‡(
sv
->
sv_i
.
sfi_ty≥
 !
SFS_TYPE_DIR
) {

1492 
	`vfs_biglock_ªÀa£
();

1493  
ENOTDIR
;

1496 i‡(
	`°æí
(
∑th
)+1 > 
buÊí
) {

1497 
	`vfs_biglock_ªÀa£
();

1498  
ENAMETOOLONG
;

1500 
	`°r˝y
(
buf
, 
∑th
);

1502 
	`VOP_INCREF
(&
sv
->
sv_v
);

1503 *
ªt
 = &
sv
->
sv_v
;

1505 
	`vfs_biglock_ªÀa£
();

1507 
	}
}

1517 
	$sfs_lookup
(
vnode
 *
v
, *
∑th
, vnodê**
ªt
)

1519 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1520 
sfs_vnode
 *
föÆ
;

1521 
ªsu…
;

1523 
	`vfs_biglock_acquúe
();

1525 i‡(
sv
->
sv_i
.
sfi_ty≥
 !
SFS_TYPE_DIR
) {

1526 
	`vfs_biglock_ªÀa£
();

1527  
ENOTDIR
;

1530 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
∑th
, &
föÆ
, 
NULL
);

1531 i‡(
ªsu…
) {

1532 
	`vfs_biglock_ªÀa£
();

1533  
ªsu…
;

1536 *
ªt
 = &
föÆ
->
sv_v
;

1538 
	`vfs_biglock_ªÀa£
();

1540 
	}
}

1546 
	$sfs_nŸdú
()

1548  
ENOTDIR
;

1549 
	}
}

1553 
	$sfs_isdú
()

1555  
EISDIR
;

1556 
	}
}

1560 
	$sfs_unimp
()

1562  
EUNIMP
;

1563 
	}
}

1571 
	#ISDIR
 ((*)
sfs_isdú
)

	)

1572 
	#NOTDIR
 ((*)
sfs_nŸdú
)

	)

1573 
	#UNIMP
 ((*)
sfs_unimp
)

	)

1578 c⁄° 
vnode_›s
 
	gsfs_fûe›s
 = {

1579 
VOP_MAGIC
,

1581 
sfs_›í
,

1582 
sfs_˛o£
,

1583 
sfs_ª˛aim
,

1585 
sfs_ªad
,

1586 
NOTDIR
,

1587 
NOTDIR
,

1588 
sfs_wrôe
,

1589 
sfs_io˘l
,

1590 
sfs_°©
,

1591 
sfs_gëty≥
,

1592 
sfs_åy£ek
,

1593 
sfs_fsync
,

1594 
sfs_mm≠
,

1595 
sfs_åunˇã
,

1596 
NOTDIR
,

1598 
NOTDIR
,

1599 
NOTDIR
,

1600 
NOTDIR
,

1601 
NOTDIR
,

1602 
NOTDIR
,

1603 
NOTDIR
,

1604 
NOTDIR
,

1606 
NOTDIR
,

1607 
NOTDIR
,

1613 c⁄° 
vnode_›s
 
	gsfs_dú›s
 = {

1614 
VOP_MAGIC
,

1616 
sfs_›ídú
,

1617 
sfs_˛o£
,

1618 
sfs_ª˛aim
,

1620 
ISDIR
,

1621 
ISDIR
,

1622 
UNIMP
,

1623 
ISDIR
,

1624 
sfs_io˘l
,

1625 
sfs_°©
,

1626 
sfs_gëty≥
,

1627 
UNIMP
,

1628 
sfs_fsync
,

1629 
ISDIR
,

1630 
ISDIR
,

1631 
sfs_«mefûe
,

1633 
sfs_¸ót
,

1634 
UNIMP
,

1635 
UNIMP
,

1636 
sfs_lök
,

1637 
sfs_ªmove
,

1638 
UNIMP
,

1639 
sfs_ª«me
,

1641 
sfs_lookup
,

1642 
sfs_look∑ª¡
,

1651 
	$sfs_lﬂdvnode
(
sfs_fs
 *
sfs
, 
uöt32_t
 
öo
, 
f‹˚ty≥
,

1652 
sfs_vnode
 **
ªt
)

1654 
vnode
 *
v
;

1655 
sfs_vnode
 *
sv
;

1656 c⁄° 
vnode_›s
 *
›s
 = 
NULL
;

1657 
i
, 
num
;

1658 
ªsu…
;

1661 
num
 = 
	`vnodóºay_num
(
sfs
->
sfs_vnodes
);

1664 
i
=0; i<
num
; i++) {

1665 
v
 = 
	`vnodóºay_gë
(
sfs
->
sfs_vnodes
, 
i
);

1666 
sv
 = 
v
->
vn_d©a
;

1669 i‡(!
	`sfs_bu£d
(
sfs
, 
sv
->
sv_öo
)) {

1670 
	`∑nic
("sfs: Found inode %u in unallocated block\n",

1671 
sv
->
sv_öo
);

1674 i‡(
sv
->
sv_öo
==
öo
) {

1678 
	`KASSERT
(
f‹˚ty≥
==
SFS_TYPE_INVAL
);

1680 
	`VOP_INCREF
(&
sv
->
sv_v
);

1681 *
ªt
 = 
sv
;

1688 
sv
 = 
	`kmÆloc
((
sfs_vnode
));

1689 i‡(
sv
==
NULL
) {

1690  
ENOMEM
;

1694 i‡(!
	`sfs_bu£d
(
sfs
, 
öo
)) {

1695 
	`∑nic
("sfs: TriedÅoÜoad inode %u from unallocated block\n",

1696 
öo
);

1700 
ªsu…
 = 
	`sfs_rblock
(
sfs
, &
sv
->
sv_i
, 
öo
);

1701 i‡(
ªsu…
) {

1702 
	`k‰ì
(
sv
);

1703  
ªsu…
;

1707 
sv
->
sv_dúty
 = 
Ál£
;

1714 i‡(
f‹˚ty≥
 !
SFS_TYPE_INVAL
) {

1715 
	`KASSERT
(
sv
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_INVAL
);

1716 
sv
->
sv_i
.
sfi_ty≥
 = 
f‹˚ty≥
;

1717 
sv
->
sv_dúty
 = 
åue
;

1723 
sv
->
sv_i
.
sfi_ty≥
) {

1724 
SFS_TYPE_FILE
:

1725 
›s
 = &
sfs_fûe›s
;

1727 
SFS_TYPE_DIR
:

1728 
›s
 = &
sfs_dú›s
;

1731 
	`∑nic
("sfs:Üoadvnode: Invalid inodeÅype "

1733 
öo
, 
sv
->
sv_i
.
sfi_ty≥
);

1737 
ªsu…
 = 
	`VOP_INIT
(&
sv
->
sv_v
, 
›s
, &
sfs
->
sfs_absfs
, sv);

1738 i‡(
ªsu…
) {

1739 
	`k‰ì
(
sv
);

1740  
ªsu…
;

1744 
sv
->
sv_öo
 = 
öo
;

1747 
ªsu…
 = 
	`vnodóºay_add
(
sfs
->
sfs_vnodes
, &
sv
->
sv_v
, 
NULL
);

1748 i‡(
ªsu…
) {

1749 
	`VOP_CLEANUP
(&
sv
->
sv_v
);

1750 
	`k‰ì
(
sv
);

1751  
ªsu…
;

1755 *
ªt
 = 
sv
;

1757 
	}
}

1763 
vnode
 *

1764 
	$sfs_gëroŸ
(
fs
 *fs)

1766 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

1767 
sfs_vnode
 *
sv
;

1768 
ªsu…
;

1770 
	`vfs_biglock_acquúe
();

1772 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
SFS_ROOT_LOCATION
, 
SFS_TYPE_INVAL
, &
sv
);

1773 i‡(
ªsu…
) {

1774 
	`∑nic
("sfs: getroot: CannotÜoadÑoot vnode\n");

1777 
	`vfs_biglock_ªÀa£
();

1779  &
sv
->
sv_v
;

1780 
	}
}

	@test/os161/kern/include/addrspace.h

30 #i‚de‡
_ADDRSPACE_H_


31 
	#_ADDRSPACE_H_


	)

38 
	~<vm.h
>

40 
	gvnode
;

50 
	saddr•a˚
 {

51 
vaddr_t
 
	mas_vba£1
;

52 
∑ddr_t
 
	mas_pba£1
;

53 
size_t
 
	mas_≈ages1
;

54 
vaddr_t
 
	mas_vba£2
;

55 
∑ddr_t
 
	mas_pba£2
;

56 
size_t
 
	mas_≈ages2
;

57 
∑ddr_t
 
	mas_°ackpba£
;

96 
addr•a˚
 *
as_¸óã
();

97 
as_c›y
(
addr•a˚
 *
§c
, addr•a˚ **
ªt
);

98 
as_a˘iv©e
();

99 
as_dó˘iv©e
();

100 
as_de°roy
(
addr•a˚
 *);

102 
as_deföe_ªgi⁄
(
addr•a˚
 *
as
,

103 
vaddr_t
 
vaddr
, 
size_t
 
sz
,

104 
ªadabÀ
,

105 
wrôóbÀ
,

106 
execuèbÀ
);

107 
as_¥ï¨e_lﬂd
(
addr•a˚
 *
as
);

108 
as_com∂ëe_lﬂd
(
addr•a˚
 *
as
);

109 
as_deföe_°ack
(
addr•a˚
 *
as
, 
vaddr_t
 *
öô°ack±r
);

119 
lﬂd_ñf
(
vnode
 *
v
, 
vaddr_t
 *
íåypoöt
);

	@test/os161/kern/include/array.h

30 #i‚de‡
_ARRAY_H_


31 
	#_ARRAY_H_


	)

33 #ifde‡
UW


34 
	~<lib.h
>

37 
	#ARRAYS_CHECKED


	)

39 #ifde‡
ARRAYS_CHECKED


40 
	#ARRAYASSERT
 
KASSERT


	)

42 
	#ARRAYASSERT
(
x
Ë(()(x))

	)

65 
	s¨øy
 {

66 **
	mv
;

67 
	mnum
, 
	mmax
;

70 
¨øy
 *
¨øy_¸óã
();

71 
¨øy_de°roy
(
¨øy
 *);

72 
¨øy_öô
(
¨øy
 *);

73 
¨øy_˛ónup
(
¨øy
 *);

74 
¨øy_num
(c⁄° 
¨øy
 *);

75 *
¨øy_gë
(c⁄° 
¨øy
 *, 
ödex
);

76 
¨øy_£t
(c⁄° 
¨øy
 *, 
ödex
, *
vÆ
);

77 
¨øy_£tsize
(
¨øy
 *, 
num
);

78 
¨øy_add
(
¨øy
 *, *
vÆ
, *
ödex_ªt
);

79 
¨øy_ªmove
(
¨øy
 *, 
ödex
);

85 #i‚de‡
ARRAYINLINE


86 
	#ARRAYINLINE
 
INLINE


	)

89 
ARRAYINLINE
 

90 
	$¨øy_num
(c⁄° 
¨øy
 *
a
)

92  
a
->
num
;

93 
	}
}

95 
ARRAYINLINE
 *

96 
	$¨øy_gë
(c⁄° 
¨øy
 *
a
, 
ödex
)

98 
	`ARRAYASSERT
(
ödex
 < 
a
->
num
);

99  
a
->
v
[
ödex
];

100 
	}
}

102 
ARRAYINLINE
 

103 
	$¨øy_£t
(c⁄° 
¨øy
 *
a
, 
ödex
, *
vÆ
)

105 
	`ARRAYASSERT
(
ödex
 < 
a
->
num
);

106 
a
->
v
[
ödex
] = 
vÆ
;

107 
	}
}

109 
ARRAYINLINE
 

110 
	$¨øy_add
(
¨øy
 *
a
, *
vÆ
, *
ödex_ªt
)

112 
ödex
;

113 
ªt
;

115 
ödex
 = 
a
->
num
;

116 
ªt
 = 
	`¨øy_£tsize
(
a
, 
ödex
+1);

117 i‡(
ªt
) {

118  
ªt
;

120 
a
->
v
[
ödex
] = 
vÆ
;

121 i‡(
ödex_ªt
 !
NULL
) {

122 *
ödex_ªt
 = 
ödex
;

125 
	}
}

166 
	#DECLARRAY_BYTYPE
(
ARRAY
, 
T
) \

167 
	sARRAY
 { \

168 
¨øy
 
¨r
; \

171 
ARRAY
 *ARRAY##
	`_¸óã
(); \

172 
ARRAY
##
	`_de°roy
(ARRAY *
a
); \

173 
ARRAY
##
	`_öô
(ARRAY *
a
); \

174 
ARRAY
##
	`_˛ónup
(ARRAY *
a
); \

175 
ARRAY
##
	`_num
(c⁄° ARRAY *
a
); \

176 
T
 *
ARRAY
##
	`_gë
(c⁄° ARRAY *
a
, 
ödex
); \

177 
ARRAY
##
	`_£t
(ARRAY *
a
, 
ödex
, 
T
 *
vÆ
); \

178 
ARRAY
##
	`_£tsize
(ARRAY *
a
, 
num
); \

179 
ARRAY
##
	`_add
(ARRAY *
a
, 
T
 *
vÆ
, *
ödex_ªt
); \

180 
ARRAY
##
	`_ªmove
(ARRAY *
a
, 
ödex
)

	)

182 
	#DEFARRAY_BYTYPE
(
ARRAY
, 
T
, 
INLINE
) \

183 
INLINE
 
ARRAY
 * \

184 
ARRAY
##
	`_¸óã
() \

186 
ARRAY
 *
a
 = 
	`kmÆloc
((*a)); \

187 i‡(
a
 =
NULL
) { \

188  
NULL
; \

190 
	`¨øy_öô
(&
a
->
¨r
); \

191  
a
; \

194 
INLINE
 \

195 
ARRAY
##
	`_de°roy
(ARRAY *
a
) \

197 
	`¨øy_˛ónup
(&
a
->
¨r
); \

198 
	`k‰ì
(
a
); \

201 
INLINE
 \

202 
ARRAY
##
	`_öô
(ARRAY *
a
) \

204 
	`¨øy_öô
(&
a
->
¨r
); \

207 
INLINE
 \

208 
ARRAY
##
	`_˛ónup
(ARRAY *
a
) \

210 
	`¨øy_˛ónup
(&
a
->
¨r
); \

213 
INLINE
 \

214 
ARRAY
##
	`_num
(c⁄° ARRAY *
a
) \

216  
	`¨øy_num
(&
a
->
¨r
); \

219 
INLINE
 
T
 * \

220 
ARRAY
##
	`_gë
(c⁄° ARRAY *
a
, 
ödex
) \

222  (
T
 *)
	`¨øy_gë
(&
a
->
¨r
, 
ödex
); \

225 
INLINE
 \

226 
ARRAY
##
	`_£t
(ARRAY *
a
, 
ödex
, 
T
 *
vÆ
) \

228 
	`¨øy_£t
(&
a
->
¨r
, 
ödex
, (*)
vÆ
); \

231 
INLINE
 \

232 
ARRAY
##
	`_£tsize
(ARRAY *
a
, 
num
) \

234  
	`¨øy_£tsize
(&
a
->
¨r
, 
num
); \

237 
INLINE
 \

238 
ARRAY
##
	`_add
(ARRAY *
a
, 
T
 *
vÆ
, *
ödex_ªt
) \

240  
	`¨øy_add
(&
a
->
¨r
, (*)
vÆ
, 
ödex_ªt
); \

243 
INLINE
 \

244 
ARRAY
##
	`_ªmove
(ARRAY *
a
, 
ödex
) \

246  
	`¨øy_ªmove
(&
a
->
¨r
, 
ödex
); \

247 }

	)

249 
	#DECLARRAY
(
T
Ë
	`DECLARRAY_BYTYPE
(T##
¨øy
, T)

	)

250 
	#DEFARRAY
(
T
, 
INLINE
Ë
	`DEFARRAY_BYTYPE
(T##
¨øy
, T, INLINE)

	)

256 
DECLARRAY_BYTYPE
(
°rög¨øy
, );

257 
DEFARRAY_BYTYPE
(
°rög¨øy
, , 
ARRAYINLINE
);

	@test/os161/kern/include/bitmap.h

30 #i‚de‡
_BITMAP_H_


31 
	#_BITMAP_H_


	)

48 
	gbôm≠
;

50 
bôm≠
 *
bôm≠_¸óã
(
nbôs
);

51 *
bôm≠_gëd©a
(
bôm≠
 *);

52 
bôm≠_Æloc
(
bôm≠
 *, *
ödex
);

53 
bôm≠_m¨k
(
bôm≠
 *, 
ödex
);

54 
bôm≠_unm¨k
(
bôm≠
 *, 
ödex
);

55 
bôm≠_is£t
(
bôm≠
 *, 
ödex
);

56 
bôm≠_de°roy
(
bôm≠
 *);

	@test/os161/kern/include/cdefs.h

30 #i‚de‡
_CDEFS_H_


31 
	#_CDEFS_H_


	)

42 
	#COMPILE_ASSERT
(
x
Ë(()(°ru˘ { : ((x)?1:-1); }))

	)

48 #ifde‡
__GNUC__


49 
	#__PF
(
a
,
b
Ë
	`__©åibuã__
((
	`__f‹m©__
(
__¥ötf__
,á, b)))

	)

51 
	#__PF
(
a
,
b
)

	)

114 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__GNUC_STDC_INLINE__
)

116 
	#INLINE
 
ölöe


	)

118 #ñi‡
deföed
(
__STDC__
Ë&& 
__STDC_VERSION__
 >= 199901L

120 
	#INLINE
 
ölöe


	)

124 
	#INLINE
 
ölöe


	)

	@test/os161/kern/include/clock.h

30 #i‚de‡
_CLOCK_H_


31 
	#_CLOCK_H_


	)

33 
	~"›t-synch¥obs.h
"

51 #i‡
OPT_SYNCHPROBS


53 
	#HZ
 10000

	)

56 
	#HZ
 100

	)

59 
h¨d˛ock_boŸ°øp
();

61 
h¨d˛ock
();

62 
timî˛ock
();

64 
gëtime
(
time_t
 *
£c⁄ds
, 
uöt32_t
 *
«no£c⁄ds
);

66 
gëöãrvÆ
(
time_t
 
£cs1
, 
uöt32_t
 
n£cs
,

67 
time_t
 
£cs2
, 
uöt32_t
 
n£cs2
,

68 
time_t
 *
r£cs
, 
uöt32_t
 *
∫£cs
);

74 
˛ock¶ìp
(
£c⁄ds
);

	@test/os161/kern/include/copyinout.h

30 #i‚de‡
_COPYINOUT_H_


31 
	#_COPYINOUT_H_


	)

67 
c›yö
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
);

68 
c›yout
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
);

69 
c›yö°r
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
, size_à*
gŸ
);

70 
c›yout°r
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
, size_à*
gŸ
);

	@test/os161/kern/include/cpu.h

30 #i‚de‡
_CPU_H_


31 
	#_CPU_H_


	)

34 
	~<•ölock.h
>

35 
	~<thªadli°.h
>

36 
	~<machöe/vm.h
>

49 
	s˝u
 {

53 
˝u
 *
	mc_£lf
;

54 
	mc_numbî
;

55 
	mc_h¨dw¨e_numbî
;

60 
thªad
 *
	mc_cuπhªad
;

61 
thªadli°
 
	mc_zombõs
;

62 
	mc_h¨d˛ocks
;

68 
boﬁ
 
	mc_isidÀ
;

69 
thªadli°
 
	mc_runqueue
;

70 
•ölock
 
	mc_runqueue_lock
;

86 
uöt32_t
 
	mc_ùi_≥ndög
;

87 
ébshoŸdown
 
	mc_shoŸdown
[
TLBSHOOTDOWN_MAX
];

88 
	mc_numshoŸdown
;

89 
•ölock
 
	mc_ùi_lock
;

92 
	#TLBSHOOTDOWN_ALL
 (-1)

	)

107 
˝u
 *
˝u_¸óã
(
h¨dw¨e_numbî
);

108 
˝u_machdï_öô
(
˝u
 *);

109  
˝u_°¨t_£c⁄d¨y
();

110 
˝u_h©ch
(
so·w¨e_numbî
);

115 c⁄° *
˝u_idítify
();

122 
˝u_úqoff
();

123 
˝u_úq⁄
();

139 
˝u_idÀ
();

140 
˝u_hÆt
();

161 
	#IPI_PANIC
 0

	)

162 
	#IPI_OFFLINE
 1

	)

163 
	#IPI_UNIDLE
 2

	)

164 
	#IPI_TLBSHOOTDOWN
 3

	)

166 
ùi_£nd
(
˝u
 *
èrgë
, 
code
);

167 
ùi_brﬂdˇ°
(
code
);

168 
ùi_ébshoŸdown
(
˝u
 *
èrgë
, c⁄° 
ébshoŸdown
 *
m≠pög
);

170 
öãΩro˚ss‹_öãºu±
();

	@test/os161/kern/include/current.h

30 #i‚de‡
_CURRENT_H_


31 
	#_CURRENT_H_


	)

42 
	~<machöe/cuºít.h
>

44 #i‡
deföed
(
__NEED_CURTHREAD
)

46 
	~<˝u.h
>

47 
	#cuπhªad
 
cur˝u
->
c_cuπhªad


	)

48 
	#CURCPU_EXISTS
(Ë(
cur˝u
 !
NULL
)

	)

52 #i‡
deföed
(
__NEED_CURCPU
)

54 
	~<thªad.h
>

55 
	#cur˝u
 
cuπhªad
->
t_˝u


	)

56 
	#CURCPU_EXISTS
(Ë(
cuπhªad
 !
NULL
)

	)

66 
	#cuΩroc
 (
cuπhªad
->
t_¥oc
)

	)

	@test/os161/kern/include/device.h

30 #i‚de‡
_DEVICE_H_


31 
	#_DEVICE_H_


	)

38 
	guio
;

44 
	sdevi˚
 {

45 (*
	md_›í
)(
	mdevi˚
 *, 
	mÊags_‰om_›í
);

46 (*
	md_˛o£
)(
	mdevi˚
 *);

47 (*
	md_io
)(
	mdevi˚
 *, 
	muio
 *);

48 (*
	md_io˘l
)(
	mdevi˚
 *, 
	m›
, 
u£Ωå_t
 
	md©a
);

50 
blk˙t_t
 
	md_blocks
;

51 
blksize_t
 
	md_blocksize
;

53 
dev_t
 
	md_devnumbî
;

55 *
	md_d©a
;

59 
vnode
 *
dev_¸óã_vnode
(
devi˚
 *
dev
);

63 
devnuŒ_¸óã
();

66 
dev_boŸ°øp
();

	@test/os161/kern/include/elf.h

30 #i‚de‡
_ELF_H_


31 
	#_ELF_H_


	)

44 
	~<machöe/ñf.h
>

50 
	#ELF_NIDENT
 16

	)

52 
	me_idít
[
ELF_NIDENT
];

53 
uöt16_t
 
	me_ty≥
;

54 
uöt16_t
 
	me_machöe
;

55 
uöt32_t
 
	me_vîsi⁄
;

56 
uöt32_t
 
	me_íåy
;

57 
uöt32_t
 
	me_phoff
;

58 
uöt32_t
 
	me_shoff
;

59 
uöt32_t
 
	me_Êags
;

60 
uöt16_t
 
	me_ehsize
;

61 
uöt16_t
 
	me_phítsize
;

62 
uöt16_t
 
	me_phnum
;

63 
uöt16_t
 
	me_shítsize
;

64 
uöt16_t
 
	me_shnum
;

65 
uöt16_t
 
	me_sh°∫dx
;

66 } 
	tElf32_Ehdr
;

69 
	#EI_MAG0
 0

	)

70 
	#EI_MAG1
 1

	)

71 
	#EI_MAG2
 2

	)

72 
	#EI_MAG3
 3

	)

73 
	#EI_CLASS
 4

	)

74 
	#EI_DATA
 5

	)

75 
	#EI_VERSION
 6

	)

76 
	#EI_OSABI
 7

	)

77 
	#EI_ABIVERSION
 8

	)

78 
	#EI_PAD
 9

	)

83 
	#ELFMAG0
 0x7f

	)

84 
	#ELFMAG1
 'E'

	)

85 
	#ELFMAG2
 'L'

	)

86 
	#ELFMAG3
 'F'

	)

89 
	#ELFCLASSNONE
 0

	)

90 
	#ELFCLASS32
 1

	)

91 
	#ELFCLASS64
 2

	)

94 
	#ELFDATANONE
 0

	)

95 
	#ELFDATA2LSB
 1

	)

96 
	#ELFDATA2MSB
 2

	)

99 
	#EV_NONE
 0

	)

100 
	#EV_CURRENT
 1

	)

103 
	#ELFOSABI_SYSV
 0

	)

104 
	#ELFOSABI_HPUX
 1

	)

105 
	#ELFOSABI_STANDALONE
 255

	)

111 
	#ET_NONE
 0

	)

112 
	#ET_REL
 1

	)

113 
	#ET_EXEC
 2

	)

114 
	#ET_DYN
 3

	)

115 
	#ET_CORE
 4

	)

116 
	#ET_NUM
 5

	)

121 
	#EM_NONE
 0

	)

122 
	#EM_M32
 1

	)

123 
	#EM_SPARC
 2

	)

124 
	#EM_386
 3

	)

125 
	#EM_68K
 4

	)

126 
	#EM_88K
 5

	)

127 
	#EM_486
 6

	)

128 
	#EM_860
 7

	)

129 
	#EM_MIPS
 8

	)

130 
	#EM_S370
 9

	)

131 
	#EM_MIPS_RS3_LE
 10

	)

132 
	#EM_RS6000
 11

	)

133 
	#EM_PARISC
 15

	)

134 
	#EM_NCUBE
 16

	)

135 
	#EM_VPP500
 17

	)

136 
	#EM_SPARC32PLUS
 18

	)

137 
	#EM_960
 19

	)

138 
	#EM_PPC
 20

	)

139 
	#EM_V800
 36

	)

140 
	#EM_FR20
 37

	)

141 
	#EM_RH32
 38

	)

142 
	#EM_RCE
 39

	)

143 
	#EM_ARM
 40

	)

144 
	#EM_ALPHA
 41

	)

145 
	#EM_SH
 42

	)

146 
	#EM_SPARCV9
 43

	)

147 
	#EM_TRICORE
 44

	)

148 
	#EM_ARC
 45

	)

149 
	#EM_H8_300
 46

	)

150 
	#EM_H8_300H
 47

	)

151 
	#EM_H8S
 48

	)

152 
	#EM_H8_500
 49

	)

153 
	#EM_IA_64
 50

	)

154 
	#EM_MIPS_X
 51

	)

155 
	#EM_COLDFIRE
 52

	)

156 
	#EM_68HC12
 53

	)

157 
	#EM_VAX
 75

	)

158 
	#EM_ALPHA_EXP
 36902

	)

159 
	#EM_NUM
 36903

	)

169 
uöt32_t
 
	mp_ty≥
;

170 
uöt32_t
 
	mp_off£t
;

171 
uöt32_t
 
	mp_vaddr
;

172 
uöt32_t
 
	mp_∑ddr
;

173 
uöt32_t
 
	mp_fûesz
;

174 
uöt32_t
 
	mp_memsz
;

175 
uöt32_t
 
	mp_Êags
;

176 
uöt32_t
 
	mp_Æign
;

177 } 
	tElf32_Phdr
;

180 
	#PT_NULL
 0

	)

181 
	#PT_LOAD
 1

	)

182 
	#PT_DYNAMIC
 2

	)

183 
	#PT_INTERP
 3

	)

184 
	#PT_NOTE
 4

	)

185 
	#PT_SHLIB
 5

	)

186 
	#PT_PHDR
 6

	)

187 
	#PT_NUM
 7

	)

188 
	#PT_MIPS_REGINFO
 0x70000000

	)

191 
	#PF_R
 0x4

	)

192 
	#PF_W
 0x2

	)

193 
	#PF_X
 0x1

	)

196 
Elf32_Ehdr
 
	tElf_Ehdr
;

197 
Elf32_Phdr
 
	tElf_Phdr
;

	@test/os161/kern/include/emufs.h

30 #i‚de‡
_EMUFS_H_


31 
	#_EMUFS_H_


	)

37 
	~<fs.h
>

38 
	~<vnode.h
>

44 
	semufs_vnode
 {

45 
vnode
 
	mev_v
;

46 
emu_so·c
 *
	mev_emu
;

47 
uöt32_t
 
	mev_h™dÀ
;

50 
	semufs_fs
 {

51 
fs
 
	mef_fs
;

52 
emu_so·c
 *
	mef_emu
;

53 
emufs_vnode
 *
	mef_roŸ
;

54 
vnodóºay
 *
	mef_vnodes
;

	@test/os161/kern/include/endian.h

30 #i‚de‡
_ENDIAN_H_


31 
	#_ENDIAN_H_


	)

33 
	~<kîn/ídün.h
>

39 
uöt16_t
 
bsw≠16
(uint16_t);

40 
uöt32_t
 
bsw≠32
(uint32_t);

41 
uöt64_t
 
bsw≠64
(uint64_t);

43 
uöt16_t
 
¡ohs
(uint16_t);

44 
uöt16_t
 
ht⁄s
(uint16_t);

45 
uöt32_t
 
¡ohl
(uint32_t);

46 
uöt32_t
 
ht⁄l
(uint32_t);

47 
uöt64_t
 
¡ohŒ
(uint64_t);

48 
uöt64_t
 
ht⁄Œ
(uint64_t);

51 
joö32to64
(
uöt32_t
 
x1
, uöt32_à
x2
, 
uöt64_t
 *
y2
);

52 
•lô64to32
(
uöt64_t
 
x
, 
uöt32_t
 *
y1
, uöt32_à*
y2
);

	@test/os161/kern/include/fs.h

30 #i‚de‡
_FS_H_


31 
	#_FS_H_


	)

64 
	sfs
 {

65 (*
	mfs_sync
)(
	mfs
 *);

66 c⁄° *(*
	mfs_gëvﬁ«me
)(
	mfs
 *);

67 
	mvnode
 *(*
	mfs_gëroŸ
)(
	mfs
 *);

68 (*
	mfs_unmou¡
)(
	mfs
 *);

70 *
	mfs_d©a
;

76 
	#FSOP_SYNC
(
fs
Ë((fs)->
	`fs_sync
(fs))

	)

77 
	#FSOP_GETVOLNAME
(
fs
Ë((fs)->
	`fs_gëvﬁ«me
(fs))

	)

78 
	#FSOP_GETROOT
(
fs
Ë((fs)->
	`fs_gëroŸ
(fs))

	)

79 
	#FSOP_UNMOUNT
(
fs
Ë((fs)->
	`fs_unmou¡
(fs))

	)

	@test/os161/kern/include/kern/endian.h

30 #i‚de‡
_KERN_ENDIAN_H_


31 
	#_KERN_ENDIAN_H_


	)

42 
	#_LITTLE_ENDIAN
 1234

	)

43 
	#_BIG_ENDIAN
 4321

	)

44 
	#_PDP_ENDIAN
 3412

	)

47 
	~<kîn/machöe/ídün.h
>

	@test/os161/kern/include/kern/errmsg.h

30 #i‚de‡
_KERN_ERRMSG_H_


31 
	#_KERN_ERRMSG_H_


	)

41 c⁄° *c⁄° 
	gsys_îæi°
[] = {

112 c⁄° 
	gsys_√º
 = (
sys_îæi°
)/(const *);

	@test/os161/kern/include/kern/errno.h

30 #i‚de‡
_KERN_ERRNO_H_


31 
	#_KERN_ERRNO_H_


	)

45 
	#ENOSYS
 1

	)

46 
	#EUNIMP
 2

	)

47 
	#ENOMEM
 3

	)

48 
	#EAGAIN
 4

	)

49 
	#EINTR
 5

	)

50 
	#EFAULT
 6

	)

51 
	#ENAMETOOLONG
 7

	)

52 
	#EINVAL
 8

	)

53 
	#EPERM
 9

	)

54 
	#EACCES
 10

	)

55 
	#EMPROC
 11

	)

56 
	#ENPROC
 12

	)

57 
	#ENOEXEC
 13

	)

58 
	#E2BIG
 14

	)

59 
	#ESRCH
 15

	)

60 
	#ECHILD
 16

	)

61 
	#ENOTDIR
 17

	)

62 
	#EISDIR
 18

	)

63 
	#ENOENT
 19

	)

64 
	#ELOOP
 20

	)

65 
	#ENOTEMPTY
 21

	)

66 
	#EEXIST
 22

	)

67 
	#EMLINK
 23

	)

68 
	#EXDEV
 24

	)

69 
	#ENODEV
 25

	)

70 
	#ENXIO
 26

	)

71 
	#EBUSY
 27

	)

72 
	#EMFILE
 28

	)

73 
	#ENFILE
 29

	)

74 
	#EBADF
 30

	)

75 
	#EIOCTL
 31

	)

76 
	#EIO
 32

	)

77 
	#ESPIPE
 33

	)

78 
	#EPIPE
 34

	)

79 
	#EROFS
 35

	)

80 
	#ENOSPC
 36

	)

81 
	#EDQUOT
 37

	)

82 
	#EFBIG
 38

	)

83 
	#EFTYPE
 39

	)

84 
	#EDOM
 40

	)

85 
	#ERANGE
 41

	)

86 
	#EILSEQ
 42

	)

87 
	#ENOTSOCK
 43

	)

88 
	#EISSOCK
 44

	)

89 
	#EISCONN
 45

	)

90 
	#ENOTCONN
 46

	)

91 
	#ESHUTDOWN
 47

	)

92 
	#EPFNOSUPPORT
 48

	)

93 
	#ESOCKTNOSUPPORT
 49

	)

94 
	#EPROTONOSUPPORT
 50

	)

95 
	#EPROTOTYPE
 51

	)

96 
	#EAFNOSUPPORT
 52

	)

97 
	#ENOPROTOOPT
 53

	)

98 
	#EADDRINUSE
 54

	)

99 
	#EADDRNOTAVAIL
 55

	)

100 
	#ENETDOWN
 56

	)

101 
	#ENETUNREACH
 57

	)

102 
	#EHOSTDOWN
 58

	)

103 
	#EHOSTUNREACH
 59

	)

104 
	#ECONNREFUSED
 60

	)

105 
	#ETIMEDOUT
 61

	)

106 
	#ECONNRESET
 62

	)

107 
	#EMSGSIZE
 63

	)

108 
	#ENOTSUP
 64

	)

	@test/os161/kern/include/kern/fcntl.h

30 #i‚de‡
_KERN_FCNTL_H_


31 
	#_KERN_FCNTL_H_


	)

43 
	#O_RDONLY
 0

	)

44 
	#O_WRONLY
 1

	)

45 
	#O_RDWR
 2

	)

47 
	#O_CREAT
 4

	)

48 
	#O_EXCL
 8

	)

49 
	#O_TRUNC
 16

	)

50 
	#O_APPEND
 32

	)

51 
	#O_NOCTTY
 64

	)

54 
	#O_ACCMODE
 3

	)

61 
	#LOCK_SH
 1

	)

62 
	#LOCK_EX
 2

	)

63 
	#LOCK_UN
 3

	)

64 
	#LOCK_NB
 4

	)

71 
	#F_DUPFD
 0

	)

72 
	#F_GETFD
 1

	)

73 
	#F_SETFD
 2

	)

74 
	#F_GETFL
 3

	)

75 
	#F_SETFL
 4

	)

76 
	#F_GETOWN
 5

	)

77 
	#F_SETOWN
 6

	)

78 
	#F_GETLK
 7

	)

79 
	#F_SETLK
 8

	)

80 
	#F_SETLKW
 9

	)

83 
	#FD_CLOEXEC
 1

	)

86 
	#F_RDLCK
 0

	)

87 
	#F_WRLCK
 1

	)

88 
	#F_UNLCK
 2

	)

91 
	sÊock
 {

92 
off_t
 
	ml_°¨t
;

93 
	ml_whí˚
;

94 
	ml_ty≥
;

95 
off_t
 
	ml_Àn
;

96 
pid_t
 
	ml_pid
;

	@test/os161/kern/include/kern/ioctl.h

30 #i‚de‡
_KERN_IOCTL_H_


31 
	#_KERN_IOCTL_H_


	)

	@test/os161/kern/include/kern/iovec.h

30 #i‚de‡
_KERN_IOVEC_H_


31 
	#_KERN_IOVEC_H_


	)

38 
	siovec
 {

57 #ifde‡
_KERNEL


59 
u£Ωå_t
 
	miov_uba£
;

60 *
	miov_kba£
;

63 *
	miov_ba£
;

65 
size_t
 
	miov_Àn
;

	@test/os161/kern/include/kern/limits.h

30 #i‚de‡
_KERN_LIMITS_H_


31 
	#_KERN_LIMITS_H_


	)

52 
	#__NAME_MAX
 255

	)

55 
	#__PATH_MAX
 1024

	)

58 
	#__ARG_MAX
 (64 * 1024)

	)

66 
	#__PID_MIN
 2

	)

69 
	#__PID_MAX
 32767

	)

72 
	#__PIPE_BUF
 512

	)

80 
	#__NGROUPS_MAX
 32

	)

83 
	#__LOGIN_NAME_MAX
 17

	)

94 
	#__OPEN_MAX
 128

	)

97 
	#__IOV_MAX
 1024

	)

	@test/os161/kern/include/kern/reboot.h

30 #i‚de‡
_KERN_REBOOT_H_


31 
	#_KERN_REBOOT_H_


	)

40 
	#RB_REBOOT
 0

	)

41 
	#RB_HALT
 1

	)

42 
	#RB_POWEROFF
 2

	)

	@test/os161/kern/include/kern/resource.h

30 #i‚de‡
_KERN_RESOURCE_H_


31 
	#_KERN_RESOURCE_H_


	)

41 
	#PRIO_MIN
 (-20)

	)

42 
	#PRIO_MAX
 20

	)

45 
	#PRIO_PROCESS
 0

	)

46 
	#PRIO_PGRP
 1

	)

47 
	#PRIO_USER
 2

	)

50 
	#RUSAGE_SELF
 0

	)

51 
	#RUSAGE_CHILDREN
 (-1)

	)

53 
	srußge
 {

54 
timevÆ
 
	mru_utime
;

55 
timevÆ
 
	mru_°ime
;

56 
__size_t
 
	mru_maxrss
;

57 
__cou¡î_t
 
	mru_ixrss
;

58 
__cou¡î_t
 
	mru_idrss
;

59 
__cou¡î_t
 
	mru_i§ss
;

60 
__cou¡î_t
 
	mru_möÊt
;

61 
__cou¡î_t
 
	mru_majÊt
;

62 
__cou¡î_t
 
	mru_nsw≠
;

63 
__cou¡î_t
 
	mru_öblock
;

64 
__cou¡î_t
 
	mru_oublock
;

65 
__cou¡î_t
 
	mru_msgrcv
;

66 
__cou¡î_t
 
	mru_msg¢d
;

67 
__cou¡î_t
 
	mru_nsig«ls
;

68 
__cou¡î_t
 
	mru_nvcsw
;

69 
__cou¡î_t
 
	mru_nivcsw
;

74 
	#RLIMIT_NPROC
 0

	)

75 
	#RLIMIT_NOFILE
 1

	)

76 
	#RLIMIT_CPU
 2

	)

77 
	#RLIMIT_DATA
 3

	)

78 
	#RLIMIT_STACK
 4

	)

79 
	#RLIMIT_MEMLOCK
 5

	)

80 
	#RLIMIT_RSS
 6

	)

81 
	#RLIMIT_CORE
 7

	)

82 
	#RLIMIT_FSIZE
 8

	)

83 
	#__RLIMIT_NUM
 9

	)

85 
	sæimô
 {

86 
__æim_t
 
	mæim_cur
;

87 
__æim_t
 
	mæim_max
;

90 
	#RLIM_INFINITY
 (~(
__æim_t
)0)

	)

	@test/os161/kern/include/kern/seek.h

30 #i‚de‡
_KERN_SEEK_H_


31 
	#_KERN_SEEK_H_


	)

42 
	#SEEK_SET
 0

	)

43 
	#SEEK_CUR
 1

	)

44 
	#SEEK_END
 2

	)

	@test/os161/kern/include/kern/sfs.h

30 #i‚de‡
_KERN_SFS_H_


31 
	#_KERN_SFS_H_


	)

39 
	#SFS_MAGIC
 0xabadf001

	)

40 
	#SFS_BLOCKSIZE
 512

	)

41 
	#SFS_VOLNAME_SIZE
 32

	)

42 
	#SFS_NDIRECT
 15

	)

43 
	#SFS_DBPERIDB
 128

	)

44 
	#SFS_NAMELEN
 60

	)

45 
	#SFS_SB_LOCATION
 0

	)

46 
	#SFS_ROOT_LOCATION
 1

	)

47 
	#SFS_MAP_LOCATION
 2

	)

48 
	#SFS_NOINO
 0

	)

51 
	#SFS_BLOCKBITS
 (
SFS_BLOCKSIZE
 * 
CHAR_BIT
)

	)

54 
	#SFS_ROUNDUP
(
a
,
b
Ë(((◊)+(b)-1)/(b))*b)

	)

57 
	#SFS_BITMAPSIZE
(
nblocks
Ë
	`SFS_ROUNDUP
“blocks, 
SFS_BLOCKBITS
)

	)

60 
	#SFS_BITBLOCKS
(
nblocks
Ë(
	`SFS_BITMAPSIZE
“blocks)/
SFS_BLOCKBITS
)

	)

63 
	#SFS_TYPE_INVAL
 0

	)

64 
	#SFS_TYPE_FILE
 1

	)

65 
	#SFS_TYPE_DIR
 2

	)

70 
	ssfs_su≥r
 {

71 
uöt32_t
 
	m•_magic
;

72 
uöt32_t
 
	m•_nblocks
;

73 
	m•_vﬁ«me
[
SFS_VOLNAME_SIZE
];

74 
uöt32_t
 
	mª£rved
[118];

80 
	ssfs_öode
 {

81 
uöt32_t
 
	msfi_size
;

82 
uöt16_t
 
	msfi_ty≥
;

83 
uöt16_t
 
	msfi_lökcou¡
;

84 
uöt32_t
 
	msfi_dúe˘
[
SFS_NDIRECT
];

85 
uöt32_t
 
	msfi_ödúe˘
;

86 
uöt32_t
 
	msfi_wa°e
[128-3-
SFS_NDIRECT
];

92 
	ssfs_dú
 {

93 
uöt32_t
 
	msfd_öo
;

94 
	msfd_«me
[
SFS_NAMELEN
];

	@test/os161/kern/include/kern/signal.h

37 #i‚de‡
_KERN_SIGNAL_H_


38 
	#_KERN_SIGNAL_H_


	)

56 
	#SIGHUP
 1

	)

57 
	#SIGINT
 2

	)

58 
	#SIGQUIT
 3

	)

59 
	#SIGILL
 4

	)

60 
	#SIGTRAP
 5

	)

61 
	#SIGABRT
 6

	)

62 
	#SIGEMT
 7

	)

63 
	#SIGFPE
 8

	)

64 
	#SIGKILL
 9

	)

65 
	#SIGBUS
 10

	)

66 
	#SIGSEGV
 11

	)

67 
	#SIGSYS
 12

	)

68 
	#SIGPIPE
 13

	)

69 
	#SIGALRM
 14

	)

70 
	#SIGTERM
 15

	)

71 
	#SIGURG
 16

	)

72 
	#SIGSTOP
 17

	)

73 
	#SIGTSTP
 18

	)

74 
	#SIGCONT
 19

	)

75 
	#SIGCHLD
 20

	)

76 
	#SIGTTIN
 21

	)

77 
	#SIGTTOU
 22

	)

78 
	#SIGIO
 23

	)

79 
	#SIGXCPU
 24

	)

80 
	#SIGXFSZ
 25

	)

81 
	#SIGVTALRM
 26

	)

82 
	#SIGPROF
 27

	)

83 
	#SIGWINCH
 28

	)

84 
	#SIGINFO
 29

	)

85 
	#SIGUSR1
 20

	)

86 
	#SIGUSR2
 31

	)

87 
	#SIGPWR
 32

	)

88 
	#_NSIG
 32

	)

92 
__u32
 
	tsig£t_t
;

95 
	#SA_ONSTACK
 1

	)

96 
	#SA_RESTART
 2

	)

97 
	#SA_RESETHAND
 4

	)

100 
	#SIG_BLOCK
 1

	)

101 
	#SIG_UNBLOCK
 2

	)

102 
	#SIG_SETMASK
 3

	)

105 (*
	t__sigfunc
)();

108 
	#SIG_DFL
 ((
__sigfunc
Ë0Ë

	)

109 
	#SIG_IGN
 ((
__sigfunc
Ë1Ë

	)

114 
	ssiga˘i⁄
 {

115 
__sigfunc
 
ß_h™dÀr
;

116 
sig£t_t
 
ß_mask
;

117 
ß_Êags
;

124 
	ssigÆt°ack
 {

125 *
ss_•
;

126 
size_t
 
ss_size
;

127 
ss_Êags
;

	@test/os161/kern/include/kern/socket.h

30 #i‚de‡
_KERN_SOCKET_H_


31 
	#_KERN_SOCKET_H_


	)

43 
	#SOCK_STREAM
 1

	)

44 
	#SOCK_DGRAM
 2

	)

45 
	#SOCK_RAW
 3

	)

48 
	#AF_UNSPEC
 0

	)

49 
	#AF_UNIX
 1

	)

50 
	#AF_INET
 2

	)

51 
	#AF_INET6
 3

	)

54 
	#PF_UNSPEC
 
AF_UNSPEC


	)

55 
	#PF_UNIX
 
AF_UNIX


	)

56 
	#PF_INET
 
AF_INET


	)

57 
	#PF_INET6
 
AF_INET6


	)

73 
	ssockaddr
 {

74 
__u8
 
	mß_Àn
;

75 
__u8
 
	mß_Ámûy
;

78 
	#_SS_SIZE
 128

	)

79 
	ssockaddr_°‹age
 {

80 
__u8
 
	mss_Àn
;

81 
__u8
 
	mss_Ámûy
;

82 
__u8
 
	m__ss_∑d1
;

83 
__u8
 
	m__ss_∑d2
;

84 
__u32
 
	m__ss_∑d3
;

85 
__u64
 
	m__ss_∑d4
;

86 
	m__ss_∑d5
[
_SS_SIZE
 - (
__u64
Ë- (
__u32
Ë- 4*(
__u8
)];

98 
	smsghdr
 {

99 *
	mmsg_«me
;

100 
sockÀn_t
 
	mmsg_«mñí
;

101 
iovec
 *
	mmsg_iov
;

102 
	mmsg_iovÀn
;

103 *
	mmsg_c⁄åﬁ
;

104 
sockÀn_t
 
	mmsg_c⁄åﬁÀn
;

105 
	mmsg_Êags
;

108 
	scmsghdr
 {

109 
sockÀn_t
 
	mcmsg_Àn
;

110 
	mcmsg_Àvñ
;

111 
	mcmsg_ty≥
;

	@test/os161/kern/include/kern/stat.h

30 #i‚de‡
_KERN_STAT_H_


31 
	#_KERN_STAT_H_


	)

42 
	s°©
 {

44 
off_t
 
	m°_size
;

45 
mode_t
 
	m°_mode
;

46 
∆ök_t
 
	m°_∆ök
;

47 
blk˙t_t
 
	m°_blocks
;

50 
dev_t
 
	m°_dev
;

51 
öo_t
 
	m°_öo
;

52 
dev_t
 
	m°_rdev
;

55 
time_t
 
	m°_©ime
;

56 
time_t
 
	m°_˘ime
;

57 
time_t
 
	m°_mtime
;

58 
__u32
 
	m°_©imí£c
;

59 
__u32
 
	m°_˘imí£c
;

60 
__u32
 
	m°_mtimí£c
;

63 
uid_t
 
	m°_uid
;

64 
gid_t
 
	m°_gid
;

67 
__u32
 
	m°_gí
;

68 
blksize_t
 
	m°_blksize
;

	@test/os161/kern/include/kern/stattypes.h

30 #i‚de‡
_KERN_STATTYPES_H_


31 
	#_KERN_STATTYPES_H_


	)

45 
	#_S_IFMT
 070000

	)

46 
	#_S_IFREG
 010000

	)

47 
	#_S_IFDIR
 020000

	)

48 
	#_S_IFLNK
 030000

	)

49 
	#_S_IFIFO
 040000

	)

50 
	#_S_IFSOCK
 050000

	)

51 
	#_S_IFCHR
 060000

	)

52 
	#_S_IFBLK
 070000

	)

	@test/os161/kern/include/kern/syscall.h

30 #i‚de‡
_KERN_SYSCALL_H_


31 
	#_KERN_SYSCALL_H_


	)

50 
	#SYS_f‹k
 0

	)

51 
	#SYS_vf‹k
 1

	)

52 
	#SYS_execv
 2

	)

53 
	#SYS__exô
 3

	)

54 
	#SYS_waôpid
 4

	)

55 
	#SYS_gëpid
 5

	)

56 
	#SYS_gëµid
 6

	)

58 
	#SYS_sbrk
 7

	)

59 
	#SYS_mm≠
 8

	)

60 
	#SYS_munm≠
 9

	)

61 
	#SYS_m¥Ÿe˘
 10

	)

69 
	#SYS_umask
 17

	)

70 
	#SYS_is£tugid
 18

	)

71 
	#SYS_gëªsuid
 19

	)

72 
	#SYS_£åesuid
 20

	)

73 
	#SYS_gëªsgid
 21

	)

74 
	#SYS_£åesgid
 22

	)

75 
	#SYS_gëgroups
 23

	)

76 
	#SYS_£tgroups
 24

	)

77 
	#SYS___gëlogö
 25

	)

78 
	#SYS___£éogö
 26

	)

80 
	#SYS_kûl
 27

	)

81 
	#SYS_siga˘i⁄
 28

	)

82 
	#SYS_sig≥ndög
 29

	)

83 
	#SYS_sig¥ocmask
 30

	)

84 
	#SYS_sigsu•íd
 31

	)

85 
	#SYS_sigªtu∫
 32

	)

105 
	#SYS_›í
 45

	)

106 
	#SYS_pùe
 46

	)

107 
	#SYS_dup
 47

	)

108 
	#SYS_dup2
 48

	)

109 
	#SYS_˛o£
 49

	)

110 
	#SYS_ªad
 50

	)

111 
	#SYS_¥ód
 51

	)

114 
	#SYS_gëdúíåy
 54

	)

115 
	#SYS_wrôe
 55

	)

116 
	#SYS_pwrôe
 56

	)

119 
	#SYS_l£ek
 59

	)

120 
	#SYS_Êock
 60

	)

121 
	#SYS_·runˇã
 61

	)

122 
	#SYS_fsync
 62

	)

123 
	#SYS_f˙é
 63

	)

124 
	#SYS_io˘l
 64

	)

125 
	#SYS_£À˘
 65

	)

126 
	#SYS_pﬁl
 66

	)

129 
	#SYS_lök
 67

	)

130 
	#SYS_ªmove
 68

	)

131 
	#SYS_mkdú
 69

	)

132 
	#SYS_rmdú
 70

	)

133 
	#SYS_mkfifo
 71

	)

134 
	#SYS_ª«me
 72

	)

135 
	#SYS_ac˚ss
 73

	)

137 
	#SYS_chdú
 74

	)

138 
	#SYS_fchdú
 75

	)

139 
	#SYS___gëcwd
 76

	)

141 
	#SYS_symlök
 77

	)

142 
	#SYS_ªadlök
 78

	)

144 
	#SYS_mou¡
 79

	)

145 
	#SYS_unmou¡
 80

	)

149 
	#SYS_°©
 81

	)

150 
	#SYS_f°©
 82

	)

151 
	#SYS_l°©
 83

	)

153 
	#SYS_utimes
 84

	)

154 
	#SYS_futimes
 85

	)

155 
	#SYS_lutimes
 86

	)

157 
	#SYS_chmod
 87

	)

158 
	#SYS_chown
 88

	)

159 
	#SYS_fchmod
 89

	)

160 
	#SYS_fchown
 90

	)

161 
	#SYS_lchmod
 91

	)

162 
	#SYS_lchown
 92

	)

172 
	#SYS_sockë
 98

	)

173 
	#SYS_böd
 99

	)

174 
	#SYS_c⁄√˘
 100

	)

175 
	#SYS_li°í
 101

	)

176 
	#SYS_ac˚±
 102

	)

178 
	#SYS_shutdown
 104

	)

179 
	#SYS_gësock«me
 105

	)

180 
	#SYS_gë≥î«me
 106

	)

181 
	#SYS_gësock›t
 107

	)

182 
	#SYS_£tsock›t
 108

	)

189 
	#SYS___time
 113

	)

190 
	#SYS___£âime
 114

	)

191 
	#SYS_«no¶ìp
 115

	)

196 
	#SYS_sync
 118

	)

197 
	#SYS_ªboŸ
 119

	)

	@test/os161/kern/include/kern/time.h

30 #i‚de‡
_KERN_TIME_H_


31 
	#_KERN_TIME_H_


	)

43 
	stimevÆ
 {

44 
__time_t
 
	mtv_£c
;

45 
__i32
 
	mtv_u£c
;

48 
	stime•ec
 {

49 
__time_t
 
	mtv_£c
;

50 
__i32
 
	mtv_n£c
;

59 
	#ITIMER_REAL
 0

	)

60 
	#ITIMER_VIRTUAL
 1

	)

61 
	#ITIMER_PROF
 2

	)

64 
	sôimîvÆ
 {

65 
timevÆ
 
	mô_öãrvÆ
;

66 
timevÆ
 
	mô_vÆue
;

	@test/os161/kern/include/kern/types.h

30 #i‚de‡
_KERN_TYPES_H_


31 
	#_KERN_TYPES_H_


	)

34 
	~<kîn/machöe/ty≥s.h
>

64 
__u32
 
	t__blk˙t_t
;

65 
__u32
 
	t__blksize_t
;

66 
__u64
 
	t__cou¡î_t
;

67 
__u32
 
	t__daddr_t
;

68 
__u32
 
	t__dev_t
;

69 
__u32
 
	t__fsid_t
;

70 
__i32
 
	t__gid_t
;

71 
__u32
 
	t__ö_addr_t
;

72 
__u32
 
	t__ö_p‹t_t
;

73 
__u32
 
	t__öo_t
;

74 
__u32
 
	t__mode_t
;

75 
__u16
 
	t__∆ök_t
;

76 
__i64
 
	t__off_t
;

77 
__i32
 
	t__pid_t
;

78 
__u64
 
	t__æim_t
;

79 
__u8
 
	t__ß_Ámûy_t
;

80 
__i64
 
	t__time_t
;

81 
__i32
 
	t__uid_t
;

83 
	t__nfds_t
;

84 
	t__sockÀn_t
;

87 #ifde‡
__GNUC__


88 
__buûtö_va_li°
 
	t__va_li°
;

	@test/os161/kern/include/kern/unistd.h

30 #i‚de‡
_KERN_UNISTD_H_


31 
	#_KERN_UNISTD_H_


	)

34 
	#STDIN_FILENO
 0

	)

35 
	#STDOUT_FILENO
 1

	)

36 
	#STDERR_FILENO
 2

	)

	@test/os161/kern/include/kern/wait.h

30 #i‚de‡
_KERN_WAIT_H_


31 
	#_KERN_WAIT_H_


	)

39 
	#WNOHANG
 1

	)

40 
	#WUNTRACED
 2

	)

43 
	#WAIT_ANY
 (-1Ë

	)

44 
	#WAIT_MYPGRP
 0

	)

54 
	#_WWHAT
(
x
Ë((x)&3Ë

	)

55 
	#_WVAL
(
x
Ë((x)>>2Ë

	)

56 
	#_MKWVAL
(
x
Ë((x)<<2Ë

	)

59 
	#__WEXITED
 0

	)

60 
	#__WSIGNALED
 1

	)

61 
	#__WCORED
 2

	)

62 
	#__WSTOPPED
 3

	)

65 
	#WIFEXITED
(
x
Ë(
	`_WWHAT
(x)==
__WEXITED
)

	)

66 
	#WIFSIGNALED
(
x
Ë(
	`_WWHAT
(x)==
__WSIGNALED
 || _WWHAT(x)==
__WCORED
)

	)

67 
	#WIFSTOPPED
(
x
Ë(
	`_WWHAT
(x)==
__WSTOPPED
)

	)

68 
	#WEXITSTATUS
(
x
Ë(
	`_WVAL
(x))

	)

69 
	#WTERMSIG
(
x
Ë(
	`_WVAL
(x))

	)

70 
	#WSTOPSIG
(
x
Ë(
	`_WVAL
(x))

	)

71 
	#WCOREDUMP
(
x
Ë(
	`_WWHAT
(x)==
__WCORED
)

	)

74 
	#_MKWAIT_EXIT
(
x
Ë(
	`_MKWVAL
(x)|
__WEXITED
)

	)

75 
	#_MKWAIT_SIG
(
x
Ë(
	`_MKWVAL
(x)|
__WSIGNALED
)

	)

76 
	#_MKWAIT_CORE
(
x
Ë(
	`_MKWVAL
(x)|
__WCORED
)

	)

77 
	#_MKWAIT_STOP
(
x
Ë(
	`_MKWVAL
(x)|
__WSTOPPED
)

	)

	@test/os161/kern/include/lib.h

30 #i‚de‡
_LIB_H_


31 
	#_LIB_H_


	)

41 
	~<cdefs.h
>

60 
	~"›t-nﬂs£πs.h
"

62 #i‡
OPT_NOASSERTS


63 
	#KASSERT
(
ex¥
Ë(()”x¥))

	)

65 
	#KASSERT
(
ex¥
) \

66 ((
ex¥
Ë? ()0 : 
	`badas£π
(#ex¥, 
__FILE__
, 
__LINE__
, 
__func__
))

	)

70 
	#DEBUGASSERT
(
ex¥
Ë(()”x¥))

	)

72 
	#DEBUGASSERT
(
ex¥
) \

73 ((
ex¥
Ë? ()0 : 
	`badas£π
(#ex¥, 
__FILE__
, 
__LINE__
, 
__func__
))

	)

79 
	#DB_LOCORE
 0x0001

	)

80 
	#DB_SYSCALL
 0x0002

	)

81 
	#DB_INTERRUPT
 0x0004

	)

82 
	#DB_DEVICE
 0x0008

	)

83 
	#DB_THREADS
 0x0010

	)

84 
	#DB_VM
 0x0020

	)

85 
	#DB_EXEC
 0x0040

	)

86 
	#DB_VFS
 0x0080

	)

87 
	#DB_SFS
 0x0100

	)

88 
	#DB_NET
 0x0200

	)

89 
	#DB_NETFS
 0x0400

	)

90 
	#DB_KMALLOC
 0x0800

	)

91 
	#DB_SYNCPROB
 0x1000

	)

93 
uöt32_t
 
dbÊags
;

111 
	#DEBUG
(
d
, ...Ë((
dbÊags
 & (d)Ë? 
	`k¥ötf
(
__VA_ARGS__
Ë: 0)

	)

118 
	#RANDOM_MAX
 (
	`øndmax
())

	)

119 
uöt32_t
 
øndmax
();

120 
uöt32_t
 
øndom
();

126 *
kmÆloc
(
size_t
 
size
);

127 
k‰ì
(*
±r
);

128 
khóp_¥öt°©s
();

136 
size_t
 
°æí
(c⁄° *
°r
);

137 
°rcmp
(c⁄° *
°r1
, c⁄° *
°r2
);

138 *
°r˝y
(*
de°
, c⁄° *
§c
);

139 *
°rˇt
(*
de°
, c⁄° *
§c
);

140 *
k°rdup
(c⁄° *
°r
);

141 *
°rchr
(c⁄° *
£¨ched
, 
£¨chf‹
);

142 *
°ºchr
(c⁄° *
£¨ched
, 
£¨chf‹
);

143 *
°πok_r
(*
buf
, c⁄° *
£ps
, **
c⁄ãxt
);

145 *
mem˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
Àn
);

146 *
memmove
(*
de°
, c⁄° *
§c
, 
size_t
 
Àn
);

147 
bzîo
(*
±r
, 
size_t
 
Àn
);

148 
©oi
(c⁄° *
°r
);

150 
	$¢¥ötf
(*
buf
, 
size_t
 
maxÀn
, c⁄° *
fmt
, ...Ë
	`__PF
(3,4);

152 c⁄° *
	`°ªº‹
(
îrcode
);

161 
	`putch
(
ch
);

162 
	`putch_¥ï¨e
();

163 
	`putch_com∂ëe
();

164 
	`gëch
();

165 
	`bìp
();

180 
	$k¥ötf
(c⁄° *
f‹m©
, ...Ë
	`__PF
(1,2);

181 
	$∑nic
(c⁄° *
f‹m©
, ...Ë
	`__PF
(1,2);

182 
	`badas£π
(c⁄° *
ex¥
, c⁄° *
fûe
, 
löe
, c⁄° *
func
);

184 
	`kgës
(*
buf
, 
size_t
 
maxbuÊí
);

186 
	`k¥ötf_boŸ°øp
();

192 
	#DIVROUNDUP
(
a
,
b
Ë((◊)+(b)-1)/(b))

	)

193 
	#ROUNDUP
(
a
,
b
Ë(
	`DIVROUNDUP
◊,b)*b)

	)

	@test/os161/kern/include/limits.h

30 #i‚de‡
_LIMITS_H_


31 
	#_LIMITS_H_


	)

38 
	~<kîn/limôs.h
>

41 
	#NAME_MAX
 
__NAME_MAX


	)

42 
	#PATH_MAX
 
__PATH_MAX


	)

43 
	#ARG_MAX
 
__ARG_MAX


	)

44 
	#PID_MIN
 
__PID_MIN


	)

45 
	#PID_MAX
 
__PID_MAX


	)

46 
	#PIPE_BUF
 
__PIPE_BUF


	)

47 
	#NGROUPS_MAX
 
__NGROUPS_MAX


	)

48 
	#LOGIN_NAME_MAX
 
__LOGIN_NAME_MAX


	)

49 
	#OPEN_MAX
 
__OPEN_MAX


	)

50 
	#IOV_MAX
 
__IOV_MAX


	)

	@test/os161/kern/include/mainbus.h

30 #i‚de‡
_MAINBUS_H_


31 
	#_MAINBUS_H_


	)

38 
	g˝u
;

39 
	gå≠‰ame
;

43 
maöbus_boŸ°øp
();

46 
maöbus_°¨t_˝us
();

49 
maöbus_öãºu±
(
å≠‰ame
 *);

53 
size_t
 
maöbus_ømsize
();

56 
maöbus_£nd_ùi
(
˝u
 *
èrgë
);

64 
maöbus_hÆt
();

65 
maöbus_powîoff
();

66 
maöbus_ªboŸ
();

67 
maöbus_∑nic
();

	@test/os161/kern/include/proc.h

30 #i‚de‡
_PROC_H_


31 
	#_PROC_H_


	)

39 
	~<•ölock.h
>

40 
	~<thªad.h
>

42 
	gaddr•a˚
;

43 
	gvnode
;

44 #ifde‡
UW


45 
	g£m≠h‹e
;

51 
	s¥oc
 {

52 *
	mp_«me
;

53 
•ölock
 
	mp_lock
;

54 
thªad¨øy
 
	mp_thªads
;

57 
addr•a˚
 *
	mp_addr•a˚
;

60 
vnode
 *
	mp_cwd
;

62 #ifde‡
UW


68 
vnode
 *
	mc⁄sﬁe
;

75 
¥oc
 *
k¥oc
;

78 #ifde‡
UW


79 
£m≠h‹e
 *
no_¥oc_£m
;

83 
¥oc_boŸ°øp
();

86 
¥oc
 *
¥oc_¸óã_ru≈rogøm
(c⁄° *
«me
);

89 
¥oc_de°roy
(
¥oc
 *proc);

92 
¥oc_addthªad
(
¥oc
 *¥oc, 
thªad
 *
t
);

95 
¥oc_ªmthªad
(
thªad
 *
t
);

98 
addr•a˚
 *
cuΩroc_gëas
();

101 
addr•a˚
 *
cuΩroc_£ès
(addrspace *);

	@test/os161/kern/include/queue.h

1 #i‚de‡
_QUEUE_H_


2 
	#_QUEUE_H_


	)

26 
	gqueue
;

28 
queue
 *
q_¸óã
(
size
);

29 
q_¥óŒoˇã
(
queue
 *, 
size
);

30 
q_em±y
(
queue
 *);

31 
q_addèû
(
queue
 *, *
±r
);

32 *
q_ªmhód
(
queue
 *);

33 
q_de°roy
(
queue
 *);

34 *
q_≥ek
(
queue
 *
q
);

35 
q_Àn
(
queue
 *
theq
);

57 
q_gë°¨t
(
queue
 *);

58 
q_gëíd
(
queue
 *);

59 
q_gësize
(
queue
 *);

60 *
q_gëguy
(
queue
 *, 
ödex
);

	@test/os161/kern/include/setjmp.h

30 #i‚de‡
_SETJMP_H_


31 
	#_SETJMP_H_


	)

38 
	~<kîn/machöe/£tjmp.h
>

40 
£tjmp
(
jmp_buf
 
jb
);

41 
l⁄gjmp
(
jmp_buf
 
jb
, 
ªtvÆ
);

	@test/os161/kern/include/sfs.h

30 #i‚de‡
_SFS_H_


31 
	#_SFS_H_


	)

42 
	~<fs.h
>

43 
	~<vnode.h
>

49 
	~<kîn/sfs.h
>

51 
	ssfs_vnode
 {

52 
vnode
 
	msv_v
;

53 
sfs_öode
 
	msv_i
;

54 
uöt32_t
 
	msv_öo
;

55 
boﬁ
 
	msv_dúty
;

58 
	ssfs_fs
 {

59 
fs
 
	msfs_absfs
;

60 
sfs_su≥r
 
	msfs_su≥r
;

61 
boﬁ
 
	msfs_su≥rdúty
;

62 
devi˚
 *
	msfs_devi˚
;

63 
vnodóºay
 *
	msfs_vnodes
;

64 
bôm≠
 *
	msfs_‰ìm≠
;

65 
boﬁ
 
	msfs_‰ìm≠dúty
;

71 
sfs_mou¡
(c⁄° *
devi˚
);

79 
	#SFSUIO
(
iov
, 
uio
, 
±r
, 
block
, 
rw
) \

80 
	`uio_köô
(
iov
, 
uio
, 
±r
, 
SFS_BLOCKSIZE
, ((
off_t
)(
block
))*SFS_BLOCKSIZE, 
rw
)

	)

83 
sfs_rwblock
(
sfs_fs
 *
sfs
, 
uio
 *uio);

84 
sfs_rblock
(
sfs_fs
 *
sfs
, *
d©a
, 
uöt32_t
 
block
);

85 
sfs_wblock
(
sfs_fs
 *
sfs
, *
d©a
, 
uöt32_t
 
block
);

88 
vnode
 *
sfs_gëroŸ
(
fs
 *fs);

	@test/os161/kern/include/signal.h

30 #i‚de‡
_SIGNAL_H_


31 
	#_SIGNAL_H_


	)

35 
	~<kîn/machöe/sig«l.h
>

36 
	~<kîn/sig«l.h
>

	@test/os161/kern/include/spinlock.h

30 #i‚de‡
_SPINLOCK_H_


31 
	#_SPINLOCK_H_


	)

38 
	~<cdefs.h
>

41 #i‚de‡
SPINLOCK_INLINE


42 
	#SPINLOCK_INLINE
 
INLINE


	)

46 
	~<machöe/•ölock.h
>

57 
	s•ölock
 {

58 vﬁ©ûê
•ölock_d©a_t
 
	mlk_lock
;

59 
˝u
 *
	mlk_hﬁdî
;

65 
	#SPINLOCK_INITIALIZER
 { 
SPINLOCK_DATA_INITIALIZER
, 
NULL
 }

	)

79 
•ölock_öô
(
•ölock
 *
lk
);

80 
•ölock_˛ónup
(
•ölock
 *
lk
);

82 
•ölock_acquúe
(
•ölock
 *
lk
);

83 
•ölock_ªÀa£
(
•ölock
 *
lk
);

85 
boﬁ
 
•ölock_do_i_hﬁd
(
•ölock
 *
lk
);

	@test/os161/kern/include/spl.h

30 #i‚de‡
_SPL_H_


31 
	#_SPL_H_


	)

33 
	~<cdefs.h
>

65 
•l0
();

66 
•lhigh
();

67 
•lx
();

72 
	#IPL_NONE
 0

	)

73 
	#IPL_HIGH
 1

	)

84 
•Ãai£
(
ﬁdùl
, 
√wùl
);

85 
•Œowî
(
ﬁdùl
, 
√wùl
);

90 #i‚de‡
SPL_INLINE


91 
	#SPL_INLINE
 
INLINE


	)

94 
SPL_INLINE


96 
	$•l0
()

98  
	`•lx
(
IPL_NONE
);

99 
	}
}

101 
SPL_INLINE


103 
	$•lhigh
()

105  
	`•lx
(
IPL_HIGH
);

106 
	}
}

	@test/os161/kern/include/stat.h

30 #i‚de‡
_STAT_H_


31 
	#_STAT_H_


	)

34 
	~<kîn/°©.h
>

37 
	~<kîn/°©ty≥s.h
>

40 
	#S_IFMT
 
_S_IFMT


	)

41 
	#S_IFREG
 
_S_IFREG


	)

42 
	#S_IFDIR
 
_S_IFDIR


	)

43 
	#S_IFLNK
 
_S_IFLNK


	)

44 
	#S_IFIFO
 
_S_IFIFO


	)

45 
	#S_IFSOCK
 
_S_IFSOCK


	)

46 
	#S_IFCHR
 
_S_IFCHR


	)

47 
	#S_IFBLK
 
_S_IFBLK


	)

	@test/os161/kern/include/stdarg.h

30 #i‚de‡
_STDARG_H_


31 
	#_STDARG_H_


	)

35 
	~<cdefs.h
>

43 #ifde‡
__GNUC__


44 
__va_li°
 
	tva_li°
;

46 
	#va_°¨t
(
≠
, 
fmt
Ë
	`__buûtö_°d¨g_°¨t
◊p, fmt)

	)

47 
	#va_¨g
(
≠
,
t
Ë
	`__buûtö_va_¨g
◊p,Å)

	)

48 
	#va_c›y
(
≠1
, 
≠2
Ë
	`__buûtö_va_c›y
◊p1,áp2)

	)

49 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

59 
	$vk¥ötf
(c⁄° *
fmt
, 
va_li°
 
≠
Ë
	`__PF
(1,0);

60 
	$v¢¥ötf
(*
buf
, 
size_t
 
maxÀn
, c⁄° *
fmt
, 
va_li°
 
≠
Ë
	`__PF
(3,0);

69 
	`__v¥ötf
((*
func
)(*
˛õ¡d©a
, c⁄° *
°r
, 
size_t
 
Àn
),

70 *
˛õ¡d©a
, c⁄° *
f‹m©
, 
va_li°
 
≠
Ë
	`__PF
(3,0);

	@test/os161/kern/include/synch.h

30 #i‚de‡
_SYNCH_H_


31 
	#_SYNCH_H_


	)

38 
	~<•ölock.h
>

46 
	s£m≠h‹e
 {

47 *
	m£m_«me
;

48 
wch™
 *
	m£m_wch™
;

49 
•ölock
 
	m£m_lock
;

50 vﬁ©ûê
	m£m_cou¡
;

53 
£m≠h‹e
 *
£m_¸óã
(c⁄° *
«me
, 
öôül_cou¡
);

54 
£m_de°roy
(
£m≠h‹e
 *);

62 
P
(
£m≠h‹e
 *);

63 
V
(
£m≠h‹e
 *);

75 
	slock
 {

76 *
	mlk_«me
;

81 
lock
 *
lock_¸óã
(c⁄° *
«me
);

82 
lock_acquúe
(
lock
 *);

95 
lock_ªÀa£
(
lock
 *);

96 
boﬁ
 
lock_do_i_hﬁd
(
lock
 *);

97 
lock_de°roy
(
lock
 *);

114 
	scv
 {

115 *
	mcv_«me
;

120 
cv
 *
cv_¸óã
(c⁄° *
«me
);

121 
cv_de°roy
(
cv
 *);

136 
cv_waô
(
cv
 *cv, 
lock
 *lock);

137 
cv_sig«l
(
cv
 *cv, 
lock
 *lock);

138 
cv_brﬂdˇ°
(
cv
 *cv, 
lock
 *lock);

	@test/os161/kern/include/synchprobs.h

1 #i‚de‡
_SYNCHPROBS_H_


2 
	#_SYNCHPROBS_H_


	)

6 
ˇt_bef‹e_ótög
(
bowl
);

7 
ˇt_a·î_ótög
(
bowl
);

8 
mou£_bef‹e_ótög
(
bowl
);

9 
mou£_a·î_ótög
(
bowl
);

10 
ˇtmou£_sync_öô
(
bowls
);

11 
ˇtmou£_sync_˛ónup
(
bowls
);

	@test/os161/kern/include/syscall.h

30 #i‚de‡
_SYSCALL_H_


31 
	#_SYSCALL_H_


	)

34 
	gå≠‰ame
;

40 
sysˇŒ
(
å≠‰ame
 *
tf
);

47 
íãr_f‹ked_¥o˚ss
(
å≠‰ame
 *
tf
);

50 
íãr_√w_¥o˚ss
(
¨gc
, 
u£Ωå_t
 
¨gv
, 
vaddr_t
 
°ack±r
,

51 
vaddr_t
 
íåypoöt
);

58 
sys_ªboŸ
(
code
);

59 
sys___time
(
u£Ωå_t
 
u£r_£c⁄ds
, u£Ωå_à
u£r_«no£c⁄ds
);

61 #ifde‡
UW


62 
sys_wrôe
(
fdesc
,
u£Ωå_t
 
ubuf
,
nbyãs
,*
ªtvÆ
);

63 
sys__exô
(
exôcode
);

64 
sys_gëpid
(
pid_t
 *
ªtvÆ
);

65 
sys_waôpid
(
pid_t
 
pid
, 
u£Ωå_t
 
°©us
, 
›ti⁄s
,Öid_à*
ªtvÆ
);

	@test/os161/kern/include/test.h

30 #i‚de‡
_TEST_H_


31 
	#_TEST_H_


	)

40 
whÆem©ög
(, **);

42 #ifde‡
UW


43 
ˇtmou£
(, **);

51 
¨øyã°
(, **);

52 
bôm≠ã°
(, **);

53 
queuëe°
(, **);

56 
thªadã°
(, **);

57 
thªadã°2
(, **);

58 
thªadã°3
(, **);

59 
£mã°
(, **);

60 
lockã°
(, **);

61 
cvã°
(, **);

63 #ifde‡
UW


65 
uwlockã°1
(, **);

67 
uwvm°©°e°
(, **);

71 
f°e°
(, **);

72 
ªad°ªss
(, **);

73 
wrôe°ªss
(, **);

74 
wrôe°ªss2
(, **);

75 
¸óã°ªss
(, **);

76 
¥ötfûe
(, **);

79 
mÆlo˘e°
(, **);

80 
mÆloc°ªss
(, **);

81 
√âe°
(, **);

84 
ru≈rogøm
(*
¥og«me
);

87 
míu
(*
¨g°r
);

90 
kmaö
(*
boŸ°rög
);

	@test/os161/kern/include/thread.h

30 #i‚de‡
_THREAD_H_


31 
	#_THREAD_H_


	)

39 
	~<¨øy.h
>

40 
	~<•ölock.h
>

41 
	~<thªadli°.h
>

43 
	g˝u
;

46 
	~<machöe/thªad.h
>

50 
	#STACK_SIZE
 4096

	)

53 
	#STACK_MASK
 (~(
vaddr_t
)(
STACK_SIZE
-1))

	)

56 
	#SAME_STACK
(
p1
, 
p2
Ë((’1Ë& 
STACK_MASK
Ë=(’2Ë& STACK_MASK))

	)

61 
	mS_RUN
,

62 
	mS_READY
,

63 
	mS_SLEEP
,

64 
	mS_ZOMBIE
,

65 } 
	tthªad°©e_t
;

68 
	sthªad
 {

73 *
	mt_«me
;

74 c⁄° *
	mt_wch™_«me
;

75 
thªad°©e_t
 
	mt_°©e
;

80 
thªad_machdï
 
	mt_machdï
;

81 
thªadli°node
 
	mt_li°node
;

82 *
	mt_°ack
;

83 
swôch‰ame
 *
	mt_c⁄ãxt
;

84 
˝u
 *
	mt_˝u
;

85 
¥oc
 *
	mt_¥oc
;

100 
boﬁ
 
	mt_ö_öãºu±
;

101 
	mt_cur•l
;

102 
	mt_ùlhigh_cou¡
;

114 #i‚de‡
THREADINLINE


115 
	#THREADINLINE
 
INLINE


	)

118 
DECLARRAY
(
thªad
);

119 
DEFARRAY
(
thªad
, 
THREADINLINE
);

122 
thªad_boŸ°øp
();

125 
thªad_°¨t_˝us
();

128 
thªad_∑nic
();

131 
thªad_shutdown
();

143 
thªad_f‹k
(c⁄° *
«me
, 
¥oc
 *proc,

144 (*
func
)(*, ),

145 *
d©a1
, 
d©a2
);

151 
	`thªad_exô
();

158 
	`thªad_yõld
();

163 
	`scheduÀ
();

169 
	`thªad_c⁄sidî_migøti⁄
();

	@test/os161/kern/include/threadlist.h

30 #i‚de‡
_THREADLIST_H_


31 
	#_THREADLIST_H_


	)

34 
	gthªad
;

53 
	sthªadli°node
 {

54 
thªadli°node
 *
	mén_¥ev
;

55 
thªadli°node
 *
	mén_√xt
;

56 
thªad
 *
	mén_£lf
;

59 
	sthªadli°
 {

60 
thªadli°node
 
	mé_hód
;

61 
thªadli°node
 
	mé_èû
;

62 
	mé_cou¡
;

66 
thªadli°node_öô
(
thªadli°node
 *
én
, 
thªad
 *
£lf
);

67 
thªadli°node_˛ónup
(
thªadli°node
 *
én
);

70 
thªadli°_öô
(
thªadli°
 *
é
);

71 
thªadli°_˛ónup
(
thªadli°
 *
é
);

74 
boﬁ
 
thªadli°_i£m±y
(
thªadli°
 *
é
);

77 
thªadli°_addhód
(
thªadli°
 *
é
, 
thªad
 *
t
);

78 
thªadli°_addèû
(
thªadli°
 *
é
, 
thªad
 *
t
);

79 
thªad
 *
thªadli°_ªmhód
(
thªadli°
 *
é
);

80 
thªad
 *
thªadli°_ªmèû
(
thªadli°
 *
é
);

83 
thªadli°_ö£πa·î
(
thªadli°
 *
é
,

84 
thªad
 *
⁄li°
, thªad *
addì
);

85 
thªadli°_ö£πbef‹e
(
thªadli°
 *
é
,

86 
thªad
 *
addì
, thªad *
⁄li°
);

87 
thªadli°_ªmove
(
thªadli°
 *
é
, 
thªad
 *
t
);

90 
	#THREADLIST_FORALL
(
ôîv¨
, 
é
) \

91 (
ôîv¨
Ë(
é
).
é_hód
.
én_√xt
->
én_£lf
; \

92 (
ôîv¨
)->
t_li°node
.
én_√xt
 !
NULL
; \

93 (
ôîv¨
Ë(ôîv¨)->
t_li°node
.
én_√xt
->
én_£lf
)

	)

95 
	#THREADLIST_FORALL_REV
(
ôîv¨
, 
é
) \

96 (
ôîv¨
Ë(
é
).
é_èû
.
én_¥ev
->
én_£lf
; \

97 (
ôîv¨
)->
t_li°node
.
én_¥ev
 !
NULL
; \

98 (
ôîv¨
Ë(ôîv¨)->
t_li°node
.
én_¥ev
->
én_£lf
)

	)

	@test/os161/kern/include/threadprivate.h

30 #i‚de‡
_THREADPRIVATE_H_


31 
	#_THREADPRIVATE_H_


	)

33 
	gthªad
;

34 
	gthªad_machdï
;

35 
	gswôch‰ame
;

55 
thªad_°¨tup
((*
íåypoöt
)(*
d©a1
, 
d©a2
),

56 *
d©a1
, 
d©a2
);

59 
	`thªad_machdï_öô
(
thªad_machdï
 *
tm
);

60 
	`thªad_machdï_˛ónup
(
thªad_machdï
 *
tm
);

70 
	`swôch‰ame_swôch
(
swôch‰ame
 **
¥ev
, swôch‰amê**
√xt
);

73 
	`swôch‰ame_öô
(
thªad
 *,

74 (*
íåypoöt
)(*
d©a1
, 
d©a2
),

75 *
d©a1
, 
d©a2
);

	@test/os161/kern/include/types.h

30 #i‚de‡
_TYPES_H_


31 
	#_TYPES_H_


	)

80 
	~<kîn/ty≥s.h
>

83 
	~<machöe/ty≥s.h
>

90 
	s__u£Ωå
 { 
	m_dummy
; };

91 
__u£Ωå
 *
	tu£Ωå_t
;

92 c⁄° 
	t__u£Ωå
 *
	tc⁄°_u£Ωå_t
;

100 
__i8
 
	töt8_t
;

101 
__i16
 
	töt16_t
;

102 
__i32
 
	töt32_t
;

103 
__i64
 
	töt64_t
;

104 
__u8
 
	tuöt8_t
;

105 
__u16
 
	tuöt16_t
;

106 
__u32
 
	tuöt32_t
;

107 
__u64
 
	tuöt64_t
;

108 
__size_t
 
	tsize_t
;

109 
__ssize_t
 
	tssize_t
;

110 
__öçå_t
 
	töçå_t
;

111 
__uöçå_t
 
	tuöçå_t
;

112 
__±rdiff_t
 
	t±rdiff_t
;

115 
__blk˙t_t
 
	tblk˙t_t
;

116 
__blksize_t
 
	tblksize_t
;

117 
__daddr_t
 
	tdaddr_t
;

118 
__dev_t
 
	tdev_t
;

119 
__fsid_t
 
	tfsid_t
;

120 
__gid_t
 
	tgid_t
;

121 
__ö_addr_t
 
	tö_addr_t
;

122 
__ö_p‹t_t
 
	tö_p‹t_t
;

123 
__öo_t
 
	töo_t
;

124 
__mode_t
 
	tmode_t
;

125 
__∆ök_t
 
	t∆ök_t
;

126 
__off_t
 
	toff_t
;

127 
__pid_t
 
	tpid_t
;

128 
__æim_t
 
	tæim_t
;

129 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

130 
__time_t
 
	ttime_t
;

131 
__uid_t
 
	tuid_t
;

133 
__nfds_t
 
	tnfds_t
;

134 
__sockÀn_t
 
	tsockÀn_t
;

140 
	#CHAR_BIT
 
__CHAR_BIT


	)

146 
	#NULL
 ((*)0)

	)

151 
_Boﬁ
 
	tboﬁ
;

152 
	#åue
 1

	)

153 
	#Ál£
 0

	)

	@test/os161/kern/include/uio.h

30 #i‚de‡
_UIO_H_


31 
	#_UIO_H_


	)

40 
	~<kîn/iovec.h
>

43 
	euio_rw
 {

44 
	mUIO_READ
,

45 
	mUIO_WRITE
,

49 
	euio_£g
 {

50 
	mUIO_USERISPACE
,

51 
	mUIO_USERSPACE
,

52 
	mUIO_SYSSPACE
,

55 
	suio
 {

56 
iovec
 *
	muio_iov
;

57 
	muio_iov˙t
;

58 
off_t
 
	muio_off£t
;

59 
size_t
 
	muio_ªsid
;

60 
uio_£g
 
	muio_£gÊg
;

61 
uio_rw
 
	muio_rw
;

62 
addr•a˚
 *
	muio_•a˚
;

100 
uiomove
(*
kbuf„r
, 
size_t
 
Àn
, 
uio
 *uio);

105 
uiomovezîos
(
size_t
 
Àn
, 
uio
 *uio);

119 
uio_köô
(
iovec
 *, 
uio
 *,

120 *
kbuf
, 
size_t
 
Àn
, 
off_t
 
pos
, 
uio_rw
 
rw
);

	@test/os161/kern/include/uw-vmstats.h

1 #i‚de‡
VM_STATS_H


2 
	#VM_STATS_H


	)

29 
	#VMSTAT_TLB_FAULT
 (0)

	)

30 
	#VMSTAT_TLB_FAULT_FREE
 (1)

	)

31 
	#VMSTAT_TLB_FAULT_REPLACE
 (2)

	)

32 
	#VMSTAT_TLB_INVALIDATE
 (3)

	)

33 
	#VMSTAT_TLB_RELOAD
 (4)

	)

34 
	#VMSTAT_PAGE_FAULT_ZERO
 (5)

	)

35 
	#VMSTAT_PAGE_FAULT_DISK
 (6)

	)

36 
	#VMSTAT_ELF_FILE_READ
 (7)

	)

37 
	#VMSTAT_SWAP_FILE_READ
 (8)

	)

38 
	#VMSTAT_SWAP_FILE_WRITE
 (9)

	)

39 
	#VMSTAT_COUNT
 (10)

	)

44 
vm°©s_öô
();

45 
_vm°©s_öô
();

52 
vm°©s_öc
(
ödex
);

53 
_vm°©s_öc
(
ödex
);

56 
vm°©s_¥öt
();

	@test/os161/kern/include/version.h

30 #i‚de‡
_VERSION_H_


31 
	#_VERSION_H_


	)

37 
	#BASE_VERSION
 "1.99.05"

	)

42 
	#GROUP_VERSION
 "0"

	)

	@test/os161/kern/include/vfs.h

30 #i‚de‡
_VFS_H_


31 
	#_VFS_H_


	)

34 
	~<¨øy.h
>

44 
	guio
;

45 
	gdevi˚
;

46 
	gfs
;

47 
	gvnode
;

62 
vfs_£tcurdú
(
vnode
 *
dú
);

63 
vfs_˛órcurdú
();

64 
vfs_gëcurdú
(
vnode
 **
ªtdú
);

65 
vfs_sync
();

66 
vfs_gëroŸ
(c⁄° *
dev«me
, 
vnode
 **
ªsu…
);

67 c⁄° *
vfs_gëdev«me
(
fs
 *fs);

80 
vfs_lookup
(*
∑th
, 
vnode
 **
ªsu…
);

81 
vfs_look∑ª¡
(*
∑th
, 
vnode
 **
ªsu…
,

82 *
buf
, 
size_t
 
buÊí
);

104 
vfs_›í
(*
∑th
, 
›íÊags
, 
mode_t
 
mode
, 
vnode
 **
ªt
);

105 
vfs_˛o£
(
vnode
 *
vn
);

106 
vfs_ªadlök
(*
∑th
, 
uio
 *
d©a
);

107 
vfs_symlök
(c⁄° *
c⁄ã¡s
, *
∑th
);

108 
vfs_mkdú
(*
∑th
, 
mode_t
 
mode
);

109 
vfs_lök
(*
ﬁd∑th
, *
√w∑th
);

110 
vfs_ªmove
(*
∑th
);

111 
vfs_rmdú
(*
∑th
);

112 
vfs_ª«me
(*
ﬁd∑th
, *
√w∑th
);

114 
vfs_chdú
(*
∑th
);

115 
vfs_gëcwd
(
uio
 *
buf
);

162 
vfs_boŸ°øp
();

164 
vfs_£tboŸfs
(c⁄° *
f¢ame
);

165 
vfs_˛órboŸfs
();

167 
vfs_adddev
(c⁄° *
dev«me
, 
devi˚
 *
dev
, 
mou¡abÀ
);

168 
vfs_addfs
(c⁄° *
dev«me
, 
fs
 *fs);

170 
vfs_mou¡
(c⁄° *
dev«me
, *
d©a
,

171 (*
mou¡func
)(*
d©a
,

172 
devi˚
 *
dev
,

173 
fs
 **
ªsu…
));

174 
	`vfs_unmou¡
(c⁄° *
dev«me
);

175 
	`vfs_unmou¡Æl
();

180 #i‚de‡
VFSINLINE


181 
	#VFSINLINE
 
INLINE


	)

184 
	`DECLARRAY
(
vnode
);

185 
	`DEFARRAY
(
vnode
, 
VFSINLINE
);

191 
	`vfs_biglock_acquúe
();

192 
	`vfs_biglock_ªÀa£
();

193 
boﬁ
 
	`vfs_biglock_do_i_hﬁd
();

	@test/os161/kern/include/vm.h

30 #i‚de‡
_VM_H_


31 
	#_VM_H_


	)

40 
	~<machöe/vm.h
>

43 
	#VM_FAULT_READ
 0

	)

44 
	#VM_FAULT_WRITE
 1

	)

45 
	#VM_FAULT_READONLY
 2

	)

49 
vm_boŸ°øp
();

52 
vm_Áu…
(
Áu…ty≥
, 
vaddr_t
 
Áu…addªss
);

55 
vaddr_t
 
Æloc_k∑ges
(
≈ages
);

56 
‰ì_k∑ges
(
vaddr_t
 
addr
);

59 
vm_ébshoŸdown_Æl
();

60 
vm_ébshoŸdown
(c⁄° 
ébshoŸdown
 *);

	@test/os161/kern/include/vnode.h

30 #i‚de‡
_VNODE_H_


31 
	#_VNODE_H_


	)

34 
	guio
;

35 
	g°©
;

54 
	svnode
 {

55 
	mvn_ªfcou¡
;

56 
	mvn_›ícou¡
;

58 
fs
 *
	mvn_fs
;

60 *
	mvn_d©a
;

62 c⁄° 
vnode_›s
 *
	mvn_›s
;

193 
	#VOP_MAGIC
 0xa2b3c4d5

	)

195 
	svnode_›s
 {

196 
	mv›_magic
;

198 (*
	mv›_›í
)(
vnode
 *
	mobje˘
, 
	mÊags_‰om_›í
);

199 (*
	mv›_˛o£
)(
vnode
 *
	mobje˘
);

200 (*
	mv›_ª˛aim
)(
vnode
 *
	mvnode
);

203 (*
	mv›_ªad
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

204 (*
	mv›_ªadlök
)(
vnode
 *
	mlök
, 
uio
 *
	muio
);

205 (*
	mv›_gëdúíåy
)(
vnode
 *
	mdú
, 
uio
 *
	muio
);

206 (*
	mv›_wrôe
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

207 (*
	mv›_io˘l
)(
vnode
 *
	mobje˘
, 
	m›
, 
u£Ωå_t
 
	md©a
);

208 (*
	mv›_°©
)(
vnode
 *
	mobje˘
, 
°©
 *
	m°©buf
);

209 (*
	mv›_gëty≥
)(
vnode
 *
	mobje˘
, 
mode_t
 *
	mªsu…
);

210 (*
	mv›_åy£ek
)(
vnode
 *
	mobje˘
, 
off_t
 
	mpos
);

211 (*
	mv›_fsync
)(
vnode
 *
	mobje˘
);

212 (*
	mv›_mm≠
)(
vnode
 *
	mfûe
 );

213 (*
	mv›_åunˇã
)(
vnode
 *
	mfûe
, 
off_t
 
	mÀn
);

214 (*
	mv›_«mefûe
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

217 (*
	mv›_¸ót
)(
vnode
 *
	mdú
,

218 c⁄° *
	m«me
, 
boﬁ
 
	mex˛
, 
mode_t
 
	mmode
,

219 
vnode
 **
	mªsu…
);

220 (*
	mv›_symlök
)(
vnode
 *
	mdú
,

221 c⁄° *
	mc⁄ã¡s
, c⁄° *
	m«me
);

222 (*
	mv›_mkdú
)(
vnode
 *
	m∑ª¡dú
,

223 c⁄° *
	m«me
, 
mode_t
 
	mmode
);

224 (*
	mv›_lök
)(
vnode
 *
	mdú
,

225 c⁄° *
	m«me
, 
vnode
 *
	mfûe
);

226 (*
	mv›_ªmove
)(
vnode
 *
	mdú
,

227 c⁄° *
	m«me
);

228 (*
	mv›_rmdú
)(
vnode
 *
	mdú
,

229 c⁄° *
	m«me
);

231 (*
	mv›_ª«me
)(
vnode
 *
	mvn1
, c⁄° *
	m«me1
,

232 
vnode
 *
	mvn2
, c⁄° *
	m«me2
);

235 (*
	mv›_lookup
)(
vnode
 *
	mdú
,

236 *
	m∑th«me
, 
vnode
 **
	mªsu…
);

237 (*
	mv›_look∑ª¡
)(
vnode
 *
	mdú
,

238 *
	m∑th«me
, 
vnode
 **
	mªsu…
,

239 *
	mbuf
, 
size_t
 
	mÀn
);

242 
	#__VOP
(
vn
, 
sym
Ë(
	`vnode_check
(vn, #sym), (vn)->
vn_›s
->
v›_
##sym)

	)

244 
	#VOP_OPEN
(
vn
, 
Êags
Ë(
	`__VOP
(vn, 
›í
)(vn, fœgs))

	)

245 
	#VOP_CLOSE
(
vn
Ë(
	`__VOP
(vn, 
˛o£
)(vn))

	)

246 
	#VOP_RECLAIM
(
vn
Ë(
	`__VOP
(vn, 
ª˛aim
)(vn))

	)

248 
	#VOP_READ
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
ªad
)(vn, uio))

	)

249 
	#VOP_READLINK
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
ªadlök
)(vn, uio))

	)

250 
	#VOP_GETDIRENTRY
(
vn
, 
uio
Ë(
	`__VOP
(vn,
gëdúíåy
)(vn, uio))

	)

251 
	#VOP_WRITE
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
wrôe
)(vn, uio))

	)

252 
	#VOP_IOCTL
(
vn
, 
code
, 
buf
Ë(
	`__VOP
(vn, 
io˘l
)(vn,code,buf))

	)

253 
	#VOP_STAT
(
vn
, 
±r
Ë(
	`__VOP
(vn, 
°©
)(vn,Öå))

	)

254 
	#VOP_GETTYPE
(
vn
, 
ªsu…
Ë(
	`__VOP
(vn, 
gëty≥
)(vn,Ñesu…))

	)

255 
	#VOP_TRYSEEK
(
vn
, 
pos
Ë(
	`__VOP
(vn, 
åy£ek
)(vn,Öos))

	)

256 
	#VOP_FSYNC
(
vn
Ë(
	`__VOP
(vn, 
fsync
)(vn))

	)

257 
	#VOP_MMAP
(
vn
 ) (
	`__VOP
(vn, 
mm≠
)(v¿ ))

	)

258 
	#VOP_TRUNCATE
(
vn
, 
pos
Ë(
	`__VOP
(vn, 
åunˇã
)(vn,Öos))

	)

259 
	#VOP_NAMEFILE
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
«mefûe
)(vn, uio))

	)

261 
	#VOP_CREAT
(
vn
,
nm
,
ex˛
,
mode
,
ªs
Ë(
	`__VOP
(vn, 
¸ót
)(vn,nm,ex˛,mode,ªs))

	)

262 
	#VOP_SYMLINK
(
vn
, 
«me
, 
c⁄ã¡
Ë(
	`__VOP
(vn, 
symlök
)(vn,Çame, c⁄ã¡))

	)

263 
	#VOP_MKDIR
(
vn
, 
«me
, 
mode
Ë(
	`__VOP
(vn, 
mkdú
)(vn,Çame, mode))

	)

264 
	#VOP_LINK
(
vn
, 
«me
, 
vn2
Ë(
	`__VOP
(vn, 
lök
)(vn,Çame, vn2))

	)

265 
	#VOP_REMOVE
(
vn
, 
«me
Ë(
	`__VOP
(vn, 
ªmove
)(vn,Çame))

	)

266 
	#VOP_RMDIR
(
vn
, 
«me
Ë(
	`__VOP
(vn, 
rmdú
)(vn,Çame))

	)

267 
	#VOP_RENAME
(
vn1
,
«me1
,
vn2
,
«me2
)(
	`__VOP
(vn1,
ª«me
)(vn1,«me1,vn2,«me2))

	)

269 
	#VOP_LOOKUP
(
vn
, 
«me
, 
ªs
Ë(
	`__VOP
(vn, 
lookup
)(vn,Çame,Ñes))

	)

270 
	#VOP_LOOKPARENT
(
vn
,
nm
,
ªs
,
bf
,
 
Ë(
	`__VOP
(vn,
look∑ª¡
)(vn,nm,ªs,bf, ))

	)

275 
vnode_check
(
vnode
 *, c⁄° *
›
);

280 
vnode_ö¸ef
(
vnode
 *);

281 
vnode_de¸ef
(
vnode
 *);

283 
	#VOP_INCREF
(
vn
Ë
	`vnode_ö¸ef
(vn)

	)

284 
	#VOP_DECREF
(
vn
Ë
	`vnode_de¸ef
(vn)

	)

292 
vnode_öc›í
(
vnode
 *);

293 
vnode_dec›í
(
vnode
 *);

295 
	#VOP_INCOPEN
(
vn
Ë
	`vnode_öc›í
(vn)

	)

296 
	#VOP_DECOPEN
(
vn
Ë
	`vnode_dec›í
(vn)

	)

302 
vnode_öô
(
vnode
 *, c⁄° 
vnode_›s
 *
›s
,

303 
fs
 *fs, *
fsd©a
);

305 
	#VOP_INIT
(
vn
, 
›s
, 
fs
, 
d©a
Ë
	`vnode_öô
(vn, ops, fs, d©a)

	)

311 
vnode_˛ónup
(
vnode
 *);

313 
	#VOP_CLEANUP
(
vn
Ë
	`vnode_˛ónup
(vn)

	)

	@test/os161/kern/include/wchan.h

30 #i‚de‡
_WCHAN_H_


31 
	#_WCHAN_H_


	)

38 
	gwch™
;

45 
wch™
 *
wch™_¸óã
(c⁄° *
«me
);

50 
wch™_de°roy
(
wch™
 *
wc
);

56 
boﬁ
 
wch™_i£m±y
(
wch™
 *
wc
);

61 
wch™_lock
(
wch™
 *
wc
);

62 
wch™_u∆ock
(
wch™
 *
wc
);

72 
wch™_¶ìp
(
wch™
 *
wc
);

81 
wch™_wake⁄e
(
wch™
 *
wc
);

82 
wch™_wakóŒ
(
wch™
 *
wc
);

	@test/os161/kern/lib/array.c

30 
	#ARRAYINLINE


	)

32 
	~<ty≥s.h
>

33 
	~<kîn/î∫o.h
>

34 
	~<lib.h
>

35 
	~<¨øy.h
>

37 
¨øy
 *

38 
	$¨øy_¸óã
()

40 
¨øy
 *
a
;

42 
a
 = 
	`kmÆloc
((*a));

43 i‡(
a
 !
NULL
) {

44 
	`¨øy_öô
(
a
);

46  
a
;

47 
	}
}

50 
	$¨øy_de°roy
(
¨øy
 *
a
)

52 
	`¨øy_˛ónup
(
a
);

53 
	`k‰ì
(
a
);

54 
	}
}

57 
	$¨øy_öô
(
¨øy
 *
a
)

59 
a
->
num
 =á->
max
 = 0;

60 
a
->
v
 = 
NULL
;

61 
	}
}

64 
	$¨øy_˛ónup
(
¨øy
 *
a
)

71 
	`ARRAYASSERT
(
a
->
num
 == 0);

72 
	`k‰ì
(
a
->
v
);

73 #ifde‡
ARRAYS_CHECKED


74 
a
->
v
 = 
NULL
;

76 
	}
}

79 
	$¨øy_£tsize
(
¨øy
 *
a
, 
num
)

81 **
√w±r
;

82 
√wmax
;

84 i‡(
num
 > 
a
->
max
) {

86 
√wmax
 = 
a
->
max
;

87 
num
 > 
√wmax
) {

88 
√wmax
 =Çewmax ?Çewmax*2 : 4;

98 
√w±r
 = 
	`kmÆloc
(
√wmax
*(*
a
->
v
));

99 i‡(
√w±r
 =
NULL
) {

100  
ENOMEM
;

102 
	`mem˝y
(
√w±r
, 
a
->
v
,á->
num
*(*a->v));

103 
	`k‰ì
(
a
->
v
);

104 
a
->
v
 = 
√w±r
;

105 
a
->
max
 = 
√wmax
;

107 
a
->
num
 =Çum;

110 
	}
}

113 
	$¨øy_ªmove
(
¨øy
 *
a
, 
ödex
)

115 
num_to_move
;

117 
	`ARRAYASSERT
(
a
->
num
 <a->
max
);

118 
	`ARRAYASSERT
(
ödex
 < 
a
->
num
);

120 
num_to_move
 = 
a
->
num
 - (
ödex
 + 1);

121 
	`memmove
(
a
->
v
 + 
ödex
,á->v + index+1, 
num_to_move
*(*));

122 
a
->
num
--;

123 
	}
}

	@test/os161/kern/lib/bitmap.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<lib.h
>

37 
	~<bôm≠.h
>

46 
	#BITS_PER_WORD
 (
CHAR_BIT
)

	)

47 
	#WORD_TYPE
 

	)

48 
	#WORD_ALLBITS
 (0xff)

	)

50 
	sbôm≠
 {

51 
	mnbôs
;

52 
WORD_TYPE
 *
	mv
;

56 
bôm≠
 *

57 
	$bôm≠_¸óã
(
nbôs
)

59 
bôm≠
 *
b
;

60 
w‹ds
;

62 
w‹ds
 = 
	`DIVROUNDUP
(
nbôs
, 
BITS_PER_WORD
);

63 
b
 = 
	`kmÆloc
((
bôm≠
));

64 i‡(
b
 =
NULL
) {

65  
NULL
;

67 
b
->
v
 = 
	`kmÆloc
(
w‹ds
*(
WORD_TYPE
));

68 i‡(
b
->
v
 =
NULL
) {

69 
	`k‰ì
(
b
);

70  
NULL
;

73 
	`bzîo
(
b
->
v
, 
w‹ds
*(
WORD_TYPE
));

74 
b
->
nbôs
 =Çbits;

77 i‡(
w‹ds
 > 
nbôs
 / 
BITS_PER_WORD
) {

78 
j
, 
ix
 = 
w‹ds
-1;

79 
ovîbôs
 = 
nbôs
 - 
ix
*
BITS_PER_WORD
;

81 
	`KASSERT
(
nbôs
 / 
BITS_PER_WORD
 =
w‹ds
-1);

82 
	`KASSERT
(
ovîbôs
 > 0 && ovîbô†< 
BITS_PER_WORD
);

84 
j
=
ovîbôs
; j<
BITS_PER_WORD
; j++) {

85 
b
->
v
[
ix
] |((
WORD_TYPE
)1 << 
j
);

89  
b
;

90 
	}
}

93 
	$bôm≠_gëd©a
(
bôm≠
 *
b
)

95  
b
->
v
;

96 
	}
}

99 
	$bôm≠_Æloc
(
bôm≠
 *
b
, *
ödex
)

101 
ix
;

102 
maxix
 = 
	`DIVROUNDUP
(
b
->
nbôs
, 
BITS_PER_WORD
);

103 
off£t
;

105 
ix
=0; ix<
maxix
; ix++) {

106 i‡(
b
->
v
[
ix
]!=
WORD_ALLBITS
) {

107 
off£t
 = 0; off£à< 
BITS_PER_WORD
; offset++) {

108 
WORD_TYPE
 
mask
 = ((WORD_TYPE)1Ë<< 
off£t
;

110 i‡((
b
->
v
[
ix
] & 
mask
)==0) {

111 
b
->
v
[
ix
] |
mask
;

112 *
ödex
 = (
ix
*
BITS_PER_WORD
)+
off£t
;

113 
	`KASSERT
(*
ödex
 < 
b
->
nbôs
);

117 
	`KASSERT
(0);

120  
ENOSPC
;

121 
	}
}

124 
ölöe


126 
	$bôm≠_å™¶©e
(
bôno
, *
ix
, 
WORD_TYPE
 *
mask
)

128 
off£t
;

129 *
ix
 = 
bôno
 / 
BITS_PER_WORD
;

130 
off£t
 = 
bôno
 % 
BITS_PER_WORD
;

131 *
mask
 = ((
WORD_TYPE
)1Ë<< 
off£t
;

132 
	}
}

135 
	$bôm≠_m¨k
(
bôm≠
 *
b
, 
ödex
)

137 
ix
;

138 
WORD_TYPE
 
mask
;

140 
	`KASSERT
(
ödex
 < 
b
->
nbôs
);

141 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

143 
	`KASSERT
((
b
->
v
[
ix
] & 
mask
)==0);

144 
b
->
v
[
ix
] |
mask
;

145 
	}
}

148 
	$bôm≠_unm¨k
(
bôm≠
 *
b
, 
ödex
)

150 
ix
;

151 
WORD_TYPE
 
mask
;

153 
	`KASSERT
(
ödex
 < 
b
->
nbôs
);

154 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

156 
	`KASSERT
((
b
->
v
[
ix
] & 
mask
)!=0);

157 
b
->
v
[
ix
] &~
mask
;

158 
	}
}

162 
	$bôm≠_is£t
(
bôm≠
 *
b
, 
ödex
)

164 
ix
;

165 
WORD_TYPE
 
mask
;

167 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

168  (
b
->
v
[
ix
] & 
mask
);

169 
	}
}

172 
	$bôm≠_de°roy
(
bôm≠
 *
b
)

174 
	`k‰ì
(
b
->
v
);

175 
	`k‰ì
(
b
);

176 
	}
}

	@test/os161/kern/lib/bswap.c

30 
	~<ty≥s.h
>

31 
	~<ídün.h
>

46 
uöt16_t


47 
	$bsw≠16
(
uöt16_t
 
vÆ
)

49  ((
vÆ
 & 0x00ff) << 8)

50 | ((
vÆ
 & 0xff00) >> 8);

51 
	}
}

53 
uöt32_t


54 
	$bsw≠32
(
uöt32_t
 
vÆ
)

56  ((
vÆ
 & 0x000000ff) << 24)

57 | ((
vÆ
 & 0x0000ff00) << 8)

58 | ((
vÆ
 & 0x00ff0000) >> 8)

59 | ((
vÆ
 & 0xff000000) >> 24);

60 
	}
}

62 
uöt64_t


63 
	$bsw≠64
(
uöt64_t
 
vÆ
)

65  ((
vÆ
 & 0x00000000000000ff) << 56)

66 | ((
vÆ
 & 0x000000000000ff00) << 40)

67 | ((
vÆ
 & 0x0000000000ff0000) << 24)

68 | ((
vÆ
 & 0x00000000ff000000) << 8)

69 | ((
vÆ
 & 0x000000ff00000000) << 8)

70 | ((
vÆ
 & 0x0000ff0000000000) << 24)

71 | ((
vÆ
 & 0x00ff000000000000) >> 40)

72 | ((
vÆ
 & 0xff00000000000000) >> 56);

73 
	}
}

94 #i‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


95 
	#TO
(
èg
, 
bôs
, 
ty≥
) \

96 
ty≥
 
¡oh
##
	`èg
—y≥ 
vÆ
Ë{  
bsw≠
##
	`bôs
(val); } \

97 
ty≥
 
ht⁄
##
	`èg
—y≥ 
vÆ
Ë{  
bsw≠
##
	`bôs
(vÆ); }

	)

105 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


106 
	#TO
(
èg
, 
bôs
, 
ty≥
) \

107 
ty≥
 
¡oh
##
	`èg
—y≥ 
vÆ
) {  val; } \

108 
ty≥
 
ht⁄
##
	`èg
—y≥ 
vÆ
Ë{  vÆ; }

	)

111 #i‡
_BYTE_ORDER
 =
_PDP_ENDIAN


115 #i‚de‡
TO


119 
	$TO
(
s
, 16, 
uöt16_t
)

120 
	$TO
(
l
, 32, 
uöt32_t
)

121 
	$TO
(
Œ
, 64, 
uöt64_t
)

138 
	$joö32to64
(
uöt32_t
 
x1
, uöt32_à
x2
, 
uöt64_t
 *
y2
)

140 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


141 *
y2
 = ((
uöt64_t
)
x1
 << 32Ë| (uöt64_t)
x2
;

142 #ñi‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


143 *
y2
 = (
uöt64_t
)
x1
 | ((uöt64_t)
x2
 << 32);

147 
	}
}

150 
	$•lô64to32
(
uöt64_t
 
x
, 
uöt32_t
 *
y1
, uöt32_à*
y2
)

152 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


153 *
y1
 = 
x
 >> 32;

154 *
y2
 = 
x
 & 0xffffffff;

155 #ñi‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


156 *
y1
 = 
x
 & 0xffffffff;

157 *
y2
 = 
x
 >> 32;

161 
	}
}

	@test/os161/kern/lib/kgets.c

31 
	~<ty≥s.h
>

32 
	~<lib.h
>

41 
	$back•
()

43 
	`putch
('\b');

44 
	`putch
(' ');

45 
	`putch
('\b');

46 
	}
}

54 
	$kgës
(*
buf
, 
size_t
 
maxÀn
)

56 
size_t
 
pos
 = 0;

57 
ch
;

60 
ch
 = 
	`gëch
();

61 i‡(
ch
=='\n' || ch=='\r') {

62 
	`putch
('\n');

67 i‡(
ch
>=32 && ch<127 && 
pos
 < 
maxÀn
-1) {

68 
	`putch
(
ch
);

69 
buf
[
pos
++] = 
ch
;

71 i‡((
ch
=='\b' || ch==127Ë&& 
pos
>0) {

73 
	`back•
();

74 
pos
--;

76 i‡(
ch
==3) {

78 
	`putch
('^');

79 
	`putch
('C');

80 
	`putch
('\n');

81 
pos
 = 0;

84 i‡(
ch
==18) {

86 
buf
[
pos
] = 0;

87 
	`k¥ötf
("^R\n%s", 
buf
);

89 i‡(
ch
==21) {

91 
pos
 > 0) {

92 
	`back•
();

93 
pos
--;

96 i‡(
ch
==23) {

98 
pos
 > 0 && 
buf
[pos-1]==' ') {

99 
	`back•
();

100 
pos
--;

102 
pos
 > 0 && 
buf
[pos-1]!=' ') {

103 
	`back•
();

104 
pos
--;

108 
	`bìp
();

112 
buf
[
pos
] = 0;

113 
	}
}

	@test/os161/kern/lib/kprintf.c

30 
	~<ty≥s.h
>

31 
	~<kîn/uni°d.h
>

32 
	~<°d¨g.h
>

33 
	~<lib.h
>

34 
	~<•l.h
>

35 
	~<thªad.h
>

36 
	~<cuºít.h
>

37 
	~<synch.h
>

38 
	~<maöbus.h
>

39 
	~<vfs.h
>

43 
uöt32_t
 
	gdbÊags
 = 0;

46 
lock
 *
	gk¥ötf_lock
;

49 
•ölock
 
	gk¥ötf_•ölock
;

63 
	$k¥ötf_boŸ°øp
()

65 
	`KASSERT
(
k¥ötf_lock
 =
NULL
);

67 
k¥ötf_lock
 = 
	`lock_¸óã
("kprintf_lock");

68 i‡(
k¥ötf_lock
 =
NULL
) {

69 
	`∑nic
("CouldÇot create kprintf_lock\n");

71 
	`•ölock_öô
(&
k¥ötf_•ölock
);

72 
	}
}

79 
	$c⁄sﬁe_£nd
(*
junk
, c⁄° *
d©a
, 
size_t
 
Àn
)

81 
size_t
 
i
;

83 ()
junk
;

85 
i
=0; i<
Àn
; i++) {

86 
	`putch
(
d©a
[
i
]);

88 
	}
}

94 
	$k¥ötf
(c⁄° *
fmt
, ...)

96 
ch¨s
;

97 
va_li°
 
≠
;

98 
boﬁ
 
dﬁock
;

100 
dﬁock
 = 
k¥ötf_lock
 !
NULL


101 && 
cuπhªad
->
t_ö_öãºu±
 =
Ál£


102 && 
cuπhªad
->
t_ùlhigh_cou¡
 == 0;

104 i‡(
dﬁock
) {

105 
	`lock_acquúe
(
k¥ötf_lock
);

108 
	`•ölock_acquúe
(&
k¥ötf_•ölock
);

110 
	`putch_¥ï¨e
();

112 
	`va_°¨t
(
≠
, 
fmt
);

113 
ch¨s
 = 
	`__v¥ötf
(
c⁄sﬁe_£nd
, 
NULL
, 
fmt
, 
≠
);

114 
	`va_íd
(
≠
);

116 
	`putch_com∂ëe
();

117 i‡(
dﬁock
) {

118 
	`lock_ªÀa£
(
k¥ötf_lock
);

121 
	`•ölock_ªÀa£
(&
k¥ötf_•ölock
);

124  
ch¨s
;

125 
	}
}

133 
	$∑nic
(c⁄° *
fmt
, ...)

135 
va_li°
 
≠
;

148 vﬁ©ûê
evû
;

150 i‡(
evû
 == 0) {

151 
evû
 = 1;

159 
	`•lhigh
();

162 i‡(
evû
 == 1) {

163 
evû
 = 2;

166 
	`thªad_∑nic
();

169 i‡(
evû
 == 2) {

170 
evû
 = 3;

173 
	`k¥ötf
("panic: ");

174 
	`putch_¥ï¨e
();

175 
	`va_°¨t
(
≠
, 
fmt
);

176 
	`__v¥ötf
(
c⁄sﬁe_£nd
, 
NULL
, 
fmt
, 
≠
);

177 
	`va_íd
(
≠
);

178 
	`putch_com∂ëe
();

181 i‡(
evû
 == 3) {

182 
evû
 = 4;

185 
	`vfs_sync
();

188 i‡(
evû
 == 4) {

189 
evû
 = 5;

192 
	`maöbus_∑nic
();

200 
	}
}

206 
	$badas£π
(c⁄° *
ex¥
, c⁄° *
fûe
, 
löe
, c⁄° *
func
)

208 
	`∑nic
("Assertion failed: %s,át %s:%d (%s)\n",

209 
ex¥
, 
fûe
, 
löe
, 
func
);

210 
	}
}

	@test/os161/kern/lib/misc.c

30 
	~<ty≥s.h
>

31 
	~<kîn/îrmsg.h
>

32 
	~<lib.h
>

38 
	$k°rdup
(c⁄° *
s
)

40 *
z
;

42 
z
 = 
	`kmÆloc
(
	`°æí
(
s
)+1);

43 i‡(
z
 =
NULL
) {

44  
NULL
;

46 
	`°r˝y
(
z
, 
s
);

47  
z
;

48 
	}
}

55 
	$°ªº‹
(
îrcode
)

57 i‡(
îrcode
>=0 &&Éºcodê< 
sys_√º
) {

58  
sys_îæi°
[
îrcode
];

60 
	`∑nic
("InvÆidÉº‹ codê%d\n", 
îrcode
);

61  
NULL
;

62 
	}
}

	@test/os161/kern/lib/queue.c

5 
	~<ty≥s.h
>

6 
	~<kîn/î∫o.h
>

7 
	~<lib.h
>

8 
	~<queue.h
>

10 
	squeue
 {

11 
	msize
;

12 
	m√xtwrôe
;

13 
	m√xåód
;

14 **
	md©a
;

19 
	$q_grow
(
queue
 *
q
, 
èrgësize
)

21 **
ﬁdd©a
 = 
q
->
d©a
;

22 
⁄r
 = 
q
->
√xåód
;

23 
⁄w
 = 
q
->
√xtwrôe
;

24 
osize
 = 
q
->
size
;

26 
nsize
;

27 **
nd©a
;

29 
i
, 
ªsu…
;

31 
nsize
 = 
q
->
size
;

32 
nsize
 < 
èrgësize
) {

33 
nsize
 *= 2;

35 
	`KASSERT
(
nsize
 > 0);

37 
nd©a
 = 
	`kmÆloc
(
nsize
 * (*));

38 i‡(
nd©a
 =
NULL
) {

39  
ENOMEM
;

41 
q
->
size
 = 
nsize
;

42 
q
->
d©a
 = 
nd©a
;

43 
q
->
√xåód
 = q->
√xtwrôe
 = 0;

45 
i
=
⁄r
; i!=
⁄w
; i = (i+1)%
osize
) {

46 
ªsu…
 = 
	`q_addèû
(
q
, 
ﬁdd©a
[
i
]);

47 
	`KASSERT
(
ªsu…
==0);

49 
	`k‰ì
(
ﬁdd©a
);

51 
	}
}

53 
queue
 *

54 
	$q_¸óã
(
size
)

56 
queue
 *
q
 = 
	`kmÆloc
((queue));

57 i‡(
q
==
NULL
) {

58  
NULL
;

60 
q
->
size
 = size;

61 
q
->
d©a
 = 
	`kmÆloc
(
size
 * (*));

62 i‡(
q
->
d©a
==
NULL
) {

63 
	`k‰ì
(
q
);

64  
NULL
;

66 
q
->
√xåód
 = q->
√xtwrôe
 = 0;

67  
q
;

68 
	}
}

71 
	$q_¥óŒoˇã
(
queue
 *
q
, 
size
)

73 
ªsu…
 = 0;

75 
	`KASSERT
(
q
->
size
 > 0);

77 i‡(
size
 > 
q
->size) {

78 
ªsu…
 = 
	`q_grow
(
q
, 
size
);

80  
ªsu…
;

81 
	}
}

83 
ölöe


85 
	$q_em±y
(
queue
 *
q
)

87  
q
->
√xtwrôe
 =q->
√xåód
;

88 
	}
}

91 
	$q_addèû
(
queue
 *
q
, *
±r
)

93 
√xäext
, 
ªsu…
;

95 
	`KASSERT
(
q
->
size
 > 0);

97 
√xäext
 = (
q
->
√xtwrôe
+1Ë% q->
size
;

98 i‡(
√xäext
==
q
->
√xåód
) {

99 
ªsu…
 = 
	`q_grow
(
q
, q->
size
+1);

100 i‡(
ªsu…
) {

101  
ªsu…
;

103 
√xäext
 = (
q
->
√xtwrôe
+1Ë% q->
size
;

105 
q
->
d©a
[q->
√xtwrôe
] = 
±r
;

106 
q
->
√xtwrôe
 = 
√xäext
;

108 
	}
}

111 
	$q_ªmhód
(
queue
 *
q
)

113 *
ªt
;

115 
	`KASSERT
(
q
->
size
 > 0);

117 
	`KASSERT
(!
	`q_em±y
(
q
));

118 
ªt
 = 
q
->
d©a
[q->
√xåód
];

119 
q
->
√xåód
 = (q->√xåód+1)%q->
size
;

120  
ªt
;

121 
	}
}

124 
	$q_de°roy
(
queue
 *
q
)

126 
	`KASSERT
(
	`q_em±y
(
q
));

127 
	`k‰ì
(
q
->
d©a
);

128 
	`k‰ì
(
q
);

129 
	}
}

133 
	$q_gë°¨t
(
queue
 *
q
)

135  
q
->
√xåód
;

136 
	}
}

139 
	$q_gëíd
(
queue
 *
q
)

141  
q
->
√xtwrôe
;

142 
	}
}

145 
	$q_gësize
(
queue
 *
q
)

147  
q
->
size
;

148 
	}
}

151 
	$q_gëguy
(
queue
 *
q
, 
ödex
)

156 
	`KASSERT
(
ödex
>=0 && index<
q
->
size
);

157  
q
->
d©a
[
ödex
];

158 
	}
}

161 
	$q_≥ek
(
queue
 *
q
)

163 *
ªt
;

165 
	`KASSERT
(
q
);

166 
	`KASSERT
(
q
->
size
 > 0);

168 i‡(
	`q_em±y
(
q
)) {

169 
ªt
 = 0;

171 
ªt
 = 
q
->
d©a
[q->
√xåód
];

173  
ªt
;

174 
	}
}

177 
	$q_Àn
(
queue
 *
theq
)

179 
cou¡
 = 0;

180 
tmp
 = 
theq
->
√xåód
;

181 
tmp
 !
theq
->
√xtwrôe
) {

182 
tmp
 = (tmp+1Ë% 
theq
->
size
;

183 
cou¡
++;

185  
cou¡
;

186 
	}
}

	@test/os161/kern/lib/uio.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<uio.h
>

33 
	~<¥oc.h
>

34 
	~<cuºít.h
>

35 
	~<c›yöout.h
>

42 
	$uiomove
(*
±r
, 
size_t
 
n
, 
uio
 *uio)

44 
iovec
 *
iov
;

45 
size_t
 
size
;

46 
ªsu…
;

48 i‡(
uio
->
uio_rw
 !
UIO_READ
 && uio->uio_rw !
UIO_WRITE
) {

49 
	`∑nic
("uiomove: InvÆid uio_rw %d\n", (Ë
uio
->
uio_rw
);

51 i‡(
uio
->
uio_£gÊg
==
UIO_SYSSPACE
) {

52 
	`KASSERT
(
uio
->
uio_•a˚
 =
NULL
);

55 
	`KASSERT
(
uio
->
uio_•a˚
 =
	`cuΩroc_gëas
());

58 
n
 > 0 && 
uio
->
uio_ªsid
 > 0) {

60 
iov
 = 
uio
->
uio_iov
;

61 
size
 = 
iov
->
iov_Àn
;

63 i‡(
size
 > 
n
) {

64 
size
 = 
n
;

67 i‡(
size
 == 0) {

69 
uio
->
uio_iov
++;

70 
uio
->
uio_iov˙t
--;

71 i‡(
uio
->
uio_iov˙t
 == 0) {

78 
	`∑nic
("uiomove:Ñan out of buffers\n");

83 
uio
->
uio_£gÊg
) {

84 
UIO_SYSSPACE
:

85 
ªsu…
 = 0;

86 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

87 
	`memmove
(
iov
->
iov_kba£
, 
±r
, 
size
);

90 
	`memmove
(
±r
, 
iov
->
iov_kba£
, 
size
);

92 
iov
->
iov_kba£
 = ((*)iov->iov_kba£+
size
);

94 
UIO_USERSPACE
:

95 
UIO_USERISPACE
:

96 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

97 
ªsu…
 = 
	`c›yout
(
±r
, 
iov
->
iov_uba£
,
size
);

100 
ªsu…
 = 
	`c›yö
(
iov
->
iov_uba£
, 
±r
, 
size
);

102 i‡(
ªsu…
) {

103  
ªsu…
;

105 
iov
->
iov_uba£
 +
size
;

108 
	`∑nic
("uiomove: Invalid uio_segflg %d\n",

109 ()
uio
->
uio_£gÊg
);

112 
iov
->
iov_Àn
 -
size
;

113 
uio
->
uio_ªsid
 -
size
;

114 
uio
->
uio_off£t
 +
size
;

115 
±r
 = ((*Ìå + 
size
);

116 
n
 -
size
;

120 
	}
}

123 
	$uiomovezîos
(
size_t
 
n
, 
uio
 *uio)

126 
zîos
[16];

127 
size_t
 
amt
;

128 
ªsu…
;

131 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

133 
n
 > 0) {

134 
amt
 = (
zîos
);

135 i‡(
amt
 > 
n
) {

136 
amt
 = 
n
;

138 
ªsu…
 = 
	`uiomove
(
zîos
, 
amt
, 
uio
);

139 i‡(
ªsu…
) {

140  
ªsu…
;

142 
n
 -
amt
;

146 
	}
}

153 
	$uio_köô
(
iovec
 *
iov
, 
uio
 *
u
,

154 *
kbuf
, 
size_t
 
Àn
, 
off_t
 
pos
, 
uio_rw
 
rw
)

156 
iov
->
iov_kba£
 = 
kbuf
;

157 
iov
->
iov_Àn
 = 
Àn
;

158 
u
->
uio_iov
 = 
iov
;

159 
u
->
uio_iov˙t
 = 1;

160 
u
->
uio_off£t
 = 
pos
;

161 
u
->
uio_ªsid
 = 
Àn
;

162 
u
->
uio_£gÊg
 = 
UIO_SYSSPACE
;

163 
u
->
uio_rw
 = 
rw
;

164 
u
->
uio_•a˚
 = 
NULL
;

165 
	}
}

	@test/os161/kern/proc/proc.c

45 
	~<ty≥s.h
>

46 
	~<¥oc.h
>

47 
	~<cuºít.h
>

48 
	~<addr•a˚.h
>

49 
	~<vnode.h
>

50 
	~<vfs.h
>

51 
	~<synch.h
>

52 
	~<kîn/f˙é.h
>

57 
¥oc
 *
	gk¥oc
;

62 #ifde‡
UW


64 
	g¥oc_cou¡
;

67 
£m≠h‹e
 *
	g¥oc_cou¡_muãx
;

69 
£m≠h‹e
 *
	gno_¥oc_£m
;

78 
¥oc
 *

79 
	$¥oc_¸óã
(c⁄° *
«me
)

81 
¥oc
 *proc;

83 
¥oc
 = 
	`kmÆloc
((*proc));

84 i‡(
¥oc
 =
NULL
) {

85  
NULL
;

87 
¥oc
->
p_«me
 = 
	`k°rdup
(
«me
);

88 i‡(
¥oc
->
p_«me
 =
NULL
) {

89 
	`k‰ì
(
¥oc
);

90  
NULL
;

93 
	`thªad¨øy_öô
(&
¥oc
->
p_thªads
);

94 
	`•ölock_öô
(&
¥oc
->
p_lock
);

97 
¥oc
->
p_addr•a˚
 = 
NULL
;

100 
¥oc
->
p_cwd
 = 
NULL
;

102 #ifde‡
UW


103 
¥oc
->
c⁄sﬁe
 = 
NULL
;

106  
¥oc
;

107 
	}
}

113 
	$¥oc_de°roy
(
¥oc
 *proc)

124 
	`KASSERT
(
¥oc
 !
NULL
);

125 
	`KASSERT
(
¥oc
 !
k¥oc
);

134 i‡(
¥oc
->
p_cwd
) {

135 
	`VOP_DECREF
(
¥oc
->
p_cwd
);

136 
¥oc
->
p_cwd
 = 
NULL
;

140 #i‚de‡
UW


141 i‡(
¥oc
->
p_addr•a˚
) {

152 
addr•a˚
 *
as
;

154 
	`as_dó˘iv©e
();

155 
as
 = 
	`cuΩroc_£ès
(
NULL
);

156 
	`as_de°roy
(
as
);

160 #ifde‡
UW


161 i‡(
¥oc
->
c⁄sﬁe
) {

162 
	`vfs_˛o£
(
¥oc
->
c⁄sﬁe
);

166 
	`thªad¨øy_˛ónup
(&
¥oc
->
p_thªads
);

167 
	`•ölock_˛ónup
(&
¥oc
->
p_lock
);

169 
	`k‰ì
(
¥oc
->
p_«me
);

170 
	`k‰ì
(
¥oc
);

172 #ifde‡
UW


177 
	`P
(
¥oc_cou¡_muãx
);

178 
	`KASSERT
(
¥oc_cou¡
 > 0);

179 
¥oc_cou¡
--;

181 i‡(
¥oc_cou¡
 == 0) {

182 
	`V
(
no_¥oc_£m
);

184 
	`V
(
¥oc_cou¡_muãx
);

188 
	}
}

194 
	$¥oc_boŸ°øp
()

196 
k¥oc
 = 
	`¥oc_¸óã
("[kernel]");

197 i‡(
k¥oc
 =
NULL
) {

198 
	`∑nic
("proc_create for kproc failed\n");

200 #ifde‡
UW


201 
¥oc_cou¡
 = 0;

202 
¥oc_cou¡_muãx
 = 
	`£m_¸óã
("proc_count_mutex",1);

203 i‡(
¥oc_cou¡_muãx
 =
NULL
) {

204 
	`∑nic
("couldÇot createÖroc_count_mutex semaphore\n");

206 
no_¥oc_£m
 = 
	`£m_¸óã
("no_proc_sem",0);

207 i‡(
no_¥oc_£m
 =
NULL
) {

208 
	`∑nic
("couldÇot createÇo_proc_sem semaphore\n");

211 
	}
}

219 
¥oc
 *

220 
	$¥oc_¸óã_ru≈rogøm
(c⁄° *
«me
)

222 
¥oc
 *proc;

223 *
c⁄sﬁe_∑th
;

225 
¥oc
 = 
	`¥oc_¸óã
(
«me
);

226 i‡(
¥oc
 =
NULL
) {

227  
NULL
;

230 #ifde‡
UW


232 
c⁄sﬁe_∑th
 = 
	`k°rdup
("con:");

233 i‡(
c⁄sﬁe_∑th
 =
NULL
) {

234 
	`∑nic
("unableÅo copy consoleÖathÇame duringÖrocess creation\n");

236 i‡(
	`vfs_›í
(
c⁄sﬁe_∑th
,
O_WRONLY
,0,&(
¥oc
->
c⁄sﬁe
))) {

237 
	`∑nic
("unableÅo openÅhe console duringÖrocess creation\n");

239 
	`k‰ì
(
c⁄sﬁe_∑th
);

244 
¥oc
->
p_addr•a˚
 = 
NULL
;

248 #ifde‡
UW


252 i‡(
cuΩroc
->
p_cwd
 !
NULL
) {

253 
	`VOP_INCREF
(
cuΩroc
->
p_cwd
);

254 
¥oc
->
p_cwd
 = 
cuΩroc
->p_cwd;

257 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

258 i‡(
cuΩroc
->
p_cwd
 !
NULL
) {

259 
	`VOP_INCREF
(
cuΩroc
->
p_cwd
);

260 
¥oc
->
p_cwd
 = 
cuΩroc
->p_cwd;

262 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

265 #ifde‡
UW


269 
	`P
(
¥oc_cou¡_muãx
);

270 
¥oc_cou¡
++;

271 
	`V
(
¥oc_cou¡_muãx
);

274  
¥oc
;

275 
	}
}

282 
	$¥oc_addthªad
(
¥oc
 *¥oc, 
thªad
 *
t
)

284 
ªsu…
;

286 
	`KASSERT
(
t
->
t_¥oc
 =
NULL
);

288 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

289 
ªsu…
 = 
	`thªad¨øy_add
(&
¥oc
->
p_thªads
, 
t
, 
NULL
);

290 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

291 i‡(
ªsu…
) {

292  
ªsu…
;

294 
t
->
t_¥oc
 = 
¥oc
;

296 
	}
}

303 
	$¥oc_ªmthªad
(
thªad
 *
t
)

305 
¥oc
 *proc;

306 
i
, 
num
;

308 
¥oc
 = 
t
->
t_¥oc
;

309 
	`KASSERT
(
¥oc
 !
NULL
);

311 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

313 
num
 = 
	`thªad¨øy_num
(&
¥oc
->
p_thªads
);

314 
i
=0; i<
num
; i++) {

315 i‡(
	`thªad¨øy_gë
(&
¥oc
->
p_thªads
, 
i
Ë=
t
) {

316 
	`thªad¨øy_ªmove
(&
¥oc
->
p_thªads
, 
i
);

317 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

318 
t
->
t_¥oc
 = 
NULL
;

323 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

324 
	`∑nic
("Thªad (%pËha†esˇ≥d from it†¥o˚s†(%p)\n", 
t
, 
¥oc
);

325 
	}
}

332 
addr•a˚
 *

333 
	$cuΩroc_gëas
()

335 
addr•a˚
 *
as
;

336 #ifde‡
UW


340 i‡(
cuΩroc
 =
NULL
) {

341  
NULL
;

345 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

346 
as
 = 
cuΩroc
->
p_addr•a˚
;

347 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

348  
as
;

349 
	}
}

355 
addr•a˚
 *

356 
	$cuΩroc_£ès
(
addr•a˚
 *
√was
)

358 
addr•a˚
 *
ﬁdas
;

359 
¥oc
 *¥o¯
cuΩroc
;

361 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

362 
ﬁdas
 = 
¥oc
->
p_addr•a˚
;

363 
¥oc
->
p_addr•a˚
 = 
√was
;

364 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

365  
ﬁdas
;

366 
	}
}

	@test/os161/kern/startup/main.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<kîn/ªboŸ.h
>

37 
	~<kîn/uni°d.h
>

38 
	~<lib.h
>

39 
	~<•l.h
>

40 
	~<˛ock.h
>

41 
	~<thªad.h
>

42 
	~<¥oc.h
>

43 
	~<cuºít.h
>

44 
	~<synch.h
>

45 
	~<vm.h
>

46 
	~<maöbus.h
>

47 
	~<vfs.h
>

48 
	~<devi˚.h
>

49 
	~<sysˇŒ.h
>

50 
	~<ã°.h
>

51 
	~<vîsi⁄.h
>

52 
	~"autoc⁄f.h
"

64 c⁄° 
buûdvîsi⁄
;

65 c⁄° 
buûdc⁄fig
[];

70 c⁄° 
	gh¨v¨d_c›yright
[] =

80 
	$boŸ
()

99 
	`k¥ötf
("\n");

100 
	`k¥ötf
("OS/161 ba£ sy°em vîsi⁄ %s\n", 
BASE_VERSION
);

101 
	`k¥ötf
("%s", 
h¨v¨d_c›yright
);

102 
	`k¥ötf
("\n");

104 
	`k¥ötf
("Put-your-group-name-here's system version %s (%s #%d)\n",

105 
GROUP_VERSION
, 
buûdc⁄fig
, 
buûdvîsi⁄
);

106 
	`k¥ötf
("\n");

109 
	`øm_boŸ°øp
();

110 
	`¥oc_boŸ°øp
();

111 
	`thªad_boŸ°øp
();

112 
	`h¨d˛ock_boŸ°øp
();

113 
	`vfs_boŸ°øp
();

116 
	`k¥ötf
("DeviceÖrobe...\n");

117 
	`KASSERT
(
cuπhªad
->
t_cur•l
 > 0);

118 
	`maöbus_boŸ°øp
();

119 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

121 
	`p£udoc⁄fig
();

122 
	`k¥ötf
("\n");

125 
	`vm_boŸ°øp
();

126 
	`k¥ötf_boŸ°øp
();

127 
	`thªad_°¨t_˝us
();

130 
	`vfs_£tboŸfs
("emu0");

136 
	`COMPILE_ASSERT
((
u£Ωå_t
) == (*));

137 
	`COMPILE_ASSERT
((*(
u£Ωå_t
)0) == ());

138 
	}
}

145 
	$shutdown
()

148 
	`k¥ötf
("Shutting down.\n");

150 
	`vfs_˛órboŸfs
();

151 
	`vfs_˛órcurdú
();

152 
	`vfs_unmou¡Æl
();

154 
	`thªad_shutdown
();

156 
	`•lhigh
();

157 
	}
}

169 
	$sys_ªboŸ
(
code
)

171 
code
) {

172 
RB_REBOOT
:

173 
RB_HALT
:

174 
RB_POWEROFF
:

177  
EINVAL
;

180 
	`shutdown
();

182 
code
) {

183 
RB_HALT
:

184 
	`k¥ötf
("The system is halted.\n");

185 
	`maöbus_hÆt
();

187 
RB_REBOOT
:

188 
	`k¥ötf
("Rebooting...\n");

189 
	`maöbus_ªboŸ
();

191 
RB_POWEROFF
:

192 
	`k¥ötf
("The system is halted.\n");

193 
	`maöbus_powîoff
();

197 
	`∑nic
("reboot operation failed\n");

199 
	}
}

206 
	$kmaö
(*
¨gumíts
)

208 
	`boŸ
();

210 
	`míu
(
¨gumíts
);

213 
	}
}

	@test/os161/kern/startup/menu.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/ªboŸ.h
>

33 
	~<kîn/uni°d.h
>

34 
	~<limôs.h
>

35 
	~<lib.h
>

36 
	~<uio.h
>

37 
	~<˛ock.h
>

38 
	~<thªad.h
>

39 
	~<¥oc.h
>

40 
	~<synch.h
>

41 
	~<vfs.h
>

42 
	~<sfs.h
>

43 
	~<sysˇŒ.h
>

44 
	~<ã°.h
>

45 
	~"›t-synch¥obs.h
"

46 
	~"›t-sfs.h
"

47 
	~"›t-√t.h
"

53 
	#_PATH_SHELL
 "/bö/sh"

	)

55 
	#MAXMENUARGS
 16

	)

59 
	$gëöãrvÆ
(
time_t
 
s1
, 
uöt32_t
 
ns1
,Åime_à
s2
, uöt32_à
ns2
,

60 
time_t
 *
rs
, 
uöt32_t
 *
∫s
)

62 i‡(
ns2
 < 
ns1
) {

63 
ns2
 += 1000000000;

64 
s2
--;

67 *
∫s
 = 
ns2
 - 
ns1
;

68 *
rs
 = 
s2
 - 
s1
;

69 
	}
}

88 
	$cmd_¥ogthªad
(*
±r
, 
«rgs
)

90 **
¨gs
 = 
±r
;

91 
¥og«me
[128];

92 
ªsu…
;

94 
	`KASSERT
(
«rgs
 >= 1);

96 i‡(
«rgs
 > 2) {

97 
	`k¥ötf
("Warning:árgumentÖassing from menuÇot supported\n");

101 
	`KASSERT
(
	`°æí
(
¨gs
[0]Ë< (
¥og«me
));

103 
	`°r˝y
(
¥og«me
, 
¨gs
[0]);

105 
ªsu…
 = 
	`ru≈rogøm
(
¥og«me
);

106 i‡(
ªsu…
) {

107 
	`k¥ötf
("Ru¬ögÖrogøm %†Áûed: %s\n", 
¨gs
[0],

108 
	`°ªº‹
(
ªsu…
));

113 
	}
}

129 
	$comm⁄_¥og
(
«rgs
, **
¨gs
)

131 
¥oc
 *proc;

132 
ªsu…
;

134 #i‡
OPT_SYNCHPROBS


135 
	`k¥ötf
("Warning:ÅhisÖrobably won't work withá "

140 
¥oc
 = 
	`¥oc_¸óã_ru≈rogøm
(
¨gs
[0] );

141 i‡(
¥oc
 =
NULL
) {

142  
ENOMEM
;

145 
ªsu…
 = 
	`thªad_f‹k
(
¨gs
[0] ,

146 
¥oc
 ,

147 
cmd_¥ogthªad
 ,

148 
¨gs
 , 
«rgs
 );

149 i‡(
ªsu…
) {

150 
	`k¥ötf
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

151 
	`¥oc_de°roy
(
¥oc
);

152  
ªsu…
;

155 #ifde‡
UW


158 
	`P
(
no_¥oc_£m
);

162 
	}
}

169 
	$cmd_¥og
(
«rgs
, **
¨gs
)

171 i‡(
«rgs
 < 2) {

172 
	`k¥ötf
("Usage:ÖÖrogram [arguments]\n");

173  
EINVAL
;

177 
¨gs
++;

178 
«rgs
--;

180  
	`comm⁄_¥og
(
«rgs
, 
¨gs
);

181 
	}
}

188 
	$cmd_shñl
(
«rgs
, **
¨gs
)

190 ()
¨gs
;

191 i‡(
«rgs
 != 1) {

192 
	`k¥ötf
("Usage: s\n");

193  
EINVAL
;

196 
¨gs
[0] = (*)
_PATH_SHELL
;

198  
	`comm⁄_¥og
(
«rgs
, 
¨gs
);

199 
	}
}

206 
	$cmd_chdú
(
«rgs
, **
¨gs
)

208 i‡(
«rgs
 != 2) {

209 
	`k¥ötf
("Usage: cd directory\n");

210  
EINVAL
;

213  
	`vfs_chdú
(
¨gs
[1]);

214 
	}
}

221 
	$cmd_pwd
(
«rgs
, **
¨gs
)

223 
buf
[
PATH_MAX
+1];

224 
ªsu…
;

225 
iovec
 
iov
;

226 
uio
 
ku
;

228 ()
«rgs
;

229 ()
¨gs
;

231 
	`uio_köô
(&
iov
, &
ku
, 
buf
, (buf)-1, 0, 
UIO_READ
);

232 
ªsu…
 = 
	`vfs_gëcwd
(&
ku
);

233 i‡(
ªsu…
) {

234 
	`k¥ötf
("vfs_gëcwd faûed (%s)\n", 
	`°ªº‹
(
ªsu…
));

235  
ªsu…
;

239 
buf
[(buf)-1-
ku
.
uio_ªsid
] = 0;

242 
	`k¥ötf
("%s\n", 
buf
);

245 
	}
}

252 
	$cmd_sync
(
«rgs
, **
¨gs
)

254 ()
«rgs
;

255 ()
¨gs
;

257 
	`vfs_sync
();

260 
	}
}

267 
	$cmd_∑nic
(
«rgs
, **
¨gs
)

269 ()
«rgs
;

270 ()
¨gs
;

272 
	`∑nic
("UserÑequestedÖanic\n");

274 
	}
}

281 
	$cmd_quô
(
«rgs
, **
¨gs
)

283 ()
«rgs
;

284 ()
¨gs
;

286 
	`vfs_sync
();

287 
	`sys_ªboŸ
(
RB_POWEROFF
);

288 
	`thªad_exô
();

290 
	}
}

298 c⁄° *
	m«me
;

299 (*
	mfunc
)(c⁄° *
	mdevi˚
);

300 } 
	gmou¡èbÀ
[] = {

301 #i‡
OPT_SFS


302 { "sfs", 
sfs_mou¡
 },

304 { 
NULL
, NULL }

309 
	$cmd_mou¡
(
«rgs
, **
¨gs
)

311 *
f°y≥
;

312 *
devi˚
;

313 
i
;

315 i‡(
«rgs
 != 3) {

316 
	`k¥ötf
("Usage: mount fstype device:\n");

317  
EINVAL
;

320 
f°y≥
 = 
¨gs
[1];

321 
devi˚
 = 
¨gs
[2];

324 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

325 
devi˚
[
	`°æí
(device)-1] = 0;

328 
i
=0; 
mou¡èbÀ
[i].
«me
; i++) {

329 i‡(!
	`°rcmp
(
mou¡èbÀ
[
i
].
«me
, 
f°y≥
)) {

330  
mou¡èbÀ
[
i
].
	`func
(
devi˚
);

333 
	`k¥ötf
("Unknow¿fûesy°emÅy≥ %s\n", 
f°y≥
);

334  
EINVAL
;

335 
	}
}

339 
	$cmd_unmou¡
(
«rgs
, **
¨gs
)

341 *
devi˚
;

343 i‡(
«rgs
 != 2) {

344 
	`k¥ötf
("Usage: unmount device:\n");

345  
EINVAL
;

348 
devi˚
 = 
¨gs
[1];

351 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

352 
devi˚
[
	`°æí
(device)-1] = 0;

355  
	`vfs_unmou¡
(
devi˚
);

356 
	}
}

368 
	$cmd_boŸfs
(
«rgs
, **
¨gs
)

370 *
devi˚
;

372 i‡(
«rgs
 != 2) {

373 
	`k¥ötf
("Usage: bootfs device\n");

374  
EINVAL
;

377 
devi˚
 = 
¨gs
[1];

380 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

381 
devi˚
[
	`°æí
(device)-1] = 0;

384  
	`vfs_£tboŸfs
(
devi˚
);

385 
	}
}

389 
	$cmd_khóp°©s
(
«rgs
, **
¨gs
)

391 ()
«rgs
;

392 ()
¨gs
;

394 
	`khóp_¥öt°©s
();

397 
	}
}

405 
	$showmíu
(c⁄° *
«me
, c⁄° *
x
[])

407 
˘
, 
hÆf
, 
i
;

409 
	`k¥ötf
("\n");

410 
	`k¥ötf
("%s\n", 
«me
);

412 
i
=
˘
=0; 
x
[i]; i++) {

413 
˘
++;

415 
hÆf
 = (
˘
+1)/2;

417 
i
=0; i<
hÆf
; i++) {

418 
	`k¥ötf
(" %-36s", 
x
[
i
]);

419 i‡(
i
+
hÆf
 < 
˘
) {

420 
	`k¥ötf
("%s", 
x
[
i
+
hÆf
]);

422 
	`k¥ötf
("\n");

425 
	`k¥ötf
("\n");

426 
	}
}

428 c⁄° *
	g›smíu
[] = {

440 
NULL


445 
	$cmd_›smíu
(
n
, **
a
)

447 ()
n
;

448 ()
a
;

450 
	`showmíu
("OS/161 o≥øti⁄†míu", 
›smíu
);

452 
	}
}

454 c⁄° *
	gã°míu
[] = {

462 #i‡
OPT_NET


468 #ifde‡
UW


477 
NULL


482 
	$cmd_ã°míu
(
n
, **
a
)

484 ()
n
;

485 ()
a
;

487 
	`showmíu
("OS/161Åe°†míu", 
ã°míu
);

488 
	`k¥ötf
(" (1) TheseÅests will fail until you finishÅhe "

490 
	`k¥ötf
(" (4) TheseÅests may fail until you finishÅhe "

492 
	`k¥ötf
("\n");

495 
	}
}

497 c⁄° *
	gmaömíu
[] = {

500 #i‡
OPT_SYNCHPROBS


502 #ifde‡
UW


508 
NULL


513 
	$cmd_maömíu
(
n
, **
a
)

515 ()
n
;

516 ()
a
;

518 
	`showmíu
("OS/161 kî√»míu", 
maömíu
);

520 
	}
}

527 c⁄° *
	m«me
;

528 (*
	mfunc
)(
	m«rgs
, **
	m¨gs
);

529 } 
	gcmdèbÀ
[] = {

531 { "?", 
cmd_maömíu
 },

532 { "h", 
cmd_maömíu
 },

533 { "hñp", 
cmd_maömíu
 },

534 { "?o", 
cmd_›smíu
 },

535 { "?t", 
cmd_ã°míu
 },

538 { "s", 
cmd_shñl
 },

539 { "p", 
cmd_¥og
 },

540 { "mou¡", 
cmd_mou¡
 },

541 { "unmou¡", 
cmd_unmou¡
 },

542 { "boŸfs", 
cmd_boŸfs
 },

543 { "pf", 
¥ötfûe
 },

544 { "cd", 
cmd_chdú
 },

545 { "pwd", 
cmd_pwd
 },

546 { "sync", 
cmd_sync
 },

547 { "∑nic", 
cmd_∑nic
 },

548 { "q", 
cmd_quô
 },

549 { "exô", 
cmd_quô
 },

550 { "hÆt", 
cmd_quô
 },

552 #i‡
OPT_SYNCHPROBS


554 { "•1", 
whÆem©ög
 },

555 #ifde‡
UW


556 { "•2", 
ˇtmou£
 },

561 { "kh", 
cmd_khóp°©s
 },

564 { "©", 
¨øyã°
 },

565 { "bt", 
bôm≠ã°
 },

566 { "km1", 
mÆlo˘e°
 },

567 { "km2", 
mÆloc°ªss
 },

568 #i‡
OPT_NET


569 { "√t", 
√âe°
 },

571 { "â1", 
thªadã°
 },

572 { "â2", 
thªadã°2
 },

573 { "â3", 
thªadã°3
 },

574 { "sy1", 
£mã°
 },

577 { "sy2", 
lockã°
 },

578 { "sy3", 
cvã°
 },

579 #ifde‡
UW


580 { "uw1", 
uwlockã°1
 },

581 { "uw2", 
uwvm°©°e°
 },

585 { "fs1", 
f°e°
 },

586 { "fs2", 
ªad°ªss
 },

587 { "fs3", 
wrôe°ªss
 },

588 { "fs4", 
wrôe°ªss2
 },

589 { "fs5", 
¸óã°ªss
 },

591 { 
NULL
, NULL }

599 
	$cmd_di•©ch
(*
cmd
)

601 
time_t
 
bef‹e£cs
, 
a·î£cs
, 
£cs
;

602 
uöt32_t
 
bef‹í£cs
, 
a·în£cs
, 
n£cs
;

603 *
¨gs
[
MAXMENUARGS
];

604 
«rgs
=0;

605 *
w‹d
;

606 *
c⁄ãxt
;

607 
i
, 
ªsu…
;

609 
w‹d
 = 
	`°πok_r
(
cmd
, " \t", &
c⁄ãxt
);

610 
w‹d
 !
NULL
;

611 
w‹d
 = 
	`°πok_r
(
NULL
, " \t", &
c⁄ãxt
)) {

613 i‡(
«rgs
 >
MAXMENUARGS
) {

614 
	`k¥ötf
("CommandÜine hasÅoo many words\n");

615  
E2BIG
;

617 
¨gs
[
«rgs
++] = 
w‹d
;

620 i‡(
«rgs
==0) {

624 
i
=0; 
cmdèbÀ
[i].
«me
; i++) {

625 i‡(*
cmdèbÀ
[
i
].
«me
 && !
	`°rcmp
(
¨gs
[0], cmdtable[i].name)) {

626 
	`KASSERT
(
cmdèbÀ
[
i
].
func
!=
NULL
);

628 
	`gëtime
(&
bef‹e£cs
, &
bef‹í£cs
);

630 
ªsu…
 = 
cmdèbÀ
[
i
].
	`func
(
«rgs
, 
¨gs
);

632 
	`gëtime
(&
a·î£cs
, &
a·în£cs
);

633 
	`gëöãrvÆ
(
bef‹e£cs
, 
bef‹í£cs
,

634 
a·î£cs
, 
a·în£cs
,

635 &
£cs
, &
n£cs
);

637 
	`k¥ötf
("OperationÅook %lu.%09lu seconds\n",

638 (Ë
£cs
,

639 (Ë
n£cs
);

641  
ªsu…
;

645 
	`k¥ötf
("%s: Comm™dÇŸ found\n", 
¨gs
[0]);

646  
EINVAL
;

647 
	}
}

658 
	$míu_execuã
(*
löe
, 
ißrgs
)

660 *
comm™d
;

661 *
c⁄ãxt
;

662 
ªsu…
;

664 
comm™d
 = 
	`°πok_r
(
löe
, ";", &
c⁄ãxt
);

665 
comm™d
 !
NULL
;

666 
comm™d
 = 
	`°πok_r
(
NULL
, ";", &
c⁄ãxt
)) {

668 i‡(
ißrgs
) {

669 
	`k¥ötf
("OS/161 kî√l: %s\n", 
comm™d
);

672 
ªsu…
 = 
	`cmd_di•©ch
(
comm™d
);

673 i‡(
ªsu…
) {

674 
	`k¥ötf
("Míu comm™d faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

675 i‡(
ißrgs
) {

676 
	`∑nic
("FailureÖrocessing kernelárguments\n");

680 
	}
}

700 
	$míu
(*
¨gs
)

702 
buf
[64];

704 
	`míu_execuã
(
¨gs
, 1);

707 
	`k¥ötf
("OS/161 kernel [? for menu]: ");

708 
	`kgës
(
buf
, (buf));

709 
	`míu_execuã
(
buf
, 0);

711 
	}
}

	@test/os161/kern/synchprobs/catmouse.c

29 
	~<ty≥s.h
>

30 
	~<lib.h
>

31 
	~<ã°.h
>

32 
	~<˛ock.h
>

33 
	~<thªad.h
>

34 
	~<synch.h
>

35 
	~<synch¥obs.h
>

38 
öôülize_bowls
();

39 
˛ónup_bowls
();

40 
ˇt_ót
(
bow umbî
, 
ót_time
);

41 
ˇt_¶ìp
(
¶ìp_time
);

42 
mou£_ót
(
bow umbî
, 
ót_time
);

43 
mou£_¶ìp
(
¶ìp_time
);

44 
ˇt_simuœti⁄
(*
±r
, 
ˇäumbî
);

45 
mou£_simuœti⁄
(*
±r
, 
mou£numbî
);

61 
	gNumBowls
;

62 
	gNumC©s
;

63 
	gNumMi˚
;

64 
	gNumLo›s
;

66 
	gC©E©Time
 = 1;

67 
	gC©SÀïTime
 = 2;

68 
	gMou£E©Time
 = 1;

69 
	gMou£SÀïTime
 = 2;

76 
£m≠h‹e
 *
	gC©Mou£Waô
;

95 vﬁ©ûê*
	gbowls
;

100 vﬁ©ûê
	gótög_ˇts_cou¡
;

105 vﬁ©ûê
	gótög_mi˚_cou¡
;

112 
£m≠h‹e
 *
	gmuãx
;

115 vﬁ©ûê
time_t
 
	gˇt_tŸÆ_waô_£cs
;

116 vﬁ©ûê
uöt32_t
 
	gˇt_tŸÆ_waô_n£cs
;

117 vﬁ©ûê
	gˇt_waô_cou¡
;

118 vﬁ©ûê
time_t
 
	gmou£_tŸÆ_waô_£cs
;

119 vﬁ©ûê
uöt32_t
 
	gmou£_tŸÆ_waô_n£cs
;

120 vﬁ©ûê
	gmou£_waô_cou¡
;

123 
£m≠h‹e
 *
	g≥rf_muãx
;

140 
	$öôülize_bowls
()

142 
i
;

144 
	`KASSERT
(
NumBowls
 > 0);

146 
bowls
 = 
	`kmÆloc
(
NumBowls
*());

147 i‡(
bowls
 =
NULL
) {

148 
	`∑nic
("öôülize_bowls: u«bÀÅÿÆloˇã s∑˚ f‹ %d bowls\n",
NumBowls
);

151 
i
=0;i<
NumBowls
;i++) {

152 
bowls
[
i
] = '-';

154 
ótög_ˇts_cou¡
 = 
ótög_mi˚_cou¡
 = 0;

157 
muãx
 = 
	`£m_¸óã
("bowl mutex",1);

158 i‡(
muãx
 =
NULL
) {

159 
	`∑nic
("initialize_bowls: couldÇot create mutex\n");

162 
≥rf_muãx
 = 
	`£m_¸óã
("stats mutex",1);

163 i‡(
≥rf_muãx
 =
NULL
) {

164 
	`∑nic
("initialize_bowls: couldÇot createÖerf_mutex\n");

167 
ˇt_tŸÆ_waô_£cs
 = 0;

168 
ˇt_tŸÆ_waô_n£cs
 = 0;

169 
ˇt_waô_cou¡
 = 0;

170 
mou£_tŸÆ_waô_£cs
 = 0;

171 
mou£_tŸÆ_waô_n£cs
 = 0;

172 
mou£_waô_cou¡
 = 0;

175 
	}
}

192 
	$˛ónup_bowls
()

194 i‡(
muãx
 !
NULL
) {

195 
	`£m_de°roy
–
muãx
 );

196 
muãx
 = 
NULL
;

198 i‡(
≥rf_muãx
 !
NULL
) {

199 
	`£m_de°roy
–
≥rf_muãx
 );

200 
≥rf_muãx
 = 
NULL
;

202 i‡(
bowls
 !
NULL
) {

203 
	`k‰ì
–(*Ë
bowls
 );

204 
bowls
 = 
NULL
;

206 
	}
}

260 
	$ˇt_ót
(
bow umbî
, 
ót_time
)

264 
	`KASSERT
(
bow umbî
 > 0);

265 
	`KASSERT
(()
bow umbî
 <
NumBowls
);

269 
	`P
(
muãx
);

273 i‡(
bowls
[
bow umbî
-1] == 'c') {

275 
	`∑nic
("ˇt_ót:áâem±Åÿmakêtwÿˇt†óà‰om bow»%d!\n",
bow umbî
);

277 i‡(
ótög_mi˚_cou¡
 > 0) {

279 
	`∑nic
("cat_eat:áttemptÅo makeá catÉat while miceáreÉating!\n");

281 
	`KASSERT
(
bowls
[
bow umbî
-1]=='-');

282 
	`KASSERT
(
ótög_mi˚_cou¡
 == 0);

285 
ótög_ˇts_cou¡
 += 1;

286 
bowls
[
bow umbî
-1] = 'c';

288 
	`DEBUG
(
DB_SYNCPROB
,"cat startsÅoÉatát bowl %d [%d:%d]\n",

289 
bow umbî
,
ótög_ˇts_cou¡
,
ótög_mi˚_cou¡
);

290 
	`V
(
muãx
);

294 
	`˛ock¶ìp
(
ót_time
);

298 
	`P
(
muãx
);

299 
	`KASSERT
(
ótög_ˇts_cou¡
 > 0);

300 
	`KASSERT
(
bowls
[
bow umbî
-1]=='c');

301 
ótög_ˇts_cou¡
 -= 1;

302 
bowls
[
bow umbî
-1]='-';

304 
	`DEBUG
(
DB_SYNCPROB
,"cat finishedÉatingát bowl %d [%d:%d]\n",

305 
bow umbî
,
ótög_ˇts_cou¡
,
ótög_mi˚_cou¡
);

306 
	`V
(
muãx
);

309 
	}
}

323 
	$ˇt_¶ìp
(
¶ìp_time
)

326 
	`˛ock¶ìp
(
¶ìp_time
);

328 
	}
}

348 
	$mou£_ót
(
bow umbî
, 
ót_time
)

351 
	`KASSERT
(
bow umbî
 > 0);

352 
	`KASSERT
(()
bow umbî
 <
NumBowls
);

356 
	`P
(
muãx
);

360 i‡(
bowls
[
bow umbî
-1] == 'm') {

362 
	`∑nic
("mou£_ót:áâem±Åÿmakêtwÿmi˚É© from bow»%d!\n",
bow umbî
);

364 i‡(
ótög_ˇts_cou¡
 > 0) {

366 
	`∑nic
("mouse_eat:áttemptÅo makeá mouseÉat while catsáreÉating!\n");

368 
	`KASSERT
(
bowls
[
bow umbî
-1]=='-');

369 
	`KASSERT
(
ótög_ˇts_cou¡
 == 0);

372 
ótög_mi˚_cou¡
 += 1;

373 
bowls
[
bow umbî
-1] = 'm';

375 
	`DEBUG
(
DB_SYNCPROB
,"mouse startsÅoÉatát bowl %d [%d:%d]\n",

376 
bow umbî
,
ótög_ˇts_cou¡
,
ótög_mi˚_cou¡
);

377 
	`V
(
muãx
);

381 
	`˛ock¶ìp
(
ót_time
);

385 
	`P
(
muãx
);

387 
	`KASSERT
(
ótög_mi˚_cou¡
 > 0);

388 
ótög_mi˚_cou¡
 -= 1;

389 
	`KASSERT
(
bowls
[
bow umbî
-1]=='m');

390 
bowls
[
bow umbî
-1]='-';

392 
	`DEBUG
(
DB_SYNCPROB
,"mouse finishesÉatingát bowl %d [%d:%d]\n",

393 
bow umbî
,
ótög_ˇts_cou¡
,
ótög_mi˚_cou¡
);

394 
	`V
(
muãx
);

396 
	}
}

410 
	$mou£_¶ìp
(
¶ìp_time
)

413 
	`˛ock¶ìp
(
¶ìp_time
);

415 
	}
}

434 
	$ˇt_simuœti⁄
(* 
unu£dpoöãr
,

435 
ˇäumbî
)

437 
i
;

438 
bowl
;

439 
time_t
 
bef‹e_£c
, 
a·î_£c
, 
waô_£c
;

440 
uöt32_t
 
bef‹e_n£c
, 
a·î_n£c
, 
waô_n£c
;

443 (Ë
unu£dpoöãr
;

444 (Ë
ˇäumbî
;

447 
i
=0;i<
NumLo›s
;i++) {

450 
	`ˇt_¶ìp
(
C©SÀïTime
);

453 
bowl
 = (()
	`øndom
(Ë% 
NumBowls
) + 1;

455 
	`gëtime
(&
bef‹e_£c
,&
bef‹e_n£c
);

456 
	`ˇt_bef‹e_ótög
(
bowl
);

457 
	`gëtime
(&
a·î_£c
,&
a·î_n£c
);

460 
	`ˇt_ót
(
bowl
, 
C©E©Time
);

462 
	`ˇt_a·î_ótög
(
bowl
);

465 
	`gëöãrvÆ
(
bef‹e_£c
,
bef‹e_n£c
,
a·î_£c
,
a·î_n£c
,&
waô_£c
,&
waô_n£c
);

466 
	`P
(
≥rf_muãx
);

467 
ˇt_tŸÆ_waô_£cs
 +
waô_£c
;

468 
ˇt_tŸÆ_waô_n£cs
 +
waô_n£c
;

469 i‡(
ˇt_tŸÆ_waô_n£cs
 > 1000000000) {

470 
ˇt_tŸÆ_waô_n£cs
 -= 1000000000;

471 
ˇt_tŸÆ_waô_£cs
 ++;

473 
ˇt_waô_cou¡
++;

474 
	`V
(
≥rf_muãx
);

478 
	`V
(
C©Mou£Waô
);

479 
	}
}

498 
	$mou£_simuœti⁄
(* 
unu£dpoöãr
,

499 
mou£numbî
)

501 
i
;

502 
bowl
;

503 
time_t
 
bef‹e_£c
, 
a·î_£c
, 
waô_£c
;

504 
uöt32_t
 
bef‹e_n£c
, 
a·î_n£c
, 
waô_n£c
;

507 (Ë
unu£dpoöãr
;

508 (Ë
mou£numbî
;

510 
i
=0;i<
NumLo›s
;i++) {

513 
	`mou£_¶ìp
(
Mou£SÀïTime
);

516 
bowl
 = (()
	`øndom
(Ë% 
NumBowls
) + 1;

518 
	`gëtime
(&
bef‹e_£c
,&
bef‹e_n£c
);

519 
	`mou£_bef‹e_ótög
(
bowl
);

520 
	`gëtime
(&
a·î_£c
,&
a·î_n£c
);

523 
	`mou£_ót
(
bowl
, 
Mou£E©Time
);

525 
	`mou£_a·î_ótög
(
bowl
);

528 
	`gëöãrvÆ
(
bef‹e_£c
,
bef‹e_n£c
,
a·î_£c
,
a·î_n£c
,&
waô_£c
,&
waô_n£c
);

529 
	`P
(
≥rf_muãx
);

530 
mou£_tŸÆ_waô_£cs
 +
waô_£c
;

531 
mou£_tŸÆ_waô_n£cs
 +
waô_n£c
;

532 i‡(
mou£_tŸÆ_waô_n£cs
 > 1000000000) {

533 
mou£_tŸÆ_waô_n£cs
 -= 1000000000;

534 
mou£_tŸÆ_waô_£cs
 ++;

536 
mou£_waô_cou¡
++;

537 
	`V
(
≥rf_muãx
);

541 
	`V
(
C©Mou£Waô
);

542 
	}
}

568 
	$ˇtmou£
(
«rgs
,

569 ** 
¨gs
)

571 
ˇtödex
, 
mou£ödex
, 
îr‹
;

572 
i
;

573 
món_ˇt_waô_u£cs
, 
món_mou£_waô_u£cs
;

574 
time_t
 
bef‹e_£c
, 
a·î_£c
, 
waô_£c
;

575 
uöt32_t
 
bef‹e_n£c
, 
a·î_n£c
, 
waô_n£c
;

576 
tŸÆ_bowl_mûli£c⁄ds
, 
tŸÆ_ótög_mûli£c⁄ds
, 
utûiz©i⁄_≥r˚¡
;

579 i‡((
«rgs
 != 9) && (nargs != 5)) {

580 
	`k¥ötf
("Usage: <command> NUM_BOWLS NUM_CATS NUM_MICE NUM_LOOPS\n");

581 
	`k¥ötf
("or\n");

582 
	`k¥ötf
("Usage: <command> NUM_BOWLS NUM_CATS NUM_MICE NUM_LOOPS ");

583 
	`k¥ötf
("CAT_EATING_TIME CAT_SLEEPING_TIME MOUSE_EATING_TIME MOUSE_SLEEPING_TIME\n");

588 
NumBowls
 = 
	`©oi
(
¨gs
[1]);

589 i‡(
NumBowls
 <= 0) {

590 
	`k¥ötf
("ˇtmou£: invÆidÇumbî o‡bowls: %d\n",
NumBowls
);

593 
NumC©s
 = 
	`©oi
(
¨gs
[2]);

594 i‡(
NumC©s
 < 0) {

595 
	`k¥ötf
("ˇtmou£: invÆidÇumbî o‡ˇts: %d\n",
NumC©s
);

598 
NumMi˚
 = 
	`©oi
(
¨gs
[3]);

599 i‡(
NumMi˚
 < 0) {

600 
	`k¥ötf
("ˇtmou£: invÆidÇumbî o‡mi˚: %d\n",
NumMi˚
);

603 
NumLo›s
 = 
	`©oi
(
¨gs
[4]);

604 i‡(
NumLo›s
 <= 0) {

605 
	`k¥ötf
("ˇtmou£: invÆidÇumbî o‡lo›s: %d\n",
NumLo›s
);

609 i‡(
«rgs
 == 9) {

610 
C©E©Time
 = 
	`©oi
(
¨gs
[5]);

611 i‡(
C©E©Time
 < 0) {

612 
	`k¥ötf
("ˇtmou£: invÆid c©É©ögÅime: %d\n",
C©E©Time
);

616 
C©SÀïTime
 = 
	`©oi
(
¨gs
[6]);

617 i‡(
C©SÀïTime
 < 0) {

618 
	`k¥ötf
("ˇtmou£: invÆid c© sÀïögÅime: %d\n",
C©SÀïTime
);

622 
Mou£E©Time
 = 
	`©oi
(
¨gs
[7]);

623 i‡(
Mou£E©Time
 < 0) {

624 
	`k¥ötf
("ˇtmou£: invÆid mou£É©ögÅime: %d\n",
Mou£E©Time
);

628 
Mou£SÀïTime
 = 
	`©oi
(
¨gs
[8]);

629 i‡(
Mou£SÀïTime
 < 0) {

630 
	`k¥ötf
("ˇtmou£: invÆid mou£ sÀïögÅime: %d\n",
Mou£SÀïTime
);

635 
	`k¥ötf
("Using %d bowls, %d cats,ánd %d mice. Looping %dÅimes.\n",

636 
NumBowls
,
NumC©s
,
NumMi˚
,
NumLo›s
);

637 
	`k¥ötf
("Usög c©É©ögÅimê%d, c© sÀïögÅimê%d\n", 
C©E©Time
, 
C©SÀïTime
);

638 
	`k¥ötf
("Usög mou£É©ögÅimê%d, mou£ sÀïögÅimê%d\n", 
Mou£E©Time
, 
Mou£SÀïTime
);

642 
C©Mou£Waô
 = 
	`£m_¸óã
("CatMouseWait",0);

643 i‡(
C©Mou£Waô
 =
NULL
) {

644 
	`∑nic
("catmouse: couldÇot create semaphore\n");

648 
	`öôülize_bowls
();

651 
	`ˇtmou£_sync_öô
(
NumBowls
);

654 
	`gëtime
(&
bef‹e_£c
,&
bef‹e_n£c
);

660 
ˇtödex
 = 0; c©ödex < 
NumC©s
; catindex++) {

661 
îr‹
 = 
	`thªad_f‹k
("ˇt_simuœti⁄Åhªad", 
NULL
, 
ˇt_simuœti⁄
, NULL, 
ˇtödex
);

662 i‡(
îr‹
) {

663 
	`∑nic
("ˇt_simuœti⁄:Åhªad_f‹k faûed: %s\n", 
	`°ªº‹
(
îr‹
));

665 i‡(
ˇtödex
 < 
NumMi˚
) {

666 
îr‹
 = 
	`thªad_f‹k
("mou£_simuœti⁄Åhªad", 
NULL
, 
mou£_simuœti⁄
, NULL, 
ˇtödex
);

667 i‡(
îr‹
) {

668 
	`∑nic
("mou£_simuœti⁄:Åhªad_f‹k faûed: %s\n",
	`°ªº‹
(
îr‹
));

673 
mou£ödex
 = 
ˇtödex
; mou£ödex < 
NumMi˚
; mouseindex++) {

674 
îr‹
 = 
	`thªad_f‹k
("mou£_simuœti⁄Åhªad", 
NULL
, 
mou£_simuœti⁄
, NULL, 
mou£ödex
);

675 i‡(
îr‹
) {

676 
	`∑nic
("mou£_simuœti⁄:Åhªad_f‹k faûed: %s\n",
	`°ªº‹
(
îr‹
));

682 
i
=0;i<(
NumC©s
+
NumMi˚
);i++) {

683 
	`P
(
C©Mou£Waô
);

687 
	`gëtime
(&
a·î_£c
,&
a·î_n£c
);

689 
	`gëöãrvÆ
(
bef‹e_£c
,
bef‹e_n£c
,
a·î_£c
,
a·î_n£c
,&
waô_£c
,&
waô_n£c
);

691 
tŸÆ_bowl_mûli£c⁄ds
 = (
waô_£c
*1000 + 
waô_n£c
/1000000)*
NumBowls
;

692 
tŸÆ_ótög_mûli£c⁄ds
 = (
NumC©s
*
C©E©Time
 + 
NumMi˚
*
Mou£E©Time
)*
NumLo›s
*1000;

693 i‡(
tŸÆ_bowl_mûli£c⁄ds
 > 0) {

694 
utûiz©i⁄_≥r˚¡
 = 
tŸÆ_ótög_mûli£c⁄ds
*100/
tŸÆ_bowl_mûli£c⁄ds
;

695 
	`k¥ötf
("Bow»utûiz©i⁄: %d%%\n",
utûiz©i⁄_≥r˚¡
);

699 
	`£m_de°roy
(
C©Mou£Waô
);

702 
	`ˇtmou£_sync_˛ónup
(
NumBowls
);

705 
	`˛ónup_bowls
();

707 i‡(
ˇt_waô_cou¡
 > 0) {

709 
món_ˇt_waô_u£cs
 = (
ˇt_tŸÆ_waô_£cs
*1000000+
ˇt_tŸÆ_waô_n£cs
/1000)/
ˇt_waô_cou¡
;

710 
	`k¥ötf
("Mó¿ˇàwaôögÅime: %d.%d sec⁄ds\n",
món_ˇt_waô_u£cs
/1000000,mean_cat_wait_usecs%1000000);

712 i‡(
mou£_waô_cou¡
 > 0) {

714 
món_mou£_waô_u£cs
 = (
mou£_tŸÆ_waô_£cs
*1000000+
mou£_tŸÆ_waô_n£cs
/1000)/
mou£_waô_cou¡
;

715 
	`k¥ötf
("Mó¿mou£ waôögÅime: %d.%d sec⁄ds\n",
món_mou£_waô_u£cs
/1000000,mean_mouse_wait_usecs%1000000);

719 
	}
}

	@test/os161/kern/synchprobs/catmouse_synch.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<synch¥obs.h
>

4 
	~<synch.h
>

22 
£m≠h‹e
 *
	gglobÆC©Mou£Sem
;

34 
	$ˇtmou£_sync_öô
(
bowls
)

38 ()
bowls
;

39 
globÆC©Mou£Sem
 = 
	`£m_¸óã
("globalCatMouseSem",1);

40 i‡(
globÆC©Mou£Sem
 =
NULL
) {

41 
	`∑nic
("couldÇot create global CatMouse synchronization semaphore");

44 
	}
}

55 
	$ˇtmou£_sync_˛ónup
(
bowls
)

58 ()
bowls
;

59 
	`KASSERT
(
globÆC©Mou£Sem
 !
NULL
);

60 
	`£m_de°roy
(
globÆC©Mou£Sem
);

61 
	}
}

77 
	$ˇt_bef‹e_ótög
(
bowl
)

80 ()
bowl
;

81 
	`KASSERT
(
globÆC©Mou£Sem
 !
NULL
);

82 
	`P
(
globÆC©Mou£Sem
);

83 
	}
}

99 
	$ˇt_a·î_ótög
(
bowl
)

102 ()
bowl
;

103 
	`KASSERT
(
globÆC©Mou£Sem
 !
NULL
);

104 
	`V
(
globÆC©Mou£Sem
);

105 
	}
}

120 
	$mou£_bef‹e_ótög
(
bowl
)

123 ()
bowl
;

124 
	`KASSERT
(
globÆC©Mou£Sem
 !
NULL
);

125 
	`P
(
globÆC©Mou£Sem
);

126 
	}
}

142 
	$mou£_a·î_ótög
(
bowl
)

145 ()
bowl
;

146 
	`KASSERT
(
globÆC©Mou£Sem
 !
NULL
);

147 
	`V
(
globÆC©Mou£Sem
);

148 
	}
}

	@test/os161/kern/synchprobs/whalemating.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<thªad.h
>

36 
	~<ã°.h
>

38 
	#NMATING
 10

	)

42 
	$mÆe
(*
p
, 
which
)

44 ()
p
;

45 
	`k¥ötf
("mÆêwhÆê#%ld sèπög\n", 
which
);

48 
	}
}

52 
	$„mÆe
(*
p
, 
which
)

54 ()
p
;

55 
	`k¥ötf
("„mÆêwhÆê#%ld sèπög\n", 
which
);

58 
	}
}

62 
	$m©chmakî
(*
p
, 
which
)

64 ()
p
;

65 
	`k¥ötf
("m©chmakî whÆê#%ld sèπög\n", 
which
);

68 
	}
}

73 
	$whÆem©ög
(
«rgs
, **
¨gs
)

76 
i
, 
j
, 
îr
=0;

78 ()
«rgs
;

79 ()
¨gs
;

81 
i
 = 0; i < 3; i++) {

82 
j
 = 0; j < 
NMATING
; j++) {

83 #ifde‡
UW


84 
i
) {

86 
îr
 = 
	`thªad_f‹k
("MÆêWhÆêThªad", 
NULL
,

87 
mÆe
, 
NULL
, 
j
);

90 
îr
 = 
	`thªad_f‹k
("FemÆêWhÆêThªad", 
NULL
,

91 
„mÆe
, 
NULL
, 
j
);

94 
îr
 = 
	`thªad_f‹k
("M©chmakî WhÆêThªad", 
NULL
,

95 
m©chmakî
, 
NULL
, 
j
);

99 
i
) {

101 
îr
 = 
	`thªad_f‹k
("Male Whale Thread",

102 
mÆe
, 
NULL
, 
j
, NULL);

105 
îr
 = 
	`thªad_f‹k
("Female Whale Thread",

106 
„mÆe
, 
NULL
, 
j
, NULL);

109 
îr
 = 
	`thªad_f‹k
("Matchmaker Whale Thread",

110 
m©chmakî
, 
NULL
, 
j
, NULL);

114 i‡(
îr
) {

115 
	`∑nic
("whalemating:Åhread_fork failed: %s)\n",

116 
	`°ªº‹
(
îr
));

122 
	}
}

	@test/os161/kern/syscall/file_syscalls.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<kîn/uni°d.h
>

4 
	~<lib.h
>

5 
	~<uio.h
>

6 
	~<sysˇŒ.h
>

7 
	~<vnode.h
>

8 
	~<vfs.h
>

9 
	~<cuºít.h
>

10 
	~<¥oc.h
>

24 
	$sys_wrôe
(
fdesc
,
u£Ωå_t
 
ubuf
,
nbyãs
,*
ªtvÆ
)

26 
iovec
 
iov
;

27 
uio
 
u
;

28 
ªs
;

30 
	`DEBUG
(
DB_SYSCALL
,"SysˇŒ: wrôe(%d,%x,%d)\n",
fdesc
,()
ubuf
,
nbyãs
);

33 i‡(!((
fdesc
==
STDOUT_FILENO
)||(fdesc==
STDERR_FILENO
))) {

34  
EUNIMP
;

36 
	`KASSERT
(
cuΩroc
 !
NULL
);

37 
	`KASSERT
(
cuΩroc
->
c⁄sﬁe
 !
NULL
);

38 
	`KASSERT
(
cuΩroc
->
p_addr•a˚
 !
NULL
);

41 
iov
.
iov_uba£
 = 
ubuf
;

42 
iov
.
iov_Àn
 = 
nbyãs
;

43 
u
.
uio_iov
 = &
iov
;

44 
u
.
uio_iov˙t
 = 1;

45 
u
.
uio_off£t
 = 0;

46 
u
.
uio_ªsid
 = 
nbyãs
;

47 
u
.
uio_£gÊg
 = 
UIO_USERSPACE
;

48 
u
.
uio_rw
 = 
UIO_WRITE
;

49 
u
.
uio_•a˚
 = 
cuΩroc
->
p_addr•a˚
;

51 
ªs
 = 
	`VOP_WRITE
(
cuΩroc
->
c⁄sﬁe
,&
u
);

52 i‡(
ªs
) {

53  
ªs
;

57 *
ªtvÆ
 = 
nbyãs
 - 
u
.
uio_ªsid
;

58 
	`KASSERT
(*
ªtvÆ
 >= 0);

60 
	}
}

	@test/os161/kern/syscall/loadelf.c

53 
	~<ty≥s.h
>

54 
	~<kîn/î∫o.h
>

55 
	~<lib.h
>

56 
	~<uio.h
>

57 
	~<¥oc.h
>

58 
	~<cuºít.h
>

59 
	~<addr•a˚.h
>

60 
	~<vnode.h
>

61 
	~<ñf.h
>

79 
	$lﬂd_£gmít
(
addr•a˚
 *
as
, 
vnode
 *
v
,

80 
off_t
 
off£t
, 
vaddr_t
 
vaddr
,

81 
size_t
 
memsize
, size_à
fûesize
,

82 
is_execuèbÀ
)

84 
iovec
 
iov
;

85 
uio
 
u
;

86 
ªsu…
;

88 i‡(
fûesize
 > 
memsize
) {

89 
	`k¥ötf
("ELF: warning: segment filesize > segment memsize\n");

90 
fûesize
 = 
memsize
;

93 
	`DEBUG
(
DB_EXEC
, "ELF: Loading %lu bytesÅo 0x%lx\n",

94 (Ë
fûesize
, (Ë
vaddr
);

96 
iov
.
iov_uba£
 = (
u£Ωå_t
)
vaddr
;

97 
iov
.
iov_Àn
 = 
memsize
;

98 
u
.
uio_iov
 = &
iov
;

99 
u
.
uio_iov˙t
 = 1;

100 
u
.
uio_ªsid
 = 
fûesize
;

101 
u
.
uio_off£t
 = 
off£t
;

102 
u
.
uio_£gÊg
 = 
is_execuèbÀ
 ? 
UIO_USERISPACE
 : 
UIO_USERSPACE
;

103 
u
.
uio_rw
 = 
UIO_READ
;

104 
u
.
uio_•a˚
 = 
as
;

106 
ªsu…
 = 
	`VOP_READ
(
v
, &
u
);

107 i‡(
ªsu…
) {

108  
ªsu…
;

111 i‡(
u
.
uio_ªsid
 != 0) {

113 
	`k¥ötf
("ELF: shortÑead on segment - fileÅruncated?\n");

114  
ENOEXEC
;

133 
size_t
 
fûœmt
;

135 
fûœmt
 = 
memsize
 - 
fûesize
;

136 i‡(
fûœmt
 > 0) {

137 
	`DEBUG
(
DB_EXEC
, "ELF: Zero-filling %lu more bytes\n",

138 (Ë
fûœmt
);

139 
u
.
uio_ªsid
 +
fûœmt
;

140 
ªsu…
 = 
	`uiomovezîos
(
fûœmt
, &
u
);

145  
ªsu…
;

146 
	}
}

154 
	$lﬂd_ñf
(
vnode
 *
v
, 
vaddr_t
 *
íåypoöt
)

156 
Elf_Ehdr
 
eh
;

157 
Elf_Phdr
 
ph
;

158 
ªsu…
, 
i
;

159 
iovec
 
iov
;

160 
uio
 
ku
;

161 
addr•a˚
 *
as
;

163 
as
 = 
	`cuΩroc_gëas
();

169 
	`uio_köô
(&
iov
, &
ku
, &
eh
, ”h), 0, 
UIO_READ
);

170 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

171 i‡(
ªsu…
) {

172  
ªsu…
;

175 i‡(
ku
.
uio_ªsid
 != 0) {

177 
	`k¥ötf
("ELF: shortÑead on header - fileÅruncated?\n");

178  
ENOEXEC
;

192 i‡(
eh
.
e_idít
[
EI_MAG0
] !
ELFMAG0
 ||

193 
eh
.
e_idít
[
EI_MAG1
] !
ELFMAG1
 ||

194 
eh
.
e_idít
[
EI_MAG2
] !
ELFMAG2
 ||

195 
eh
.
e_idít
[
EI_MAG3
] !
ELFMAG3
 ||

196 
eh
.
e_idít
[
EI_CLASS
] !
ELFCLASS32
 ||

197 
eh
.
e_idít
[
EI_DATA
] !
ELFDATA2MSB
 ||

198 
eh
.
e_idít
[
EI_VERSION
] !
EV_CURRENT
 ||

199 
eh
.
e_vîsi⁄
 !
EV_CURRENT
 ||

200 
eh
.
e_ty≥
!=
ET_EXEC
 ||

201 
eh
.
e_machöe
!=
EM_MACHINE
) {

202  
ENOEXEC
;

220 
i
=0; i<
eh
.
e_phnum
; i++) {

221 
off_t
 
off£t
 = 
eh
.
e_phoff
 + 
i
*eh.
e_phítsize
;

222 
	`uio_köô
(&
iov
, &
ku
, &
ph
, ’h), 
off£t
, 
UIO_READ
);

224 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

225 i‡(
ªsu…
) {

226  
ªsu…
;

229 i‡(
ku
.
uio_ªsid
 != 0) {

231 
	`k¥ötf
("ELF: shortÑead onÖhdr - fileÅruncated?\n");

232  
ENOEXEC
;

235 
ph
.
p_ty≥
) {

236 
PT_NULL
: ;

237 
PT_PHDR
: ;

238 
PT_MIPS_REGINFO
: ;

239 
PT_LOAD
: ;

241 
	`k¥ötf
("loadelf: unknown segmentÅype %d\n",

242 
ph
.
p_ty≥
);

243  
ENOEXEC
;

246 
ªsu…
 = 
	`as_deföe_ªgi⁄
(
as
,

247 
ph
.
p_vaddr
,Öh.
p_memsz
,

248 
ph
.
p_Êags
 & 
PF_R
,

249 
ph
.
p_Êags
 & 
PF_W
,

250 
ph
.
p_Êags
 & 
PF_X
);

251 i‡(
ªsu…
) {

252  
ªsu…
;

256 
ªsu…
 = 
	`as_¥ï¨e_lﬂd
(
as
);

257 i‡(
ªsu…
) {

258  
ªsu…
;

265 
i
=0; i<
eh
.
e_phnum
; i++) {

266 
off_t
 
off£t
 = 
eh
.
e_phoff
 + 
i
*eh.
e_phítsize
;

267 
	`uio_köô
(&
iov
, &
ku
, &
ph
, ’h), 
off£t
, 
UIO_READ
);

269 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

270 i‡(
ªsu…
) {

271  
ªsu…
;

274 i‡(
ku
.
uio_ªsid
 != 0) {

276 
	`k¥ötf
("ELF: shortÑead onÖhdr - fileÅruncated?\n");

277  
ENOEXEC
;

280 
ph
.
p_ty≥
) {

281 
PT_NULL
: ;

282 
PT_PHDR
: ;

283 
PT_MIPS_REGINFO
: ;

284 
PT_LOAD
: ;

286 
	`k¥ötf
("loadelf: unknown segmentÅype %d\n",

287 
ph
.
p_ty≥
);

288  
ENOEXEC
;

291 
ªsu…
 = 
	`lﬂd_£gmít
(
as
, 
v
, 
ph
.
p_off£t
,Öh.
p_vaddr
,

292 
ph
.
p_memsz
,Öh.
p_fûesz
,

293 
ph
.
p_Êags
 & 
PF_X
);

294 i‡(
ªsu…
) {

295  
ªsu…
;

299 
ªsu…
 = 
	`as_com∂ëe_lﬂd
(
as
);

300 i‡(
ªsu…
) {

301  
ªsu…
;

304 *
íåypoöt
 = 
eh
.
e_íåy
;

307 
	}
}

	@test/os161/kern/syscall/proc_syscalls.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<kîn/uni°d.h
>

4 
	~<kîn/waô.h
>

5 
	~<lib.h
>

6 
	~<sysˇŒ.h
>

7 
	~<cuºít.h
>

8 
	~<¥oc.h
>

9 
	~<thªad.h
>

10 
	~<addr•a˚.h
>

11 
	~<c›yöout.h
>

16 
	$sys__exô
(
exôcode
) {

18 
addr•a˚
 *
as
;

19 
¥oc
 *
p
 = 
cuΩroc
;

22 ()
exôcode
;

24 
	`DEBUG
(
DB_SYSCALL
,"SysˇŒ: _exô(%d)\n",
exôcode
);

26 
	`KASSERT
(
cuΩroc
->
p_addr•a˚
 !
NULL
);

27 
	`as_dó˘iv©e
();

35 
as
 = 
	`cuΩroc_£ès
(
NULL
);

36 
	`as_de°roy
(
as
);

40 
	`¥oc_ªmthªad
(
cuπhªad
);

44 
	`¥oc_de°roy
(
p
);

46 
	`thªad_exô
();

48 
	`∑nic
("return fromÅhread_exit in sys_exit\n");

49 
	}
}

54 
	$sys_gëpid
(
pid_t
 *
ªtvÆ
)

58 *
ªtvÆ
 = 1;

60 
	}
}

65 
	$sys_waôpid
(
pid_t
 
pid
,

66 
u£Ωå_t
 
°©us
,

67 
›ti⁄s
,

68 
pid_t
 *
ªtvÆ
)

70 
exô°©us
;

71 
ªsu…
;

82 i‡(
›ti⁄s
 != 0) {

83 (
EINVAL
);

86 
exô°©us
 = 0;

87 
ªsu…
 = 
	`c›yout
((*)&
exô°©us
,
°©us
,());

88 i‡(
ªsu…
) {

89 (
ªsu…
);

91 *
ªtvÆ
 = 
pid
;

93 
	}
}

	@test/os161/kern/syscall/runprogram.c

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<kîn/f˙é.h
>

39 
	~<lib.h
>

40 
	~<¥oc.h
>

41 
	~<cuºít.h
>

42 
	~<addr•a˚.h
>

43 
	~<vm.h
>

44 
	~<vfs.h
>

45 
	~<sysˇŒ.h
>

46 
	~<ã°.h
>

55 
	$ru≈rogøm
(*
¥og«me
)

57 
addr•a˚
 *
as
;

58 
vnode
 *
v
;

59 
vaddr_t
 
íåypoöt
, 
°ack±r
;

60 
ªsu…
;

63 
ªsu…
 = 
	`vfs_›í
(
¥og«me
, 
O_RDONLY
, 0, &
v
);

64 i‡(
ªsu…
) {

65  
ªsu…
;

69 
	`KASSERT
(
	`cuΩroc_gëas
(Ë=
NULL
);

72 
as
 = 
	`as_¸óã
();

73 i‡(
as
 ==
NULL
) {

74 
	`vfs_˛o£
(
v
);

75  
ENOMEM
;

79 
	`cuΩroc_£ès
(
as
);

80 
	`as_a˘iv©e
();

83 
ªsu…
 = 
	`lﬂd_ñf
(
v
, &
íåypoöt
);

84 i‡(
ªsu…
) {

86 
	`vfs_˛o£
(
v
);

87  
ªsu…
;

91 
	`vfs_˛o£
(
v
);

94 
ªsu…
 = 
	`as_deföe_°ack
(
as
, &
°ack±r
);

95 i‡(
ªsu…
) {

97  
ªsu…
;

101 
	`íãr_√w_¥o˚ss
(0 , 
NULL
 ,

102 
°ack±r
, 
íåypoöt
);

105 
	`∑nic
("enter_new_processÑeturned\n");

106  
EINVAL
;

107 
	}
}

	@test/os161/kern/syscall/time_syscalls.c

30 
	~<ty≥s.h
>

31 
	~<˛ock.h
>

32 
	~<c›yöout.h
>

33 
	~<sysˇŒ.h
>

39 
	$sys___time
(
u£Ωå_t
 
u£r_£c⁄ds_±r
, u£Ωå_à
u£r_«no£c⁄ds_±r
)

41 
time_t
 
£c⁄ds
;

42 
uöt32_t
 
«no£c⁄ds
;

43 
ªsu…
;

45 
	`gëtime
(&
£c⁄ds
, &
«no£c⁄ds
);

47 
ªsu…
 = 
	`c›yout
(&
£c⁄ds
, 
u£r_£c⁄ds_±r
, (
time_t
));

48 i‡(
ªsu…
) {

49  
ªsu…
;

52 
ªsu…
 = 
	`c›yout
(&
«no£c⁄ds
, 
u£r_«no£c⁄ds_±r
, (
uöt32_t
));

53 i‡(
ªsu…
) {

54  
ªsu…
;

58 
	}
}

	@test/os161/kern/test/arraytest.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<¨øy.h
>

33 
	~<ã°.h
>

35 
	#TESTSIZE
 73

	)

39 
	$ã°a
(
¨øy
 *
a
)

41 
ã°¨øy
[
TESTSIZE
];

42 
i
, 
j
, 
n
, 
r
, *
p
;

44 
i
=0; i<
TESTSIZE
; i++) {

45 
ã°¨øy
[
i
]=i;

48 
n
 = 
	`¨øy_num
(
a
);

49 
	`KASSERT
(
n
==0);

51 
i
=0; i<
TESTSIZE
; i++) {

52 
r
 = 
	`¨øy_add
(
a
, &
ã°¨øy
[
i
], 
NULL
);

53 
	`KASSERT
(
r
==0);

54 
n
 = 
	`¨øy_num
(
a
);

55 
	`KASSERT
(
n
==
i
+1);

57 
n
 = 
	`¨øy_num
(
a
);

58 
	`KASSERT
(
n
==
TESTSIZE
);

60 
i
=0; i<
TESTSIZE
; i++) {

61 
p
 = 
	`¨øy_gë
(
a
, 
i
);

62 
	`KASSERT
(*
p
 =
i
);

64 
n
 = 
	`¨øy_num
(
a
);

65 
	`KASSERT
(
n
==
TESTSIZE
);

67 
j
=0; j<
TESTSIZE
*4; j++) {

68 
i
 = 
	`øndom
()%
TESTSIZE
;

69 
p
 = 
	`¨øy_gë
(
a
, 
i
);

70 
	`KASSERT
(*
p
 =
i
);

72 
n
 = 
	`¨øy_num
(
a
);

73 
	`KASSERT
(
n
==
TESTSIZE
);

75 
i
=0; i<
TESTSIZE
; i++) {

76 
	`¨øy_£t
(
a
, 
i
, &
ã°¨øy
[
TESTSIZE
-i-1]);

79 
i
=0; i<
TESTSIZE
; i++) {

80 
p
 = 
	`¨øy_gë
(
a
, 
i
);

81 
	`KASSERT
(*
p
 =
TESTSIZE
-
i
-1);

84 
r
 = 
	`¨øy_£tsize
(
a
, 
TESTSIZE
/2);

85 
	`KASSERT
(
r
==0);

87 
i
=0; i<
TESTSIZE
/2; i++) {

88 
p
 = 
	`¨øy_gë
(
a
, 
i
);

89 
	`KASSERT
(*
p
 =
TESTSIZE
-
i
-1);

92 
	`¨øy_ªmove
(
a
, 1);

94 
i
=1; i<
TESTSIZE
/2 - 1; i++) {

95 
p
 = 
	`¨øy_gë
(
a
, 
i
);

96 
	`KASSERT
(*
p
 =
TESTSIZE
-
i
-2);

98 
p
 = 
	`¨øy_gë
(
a
, 0);

99 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

101 
	`¨øy_£tsize
(
a
, 2);

102 
p
 = 
	`¨øy_gë
(
a
, 0);

103 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

104 
p
 = 
	`¨øy_gë
(
a
, 1);

105 
	`KASSERT
(*
p
 =
TESTSIZE
-3);

107 
	`¨øy_£t
(
a
, 1, 
NULL
);

108 
	`¨øy_£tsize
(
a
, 2);

109 
p
 = 
	`¨øy_gë
(
a
, 0);

110 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

111 
p
 = 
	`¨øy_gë
(
a
, 1);

112 
	`KASSERT
(
p
==
NULL
);

114 
	`¨øy_£tsize
(
a
, 
TESTSIZE
*10);

115 
p
 = 
	`¨øy_gë
(
a
, 0);

116 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

117 
p
 = 
	`¨øy_gë
(
a
, 1);

118 
	`KASSERT
(
p
==
NULL
);

119 
	}
}

122 
	$¨øyã°
(
«rgs
, **
¨gs
)

124 
¨øy
 *
a
;

126 ()
«rgs
;

127 ()
¨gs
;

129 
	`k¥ötf
("BeginningárrayÅest...\n");

130 
a
 = 
	`¨øy_¸óã
();

131 
	`KASSERT
(
a
 !
NULL
);

133 
	`ã°a
(
a
);

135 
	`¨øy_£tsize
(
a
, 0);

137 
	`ã°a
(
a
);

139 
	`¨øy_£tsize
(
a
, 0);

140 
	`¨øy_de°roy
(
a
);

142 
	`k¥ötf
("ArrayÅest complete\n");

144 
	}
}

	@test/os161/kern/test/bitmaptest.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<bôm≠.h
>

33 
	~<ã°.h
>

35 
	#TESTSIZE
 533

	)

38 
	$bôm≠ã°
(
«rgs
, **
¨gs
)

40 
bôm≠
 *
b
;

41 
d©a
[
TESTSIZE
];

42 
uöt32_t
 
x
;

43 
i
;

45 ()
«rgs
;

46 ()
¨gs
;

48 
	`k¥ötf
("Starting bitmapÅest...\n");

50 
i
=0; i<
TESTSIZE
; i++) {

51 
d©a
[
i
] = 
	`øndom
()%2;

54 
b
 = 
	`bôm≠_¸óã
(
TESTSIZE
);

55 
	`KASSERT
(
b
 !
NULL
);

57 
i
=0; i<
TESTSIZE
; i++) {

58 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
)==0);

61 
i
=0; i<
TESTSIZE
; i++) {

62 i‡(
d©a
[
i
]) {

63 
	`bôm≠_m¨k
(
b
, 
i
);

66 
i
=0; i<
TESTSIZE
; i++) {

67 i‡(
d©a
[
i
]) {

68 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
));

71 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
)==0);

75 
i
=0; i<
TESTSIZE
; i++) {

76 i‡(
d©a
[
i
]) {

77 
	`bôm≠_unm¨k
(
b
, 
i
);

80 
	`bôm≠_m¨k
(
b
, 
i
);

83 
i
=0; i<
TESTSIZE
; i++) {

84 i‡(
d©a
[
i
]) {

85 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
)==0);

88 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
));

92 
	`bôm≠_Æloc
(
b
, &
x
)==0) {

93 
	`KASSERT
(
x
 < 
TESTSIZE
);

94 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
x
));

95 
	`KASSERT
(
d©a
[
x
]==1);

96 
d©a
[
x
] = 0;

99 
i
=0; i<
TESTSIZE
; i++) {

100 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
));

101 
	`KASSERT
(
d©a
[
i
]==0);

104 
	`k¥ötf
("BitmapÅest complete\n");

106 
	}
}

	@test/os161/kern/test/fstest.c

41 
	~<ty≥s.h
>

42 
	~<kîn/î∫o.h
>

43 
	~<kîn/f˙é.h
>

44 
	~<lib.h
>

45 
	~<uio.h
>

46 
	~<thªad.h
>

47 
	~<synch.h
>

48 
	~<vfs.h
>

49 
	~<fs.h
>

50 
	~<vnode.h
>

51 
	~<ã°.h
>

53 
	#SLOGAN
 "HODIE MIHI - CRAS TIBI\n"

	)

54 
	#FILENAME
 "f°e°.tmp"

	)

55 
	#NCHUNKS
 720

	)

56 
	#NTHREADS
 12

	)

57 
	#NCREATES
 32

	)

59 
£m≠h‹e
 *
	gthªad£m
 = 
NULL
;

63 
	$öô_thªad£m
()

65 i‡(
thªad£m
==
NULL
) {

66 
thªad£m
 = 
	`£m_¸óã
("fstestsem", 0);

67 i‡(
thªad£m
 =
NULL
) {

68 
	`∑nic
("fstest: sem_create failed\n");

71 
	}
}

79 
	$rŸ©e
(*
°r
, 
amt
)

81 
i
, 
ch
;

83 
amt
 = (amt+2600)%26;

84 
	`KASSERT
(
amt
>=0);

86 
i
=0; 
°r
[i]; i++) {

87 
ch
 = 
°r
[
i
];

88 i‡(
ch
>='A' && ch<='Z') {

89 
ch
 = ch - 'A';

90 
ch
 +
amt
;

91 
ch
 %= 26;

92 
ch
 = ch + 'A';

93 
	`KASSERT
(
ch
>='A' && ch<='Z');

95 
°r
[
i
] = 
ch
;

97 
	}
}

103 
	$f°e°_makíame
(*
buf
, 
size_t
 
buÊí
,

104 c⁄° *
fs
, c⁄° *
«mesuffix
)

106 
	`¢¥ötf
(
buf
, 
buÊí
, "%s:%s%s", 
fs
, 
FILENAME
, 
«mesuffix
);

107 
	`KASSERT
(
	`°æí
(
buf
Ë< 
buÊí
);

108 
	}
}

110 
	#MAKENAME
(Ë
	`f°e°_makíame
(
«me
, “ame), 
fs
, 
«mesuffix
)

	)

114 
	$f°e°_ªmove
(c⁄° *
fs
, c⁄° *
«mesuffix
)

116 
«me
[32];

117 
buf
[32];

118 
îr
;

120 
	`MAKENAME
();

122 
	`°r˝y
(
buf
, 
«me
);

123 
îr
 = 
	`vfs_ªmove
(
buf
);

124 i‡(
îr
) {

125 
	`k¥ötf
("CouldÇŸÑemovê%s: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

130 
	}
}

134 
	$f°e°_wrôe
(c⁄° *
fs
, c⁄° *
«mesuffix
,

135 
°ridesize
, 
°ridïos
)

137 
vnode
 *
vn
;

138 
îr
;

139 
i
;

140 
size_t
 
shouldbyãs
=0;

141 
size_t
 
byãs
=0;

142 
off_t
 
pos
=0;

143 
«me
[32];

144 
buf
[32];

145 
iovec
 
iov
;

146 
uio
 
ku
;

147 
Êags
;

149 
	`KASSERT
((
buf
Ë> 
	`°æí
(
SLOGAN
));

151 
	`MAKENAME
();

153 
Êags
 = 
O_WRONLY
|
O_CREAT
;

154 i‡(
°ridesize
 == 1) {

155 
Êags
 |
O_TRUNC
;

159 
	`°r˝y
(
buf
, 
«me
);

160 
îr
 = 
	`vfs_›í
(
buf
, 
Êags
, 0664, &
vn
);

161 i‡(
îr
) {

162 
	`k¥ötf
("CouldÇot open %s for write: %s\n",

163 
«me
, 
	`°ªº‹
(
îr
));

167 
i
=0; i<
NCHUNKS
; i++) {

168 i‡(
i
 % 
°ridesize
 !
°ridïos
) {

169 
pos
 +
	`°æí
(
SLOGAN
);

172 
	`°r˝y
(
buf
, 
SLOGAN
);

173 
	`rŸ©e
(
buf
, 
i
);

174 
	`uio_köô
(&
iov
, &
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 
pos
, 
UIO_WRITE
);

175 
îr
 = 
	`VOP_WRITE
(
vn
, &
ku
);

176 i‡(
îr
) {

177 
	`k¥ötf
("%s: Wrôêîr‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

178 
	`vfs_˛o£
(
vn
);

179 
	`vfs_ªmove
(
«me
);

183 i‡(
ku
.
uio_ªsid
 > 0) {

184 
	`k¥ötf
("%s: Short write: %lu bytesÜeft over\n",

185 
«me
, (Ë
ku
.
uio_ªsid
);

186 
	`vfs_˛o£
(
vn
);

187 
	`vfs_ªmove
(
«me
);

191 
byãs
 +(
ku
.
uio_off£t
 - 
pos
);

192 
shouldbyãs
 +
	`°æí
(
SLOGAN
);

193 
pos
 = 
ku
.
uio_off£t
;

196 
	`vfs_˛o£
(
vn
);

198 i‡(
byãs
 !
shouldbyãs
) {

199 
	`k¥ötf
("%s: %lu bytes written, should have been %lu!\n",

200 
«me
, (Ë
byãs
,

201 (Ë(
NCHUNKS
*
	`°æí
(
SLOGAN
)));

202 
	`vfs_ªmove
(
«me
);

205 
	`k¥ötf
("%s: %lu byã†wrôãn\n", 
«me
, (Ë
byãs
);

208 
	}
}

212 
	$f°e°_ªad
(c⁄° *
fs
, c⁄° *
«mesuffix
)

214 
vnode
 *
vn
;

215 
îr
;

216 
i
;

217 
size_t
 
byãs
=0;

218 
«me
[32];

219 
buf
[32];

220 
iovec
 
iov
;

221 
uio
 
ku
;

223 
	`MAKENAME
();

226 
	`°r˝y
(
buf
, 
«me
);

227 
îr
 = 
	`vfs_›í
(
buf
, 
O_RDONLY
, 0664, &
vn
);

228 i‡(
îr
) {

229 
	`k¥ötf
("CouldÇot openÅest file forÑead: %s\n",

230 
	`°ªº‹
(
îr
));

234 
i
=0; i<
NCHUNKS
; i++) {

235 
	`uio_köô
(&
iov
, &
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 
byãs
, 
UIO_READ
);

236 
îr
 = 
	`VOP_READ
(
vn
, &
ku
);

237 i‡(
îr
) {

238 
	`k¥ötf
("%s: RódÉº‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

239 
	`vfs_˛o£
(
vn
);

243 i‡(
ku
.
uio_ªsid
 > 0) {

244 
	`k¥ötf
("%s: Sh‹àªad: %lu byã†À· ovî\n", 
«me
,

245 (Ë
ku
.
uio_ªsid
);

246 
	`vfs_˛o£
(
vn
);

249 
buf
[
	`°æí
(
SLOGAN
)] = 0;

250 
	`rŸ©e
(
buf
, -
i
);

251 i‡(
	`°rcmp
(
buf
, 
SLOGAN
)) {

252 
	`k¥ötf
("%s: Test failed:Üine %d mismatched: %s\n",

253 
«me
, 
i
+1, 
buf
);

254 
	`vfs_˛o£
(
vn
);

258 
byãs
 = 
ku
.
uio_off£t
;

261 
	`vfs_˛o£
(
vn
);

263 i‡(
byãs
 !
NCHUNKS
*
	`°æí
(
SLOGAN
)) {

264 
	`k¥ötf
("%s: %lu bytesÑead, should have been %lu!\n",

265 
«me
, (Ë
byãs
,

266 (Ë(
NCHUNKS
*
	`°æí
(
SLOGAN
)));

269 
	`k¥ötf
("%s: %lu byã†ªad\n", 
«me
, (Ë
byãs
);

271 
	}
}

277 
	$dof°e°
(c⁄° *
fûesys
)

279 
	`k¥ötf
("*** Sèπög fûesy°emÅe° o¿%s:\n", 
fûesys
);

281 i‡(
	`f°e°_wrôe
(
fûesys
, "", 1, 0)) {

282 
	`k¥ötf
("*** Test failed\n");

286 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

287 
	`k¥ötf
("*** Test failed\n");

291 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

292 
	`k¥ötf
("*** Test failed\n");

296 
	`k¥ötf
("*** FilesystemÅest done\n");

297 
	}
}

303 
	$ªad°ªss_thªad
(*
fs
, 
num
)

305 c⁄° *
fûesys
 = 
fs
;

306 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

307 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

309 
	`V
(
thªad£m
);

310 
	}
}

314 
	$d‹ód°ªss
(c⁄° *
fûesys
)

316 
i
, 
îr
;

318 
	`öô_thªad£m
();

320 
	`k¥ötf
("*** Sèπög f†ªad såes†ã° o¿%s:\n", 
fûesys
);

322 i‡(
	`f°e°_wrôe
(
fûesys
, "", 1, 0)) {

323 
	`k¥ötf
("*** Test failed\n");

327 
i
=0; i<
NTHREADS
; i++) {

328 
îr
 = 
	`thªad_f‹k
("ªad°ªss", 
NULL
,

329 
ªad°ªss_thªad
, (*)
fûesys
, 
i
);

330 i‡(
îr
) {

331 
	`∑nic
("readstress:Åhread_fork failed: %s\n",

332 
	`°ªº‹
(
îr
));

336 
i
=0; i<
NTHREADS
; i++) {

337 
	`P
(
thªad£m
);

340 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

341 
	`k¥ötf
("*** Test failed\n");

345 
	`k¥ötf
("*** fsÑead stressÅest done\n");

346 
	}
}

352 
	$wrôe°ªss_thªad
(*
fs
, 
num
)

354 c⁄° *
fûesys
 = 
fs
;

355 
num°r
[8];

356 
	`¢¥ötf
(
num°r
, “um°r), "%lu", 
num
);

358 i‡(
	`f°e°_wrôe
(
fûesys
, 
num°r
, 1, 0)) {

359 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

360 
	`V
(
thªad£m
);

364 i‡(
	`f°e°_ªad
(
fûesys
, 
num°r
)) {

365 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

366 
	`V
(
thªad£m
);

370 i‡(
	`f°e°_ªmove
(
fûesys
, 
num°r
)) {

371 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

374 
	`k¥ötf
("*** Thªad %lu: d⁄e\n", 
num
);

376 
	`V
(
thªad£m
);

377 
	}
}

381 
	$dowrôe°ªss
(c⁄° *
fûesys
)

383 
i
, 
îr
;

385 
	`öô_thªad£m
();

387 
	`k¥ötf
("*** Sèπög f†wrôê°ªs†ã° o¿%s:\n", 
fûesys
);

389 
i
=0; i<
NTHREADS
; i++) {

390 
îr
 = 
	`thªad_f‹k
("wrôe°ªss", 
NULL
,

391 
wrôe°ªss_thªad
, (*)
fûesys
, 
i
);

392 i‡(
îr
) {

393 
	`∑nic
("thªad_f‹k faûed %s\n", 
	`°ªº‹
(
îr
));

397 
i
=0; i<
NTHREADS
; i++) {

398 
	`P
(
thªad£m
);

401 
	`k¥ötf
("*** fs write stressÅest done\n");

402 
	}
}

408 
	$wrôe°ªss2_thªad
(*
fs
, 
num
)

410 c⁄° *
fûesys
 = 
fs
;

412 i‡(
	`f°e°_wrôe
(
fûesys
, "", 
NTHREADS
, 
num
)) {

413 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

414 
	`V
(
thªad£m
);

418 
	`V
(
thªad£m
);

419 
	}
}

423 
	$dowrôe°ªss2
(c⁄° *
fûesys
)

425 
i
, 
îr
;

426 
«me
[32];

427 
vnode
 *
vn
;

429 
	`öô_thªad£m
();

431 
	`k¥ötf
("*** Sèπög f†wrôê°ªs†ã° 2 o¿%s:\n", 
fûesys
);

434 
	`f°e°_makíame
(
«me
, “ame), 
fûesys
, "");

435 
îr
 = 
	`vfs_›í
(
«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664, &
vn
);

436 i‡(
îr
) {

437 
	`k¥ötf
("CouldÇŸ cª©êã° fûe: %s\n", 
	`°ªº‹
(
îr
));

438 
	`k¥ötf
("*** Test failed\n");

441 
	`vfs_˛o£
(
vn
);

443 
i
=0; i<
NTHREADS
; i++) {

444 
îr
 = 
	`thªad_f‹k
("wrôe°ªss2", 
NULL
,

445 
wrôe°ªss2_thªad
, (*)
fûesys
, 
i
);

446 i‡(
îr
) {

447 
	`∑nic
("writestress2:Åhread_fork failed: %s\n",

448 
	`°ªº‹
(
îr
));

452 
i
=0; i<
NTHREADS
; i++) {

453 
	`P
(
thªad£m
);

456 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

457 
	`k¥ötf
("*** Test failed\n");

461 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

462 
	`k¥ötf
("*** Test failed\n");

466 
	`k¥ötf
("*** fs write stressÅest 2 done\n");

467 
	}
}

473 
	$¸óã°ªss_thªad
(*
fs
, 
num
)

475 c⁄° *
fûesys
 = 
fs
;

476 
i
;

477 
num°r
[16];

479 
i
=0; i<
NCREATES
; i++) {

481 
	`¢¥ötf
(
num°r
, “um°r), "%lu-%d", 
num
, 
i
);

483 i‡(
	`f°e°_wrôe
(
fûesys
, 
num°r
, 1, 0)) {

484 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

485 
	`V
(
thªad£m
);

489 i‡(
	`f°e°_ªad
(
fûesys
, 
num°r
)) {

490 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

491 
	`V
(
thªad£m
);

495 i‡(
	`f°e°_ªmove
(
fûesys
, 
num°r
)) {

496 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

497 
	`V
(
thªad£m
);

503 
	`V
(
thªad£m
);

504 
	}
}

508 
	$do¸óã°ªss
(c⁄° *
fûesys
)

510 
i
, 
îr
;

512 
	`öô_thªad£m
();

514 
	`k¥ötf
("*** Sèπög f†¸óã såes†ã° o¿%s:\n", 
fûesys
);

516 
i
=0; i<
NTHREADS
; i++) {

517 #ifde‡
UW


518 
îr
 = 
	`thªad_f‹k
("¸óã°ªss", 
NULL
,

519 
¸óã°ªss_thªad
, (*)
fûesys
, 
i
);

521 
îr
 = 
	`thªad_f‹k
("createstress",

522 
¸óã°ªss_thªad
, (*)
fûesys
, 
i
,

523 
NULL
);

525 i‡(
îr
) {

526 
	`∑nic
("createstress:Åhread_fork failed %s\n",

527 
	`°ªº‹
(
îr
));

531 
i
=0; i<
NTHREADS
; i++) {

532 
	`P
(
thªad£m
);

535 
	`k¥ötf
("*** fs create stressÅest done\n");

536 
	}
}

542 
	$checkfûesy°em
(
«rgs
, **
¨gs
)

544 *
devi˚
;

546 i‡(
«rgs
 != 2) {

547 
	`k¥ötf
("Usage: fs[12345] filesystem:\n");

548  
EINVAL
;

551 
devi˚
 = 
¨gs
[1];

554 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

555 
devi˚
[
	`°æí
(device)-1] = 0;

559 
	}
}

561 
	#DEFTEST
(
ã°«me
) \

563 
	`ã°«me
(
«rgs
, **
¨gs
) \

565 
ªsu…
; \

566 
ªsu…
 = 
	`checkfûesy°em
(
«rgs
, 
¨gs
); \

567 i‡(
ªsu…
) { \

568  
ªsu…
; \

570 do##
	`ã°«me
(
¨gs
[1]); \

572 }

	)

574 
DEFTEST
(
f°e°
);

575 
DEFTEST
(
ªad°ªss
);

576 
DEFTEST
(
wrôe°ªss
);

577 
DEFTEST
(
wrôe°ªss2
);

578 
DEFTEST
(
¸óã°ªss
);

583 
	$¥ötfûe
(
«rgs
, **
¨gs
)

585 
vnode
 *
rv
, *
wv
;

586 
iovec
 
iov
;

587 
uio
 
ku
;

588 
off_t
 
Ωos
=0, 
wpos
=0;

589 
buf
[128];

590 
outfûe
[16];

591 
ªsu…
;

592 
d⁄e
=0;

594 i‡(
«rgs
 != 2) {

595 
	`k¥ötf
("Usage:Öf filename\n");

596  
EINVAL
;

600 
	`°r˝y
(
outfûe
, "con:");

602 
ªsu…
 = 
	`vfs_›í
(
¨gs
[1], 
O_RDONLY
, 0664, &
rv
);

603 i‡(
ªsu…
) {

604 
	`k¥ötf
("¥ötfûe: %s\n", 
	`°ªº‹
(
ªsu…
));

605  
ªsu…
;

608 
ªsu…
 = 
	`vfs_›í
(
outfûe
, 
O_WRONLY
, 0664, &
wv
);

609 i‡(
ªsu…
) {

610 
	`k¥ötf
("¥ötfûe: ouçut: %s\n", 
	`°ªº‹
(
ªsu…
));

611 
	`vfs_˛o£
(
rv
);

612  
ªsu…
;

615 !
d⁄e
) {

616 
	`uio_köô
(&
iov
, &
ku
, 
buf
, (buf), 
Ωos
, 
UIO_READ
);

617 
ªsu…
 = 
	`VOP_READ
(
rv
, &
ku
);

618 i‡(
ªsu…
) {

619 
	`k¥ötf
("RódÉº‹: %s\n", 
	`°ªº‹
(
ªsu…
));

622 
Ωos
 = 
ku
.
uio_off£t
;

624 i‡(
ku
.
uio_ªsid
 > 0) {

625 
d⁄e
 = 1;

628 
	`uio_köô
(&
iov
, &
ku
, 
buf
, (buf)-ku.
uio_ªsid
, 
wpos
,

629 
UIO_WRITE
);

630 
ªsu…
 = 
	`VOP_WRITE
(
wv
, &
ku
);

631 i‡(
ªsu…
) {

632 
	`k¥ötf
("Wrôêîr‹: %s\n", 
	`°ªº‹
(
ªsu…
));

635 
wpos
 = 
ku
.
uio_off£t
;

637 i‡(
ku
.
uio_ªsid
 > 0) {

638 
	`k¥ötf
("Warning: short write\n");

642 
	`vfs_˛o£
(
wv
);

643 
	`vfs_˛o£
(
rv
);

646 
	}
}

	@test/os161/kern/test/malloctest.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<thªad.h
>

36 
	~<synch.h
>

37 
	~<ã°.h
>

50 
	#NTRIES
 1200

	)

51 
	#ITEMSIZE
 997

	)

52 
	#NTHREADS
 8

	)

56 
	$mÆlo˘hªad
(*
sm
, 
num
)

58 
£m≠h‹e
 *
£m
 = 
sm
;

59 *
±r
;

60 *
ﬁd±r
=
NULL
;

61 *
ﬁd±r2
=
NULL
;

62 
i
;

64 
i
=0; i<
NTRIES
; i++) {

65 
±r
 = 
	`kmÆloc
(
ITEMSIZE
);

66 i‡(
±r
==
NULL
) {

67 i‡(
£m
) {

68 
	`k¥ötf
("thread %lu: kmallocÑeturned NULL\n",

69 
num
);

70 
	`V
(
£m
);

73 
	`k¥ötf
("kmallocÑeturnedÇull;Åest failed.\n");

76 i‡(
ﬁd±r2
) {

77 
	`k‰ì
(
ﬁd±r2
);

79 
ﬁd±r2
 = 
ﬁd±r
;

80 
ﬁd±r
 = 
±r
;

82 i‡(
ﬁd±r2
) {

83 
	`k‰ì
(
ﬁd±r2
);

85 i‡(
ﬁd±r
) {

86 
	`k‰ì
(
ﬁd±r
);

88 i‡(
£m
) {

89 
	`V
(
£m
);

91 
	}
}

94 
	$mÆlo˘e°
(
«rgs
, **
¨gs
)

96 ()
«rgs
;

97 ()
¨gs
;

99 
	`k¥ötf
("Starting kmallocÅest...\n");

100 
	`mÆlo˘hªad
(
NULL
, 0);

101 
	`k¥ötf
("kmallocÅest done\n");

104 
	}
}

107 
	$mÆloc°ªss
(
«rgs
, **
¨gs
)

109 
£m≠h‹e
 *
£m
;

110 
i
, 
ªsu…
;

112 ()
«rgs
;

113 ()
¨gs
;

115 
£m
 = 
	`£m_¸óã
("mallocstress", 0);

116 i‡(
£m
 =
NULL
) {

117 
	`∑nic
("mallocstress: sem_create failed\n");

120 
	`k¥ötf
("Starting kmalloc stressÅest...\n");

122 
i
=0; i<
NTHREADS
; i++) {

123 
ªsu…
 = 
	`thªad_f‹k
("mÆloc°ªss", 
NULL
,

124 
mÆlo˘hªad
, 
£m
, 
i
);

125 i‡(
ªsu…
) {

126 
	`∑nic
("mallocstress:Åhread_fork failed: %s\n",

127 
	`°ªº‹
(
ªsu…
));

131 
i
=0; i<
NTHREADS
; i++) {

132 
	`P
(
£m
);

135 
	`£m_de°roy
(
£m
);

136 
	`k¥ötf
("kmalloc stressÅest done\n");

139 
	}
}

	@test/os161/kern/test/nettest.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<ã°.h
>

38 
	$√âe°
(
«rgs
, **
¨gs
)

40 ()
«rgs
;

41 ()
¨gs
;

42 
	`k¥ötf
("NoÇetwork supportávailable\n");

44 
	}
}

	@test/os161/kern/test/synchtest.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<˛ock.h
>

37 
	~<thªad.h
>

38 
	~<synch.h
>

39 
	~<ã°.h
>

41 
	#NSEMLOOPS
 63

	)

42 
	#NLOCKLOOPS
 120

	)

43 
	#NCVLOOPS
 5

	)

44 
	#NTHREADS
 32

	)

46 vﬁ©ûê
	gã°vÆ1
;

47 vﬁ©ûê
	gã°vÆ2
;

48 vﬁ©ûê
	gã°vÆ3
;

49 #ifde‡
UW


50 
£m≠h‹e
 *
	gã°£m
 = 0;

51 
lock
 *
	gã°lock
 = 0;

52 
cv
 *
	gã°cv
 = 0;

53 
£m≠h‹e
 *
	gd⁄e£m
 = 0;

55 
£m≠h‹e
 *
	gã°£m
;

56 
lock
 *
	gã°lock
;

57 
cv
 *
	gã°cv
;

58 
£m≠h‹e
 *
	gd⁄e£m
;

61 #ifde‡
UW


64 
	$˛ónôems
()

66 
	`k¥ötf
("cleanitems: Destroying sems,Üocks,ánd cvs\n");

67 
	`£m_de°roy
(
ã°£m
);

68 
	`lock_de°roy
(
ã°lock
);

69 
	`cv_de°roy
(
ã°cv
);

70 
	`£m_de°roy
(
d⁄e£m
);

71 
	}
}

76 
	$öôôems
()

78 i‡(
ã°£m
==
NULL
) {

79 
ã°£m
 = 
	`£m_¸óã
("testsem", 2);

80 i‡(
ã°£m
 =
NULL
) {

81 
	`∑nic
("synchtest: sem_create failed\n");

84 i‡(
ã°lock
==
NULL
) {

85 
ã°lock
 = 
	`lock_¸óã
("testlock");

86 i‡(
ã°lock
 =
NULL
) {

87 
	`∑nic
("synchtest:Üock_create failed\n");

90 i‡(
ã°cv
==
NULL
) {

91 #ifde‡
UW


92 
ã°cv
 = 
	`cv_¸óã
("testcv");

94 
ã°cv
 = 
	`cv_¸óã
("testlock");

96 i‡(
ã°cv
 =
NULL
) {

97 
	`∑nic
("synchtest: cv_create failed\n");

100 i‡(
d⁄e£m
==
NULL
) {

101 
d⁄e£m
 = 
	`£m_¸óã
("donesem", 0);

102 i‡(
d⁄e£m
 =
NULL
) {

103 
	`∑nic
("synchtest: sem_create failed\n");

106 
	}
}

110 
	$£mã°thªad
(*
junk
, 
num
)

112 
i
;

113 ()
junk
;

118 
	`P
(
ã°£m
);

119 
	`k¥ötf
("Thªad %2lu: ", 
num
);

120 
i
=0; i<
NSEMLOOPS
; i++) {

121 
	`k¥ötf
("%c", ()
num
+64);

123 
	`k¥ötf
("\n");

124 
	`V
(
d⁄e£m
);

125 #ifde‡
UW


126 
	`thªad_exô
();

128 
	}
}

131 
	$£mã°
(
«rgs
, **
¨gs
)

133 
i
, 
ªsu…
;

135 ()
«rgs
;

136 ()
¨gs
;

138 
	`öôôems
();

139 
	`k¥ötf
("Starting semaphoreÅest...\n");

140 
	`k¥ötf
("IfÅhis hangs, it's broken: ");

141 
	`P
(
ã°£m
);

142 
	`P
(
ã°£m
);

143 
	`k¥ötf
("ok\n");

145 
i
=0; i<
NTHREADS
; i++) {

146 
ªsu…
 = 
	`thªad_f‹k
("£mã°", 
NULL
, 
£mã°thªad
, NULL, 
i
);

147 i‡(
ªsu…
) {

148 
	`∑nic
("semtest:Åhread_fork failed: %s\n",

149 
	`°ªº‹
(
ªsu…
));

153 
i
=0; i<
NTHREADS
; i++) {

154 
	`V
(
ã°£m
);

155 
	`P
(
d⁄e£m
);

159 
	`V
(
ã°£m
);

160 
	`V
(
ã°£m
);

162 #ifde‡
UW


163 
	`˛ónôems
();

165 
	`k¥ötf
("SemaphoreÅest done.\n");

167 
	}
}

171 
	$Áû
(
num
, c⁄° *
msg
)

173 
	`k¥ötf
("thªad %lu: Mism©ch o¿%s\n", 
num
, 
msg
);

174 
	`k¥ötf
("Test failed\n");

176 
	`lock_ªÀa£
(
ã°lock
);

178 
	`V
(
d⁄e£m
);

179 
	`thªad_exô
();

180 
	}
}

184 
	$lockã°thªad
(*
junk
, 
num
)

186 
i
;

187 ()
junk
;

189 
i
=0; i<
NLOCKLOOPS
; i++) {

190 
	`lock_acquúe
(
ã°lock
);

191 
ã°vÆ1
 = 
num
;

192 
ã°vÆ2
 = 
num
*num;

193 
ã°vÆ3
 = 
num
%3;

195 i‡(
ã°vÆ2
 !
ã°vÆ1
*testval1) {

196 
	`Áû
(
num
, "testval2/testval1");

199 i‡(
ã°vÆ2
%3 !(
ã°vÆ3
*testval3)%3) {

200 
	`Áû
(
num
, "testval2/testval3");

203 i‡(
ã°vÆ3
 !
ã°vÆ1
%3) {

204 
	`Áû
(
num
, "testval3/testval1");

207 i‡(
ã°vÆ1
 !
num
) {

208 
	`Áû
(
num
, "testval1/num");

211 i‡(
ã°vÆ2
 !
num
*num) {

212 
	`Áû
(
num
, "testval2/num");

215 i‡(
ã°vÆ3
 !
num
%3) {

216 
	`Áû
(
num
, "testval3/num");

219 
	`lock_ªÀa£
(
ã°lock
);

221 
	`V
(
d⁄e£m
);

222 #ifde‡
UW


223 
	`thªad_exô
();

225 
	}
}

229 
	$lockã°
(
«rgs
, **
¨gs
)

231 
i
, 
ªsu…
;

233 ()
«rgs
;

234 ()
¨gs
;

236 
	`öôôems
();

237 
	`k¥ötf
("StartingÜockÅest...\n");

239 
i
=0; i<
NTHREADS
; i++) {

240 
ªsu…
 = 
	`thªad_f‹k
("synchã°", 
NULL
, 
lockã°thªad
,

241 
NULL
, 
i
);

242 i‡(
ªsu…
) {

243 
	`∑nic
("locktest:Åhread_fork failed: %s\n",

244 
	`°ªº‹
(
ªsu…
));

247 
i
=0; i<
NTHREADS
; i++) {

248 
	`P
(
d⁄e£m
);

251 #ifde‡
UW


252 
	`˛ónôems
();

254 
	`k¥ötf
("LockÅest done.\n");

257 
	}
}

261 
	$cvã°thªad
(*
junk
, 
num
)

263 
i
;

264 vﬁ©ûê
j
;

265 
time_t
 
£cs1
, 
£cs2
;

266 
uöt32_t
 
n£cs1
, 
n£cs2
;

268 ()
junk
;

270 
i
=0; i<
NCVLOOPS
; i++) {

271 
	`lock_acquúe
(
ã°lock
);

272 
ã°vÆ1
 !
num
) {

273 
	`gëtime
(&
£cs1
, &
n£cs1
);

274 
	`cv_waô
(
ã°cv
, 
ã°lock
);

275 
	`gëtime
(&
£cs2
, &
n£cs2
);

277 i‡(
n£cs2
 < 
n£cs1
) {

278 
£cs2
--;

279 
n£cs2
 += 1000000000;

282 
n£cs2
 -
n£cs1
;

283 
£cs2
 -
£cs1
;

286 i‡(
£cs2
==0 && 
n£cs2
 < 40*2000) {

287 
	`k¥ötf
("cv_waôÅook o∆y %uÇs\n", 
n£cs2
);

288 
	`k¥ötf
("That'sÅoo fast... you must be "

290 
	`V
(
d⁄e£m
);

291 
	`thªad_exô
();

295 
	`k¥ötf
("Thªad %lu\n", 
num
);

296 
ã°vÆ1
 = (ã°vÆ1 + 
NTHREADS
 - 1)%NTHREADS;

302 
j
=0; j<3000; j++);

304 
	`cv_brﬂdˇ°
(
ã°cv
, 
ã°lock
);

305 
	`lock_ªÀa£
(
ã°lock
);

307 
	`V
(
d⁄e£m
);

308 #ifde‡
UW


309 
	`thªad_exô
();

311 
	}
}

314 
	$cvã°
(
«rgs
, **
¨gs
)

317 
i
, 
ªsu…
;

319 ()
«rgs
;

320 ()
¨gs
;

322 
	`öôôems
();

323 
	`k¥ötf
("Starting CVÅest...\n");

324 #ifde‡
UW


325 
	`k¥ötf
("%dÅhªad†shouldÖröàouàöÑevî£ ordî %dÅimes.\n", 
NTHREADS
, 
NCVLOOPS
);

327 
	`k¥ötf
("Threads shouldÖrint out inÑeverse order.\n");

330 
ã°vÆ1
 = 
NTHREADS
-1;

332 
i
=0; i<
NTHREADS
; i++) {

333 
ªsu…
 = 
	`thªad_f‹k
("synchã°", 
NULL
, 
cvã°thªad
, NULL, 
i
);

334 i‡(
ªsu…
) {

335 
	`∑nic
("cvtest:Åhread_fork failed: %s\n",

336 
	`°ªº‹
(
ªsu…
));

339 
i
=0; i<
NTHREADS
; i++) {

340 
	`P
(
d⁄e£m
);

343 #ifde‡
UW


344 
	`˛ónôems
();

346 
	`k¥ötf
("CVÅest done\n");

349 
	}
}

	@test/os161/kern/test/threadtest.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<thªad.h
>

36 
	~<synch.h
>

37 
	~<ã°.h
>

39 
	#NTHREADS
 8

	)

41 
£m≠h‹e
 *
	gt£m
 = 
NULL
;

45 
	$öô_£m
()

47 i‡(
t£m
==
NULL
) {

48 
t£m
 = 
	`£m_¸óã
("tsem", 0);

49 i‡(
t£m
 =
NULL
) {

50 
	`∑nic
("threadtest: sem_create failed\n");

53 
	}
}

57 
	$loudthªad
(*
junk
, 
num
)

59 
ch
 = '0' + 
num
;

60 
i
;

62 ()
junk
;

64 
i
=0; i<120; i++) {

65 
	`putch
(
ch
);

67 
	`V
(
t£m
);

68 
	}
}

82 
	$quõâhªad
(*
junk
, 
num
)

84 
ch
 = '0' + 
num
;

85 vﬁ©ûê
i
;

87 ()
junk
;

89 
	`putch
(
ch
);

90 
i
=0; i<200000; i++);

91 
	`putch
(
ch
);

93 
	`V
(
t£m
);

94 
	}
}

98 
	$ru¡hªads
(
dﬁoud
)

100 
«me
[16];

101 
i
, 
ªsu…
;

103 
i
=0; i<
NTHREADS
; i++) {

104 
	`¢¥ötf
(
«me
, “ame), "thªadã°%d", 
i
);

105 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
,

106 
dﬁoud
 ? 
loudthªad
 : 
quõâhªad
,

107 
NULL
, 
i
);

108 i‡(
ªsu…
) {

109 
	`∑nic
("threadtest:Åhread_fork failed %s)\n",

110 
	`°ªº‹
(
ªsu…
));

114 
i
=0; i<
NTHREADS
; i++) {

115 
	`P
(
t£m
);

117 
	}
}

121 
	$thªadã°
(
«rgs
, **
¨gs
)

123 ()
«rgs
;

124 ()
¨gs
;

126 
	`öô_£m
();

127 
	`k¥ötf
("StartingÅhreadÅest...\n");

128 
	`ru¡hªads
(1);

129 
	`k¥ötf
("\nThreadÅest done.\n");

132 
	}
}

135 
	$thªadã°2
(
«rgs
, **
¨gs
)

137 ()
«rgs
;

138 ()
¨gs
;

140 
	`öô_£m
();

141 
	`k¥ötf
("StartingÅhreadÅest 2...\n");

142 
	`ru¡hªads
(0);

143 
	`k¥ötf
("\nThreadÅest 2 done.\n");

146 
	}
}

	@test/os161/kern/test/tt3.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<wch™.h
>

36 
	~<thªad.h
>

37 
	~<synch.h
>

38 
	~<ã°.h
>

40 
	~"›t-synch¥obs.h
"

44 #i‡
OPT_SYNCHPROBS


45 
	#DIM
 10

	)

47 
	#DIM
 70

	)

51 
	#SLEEPALOT_PRINTS
 20

	)

52 
	#SLEEPALOT_ITERS
 4

	)

54 
	#WAKER_WAKES
 100

	)

56 
	#COMPUTE_ITERS
 10

	)

58 
	#NWAITCHANS
 12

	)

59 
wch™
 *
	gwaôch™s
[
NWAITCHANS
];

61 vﬁ©ûê
	gwakîd⁄e
;

62 
£m≠h‹e
 *
	gwakî£m
;

63 
£m≠h‹e
 *
	gd⁄e£m
;

67 
	$£tup
()

69 
tmp
[16];

70 
i
;

72 i‡(
wakî£m
 =
NULL
) {

73 
wakî£m
 = 
	`£m_¸óã
("wakersem", 1);

74 
d⁄e£m
 = 
	`£m_¸óã
("donesem", 0);

75 
i
=0; i<
NWAITCHANS
; i++) {

76 
	`¢¥ötf
(
tmp
, —mp), "wc%d", 
i
);

77 
waôch™s
[
i
] = 
	`wch™_¸óã
(
	`k°rdup
(
tmp
));

80 
wakîd⁄e
 = 0;

81 
	}
}

85 
	$¶ì∑lŸ_thªad
(*
junk
, 
num
)

87 
i
, 
j
;

89 ()
junk
;

91 
i
=0; i<
SLEEPALOT_PRINTS
; i++) {

92 
j
=0; j<
SLEEPALOT_ITERS
; j++) {

93 
wch™
 *
w
;

95 
w
 = 
waôch™s
[
	`øndom
()%
NWAITCHANS
];

96 
	`wch™_lock
(
w
);

97 
	`wch™_¶ìp
(
w
);

99 
	`k¥ötf
("[%lu]", 
num
);

101 
	`V
(
d⁄e£m
);

102 
	}
}

106 
	$wakî_thªad
(*
junk1
, 
junk2
)

108 
i
, 
d⁄e
;

110 ()
junk1
;

111 ()
junk2
;

114 
	`P
(
wakî£m
);

115 
d⁄e
 = 
wakîd⁄e
;

116 
	`V
(
wakî£m
);

117 i‡(
d⁄e
) {

121 
i
=0; i<
WAKER_WAKES
; i++) {

122 
wch™
 *
w
;

124 
w
 = 
waôch™s
[
	`øndom
()%
NWAITCHANS
];

125 
	`wch™_wakóŒ
(
w
);

127 
	`thªad_yõld
();

130 
	`V
(
d⁄e£m
);

131 
	}
}

135 
	$make_¶ì∑lŸs
(
howm™y
)

137 
«me
[16];

138 
i
, 
ªsu…
;

140 
i
=0; i<
howm™y
; i++) {

141 
	`¢¥ötf
(
«me
, “ame), "¶ì∑lŸ%d", 
i
);

142 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
¶ì∑lŸ_thªad
, NULL, 
i
);

143 i‡(
ªsu…
) {

144 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

147 
ªsu…
 = 
	`thªad_f‹k
("wakî", 
NULL
, 
wakî_thªad
, NULL, 0);

148 i‡(
ªsu…
) {

149 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

151 
	}
}

155 
	$compuã_thªad
(*
junk1
, 
num
)

157 
	sm©rix
 {

158 
m
[
DIM
][DIM];

160 
m©rix
 *
m1
, *
m2
, *
m3
;

161 
tŸ
;

162 
i
, 
j
, 
k
, 
m
;

163 
uöt32_t
 
ønd
;

165 ()
junk1
;

167 
m1
 = 
	`kmÆloc
((
m©rix
));

168 
	`KASSERT
(
m1
 !
NULL
);

169 
m2
 = 
	`kmÆloc
((
m©rix
));

170 
	`KASSERT
(
m2
 !
NULL
);

171 
m3
 = 
	`kmÆloc
((
m©rix
));

172 
	`KASSERT
(
m3
 !
NULL
);

174 
m
=0; m<
COMPUTE_ITERS
; m++) {

176 
i
=0; i<
DIM
; i++) {

177 
j
=0; j<
DIM
; j++) {

178 
ønd
 = 
	`øndom
();

179 
m1
->
m
[
i
][
j
] = 
ønd
 >> 16;

180 
m2
->
m
[
i
][
j
] = 
ønd
 & 0xffff;

184 
i
=0; i<
DIM
; i++) {

185 
j
=0; j<
DIM
; j++) {

186 
tŸ
 = 0;

187 
k
=0; k<
DIM
; k++) {

188 
tŸ
 +
m1
->
m
[
i
][
k
] * 
m2
->m[k][
j
];

190 
m3
->
m
[
i
][
j
] = 
tŸ
;

194 
tŸ
 = 0;

195 
i
=0; i<
DIM
; i++) {

196 
tŸ
 +
m3
->
m
[
i
][i];

199 
	`k¥ötf
("{%lu: %u}", 
num
, (Ë
tŸ
);

200 
	`thªad_yõld
();

203 
	`k‰ì
(
m1
);

204 
	`k‰ì
(
m2
);

205 
	`k‰ì
(
m3
);

207 
	`V
(
d⁄e£m
);

208 
	}
}

212 
	$make_compuãs
(
howm™y
)

214 
«me
[16];

215 
i
, 
ªsu…
;

217 
i
=0; i<
howm™y
; i++) {

218 
	`¢¥ötf
(
«me
, “ame), "compuã%d", 
i
);

219 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
compuã_thªad
, NULL, 
i
);

220 i‡(
ªsu…
) {

221 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

224 
	}
}

228 
	$föish
(
howm™ytŸÆ
)

230 
i
;

231 
i
=0; i<
howm™ytŸÆ
; i++) {

232 
	`P
(
d⁄e£m
);

234 
	`P
(
wakî£m
);

235 
wakîd⁄e
 = 1;

236 
	`V
(
wakî£m
);

237 
	`P
(
d⁄e£m
);

238 
	}
}

242 
	$ru¡e°3
(
n¶ìps
, 
ncompuãs
)

244 
	`£tup
();

245 
	`k¥ötf
("StartingÅhreadÅest 3 (%d [sleepalots], %d {computes}, "

247 
n¶ìps
, 
ncompuãs
);

248 
	`make_¶ì∑lŸs
(
n¶ìps
);

249 
	`make_compuãs
(
ncompuãs
);

250 
	`föish
(
n¶ìps
+
ncompuãs
);

251 
	`k¥ötf
("\nThreadÅest 3 done\n");

252 
	}
}

255 
	$thªadã°3
(
«rgs
, **
¨gs
)

257 i‡(
«rgs
==1) {

258 
	`ru¡e°3
(5, 2);

260 i‡(
«rgs
==3) {

261 
	`ru¡e°3
(
	`©oi
(
¨gs
[1]),átoi(args[2]));

264 
	`k¥ötf
("Usage:Åt3 [sleepthreads computethreads]\n");

268 
	}
}

	@test/os161/kern/test/uw-tests.c

9 
	~<ty≥s.h
>

10 
	~<synch.h
>

11 
	~<thªad.h
>

12 
	~<ã°.h
>

13 
	~<uw-vm°©s.h
>

15 
	#NAME_LEN
 (30)

	)

17 
lock
 *
	gã°lock
 = 
NULL
;

18 
£m≠h‹e
 *
	gd⁄e£m
 = 
NULL
;

20 
	#NTESTLOOPS
 (5000Ë

	)

21 
	#NTESTTHREADS
 (8)

	)

22 
	#START_VALUE
 (0)

	)

23 vﬁ©ûê
	gã°_vÆue
 = 
START_VALUE
;

24 
	gu£_locks
 = 1;

28 
	$˛ónôems
()

30 
	`k¥ötf
("cleanitems: Destroying semsándÜocks\n");

31 
	`lock_de°roy
(
ã°lock
);

32 
ã°lock
 = 
NULL
;

33 
	`£m_de°roy
(
d⁄e£m
);

34 
d⁄e£m
 = 
NULL
;

35 
ã°_vÆue
 = 
START_VALUE
;

36 
	}
}

40 
	$öôôems
()

42 i‡(
ã°lock
==
NULL
) {

43 
ã°lock
 = 
	`lock_¸óã
("testlock");

44 i‡(
ã°lock
 =
NULL
) {

45 
	`∑nic
("synchtest:Üock_create failed\n");

49 i‡(
d⁄e£m
==
NULL
) {

50 
d⁄e£m
 = 
	`£m_¸óã
("donesem", 0);

51 i‡(
d⁄e£m
 =
NULL
) {

52 
	`∑nic
("synchtest: sem_create failed\n");

55 
	}
}

60 
	$add_thªad
(*
junk
, 
num
)

62 
i
;

63 (Ë
num
;

64 (Ë
junk
;

66 
i
=0; i<
NTESTLOOPS
; i++) {

67 i‡(
u£_locks
) {

68 
	`lock_acquúe
(
ã°lock
);

75 
ã°_vÆue
 =Åest_value + 1;

76 
ã°_vÆue
 =Åest_value + 1;

77 
ã°_vÆue
 =Åest_value + 1;

78 
ã°_vÆue
 =Åest_value + 1;

79 
ã°_vÆue
 =Åest_value + 1;

81 i‡(
u£_locks
) {

82 
	`lock_ªÀa£
(
ã°lock
);

86 
	`V
(
d⁄e£m
);

87 
	`thªad_exô
();

88 
	}
}

93 
	$sub_thªad
(*
junk
, 
num
)

95 
i
;

96 ()
num
;

97 ()
junk
;

99 
i
=0; i<
NTESTLOOPS
; i++) {

100 i‡(
u£_locks
) {

101 
	`lock_acquúe
(
ã°lock
);

108 
ã°_vÆue
 =Åest_value - 1;

109 
ã°_vÆue
 =Åest_value - 1;

110 
ã°_vÆue
 =Åest_value - 1;

111 
ã°_vÆue
 =Åest_value - 1;

112 
ã°_vÆue
 =Åest_value - 1;

114 i‡(
u£_locks
) {

115 
	`lock_ªÀa£
(
ã°lock
);

119 
	`V
(
d⁄e£m
);

120 
	`thªad_exô
();

121 
	}
}

124 
	$uwlockã°1
(
«rgs
, **
¨gs
)

126 
i
, 
ªsu…
;

127 
«me
[
NAME_LEN
];

129 ()
«rgs
;

130 ()
¨gs
;

132 
	`öôôems
();

133 
	`k¥ötf
("Starting uwlocktest1...\n");

135 
i
=0; i<
NTESTTHREADS
; i++) {

136 
	`¢¥ötf
(
«me
, 
NAME_LEN
, "add_thªad %d", 
i
);

137 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
add_thªad
, NULL, 
i
);

138 i‡(
ªsu…
) {

139 
	`∑nic
("uwlocktest1:Åhread_fork failed: %s\n",

140 
	`°ªº‹
(
ªsu…
));

144 
i
=0; i<
NTESTTHREADS
; i++) {

145 
	`¢¥ötf
(
«me
, 
NAME_LEN
, "sub_thªad %d", 
i
);

146 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
sub_thªad
, NULL, 
i
);

147 i‡(
ªsu…
) {

148 
	`∑nic
("uwlocktest1:Åhread_fork failed: %s\n",

149 
	`°ªº‹
(
ªsu…
));

153 
i
=0; i<
NTESTTHREADS
*2; i++) {

154 
	`P
(
d⁄e£m
);

157 
	`k¥ötf
("vÆuêo‡ã°_vÆuê%d should bê%d\n", 
ã°_vÆue
, 
START_VALUE
);

158 i‡(
ã°_vÆue
 =
START_VALUE
) {

159 
	`k¥ötf
("TEST SUCCEEDED\n");

161 
	`k¥ötf
("TEST FAILED\n");

163 
	`KASSERT
(
ã°_vÆue
 =
START_VALUE
);

165 
	`˛ónôems
();

166 
	`k¥ötf
("uwlocktest1 done.\n");

169 
	}
}

176 
	$vm°©s_thªad
(*
junk
, 
num
)

178 
i
;

179 
j
;

180 ()
num
;

181 ()
junk
;

183 
i
=0; i<
NTESTLOOPS
; i++) {

184 
j
=0; j<
VMSTAT_COUNT
; j++) {

188 
j
) {

190 
VMSTAT_TLB_FAULT
:

191 
	`vm°©s_öc
(
j
);

192 
	`vm°©s_öc
(
j
);

195 
VMSTAT_TLB_FAULT_FREE
:

196 
	`vm°©s_öc
(
j
);

199 
VMSTAT_TLB_FAULT_REPLACE
:

200 
	`vm°©s_öc
(
j
);

204 
VMSTAT_TLB_INVALIDATE
:

205 i‡(
i
 % 2 == 0) {

206 
	`vm°©s_öc
(
j
);

210 
VMSTAT_TLB_RELOAD
:

211 
	`vm°©s_öc
(
j
);

215 
VMSTAT_PAGE_FAULT_ZERO
:

216 i‡(
i
 % 2 == 0) {

217 
	`vm°©s_öc
(
j
);

222 
VMSTAT_PAGE_FAULT_DISK
:

223 i‡(
i
 % 2 == 0) {

224 
	`vm°©s_öc
(
j
);

228 
VMSTAT_ELF_FILE_READ
:

229 i‡(
i
 % 4 == 0) {

230 
	`vm°©s_öc
(
j
);

234 
VMSTAT_SWAP_FILE_READ
:

235 i‡(
i
 % 4 == 0) {

236 
	`vm°©s_öc
(
j
);

240 
VMSTAT_SWAP_FILE_WRITE
:

241 i‡(
i
 % 8 == 0) {

242 
	`vm°©s_öc
(
j
);

247 
	`k¥ötf
("Unknow¿°© %d\n", 
j
);

253 
	`V
(
d⁄e£m
);

254 
	`thªad_exô
();

255 
	}
}

258 
	$uwvm°©°e°
(
«rgs
, **
¨gs
)

260 
i
, 
ªsu…
;

261 
«me
[
NAME_LEN
];

263 ()
«rgs
;

264 ()
¨gs
;

266 
	`öôôems
();

267 
	`k¥ötf
("Starting uwvmstatstest...\n");

269 
	`k¥ötf
("Initializing vmstats\n");

270 
	`vm°©s_öô
();

272 
i
=0; i<
NTESTTHREADS
; i++) {

273 
	`¢¥ötf
(
«me
, 
NAME_LEN
, "vm°©°hªad %d", 
i
);

274 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
vm°©s_thªad
, NULL, 
i
);

275 i‡(
ªsu…
) {

276 
	`∑nic
("uwvmstatstest:Åhread_fork failed: %s\n",

277 
	`°ªº‹
(
ªsu…
));

281 
i
=0; i<
NTESTTHREADS
; i++) {

282 
	`P
(
d⁄e£m
);

285 
	`vm°©s_¥öt
();

287 
	`˛ónôems
();

288 
	`k¥ötf
("uwvmstatstest done.\n");

291 
	}
}

	@test/os161/kern/thread/clock.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<˝u.h
>

33 
	~<wch™.h
>

34 
	~<˛ock.h
>

35 
	~<thªad.h
>

36 
	~<cuºít.h
>

53 
	#SCHEDULE_HARDCLOCKS
 4

	)

54 
	#MIGRATE_HARDCLOCKS
 16

	)

59 
wch™
 *
	glbﬁt
;

65 
	$h¨d˛ock_boŸ°øp
()

67 
lbﬁt
 = 
	`wch™_¸óã
("lbolt");

68 i‡(
lbﬁt
 =
NULL
) {

69 
	`∑nic
("Couldn't createÜbolt\n");

71 
	}
}

78 
	$timî˛ock
()

81 
	`wch™_wakóŒ
(
lbﬁt
);

82 
	}
}

89 
	$h¨d˛ock
()

95 
cur˝u
->
c_h¨d˛ocks
++;

96 i‡((
cur˝u
->
c_h¨d˛ocks
 % 
SCHEDULE_HARDCLOCKS
) == 0) {

97 
	`scheduÀ
();

99 i‡((
cur˝u
->
c_h¨d˛ocks
 % 
MIGRATE_HARDCLOCKS
) == 0) {

100 
	`thªad_c⁄sidî_migøti⁄
();

102 
	`thªad_yõld
();

103 
	}
}

109 
	$˛ock¶ìp
(
num_£cs
)

111 
num_£cs
 > 0) {

112 
	`wch™_lock
(
lbﬁt
);

113 
	`wch™_¶ìp
(
lbﬁt
);

114 
num_£cs
--;

116 
	}
}

	@test/os161/kern/thread/spinlock.c

31 
	#SPINLOCK_INLINE


	)

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<˝u.h
>

36 
	~<•l.h
>

37 
	~<•ölock.h
>

38 
	~<cuºít.h
>

49 
	$•ölock_öô
(
•ölock
 *
lk
)

51 
	`•ölock_d©a_£t
(&
lk
->
lk_lock
, 0);

52 
lk
->
lk_hﬁdî
 = 
NULL
;

53 
	}
}

59 
	$•ölock_˛ónup
(
•ölock
 *
lk
)

61 
	`KASSERT
(
lk
->
lk_hﬁdî
 =
NULL
);

62 
	`KASSERT
(
	`•ölock_d©a_gë
(&
lk
->
lk_lock
) == 0);

63 
	}
}

73 
	$•ölock_acquúe
(
•ölock
 *
lk
)

75 
˝u
 *
my˝u
;

77 
	`•Ãai£
(
IPL_NONE
, 
IPL_HIGH
);

80 i‡(
	`CURCPU_EXISTS
()) {

81 
my˝u
 = 
cur˝u
->
c_£lf
;

82 i‡(
lk
->
lk_hﬁdî
 =
my˝u
) {

83 
	`∑nic
("Dódlock o¿•ölock %p\n", 
lk
);

87 
my˝u
 = 
NULL
;

101 i‡(
	`•ölock_d©a_gë
(&
lk
->
lk_lock
) != 0) {

104 i‡(
	`•ölock_d©a_ã°™d£t
(&
lk
->
lk_lock
) != 0) {

110 
lk
->
lk_hﬁdî
 = 
my˝u
;

111 
	}
}

117 
	$•ölock_ªÀa£
(
•ölock
 *
lk
)

120 i‡(
	`CURCPU_EXISTS
()) {

121 
	`KASSERT
(
lk
->
lk_hﬁdî
 =
cur˝u
->
c_£lf
);

124 
lk
->
lk_hﬁdî
 = 
NULL
;

125 
	`•ölock_d©a_£t
(&
lk
->
lk_lock
, 0);

126 
	`•Œowî
(
IPL_HIGH
, 
IPL_NONE
);

127 
	}
}

132 
boﬁ


133 
	$•ölock_do_i_hﬁd
(
•ölock
 *
lk
)

135 i‡(!
	`CURCPU_EXISTS
()) {

136  
åue
;

140  (
lk
->
lk_hﬁdî
 =
cur˝u
->
c_£lf
);

141 
	}
}

	@test/os161/kern/thread/spl.c

31 
	#SPL_INLINE


	)

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<˝u.h
>

36 
	~<•l.h
>

37 
	~<thªad.h
>

38 
	~<cuºít.h
>

87 
	$•Ãai£
(
ﬁd•l
, 
√w•l
)

89 
thªad
 *
cur
 = 
cuπhªad
;

92 
	`KASSERT
(
ﬁd•l
 =
IPL_NONE
);

93 
	`KASSERT
(
√w•l
 =
IPL_HIGH
);

95 i‡(!
	`CURCPU_EXISTS
()) {

100 i‡(
cur
->
t_ùlhigh_cou¡
 == 0) {

101 
	`˝u_úqoff
();

103 
cur
->
t_ùlhigh_cou¡
++;

104 
	}
}

107 
	$•Œowî
(
ﬁd•l
, 
√w•l
)

109 
thªad
 *
cur
 = 
cuπhªad
;

112 
	`KASSERT
(
ﬁd•l
 =
IPL_HIGH
);

113 
	`KASSERT
(
√w•l
 =
IPL_NONE
);

115 i‡(!
	`CURCPU_EXISTS
()) {

120 
cur
->
t_ùlhigh_cou¡
--;

121 i‡(
cur
->
t_ùlhigh_cou¡
 == 0) {

122 
	`˝u_úq⁄
();

124 
	}
}

132 
	$•lx
(
•l
)

134 
thªad
 *
cur
 = 
cuπhªad
;

135 
ªt
;

137 i‡(
cur
->
t_cur•l
 < 
•l
) {

139 
	`•Ãai£
(
cur
->
t_cur•l
, 
•l
);

140 
ªt
 = 
cur
->
t_cur•l
;

141 
cur
->
t_cur•l
 = 
•l
;

143 i‡(
cur
->
t_cur•l
 > 
•l
) {

145 
ªt
 = 
cur
->
t_cur•l
;

146 
cur
->
t_cur•l
 = 
•l
;

147 
	`•Œowî
(
ªt
, 
•l
);

151 
ªt
 = 
•l
;

154  
ªt
;

155 
	}
}

	@test/os161/kern/thread/synch.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<•ölock.h
>

38 
	~<wch™.h
>

39 
	~<thªad.h
>

40 
	~<cuºít.h
>

41 
	~<synch.h
>

47 
£m≠h‹e
 *

48 
	$£m_¸óã
(c⁄° *
«me
, 
öôül_cou¡
)

50 
£m≠h‹e
 *
£m
;

52 
	`KASSERT
(
öôül_cou¡
 >= 0);

54 
£m
 = 
	`kmÆloc
((
£m≠h‹e
));

55 i‡(
£m
 =
NULL
) {

56  
NULL
;

59 
£m
->
£m_«me
 = 
	`k°rdup
(
«me
);

60 i‡(
£m
->
£m_«me
 =
NULL
) {

61 
	`k‰ì
(
£m
);

62  
NULL
;

65 
£m
->
£m_wch™
 = 
	`wch™_¸óã
(£m->
£m_«me
);

66 i‡(
£m
->
£m_wch™
 =
NULL
) {

67 
	`k‰ì
(
£m
->
£m_«me
);

68 
	`k‰ì
(
£m
);

69  
NULL
;

72 
	`•ölock_öô
(&
£m
->
£m_lock
);

73 
£m
->
£m_cou¡
 = 
öôül_cou¡
;

75  
£m
;

76 
	}
}

79 
	$£m_de°roy
(
£m≠h‹e
 *
£m
)

81 
	`KASSERT
(
£m
 !
NULL
);

84 
	`•ölock_˛ónup
(&
£m
->
£m_lock
);

85 
	`wch™_de°roy
(
£m
->
£m_wch™
);

86 
	`k‰ì
(
£m
->
£m_«me
);

87 
	`k‰ì
(
£m
);

88 
	}
}

91 
	$P
(
£m≠h‹e
 *
£m
)

93 
	`KASSERT
(
£m
 !
NULL
);

101 
	`KASSERT
(
cuπhªad
->
t_ö_öãºu±
 =
Ál£
);

103 
	`•ölock_acquúe
(&
£m
->
£m_lock
);

104 
£m
->
£m_cou¡
 == 0) {

121 
	`wch™_lock
(
£m
->
£m_wch™
);

122 
	`•ölock_ªÀa£
(&
£m
->
£m_lock
);

123 
	`wch™_¶ìp
(
£m
->
£m_wch™
);

125 
	`•ölock_acquúe
(&
£m
->
£m_lock
);

127 
	`KASSERT
(
£m
->
£m_cou¡
 > 0);

128 
£m
->
£m_cou¡
--;

129 
	`•ölock_ªÀa£
(&
£m
->
£m_lock
);

130 
	}
}

133 
	$V
(
£m≠h‹e
 *
£m
)

135 
	`KASSERT
(
£m
 !
NULL
);

137 
	`•ölock_acquúe
(&
£m
->
£m_lock
);

139 
£m
->
£m_cou¡
++;

140 
	`KASSERT
(
£m
->
£m_cou¡
 > 0);

141 
	`wch™_wake⁄e
(
£m
->
£m_wch™
);

143 
	`•ölock_ªÀa£
(&
£m
->
£m_lock
);

144 
	}
}

150 
lock
 *

151 
	$lock_¸óã
(c⁄° *
«me
)

153 
lock
 *lock;

155 
lock
 = 
	`kmÆloc
((lock));

156 i‡(
lock
 =
NULL
) {

157  
NULL
;

160 
lock
->
lk_«me
 = 
	`k°rdup
(
«me
);

161 i‡(
lock
->
lk_«me
 =
NULL
) {

162 
	`k‰ì
(
lock
);

163  
NULL
;

168  
lock
;

169 
	}
}

172 
	$lock_de°roy
(
lock
 *lock)

174 
	`KASSERT
(
lock
 !
NULL
);

178 
	`k‰ì
(
lock
->
lk_«me
);

179 
	`k‰ì
(
lock
);

180 
	}
}

183 
	$lock_acquúe
(
lock
 *lock)

187 ()
lock
;

188 
	}
}

191 
	$lock_ªÀa£
(
lock
 *lock)

195 ()
lock
;

196 
	}
}

198 
boﬁ


199 
	$lock_do_i_hﬁd
(
lock
 *lock)

203 ()
lock
;

205  
åue
;

206 
	}
}

213 
cv
 *

214 
	$cv_¸óã
(c⁄° *
«me
)

216 
cv
 *cv;

218 
cv
 = 
	`kmÆloc
((cv));

219 i‡(
cv
 =
NULL
) {

220  
NULL
;

223 
cv
->
cv_«me
 = 
	`k°rdup
(
«me
);

224 i‡(
cv
->
cv_«me
==
NULL
) {

225 
	`k‰ì
(
cv
);

226  
NULL
;

231  
cv
;

232 
	}
}

235 
	$cv_de°roy
(
cv
 *cv)

237 
	`KASSERT
(
cv
 !
NULL
);

241 
	`k‰ì
(
cv
->
cv_«me
);

242 
	`k‰ì
(
cv
);

243 
	}
}

246 
	$cv_waô
(
cv
 *cv, 
lock
 *lock)

249 ()
cv
;

250 ()
lock
;

251 
	}
}

254 
	$cv_sig«l
(
cv
 *cv, 
lock
 *lock)

257 ()
cv
;

258 ()
lock
;

259 
	}
}

262 
	$cv_brﬂdˇ°
(
cv
 *cv, 
lock
 *lock)

265 ()
cv
;

266 ()
lock
;

267 
	}
}

	@test/os161/kern/thread/thread.c

34 
	#THREADINLINE


	)

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<lib.h
>

39 
	~<¨øy.h
>

40 
	~<˝u.h
>

41 
	~<•l.h
>

42 
	~<•ölock.h
>

43 
	~<wch™.h
>

44 
	~<thªad.h
>

45 
	~<thªadli°.h
>

46 
	~<thªad¥iv©e.h
>

47 
	~<¥oc.h
>

48 
	~<cuºít.h
>

49 
	~<synch.h
>

50 
	~<addr•a˚.h
>

51 
	~<maöbus.h
>

52 
	~<vnode.h
>

54 
	~"›t-synch¥obs.h
"

58 
	#THREAD_STACK_MAGIC
 0xbØdf00d

	)

61 
	swch™
 {

62 c⁄° *
	mwc_«me
;

63 
thªadli°
 
	mwc_thªads
;

64 
•ölock
 
	mwc_lock
;

68 
DECLARRAY
(
˝u
);

69 
DEFARRAY
(
˝u
, );

70 
˝u¨øy
 
	gÆl˝us
;

73 
£m≠h‹e
 *
	g˝u_°¨tup_£m
;

84 
	$thªad_check°ack_öô
(
thªad
 *thread)

86 ((
uöt32_t
 *)
thªad
->
t_°ack
)[0] = 
THREAD_STACK_MAGIC
;

87 ((
uöt32_t
 *)
thªad
->
t_°ack
)[1] = 
THREAD_STACK_MAGIC
;

88 ((
uöt32_t
 *)
thªad
->
t_°ack
)[2] = 
THREAD_STACK_MAGIC
;

89 ((
uöt32_t
 *)
thªad
->
t_°ack
)[3] = 
THREAD_STACK_MAGIC
;

90 
	}
}

104 
	$thªad_check°ack
(
thªad
 *thread)

106 i‡(
thªad
->
t_°ack
 !
NULL
) {

107 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[0] =
THREAD_STACK_MAGIC
);

108 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[1] =
THREAD_STACK_MAGIC
);

109 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[2] =
THREAD_STACK_MAGIC
);

110 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[3] =
THREAD_STACK_MAGIC
);

112 
	}
}

119 
thªad
 *

120 
	$thªad_¸óã
(c⁄° *
«me
)

122 
thªad
 *thread;

124 
	`DEBUGASSERT
(
«me
 !
NULL
);

126 
thªad
 = 
	`kmÆloc
((*thread));

127 i‡(
thªad
 =
NULL
) {

128  
NULL
;

131 
thªad
->
t_«me
 = 
	`k°rdup
(
«me
);

132 i‡(
thªad
->
t_«me
 =
NULL
) {

133 
	`k‰ì
(
thªad
);

134  
NULL
;

136 
thªad
->
t_wch™_«me
 = "NEW";

137 
thªad
->
t_°©e
 = 
S_READY
;

140 
	`thªad_machdï_öô
(&
thªad
->
t_machdï
);

141 
	`thªadli°node_öô
(&
thªad
->
t_li°node
,Åhread);

142 
thªad
->
t_°ack
 = 
NULL
;

143 
thªad
->
t_c⁄ãxt
 = 
NULL
;

144 
thªad
->
t_˝u
 = 
NULL
;

145 
thªad
->
t_¥oc
 = 
NULL
;

148 
thªad
->
t_ö_öãºu±
 = 
Ál£
;

149 
thªad
->
t_cur•l
 = 
IPL_HIGH
;

150 
thªad
->
t_ùlhigh_cou¡
 = 1;

154  
thªad
;

155 
	}
}

165 
˝u
 *

166 
	$˝u_¸óã
(
h¨dw¨e_numbî
)

168 
˝u
 *
c
;

169 
ªsu…
;

170 
«mebuf
[16];

172 
c
 = 
	`kmÆloc
((*c));

173 i‡(
c
 =
NULL
) {

174 
	`∑nic
("cpu_create: Out of memory\n");

177 
c
->
c_£lf
 = c;

178 
c
->
c_h¨dw¨e_numbî
 = 
h¨dw¨e_numbî
;

180 
c
->
c_cuπhªad
 = 
NULL
;

181 
	`thªadli°_öô
(&
c
->
c_zombõs
);

182 
c
->
c_h¨d˛ocks
 = 0;

184 
c
->
c_isidÀ
 = 
Ál£
;

185 
	`thªadli°_öô
(&
c
->
c_runqueue
);

186 
	`•ölock_öô
(&
c
->
c_runqueue_lock
);

188 
c
->
c_ùi_≥ndög
 = 0;

189 
c
->
c_numshoŸdown
 = 0;

190 
	`•ölock_öô
(&
c
->
c_ùi_lock
);

192 
ªsu…
 = 
	`˝u¨øy_add
(&
Æl˝us
, 
c
, &c->
c_numbî
);

193 i‡(
ªsu…
 != 0) {

194 
	`∑nic
("˝u_¸óã:áºay_add: %s\n", 
	`°ªº‹
(
ªsu…
));

197 
	`¢¥ötf
(
«mebuf
, “amebuf), "<boŸ #%d>", 
c
->
c_numbî
);

198 
c
->
c_cuπhªad
 = 
	`thªad_¸óã
(
«mebuf
);

199 i‡(
c
->
c_cuπhªad
 =
NULL
) {

200 
	`∑nic
("cpu_create:Åhread_create failed\n");

202 
ªsu…
 = 
	`¥oc_addthªad
(
k¥oc
, 
c
->
c_cuπhªad
);

203 i‡(
ªsu…
) {

204 
	`∑nic
("˝u_¸óã:Öroc_addthªad:: %s\n", 
	`°ªº‹
(
ªsu…
));

207 i‡(
c
->
c_numbî
 == 0) {

217 
c
->
c_cuπhªad
->
t_°ack
 = 
	`kmÆloc
(
STACK_SIZE
);

218 i‡(
c
->
c_cuπhªad
->
t_°ack
 =
NULL
) {

219 
	`∑nic
("cpu_create: couldn'tállocate stack");

221 
	`thªad_check°ack_öô
(
c
->
c_cuπhªad
);

223 
c
->
c_cuπhªad
->
t_˝u
 = c;

225 
	`˝u_machdï_öô
(
c
);

227  
c
;

228 
	}
}

240 
	$thªad_de°roy
(
thªad
 *thread)

242 
	`KASSERT
(
thªad
 !
cuπhªad
);

243 
	`KASSERT
(
thªad
->
t_°©e
 !
S_RUN
);

251 
	`KASSERT
(
thªad
->
t_¥oc
 =
NULL
);

252 i‡(
thªad
->
t_°ack
 !
NULL
) {

253 
	`k‰ì
(
thªad
->
t_°ack
);

255 
	`thªadli°node_˛ónup
(&
thªad
->
t_li°node
);

256 
	`thªad_machdï_˛ónup
(&
thªad
->
t_machdï
);

259 
thªad
->
t_wch™_«me
 = "DESTROYED";

261 
	`k‰ì
(
thªad
->
t_«me
);

262 
	`k‰ì
(
thªad
);

263 
	}
}

273 
	$ex‹ci£
()

275 
thªad
 *
z
;

277 (
z
 = 
	`thªadli°_ªmhód
(&
cur˝u
->
c_zombõs
)Ë!
NULL
) {

278 
	`KASSERT
(
z
 !
cuπhªad
);

279 
	`KASSERT
(
z
->
t_°©e
 =
S_ZOMBIE
);

280 
	`thªad_de°roy
(
z
);

282 
	}
}

290 
	$thªad_∑nic
()

297 
	`ùi_brﬂdˇ°
(
IPI_PANIC
);

306 
cur˝u
->
c_runqueue
.
é_cou¡
 = 0;

307 
cur˝u
->
c_runqueue
.
é_hód
.
én_√xt
 = 
NULL
;

308 
cur˝u
->
c_runqueue
.
é_èû
.
én_¥ev
 = 
NULL
;

326 
	}
}

332 
	$thªad_shutdown
()

340 
	`ùi_brﬂdˇ°
(
IPI_OFFLINE
);

341 
	}
}

347 
	$thªad_boŸ°øp
()

349 
˝u
 *
boŸ˝u
;

350 
thªad
 *
boŸthªad
;

352 
	`˝u¨øy_öô
(&
Æl˝us
);

362 
boŸ˝u
 = 
	`˝u_¸óã
(0);

363 
boŸthªad
 = 
boŸ˝u
->
c_cuπhªad
;

370 
	`INIT_CURCPU
(
boŸ˝u
, 
boŸthªad
);

377 
cuπhªad
->
t_˝u
 = 
cur˝u
;

378 
cur˝u
->
c_cuπhªad
 = 
cuπhªad
;

381 
	`KASSERT
(
cuπhªad
->
t_¥oc
 !
NULL
);

384 
	}
}

395 
	$˝u_h©ch
(
so·w¨e_numbî
)

397 
	`KASSERT
(
cur˝u
 !
NULL
);

398 
	`KASSERT
(
cuπhªad
 !
NULL
);

399 
	`KASSERT
(
cur˝u
->
c_numbî
 =
so·w¨e_numbî
);

401 
	`•l0
();

403 
	`k¥ötf
("˝u%u: %s\n", 
so·w¨e_numbî
, 
	`˝u_idítify
());

405 
	`V
(
˝u_°¨tup_£m
);

406 
	`thªad_exô
();

407 
	}
}

413 
	$thªad_°¨t_˝us
()

415 
i
;

417 
	`k¥ötf
("˝u0: %s\n", 
	`˝u_idítify
());

419 
˝u_°¨tup_£m
 = 
	`£m_¸óã
("cpu_hatch", 0);

420 
	`maöbus_°¨t_˝us
();

422 
i
=0; i<
	`˝u¨øy_num
(&
Æl˝us
) - 1; i++) {

423 
	`P
(
˝u_°¨tup_£m
);

425 
	`£m_de°roy
(
˝u_°¨tup_£m
);

426 
˝u_°¨tup_£m
 = 
NULL
;

427 
	}
}

436 
	$thªad_make_ru¬abÀ
(
thªad
 *
èrgë
, 
boﬁ
 
Æªady_have_lock
)

438 
˝u
 *
èrgë˝u
;

439 
boﬁ
 
isidÀ
;

442 
èrgë˝u
 = 
èrgë
->
t_˝u
;

444 i‡(
Æªady_have_lock
) {

446 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
èrgë˝u
->
c_runqueue_lock
));

449 
	`•ölock_acquúe
(&
èrgë˝u
->
c_runqueue_lock
);

452 
isidÀ
 = 
èrgë˝u
->
c_isidÀ
;

453 
	`thªadli°_addèû
(&
èrgë˝u
->
c_runqueue
, 
èrgë
);

454 i‡(
isidÀ
) {

459 
	`ùi_£nd
(
èrgë˝u
, 
IPI_UNIDLE
);

462 i‡(!
Æªady_have_lock
) {

463 
	`•ölock_ªÀa£
(&
èrgë˝u
->
c_runqueue_lock
);

465 
	}
}

478 
thªad_f‹k
(c⁄° *
«me
,

479 
¥oc
 *proc,

480 (*
íåypoöt
)(*
d©a1
, 
d©a2
),

481 *
d©a1
, 
d©a2
)

483 
thªad
 *
√wthªad
;

484 
ªsu…
;

486 #ifde‡
UW


487 
	`DEBUG
(
DB_THREADS
,"F‹kögÅhªad: %s\n",
«me
);

490 
√wthªad
 = 
	`thªad_¸óã
(
«me
);

491 i‡(
√wthªad
 =
NULL
) {

492  
ENOMEM
;

496 
√wthªad
->
t_°ack
 = 
	`kmÆloc
(
STACK_SIZE
);

497 i‡(
√wthªad
->
t_°ack
 =
NULL
) {

498 
	`thªad_de°roy
(
√wthªad
);

499  
ENOMEM
;

501 
	`thªad_check°ack_öô
(
√wthªad
);

508 
√wthªad
->
t_˝u
 = 
cuπhªad
->t_cpu;

511 i‡(
¥oc
 =
NULL
) {

512 
¥oc
 = 
cuπhªad
->
t_¥oc
;

514 
ªsu…
 = 
	`¥oc_addthªad
(
¥oc
, 
√wthªad
);

515 i‡(
ªsu…
) {

517 
	`thªad_de°roy
(
√wthªad
);

518  
ªsu…
;

526 
√wthªad
->
t_ùlhigh_cou¡
++;

529 
	`swôch‰ame_öô
(
√wthªad
, 
íåypoöt
, 
d©a1
, 
d©a2
);

532 
	`thªad_make_ru¬abÀ
(
√wthªad
, 
Ál£
);

535 
	}
}

548 
	$thªad_swôch
(
thªad°©e_t
 
√w°©e
, 
wch™
 *
wc
)

550 
thªad
 *
cur
, *
√xt
;

551 
•l
;

553 
	`DEBUGASSERT
(
cur˝u
->
c_cuπhªad
 =
cuπhªad
);

554 
	`DEBUGASSERT
(
cuπhªad
->
t_˝u
 =
cur˝u
->
c_£lf
);

557 
•l
 = 
	`•lhigh
();

559 
cur
 = 
cuπhªad
;

565 i‡(
cur˝u
->
c_isidÀ
) {

566 
	`•lx
(
•l
);

571 
	`thªad_check°ack
(
cur
);

574 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

577 i‡(
√w°©e
 =
S_READY
 && 
	`thªadli°_i£m±y
(&
cur˝u
->
c_runqueue
)) {

578 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

579 
	`•lx
(
•l
);

584 
√w°©e
) {

585 
S_RUN
:

586 
	`∑nic
("Illegal S_RUN inÅhread_switch\n");

587 
S_READY
:

588 
	`thªad_make_ru¬abÀ
(
cur
, 
åue
 );

590 
S_SLEEP
:

591 
cur
->
t_wch™_«me
 = 
wc
->
wc_«me
;

605 
	`thªadli°_addèû
(&
wc
->
wc_thªads
, 
cur
);

606 
	`wch™_u∆ock
(
wc
);

608 
S_ZOMBIE
:

609 
cur
->
t_wch™_«me
 = "ZOMBIE";

610 
	`thªadli°_addèû
(&
cur˝u
->
c_zombõs
, 
cur
);

613 
cur
->
t_°©e
 = 
√w°©e
;

633 
cur˝u
->
c_isidÀ
 = 
åue
;

635 
√xt
 = 
	`thªadli°_ªmhód
(&
cur˝u
->
c_runqueue
);

636 i‡(
√xt
 =
NULL
) {

637 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

638 
	`˝u_idÀ
();

639 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

641 } 
√xt
 =
NULL
);

642 
cur˝u
->
c_isidÀ
 = 
Ál£
;

651 
cur˝u
->
c_cuπhªad
 = 
√xt
;

652 
cuπhªad
 = 
√xt
;

655 
	`swôch‰ame_swôch
(&
cur
->
t_c⁄ãxt
, &
√xt
->t_context);

705 
cur
->
t_wch™_«me
 = 
NULL
;

706 
cur
->
t_°©e
 = 
S_RUN
;

709 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

712 
	`as_a˘iv©e
();

715 
	`ex‹ci£
();

718 
	`•lx
(
•l
);

719 
	}
}

730 
thªad_°¨tup
((*
íåypoöt
)(*
d©a1
, 
d©a2
),

731 *
d©a1
, 
d©a2
)

733 
thªad
 *
cur
;

735 
cur
 = 
cuπhªad
;

738 
cur
->
t_wch™_«me
 = 
NULL
;

739 
cur
->
t_°©e
 = 
S_RUN
;

742 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

745 
	`as_a˘iv©e
();

748 
	`ex‹ci£
();

751 
	`•l0
();

753 #i‡
OPT_SYNCHPROBS


756 
i
, 
n
;

757 
n
 = 
	`øndom
()%161 +Ñandom()%161;

758 
i
=0; i<
n
; i++) {

759 
	`thªad_yõld
();

765 
	`íåypoöt
(
d©a1
, 
d©a2
);

768 
	`thªad_exô
();

769 
	}
}

781 
	$thªad_exô
()

783 
thªad
 *
cur
;

785 
cur
 = 
cuπhªad
;

787 #ifde‡
UW


790 
	`KASSERT
(
cuΩroc
 =
k¥oc
 || cuΩro¯=
NULL
);

792 i‡(
cuΩroc
 =
k¥oc
) {

793 
	`¥oc_ªmthªad
(
cur
);

796 
	`¥oc_ªmthªad
(
cur
);

800 
	`KASSERT
(
cur
->
t_¥oc
 =
NULL
);

803 
	`thªad_check°ack
(
cur
);

806 
	`•lhigh
();

807 
	`thªad_swôch
(
S_ZOMBIE
, 
NULL
);

808 
	`∑nic
("The zombie walks!\n");

809 
	}
}

815 
	$thªad_yõld
()

817 
	`thªad_swôch
(
S_READY
, 
NULL
);

818 
	}
}

830 
	$scheduÀ
()

836 
	}
}

856 
	$thªad_c⁄sidî_migøti⁄
()

858 
my_cou¡
, 
tŸÆ_cou¡
, 
⁄e_sh¨e
, 
to_£nd
;

859 
i
, 
num˝us
;

860 
˝u
 *
c
;

861 
thªadli°
 
vi˘ims
;

862 
thªad
 *
t
;

864 
my_cou¡
 = 
tŸÆ_cou¡
 = 0;

865 
num˝us
 = 
	`˝u¨øy_num
(&
Æl˝us
);

866 
i
=0; i<
num˝us
; i++) {

867 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

868 
	`•ölock_acquúe
(&
c
->
c_runqueue_lock
);

869 
tŸÆ_cou¡
 +
c
->
c_runqueue
.
é_cou¡
;

870 i‡(
c
 =
cur˝u
->
c_£lf
) {

871 
my_cou¡
 = 
c
->
c_runqueue
.
é_cou¡
;

873 
	`•ölock_ªÀa£
(&
c
->
c_runqueue_lock
);

876 
⁄e_sh¨e
 = 
	`DIVROUNDUP
(
tŸÆ_cou¡
, 
num˝us
);

877 i‡(
my_cou¡
 < 
⁄e_sh¨e
) {

881 
to_£nd
 = 
my_cou¡
 - 
⁄e_sh¨e
;

882 
	`thªadli°_öô
(&
vi˘ims
);

883 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

884 
i
=0; i<
to_£nd
; i++) {

885 
t
 = 
	`thªadli°_ªmèû
(&
cur˝u
->
c_runqueue
);

886 
	`thªadli°_addhód
(&
vi˘ims
, 
t
);

888 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

890 
i
=0; i < 
num˝us
 && 
to_£nd
 > 0; i++) {

891 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

892 i‡(
c
 =
cur˝u
->
c_£lf
) {

895 
	`•ölock_acquúe
(&
c
->
c_runqueue_lock
);

896 
c
->
c_runqueue
.
é_cou¡
 < 
⁄e_sh¨e
 && 
to_£nd
 > 0) {

897 
t
 = 
	`thªadli°_ªmhód
(&
vi˘ims
);

920 i‡(
t
 =
cuπhªad
) {

921 
	`thªadli°_addèû
(&
vi˘ims
, 
t
);

922 
to_£nd
--;

926 
t
->
t_˝u
 = 
c
;

927 
	`thªadli°_addèû
(&
c
->
c_runqueue
, 
t
);

928 
	`DEBUG
(
DB_THREADS
,

930 
t
->
t_«me
, 
cur˝u
->
c_numbî
, 
c
->c_number);

931 
to_£nd
--;

932 i‡(
c
->
c_isidÀ
) {

937 
	`ùi_£nd
(
c
, 
IPI_UNIDLE
);

940 
	`•ölock_ªÀa£
(&
c
->
c_runqueue_lock
);

948 i‡(!
	`thªadli°_i£m±y
(&
vi˘ims
)) {

949 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

950 (
t
 = 
	`thªadli°_ªmhód
(&
vi˘ims
)Ë!
NULL
) {

951 
	`thªadli°_addèû
(&
cur˝u
->
c_runqueue
, 
t
);

953 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

956 
	`KASSERT
(
	`thªadli°_i£m±y
(&
vi˘ims
));

957 
	`thªadli°_˛ónup
(&
vi˘ims
);

958 
	}
}

974 
wch™
 *

975 
	$wch™_¸óã
(c⁄° *
«me
)

977 
wch™
 *
wc
;

979 
wc
 = 
	`kmÆloc
((*wc));

980 i‡(
wc
 =
NULL
) {

981  
NULL
;

983 
	`•ölock_öô
(&
wc
->
wc_lock
);

984 
	`thªadli°_öô
(&
wc
->
wc_thªads
);

985 
wc
->
wc_«me
 = 
«me
;

986  
wc
;

987 
	}
}

994 
	$wch™_de°roy
(
wch™
 *
wc
)

996 
	`•ölock_˛ónup
(&
wc
->
wc_lock
);

997 
	`thªadli°_˛ónup
(&
wc
->
wc_thªads
);

998 
	`k‰ì
(
wc
);

999 
	}
}

1005 
	$wch™_lock
(
wch™
 *
wc
)

1007 
	`•ölock_acquúe
(&
wc
->
wc_lock
);

1008 
	}
}

1011 
	$wch™_u∆ock
(
wch™
 *
wc
)

1013 
	`•ölock_ªÀa£
(&
wc
->
wc_lock
);

1014 
	}
}

1023 
	$wch™_¶ìp
(
wch™
 *
wc
)

1026 
	`KASSERT
(!
cuπhªad
->
t_ö_öãºu±
);

1028 
	`thªad_swôch
(
S_SLEEP
, 
wc
);

1029 
	}
}

1035 
	$wch™_wake⁄e
(
wch™
 *
wc
)

1037 
thªad
 *
èrgë
;

1040 
	`•ölock_acquúe
(&
wc
->
wc_lock
);

1041 
èrgë
 = 
	`thªadli°_ªmhód
(&
wc
->
wc_thªads
);

1046 
	`•ölock_ªÀa£
(&
wc
->
wc_lock
);

1048 i‡(
èrgë
 =
NULL
) {

1053 
	`thªad_make_ru¬abÀ
(
èrgë
, 
Ál£
);

1054 
	}
}

1060 
	$wch™_wakóŒ
(
wch™
 *
wc
)

1062 
thªad
 *
èrgë
;

1063 
thªadli°
 
li°
;

1065 
	`thªadli°_öô
(&
li°
);

1071 
	`•ölock_acquúe
(&
wc
->
wc_lock
);

1072 (
èrgë
 = 
	`thªadli°_ªmhód
(&
wc
->
wc_thªads
)Ë!
NULL
) {

1073 
	`thªadli°_addèû
(&
li°
, 
èrgë
);

1079 
	`•ölock_ªÀa£
(&
wc
->
wc_lock
);

1086 (
èrgë
 = 
	`thªadli°_ªmhód
(&
li°
)Ë!
NULL
) {

1087 
	`thªad_make_ru¬abÀ
(
èrgë
, 
Ál£
);

1090 
	`thªadli°_˛ónup
(&
li°
);

1091 
	}
}

1097 
boﬁ


1098 
	$wch™_i£m±y
(
wch™
 *
wc
)

1100 
boﬁ
 
ªt
;

1102 
	`•ölock_acquúe
(&
wc
->
wc_lock
);

1103 
ªt
 = 
	`thªadli°_i£m±y
(&
wc
->
wc_thªads
);

1104 
	`•ölock_ªÀa£
(&
wc
->
wc_lock
);

1106  
ªt
;

1107 
	}
}

1119 
	$ùi_£nd
(
˝u
 *
èrgë
, 
code
)

1121 
	`KASSERT
(
code
 >= 0 && code < 32);

1123 
	`•ölock_acquúe
(&
èrgë
->
c_ùi_lock
);

1124 
èrgë
->
c_ùi_≥ndög
 |(
uöt32_t
)1 << 
code
;

1125 
	`maöbus_£nd_ùi
(
èrgë
);

1126 
	`•ölock_ªÀa£
(&
èrgë
->
c_ùi_lock
);

1127 
	}
}

1130 
	$ùi_brﬂdˇ°
(
code
)

1132 
i
;

1133 
˝u
 *
c
;

1135 
i
=0; i < 
	`˝u¨øy_num
(&
Æl˝us
); i++) {

1136 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

1137 i‡(
c
 !
cur˝u
->
c_£lf
) {

1138 
	`ùi_£nd
(
c
, 
code
);

1141 
	}
}

1144 
	$ùi_ébshoŸdown
(
˝u
 *
èrgë
, c⁄° 
ébshoŸdown
 *
m≠pög
)

1146 
n
;

1148 
	`•ölock_acquúe
(&
èrgë
->
c_ùi_lock
);

1150 
n
 = 
èrgë
->
c_numshoŸdown
;

1151 i‡(
n
 =
TLBSHOOTDOWN_MAX
) {

1152 
èrgë
->
c_numshoŸdown
 = 
TLBSHOOTDOWN_ALL
;

1155 
èrgë
->
c_shoŸdown
[
n
] = *
m≠pög
;

1156 
èrgë
->
c_numshoŸdown
 = 
n
+1;

1159 
èrgë
->
c_ùi_≥ndög
 |(
uöt32_t
)1 << 
IPI_TLBSHOOTDOWN
;

1160 
	`maöbus_£nd_ùi
(
èrgë
);

1162 
	`•ölock_ªÀa£
(&
èrgë
->
c_ùi_lock
);

1163 
	}
}

1166 
	$öãΩro˚ss‹_öãºu±
()

1168 
uöt32_t
 
bôs
;

1169 
i
;

1171 
	`•ölock_acquúe
(&
cur˝u
->
c_ùi_lock
);

1172 
bôs
 = 
cur˝u
->
c_ùi_≥ndög
;

1174 i‡(
bôs
 & (1U << 
IPI_PANIC
)) {

1176 
	`˝u_hÆt
();

1178 i‡(
bôs
 & (1U << 
IPI_OFFLINE
)) {

1180 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

1181 i‡(!
cur˝u
->
c_isidÀ
) {

1182 
	`k¥ötf
("cpu%d: offline: warning:Çot idle\n",

1183 
cur˝u
->
c_numbî
);

1185 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

1186 
	`k¥ötf
("˝u%d: ofÊöe.\n", 
cur˝u
->
c_numbî
);

1187 
	`˝u_hÆt
();

1189 i‡(
bôs
 & (1U << 
IPI_UNIDLE
)) {

1195 i‡(
bôs
 & (1U << 
IPI_TLBSHOOTDOWN
)) {

1196 i‡(
cur˝u
->
c_numshoŸdown
 =
TLBSHOOTDOWN_ALL
) {

1197 
	`vm_ébshoŸdown_Æl
();

1200 
i
=0; i<
cur˝u
->
c_numshoŸdown
; i++) {

1201 
	`vm_ébshoŸdown
(&
cur˝u
->
c_shoŸdown
[
i
]);

1204 
cur˝u
->
c_numshoŸdown
 = 0;

1207 
cur˝u
->
c_ùi_≥ndög
 = 0;

1208 
	`•ölock_ªÀa£
(&
cur˝u
->
c_ùi_lock
);

1209 
	}
}

	@test/os161/kern/thread/threadlist.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<thªad.h
>

37 
	~<thªadli°.h
>

40 
	$thªadli°node_öô
(
thªadli°node
 *
én
, 
thªad
 *
t
)

42 
	`DEBUGASSERT
(
én
 !
NULL
);

43 
	`KASSERT
(
t
 !
NULL
);

45 
én
->
én_√xt
 = 
NULL
;

46 
én
->
én_¥ev
 = 
NULL
;

47 
én
->
én_£lf
 = 
t
;

48 
	}
}

51 
	$thªadli°node_˛ónup
(
thªadli°node
 *
én
)

53 
	`DEBUGASSERT
(
én
 !
NULL
);

55 
	`KASSERT
(
én
->
én_√xt
 =
NULL
);

56 
	`KASSERT
(
én
->
én_¥ev
 =
NULL
);

57 
	`KASSERT
(
én
->
én_£lf
 !
NULL
);

58 
	}
}

61 
	$thªadli°_öô
(
thªadli°
 *
é
)

63 
	`DEBUGASSERT
(
é
 !
NULL
);

65 
é
->
é_hód
.
én_√xt
 = &é->
é_èû
;

66 
é
->
é_hód
.
én_¥ev
 = 
NULL
;

67 
é
->
é_èû
.
én_√xt
 = 
NULL
;

68 
é
->
é_èû
.
én_¥ev
 = &é->
é_hód
;

69 
é
->
é_hód
.
én_£lf
 = 
NULL
;

70 
é
->
é_èû
.
én_£lf
 = 
NULL
;

71 
é
->
é_cou¡
 = 0;

72 
	}
}

75 
	$thªadli°_˛ónup
(
thªadli°
 *
é
)

77 
	`DEBUGASSERT
(
é
 !
NULL
);

78 
	`DEBUGASSERT
(
é
->
é_hód
.
én_√xt
 =&é->
é_èû
);

79 
	`DEBUGASSERT
(
é
->
é_hód
.
én_¥ev
 =
NULL
);

80 
	`DEBUGASSERT
(
é
->
é_èû
.
én_√xt
 =
NULL
);

81 
	`DEBUGASSERT
(
é
->
é_èû
.
én_¥ev
 =&é->
é_hód
);

82 
	`DEBUGASSERT
(
é
->
é_hód
.
én_£lf
 =
NULL
);

83 
	`DEBUGASSERT
(
é
->
é_èû
.
én_£lf
 =
NULL
);

85 
	`KASSERT
(
	`thªadli°_i£m±y
(
é
));

86 
	`KASSERT
(
é
->
é_cou¡
 == 0);

89 
	}
}

91 
boﬁ


92 
	$thªadli°_i£m±y
(
thªadli°
 *
é
)

94 
	`DEBUGASSERT
(
é
 !
NULL
);

96  (
é
->
é_cou¡
 == 0);

97 
	}
}

107 
	$thªadli°_ö£πa·înode
(
thªadli°node
 *
⁄li°
, 
thªad
 *
t
)

109 
thªadli°node
 *
addì
;

111 
addì
 = &
t
->
t_li°node
;

113 
	`DEBUGASSERT
(
addì
->
én_¥ev
 =
NULL
);

114 
	`DEBUGASSERT
(
addì
->
én_√xt
 =
NULL
);

116 
addì
->
én_¥ev
 = 
⁄li°
;

117 
addì
->
én_√xt
 = 
⁄li°
->tln_next;

118 
addì
->
én_¥ev
->
én_√xt
 =áddee;

119 
addì
->
én_√xt
->
én_¥ev
 =áddee;

120 
	}
}

127 
	$thªadli°_ö£πbef‹íode
(
thªad
 *
t
, 
thªadli°node
 *
⁄li°
)

129 
thªadli°node
 *
addì
;

131 
addì
 = &
t
->
t_li°node
;

133 
	`DEBUGASSERT
(
addì
->
én_¥ev
 =
NULL
);

134 
	`DEBUGASSERT
(
addì
->
én_√xt
 =
NULL
);

136 
addì
->
én_¥ev
 = 
⁄li°
->tln_prev;

137 
addì
->
én_√xt
 = 
⁄li°
;

138 
addì
->
én_¥ev
->
én_√xt
 =áddee;

139 
addì
->
én_√xt
->
én_¥ev
 =áddee;

140 
	}
}

147 
	$thªadli°_ªmovíode
(
thªadli°node
 *
én
)

149 
	`DEBUGASSERT
(
én
 !
NULL
);

150 
	`DEBUGASSERT
(
én
->
én_¥ev
 !
NULL
);

151 
	`DEBUGASSERT
(
én
->
én_√xt
 !
NULL
);

153 
én
->
én_¥ev
->
én_√xt
 =Åln->tln_next;

154 
én
->
én_√xt
->
én_¥ev
 =Åln->tln_prev;

155 
én
->
én_¥ev
 = 
NULL
;

156 
én
->
én_√xt
 = 
NULL
;

157 
	}
}

163 
	$thªadli°_addhód
(
thªadli°
 *
é
, 
thªad
 *
t
)

165 
	`DEBUGASSERT
(
é
 !
NULL
);

166 
	`DEBUGASSERT
(
t
 !
NULL
);

168 
	`thªadli°_ö£πa·înode
(&
é
->
é_hód
, 
t
);

169 
é
->
é_cou¡
++;

170 
	}
}

173 
	$thªadli°_addèû
(
thªadli°
 *
é
, 
thªad
 *
t
)

175 
	`DEBUGASSERT
(
é
 !
NULL
);

176 
	`DEBUGASSERT
(
t
 !
NULL
);

178 
	`thªadli°_ö£πbef‹íode
(
t
, &
é
->
é_èû
);

179 
é
->
é_cou¡
++;

180 
	}
}

182 
thªad
 *

183 
	$thªadli°_ªmhód
(
thªadli°
 *
é
)

185 
thªadli°node
 *
én
;

187 
	`DEBUGASSERT
(
é
 !
NULL
);

189 
én
 = 
é
->
é_hód
.
én_√xt
;

190 i‡(
én
->
én_√xt
 =
NULL
) {

192  
NULL
;

194 
	`thªadli°_ªmovíode
(
én
);

195 
	`DEBUGASSERT
(
é
->
é_cou¡
 > 0);

196 
é
->
é_cou¡
--;

197  
én
->
én_£lf
;

198 
	}
}

200 
thªad
 *

201 
	$thªadli°_ªmèû
(
thªadli°
 *
é
)

203 
thªadli°node
 *
én
;

205 
	`DEBUGASSERT
(
é
 !
NULL
);

207 
én
 = 
é
->
é_èû
.
én_¥ev
;

208 i‡(
én
->
én_¥ev
 =
NULL
) {

210  
NULL
;

212 
	`thªadli°_ªmovíode
(
én
);

213 
	`DEBUGASSERT
(
é
->
é_cou¡
 > 0);

214 
é
->
é_cou¡
--;

215  
én
->
én_£lf
;

216 
	}
}

219 
	$thªadli°_ö£πa·î
(
thªadli°
 *
é
,

220 
thªad
 *
⁄li°
, thªad *
addì
)

222 
	`thªadli°_ö£πa·înode
(&
⁄li°
->
t_li°node
, 
addì
);

223 
é
->
é_cou¡
++;

224 
	}
}

227 
	$thªadli°_ö£πbef‹e
(
thªadli°
 *
é
,

228 
thªad
 *
addì
, thªad *
⁄li°
)

230 
	`thªadli°_ö£πbef‹íode
(
addì
, &
⁄li°
->
t_li°node
);

231 
é
->
é_cou¡
++;

232 
	}
}

235 
	$thªadli°_ªmove
(
thªadli°
 *
é
, 
thªad
 *
t
)

237 
	`thªadli°_ªmovíode
(&
t
->
t_li°node
);

238 
	`DEBUGASSERT
(
é
->
é_cou¡
 > 0);

239 
é
->
é_cou¡
--;

240 
	}
}

	@test/os161/kern/vfs/device.c

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<kîn/f˙é.h
>

39 
	~<°©.h
>

40 
	~<lib.h
>

41 
	~<uio.h
>

42 
	~<synch.h
>

43 
	~<vnode.h
>

44 
	~<devi˚.h
>

53 
	$dev_›í
(
vnode
 *
v
, 
Êags
)

55 
devi˚
 *
d
 = 
v
->
vn_d©a
;

57 i‡(
Êags
 & (
O_CREAT
 | 
O_TRUNC
 | 
O_EXCL
 | 
O_APPEND
)) {

58  
EINVAL
;

61  
d
->
	`d_›í
(d, 
Êags
);

62 
	}
}

70 
	$dev_˛o£
(
vnode
 *
v
)

72 
devi˚
 *
d
 = 
v
->
vn_d©a
;

73  
d
->
	`d_˛o£
(d);

74 
	}
}

82 
	$dev_ª˛aim
(
vnode
 *
v
)

84 ()
v
;

87 
	}
}

94 
	$dev_ªad
(
vnode
 *
v
, 
uio
 *uio)

96 
devi˚
 *
d
 = 
v
->
vn_d©a
;

97 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

98  
d
->
	`d_io
(d, 
uio
);

99 
	}
}

107 
	$nuŒ_io
(
vnode
 *
v
, 
uio
 *uio)

109 ()
v
;

110 ()
uio
;

111  
EINVAL
;

112 
	}
}

119 
	$dev_wrôe
(
vnode
 *
v
, 
uio
 *uio)

121 
devi˚
 *
d
 = 
v
->
vn_d©a
;

122 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_WRITE
);

123  
d
->
	`d_io
(d, 
uio
);

124 
	}
}

131 
	$dev_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

133 
devi˚
 *
d
 = 
v
->
vn_d©a
;

134  
d
->
	`d_io˘l
(d, 
›
, 
d©a
);

135 
	}
}

144 
	$dev_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

146 
devi˚
 *
d
 = 
v
->
vn_d©a
;

147 
ªsu…
;

149 
	`bzîo
(
°©buf
, (
°©
));

151 i‡(
d
->
d_blocks
 > 0) {

152 
°©buf
->
°_size
 = 
d
->
d_blocks
 * d->
d_blocksize
;

153 
°©buf
->
°_blksize
 = 
d
->
d_blocksize
;

156 
°©buf
->
°_size
 = 0;

159 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

160 i‡(
ªsu…
) {

161  
ªsu…
;

164 
°©buf
->
°_mode
 |= 0600;

166 
°©buf
->
°_∆ök
 = 1;

167 
°©buf
->
°_blocks
 = 
d
->
d_blocks
;

170 
°©buf
->
°_dev
 = 0;

173 
°©buf
->
°_rdev
 = 
d
->
d_devnumbî
;

176 
	}
}

185 
	$dev_gëty≥
(
vnode
 *
v
, 
mode_t
 *
ªt
)

187 
devi˚
 *
d
 = 
v
->
vn_d©a
;

188 i‡(
d
->
d_blocks
 > 0) {

189 *
ªt
 = 
S_IFBLK
;

192 *
ªt
 = 
S_IFCHR
;

195 
	}
}

204 
	$dev_åy£ek
(
vnode
 *
v
, 
off_t
 
pos
)

206 
devi˚
 *
d
 = 
v
->
vn_d©a
;

207 i‡(
d
->
d_blocks
 > 0) {

208 i‡((
pos
 % 
d
->
d_blocksize
)!=0) {

210  
EINVAL
;

212 i‡(
pos
 < 0) {

219  
EINVAL
;

221 i‡(
pos
 / 
d
->
d_blocksize
 >d->
d_blocks
) {

223  
EINVAL
;

227  
ESPIPE
;

230 
	}
}

237 
	$nuŒ_fsync
(
vnode
 *
v
)

239 ()
v
;

241 
	}
}

249 
	$dev_mm≠
(
vnode
 *
v
 )

251 ()
v
;

252  
EUNIMP
;

253 
	}
}

260 
	$dev_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

262 
devi˚
 *
d
 = 
v
->
vn_d©a
;

267 i‡(
d
->
d_blocks
 > 0 && (
off_t
)(d->d_blocks*d->
d_blocksize
Ë=
Àn
) {

271  
EINVAL
;

272 
	}
}

282 
	$dev_«mefûe
(
vnode
 *
v
, 
uio
 *uio)

290 ()
v
;

291 ()
uio
;

294 
	}
}

302 
	$nuŒ_¸ót
(
vnode
 *
v
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

303 
vnode
 **
ªsu…
)

305 ()
v
;

306 ()
«me
;

307 ()
ex˛
;

308 ()
mode
;

309 ()
ªsu…
;

310  
ENOTDIR
;

311 
	}
}

315 
	$nuŒ_mkdú
(
vnode
 *
v
, c⁄° *
«me
, 
mode_t
 
mode
)

317 ()
v
;

318 ()
«me
;

319 ()
mode
;

320  
ENOTDIR
;

321 
	}
}

325 
	$nuŒ_symlök
(
vnode
 *
v
, c⁄° *
c⁄ã¡s
, c⁄° *
«me
)

327 ()
v
;

328 ()
c⁄ã¡s
;

329 ()
«me
;

330  
ENOTDIR
;

331 
	}
}

335 
	$nuŒ_«me›
(
vnode
 *
v
, c⁄° *
«me
)

337 ()
v
;

338 ()
«me
;

339  
ENOTDIR
;

340 
	}
}

344 
	$nuŒ_lök
(
vnode
 *
v
, c⁄° *
«me
, vnodê*
fûe
)

346 ()
v
;

347 ()
«me
;

348 ()
fûe
;

349  
ENOTDIR
;

350 
	}
}

354 
	$nuŒ_ª«me
(
vnode
 *
v
, c⁄° *
n1
, vnodê*
v2
, c⁄° *
n2
)

356 ()
v
;

357 ()
n1
;

358 ()
v2
;

359 ()
n2
;

360  
ENOTDIR
;

361 
	}
}

378 
	$dev_lookup
(
vnode
 *
dú
,

379 *
∑th«me
, 
vnode
 **
ªsu…
)

386 i‡(
	`°æí
(
∑th«me
)>0) {

387  
ENOENT
;

389 
	`VOP_INCREF
(
dú
);

390 *
ªsu…
 = 
dú
;

392 
	}
}

396 
	$dev_look∑ª¡
(
vnode
 *
dú
,

397 *
∑th«me
, 
vnode
 **
ªsu…
,

398 *
«mebuf
, 
size_t
 
buÊí
)

403 ()
dú
;

404 ()
∑th«me
;

405 ()
ªsu…
;

406 ()
«mebuf
;

407 ()
buÊí
;

409  
ENOTDIR
;

410 
	}
}

415 c⁄° 
vnode_›s
 
	gdev_vnode_›s
 = {

416 
VOP_MAGIC
,

418 
dev_›í
,

419 
dev_˛o£
,

420 
dev_ª˛aim
,

421 
dev_ªad
,

422 
nuŒ_io
,

423 
nuŒ_io
,

424 
dev_wrôe
,

425 
dev_io˘l
,

426 
dev_°©
,

427 
dev_gëty≥
,

428 
dev_åy£ek
,

429 
nuŒ_fsync
,

430 
dev_mm≠
,

431 
dev_åunˇã
,

432 
dev_«mefûe
,

433 
nuŒ_¸ót
,

434 
nuŒ_symlök
,

435 
nuŒ_mkdú
,

436 
nuŒ_lök
,

437 
nuŒ_«me›
,

438 
nuŒ_«me›
,

439 
nuŒ_ª«me
,

440 
dev_lookup
,

441 
dev_look∑ª¡
,

447 
vnode
 *

448 
	$dev_¸óã_vnode
(
devi˚
 *
dev
)

450 
ªsu…
;

451 
vnode
 *
v
;

453 
v
 = 
	`kmÆloc
((
vnode
));

454 i‡(
v
==
NULL
) {

455  
NULL
;

458 
ªsu…
 = 
	`VOP_INIT
(
v
, &
dev_vnode_›s
, 
NULL
, 
dev
);

459 i‡(
ªsu…
 != 0) {

460 
	`∑nic
("While creating vnode for device: VOP_INIT: %s\n",

461 
	`°ªº‹
(
ªsu…
));

464  
v
;

465 
	}
}

	@test/os161/kern/vfs/devnull.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<lib.h
>

37 
	~<uio.h
>

38 
	~<vfs.h
>

39 
	~<devi˚.h
>

44 
	$nuŒ›í
(
devi˚
 *
dev
, 
›íÊags
)

46 ()
dev
;

47 ()
›íÊags
;

50 
	}
}

55 
	$nuŒ˛o£
(
devi˚
 *
dev
)

57 ()
dev
;

59 
	}
}

64 
	$nuŒio
(
devi˚
 *
dev
, 
uio
 *uio)

71 ()
dev
;

73 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

74 
uio
->
uio_ªsid
 = 0;

78 
	}
}

83 
	$nuŒio˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

89 ()
dev
;

90 ()
›
;

91 ()
d©a
;

93  
EINVAL
;

94 
	}
}

100 
	$devnuŒ_¸óã
()

102 
ªsu…
;

103 
devi˚
 *
dev
;

105 
dev
 = 
	`kmÆloc
((*dev));

106 i‡(
dev
==
NULL
) {

107 
	`∑nic
("CouldÇotáddÇull device: out of memory\n");

111 
dev
->
d_›í
 = 
nuŒ›í
;

112 
dev
->
d_˛o£
 = 
nuŒ˛o£
;

113 
dev
->
d_io
 = 
nuŒio
;

114 
dev
->
d_io˘l
 = 
nuŒio˘l
;

116 
dev
->
d_blocks
 = 0;

117 
dev
->
d_blocksize
 = 1;

119 
dev
->
d_devnumbî
 = 0;

121 
dev
->
d_d©a
 = 
NULL
;

123 
ªsu…
 = 
	`vfs_adddev
("nuŒ", 
dev
, 0);

124 i‡(
ªsu…
) {

125 
	`∑nic
("CouldÇŸáddÇuŒ devi˚: %s\n", 
	`°ªº‹
(
ªsu…
));

127 
	}
}

	@test/os161/kern/vfs/vfscwd.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<°©.h
>

37 
	~<lib.h
>

38 
	~<uio.h
>

39 
	~<¥oc.h
>

40 
	~<cuºít.h
>

41 
	~<vfs.h
>

42 
	~<fs.h
>

43 
	~<vnode.h
>

49 
	$vfs_gëcurdú
(
vnode
 **
ªt
)

51 
rv
 = 0;

53 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

54 i‡(
cuΩroc
->
p_cwd
!=
NULL
) {

55 
	`VOP_INCREF
(
cuΩroc
->
p_cwd
);

56 *
ªt
 = 
cuΩroc
->
p_cwd
;

59 
rv
 = 
ENOENT
;

61 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

63  
rv
;

64 
	}
}

71 
	$vfs_£tcurdú
(
vnode
 *
dú
)

73 
vnode
 *
ﬁd
;

74 
mode_t
 
vty≥
;

75 
ªsu…
;

77 
ªsu…
 = 
	`VOP_GETTYPE
(
dú
, &
vty≥
);

78 i‡(
ªsu…
) {

79  
ªsu…
;

81 i‡(
vty≥
 !
S_IFDIR
) {

82  
ENOTDIR
;

85 
	`VOP_INCREF
(
dú
);

87 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

88 
ﬁd
 = 
cuΩroc
->
p_cwd
;

89 
cuΩroc
->
p_cwd
 = 
dú
;

90 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

92 i‡(
ﬁd
!=
NULL
) {

93 
	`VOP_DECREF
(
ﬁd
);

97 
	}
}

103 
	$vfs_˛órcurdú
()

105 
vnode
 *
ﬁd
;

107 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

108 
ﬁd
 = 
cuΩroc
->
p_cwd
;

109 
cuΩroc
->
p_cwd
 = 
NULL
;

110 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

112 i‡(
ﬁd
!=
NULL
) {

113 
	`VOP_DECREF
(
ﬁd
);

117 
	}
}

124 
	$vfs_chdú
(*
∑th
)

126 
vnode
 *
vn
;

127 
ªsu…
;

129 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

130 i‡(
ªsu…
) {

131  
ªsu…
;

133 
ªsu…
 = 
	`vfs_£tcurdú
(
vn
);

134 
	`VOP_DECREF
(
vn
);

135  
ªsu…
;

136 
	}
}

144 
	$vfs_gëcwd
(
uio
 *uio)

146 
vnode
 *
cwd
;

147 
ªsu…
;

148 c⁄° *
«me
;

149 
cﬁ⁄
=':';

151 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

153 
ªsu…
 = 
	`vfs_gëcurdú
(&
cwd
);

154 i‡(
ªsu…
) {

155  
ªsu…
;

159 
	`KASSERT
(
cwd
->
vn_fs
 !
NULL
);

161 
«me
 = 
	`FSOP_GETVOLNAME
(
cwd
->
vn_fs
);

162 i‡(
«me
==
NULL
) {

163 
	`vfs_biglock_acquúe
();

164 
«me
 = 
	`vfs_gëdev«me
(
cwd
->
vn_fs
);

165 
	`vfs_biglock_ªÀa£
();

167 
	`KASSERT
(
«me
 !
NULL
);

169 
ªsu…
 = 
	`uiomove
((*)
«me
, 
	`°æí
“ame), 
uio
);

170 i‡(
ªsu…
) {

171 
out
;

173 
ªsu…
 = 
	`uiomove
(&
cﬁ⁄
, 1, 
uio
);

174 i‡(
ªsu…
) {

175 
out
;

178 
ªsu…
 = 
	`VOP_NAMEFILE
(
cwd
, 
uio
);

180 
out
:

182 
	`VOP_DECREF
(
cwd
);

183  
ªsu…
;

184 
	}
}

	@test/os161/kern/vfs/vfslist.c

35 
	#VFSINLINE


	)

37 
	~<ty≥s.h
>

38 
	~<kîn/î∫o.h
>

39 
	~<lib.h
>

40 
	~<¨øy.h
>

41 
	~<synch.h
>

42 
	~<vfs.h
>

43 
	~<fs.h
>

44 
	~<vnode.h
>

45 
	~<devi˚.h
>

77 
	sknowndev
 {

78 *
	mkd_«me
;

79 *
	mkd_øw«me
;

80 
devi˚
 *
	mkd_devi˚
;

81 
vnode
 *
	mkd_vnode
;

82 
fs
 *
	mkd_fs
;

85 
DECLARRAY
(
knowndev
);

86 
DEFARRAY
(
knowndev
, );

88 
knowndev¨øy
 *
	gknowndevs
;

91 
lock
 *
	gvfs_biglock
;

92 
	gvfs_biglock_dïth
;

99 
	$vfs_boŸ°øp
()

101 
knowndevs
 = 
	`knowndev¨øy_¸óã
();

102 i‡(
knowndevs
==
NULL
) {

103 
	`∑nic
("vfs: CouldÇot create knowndevsárray\n");

106 
vfs_biglock
 = 
	`lock_¸óã
("vfs_biglock");

107 i‡(
vfs_biglock
==
NULL
) {

108 
	`∑nic
("vfs: CouldÇot create vfs bigÜock\n");

110 
vfs_biglock_dïth
 = 0;

112 
	`devnuŒ_¸óã
();

113 
	}
}

123 
	$vfs_biglock_acquúe
()

125 i‡(!
	`lock_do_i_hﬁd
(
vfs_biglock
)) {

126 
	`lock_acquúe
(
vfs_biglock
);

128 
vfs_biglock_dïth
++;

129 
	}
}

132 
	$vfs_biglock_ªÀa£
()

134 
	`KASSERT
(
	`lock_do_i_hﬁd
(
vfs_biglock
));

135 
	`KASSERT
(
vfs_biglock_dïth
 > 0);

136 
vfs_biglock_dïth
--;

137 i‡(
vfs_biglock_dïth
 == 0) {

138 
	`lock_ªÀa£
(
vfs_biglock
);

140 
	}
}

142 
boﬁ


143 
	$vfs_biglock_do_i_hﬁd
()

145  
	`lock_do_i_hﬁd
(
vfs_biglock
);

146 
	}
}

152 
	$vfs_sync
()

154 
knowndev
 *
dev
;

155 
i
, 
num
;

157 
	`vfs_biglock_acquúe
();

159 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

160 
i
=0; i<
num
; i++) {

161 
dev
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

162 i‡(
dev
->
kd_fs
 !
NULL
) {

163  
	`FSOP_SYNC
(
dev
->
kd_fs
);

167 
	`vfs_biglock_ªÀa£
();

170 
	}
}

177 
	$vfs_gëroŸ
(c⁄° *
dev«me
, 
vnode
 **
ªsu…
)

179 
knowndev
 *
kd
;

180 
i
, 
num
;

182 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

184 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

185 
i
=0; i<
num
; i++) {

186 
kd
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

197 i‡(
kd
->
kd_fs
!=
NULL
) {

198 c⁄° *
vﬁ«me
;

199 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
kd
->
kd_fs
);

201 i‡(!
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
) ||

202 (
vﬁ«me
!=
NULL
 && !
	`°rcmp
(vﬁ«me, 
dev«me
))) {

203 *
ªsu…
 = 
	`FSOP_GETROOT
(
kd
->
kd_fs
);

208 i‡(
kd
->
kd_øw«me
!=
NULL
 &&

209 !
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
)) {

210  
ENXIO
;

219 i‡(!
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
)) {

220 
	`KASSERT
(
kd
->
kd_fs
==
NULL
);

221 
	`KASSERT
(
kd
->
kd_øw«me
==
NULL
);

222 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

223 
	`VOP_INCREF
(
kd
->
kd_vnode
);

224 *
ªsu…
 = 
kd
->
kd_vnode
;

232 i‡(
kd
->
kd_øw«me
!=
NULL
 && !
	`°rcmp
(kd->kd_øw«me, 
dev«me
)) {

233 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

234 
	`VOP_INCREF
(
kd
->
kd_vnode
);

235 *
ªsu…
 = 
kd
->
kd_vnode
;

250  
ENODEV
;

251 
	}
}

257 
	$vfs_gëdev«me
(
fs
 *fs)

259 
knowndev
 *
kd
;

260 
i
, 
num
;

262 
	`KASSERT
(
fs
 !
NULL
);

264 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

266 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

267 
i
=0; i<
num
; i++) {

268 
kd
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

270 i‡(
kd
->
kd_fs
 =
fs
) {

277  
kd
->
kd_«me
;

281  
NULL
;

282 
	}
}

289 
	$mkøw«me
(c⁄° *
«me
)

291 *
s
 = 
	`kmÆloc
(
	`°æí
(
«me
)+3+1);

292 i‡(!
s
) {

293  
NULL
;

295 
	`°r˝y
(
s
, 
«me
);

296 
	`°rˇt
(
s
, "raw");

297  
s
;

298 
	}
}

306 
ölöe


308 
	$ßme°rög
(c⁄° *
a
, c⁄° *
b
)

310 i‡(
a
==
NULL
 || 
b
==NULL) {

313  !
	`°rcmp
(
a
, 
b
);

314 
	}
}

321 
ölöe


323 
	$ßme°rög3
(c⁄° *
a
, c⁄° *
b
, c⁄° *
c
, c⁄° *
d
)

325  
	`ßme°rög
(
a
,
b
Ë|| same°rög◊,
c
Ë|| same°rög◊,
d
);

326 
	}
}

335 
	$bad«mes
(c⁄° *
n1
, c⁄° *
n2
, c⁄° *
n3
)

337 c⁄° *
vﬁ«me
;

338 
i
, 
num
;

339 
knowndev
 *
kd
;

341 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

343 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

344 
i
=0; i<
num
; i++) {

345 
kd
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

347 i‡(
kd
->
kd_fs
) {

348 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
kd
->
kd_fs
);

349 i‡(
	`ßme°rög3
(
vﬁ«me
, 
n1
, 
n2
, 
n3
)) {

354 i‡(
	`ßme°rög3
(
kd
->
kd_øw«me
, 
n1
, 
n2
, 
n3
) ||

355 
	`ßme°rög3
(
kd
->
kd_«me
, 
n1
, 
n2
, 
n3
)) {

361 
	}
}

372 
	$vfs_dﬂdd
(c⁄° *
d«me
, 
mou¡abÀ
, 
devi˚
 *
dev
, 
fs
 *fs)

374 *
«me
=
NULL
, *
øw«me
=NULL;

375 
knowndev
 *
kd
=
NULL
;

376 
vnode
 *vnode=
NULL
;

377 c⁄° *
vﬁ«me
=
NULL
;

378 
ödex
;

379 
ªsu…
;

381 
	`vfs_biglock_acquúe
();

383 
«me
 = 
	`k°rdup
(
d«me
);

384 i‡(
«me
==
NULL
) {

385 
nomem
;

387 i‡(
mou¡abÀ
) {

388 
øw«me
 = 
	`mkøw«me
(
«me
);

389 i‡(
øw«me
==
NULL
) {

390 
nomem
;

394 
vnode
 = 
	`dev_¸óã_vnode
(
dev
);

395 i‡(
vnode
==
NULL
) {

396 
nomem
;

399 
kd
 = 
	`kmÆloc
((
knowndev
));

400 i‡(
kd
==
NULL
) {

401 
nomem
;

404 
kd
->
kd_«me
 = 
«me
;

405 
kd
->
kd_øw«me
 = 
øw«me
;

406 
kd
->
kd_devi˚
 = 
dev
;

407 
kd
->
kd_vnode
 = 
vnode
;

408 
kd
->
kd_fs
 = 
fs
;

410 i‡(
fs
!=
NULL
) {

411 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
fs
);

414 i‡(
	`bad«mes
(
«me
, 
øw«me
, 
vﬁ«me
)) {

415 
	`vfs_biglock_ªÀa£
();

416  
EEXIST
;

419 
ªsu…
 = 
	`knowndev¨øy_add
(
knowndevs
, 
kd
, &
ödex
);

421 i‡(
ªsu…
 =0 && 
dev
 !
NULL
) {

423 
dev
->
d_devnumbî
 = 
ödex
+1;

426 
	`vfs_biglock_ªÀa£
();

427  
ªsu…
;

429 
nomem
:

431 i‡(
«me
) {

432 
	`k‰ì
(
«me
);

434 i‡(
øw«me
) {

435 
	`k‰ì
(
øw«me
);

437 i‡(
vnode
) {

438 
	`k‰ì
(
vnode
);

440 i‡(
kd
) {

441 
	`k‰ì
(
kd
);

444 
	`vfs_biglock_ªÀa£
();

445  
ENOMEM
;

446 
	}
}

453 
	$vfs_adddev
(c⁄° *
dev«me
, 
devi˚
 *
dev
, 
mou¡abÀ
)

455  
	`vfs_dﬂdd
(
dev«me
, 
mou¡abÀ
, 
dev
, 
NULL
);

456 
	}
}

464 
	$vfs_addfs
(c⁄° *
dev«me
, 
fs
 *fs)

466  
	`vfs_dﬂdd
(
dev«me
, 0, 
NULL
, 
fs
);

467 
	}
}

477 
	$födmou¡
(c⁄° *
dev«me
, 
knowndev
 **
ªsu…
)

479 
knowndev
 *
dev
;

480 
i
, 
num
;

481 
boﬁ
 
found
 = 
Ál£
;

483 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

485 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

486 
i
=0; !
found
 && i<
num
; i++) {

487 
dev
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

488 i‡(
dev
->
kd_øw«me
==
NULL
) {

493 i‡(!
	`°rcmp
(
dev«me
, 
dev
->
kd_«me
)) {

494 *
ªsu…
 = 
dev
;

495 
found
 = 
åue
;

499  
found
 ? 0 : 
ENODEV
;

500 
	}
}

509 
vfs_mou¡
(c⁄° *
dev«me
, *
d©a
,

510 (*
mou¡func
)(*
d©a
, 
devi˚
 *, 
fs
 **
ªt
))

512 c⁄° *
vﬁ«me
;

513 
knowndev
 *
kd
;

514 
fs
 *fs;

515 
ªsu…
;

517 
	`vfs_biglock_acquúe
();

519 
ªsu…
 = 
	`födmou¡
(
dev«me
, &
kd
);

520 i‡(
ªsu…
) {

521 
	`vfs_biglock_ªÀa£
();

522  
ªsu…
;

525 i‡(
kd
->
kd_fs
 !
NULL
) {

526 
	`vfs_biglock_ªÀa£
();

527  
EBUSY
;

529 
	`KASSERT
(
kd
->
kd_øw«me
 !
NULL
);

530 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

532 
ªsu…
 = 
	`mou¡func
(
d©a
, 
kd
->
kd_devi˚
, &
fs
);

533 i‡(
ªsu…
) {

534 
	`vfs_biglock_ªÀa£
();

535  
ªsu…
;

538 
	`KASSERT
(
fs
 !
NULL
);

540 
kd
->
kd_fs
 = 
fs
;

542 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
fs
);

543 
	`k¥ötf
("vfs: Mounted %s: on %s\n",

544 
vﬁ«me
 ? vﬁ«mê: 
kd
->
kd_«me
, kd->kd_name);

546 
	`vfs_biglock_ªÀa£
();

548 
	}
}

555 
	$vfs_unmou¡
(c⁄° *
dev«me
)

557 
knowndev
 *
kd
;

558 
ªsu…
;

560 
	`vfs_biglock_acquúe
();

562 
ªsu…
 = 
	`födmou¡
(
dev«me
, &
kd
);

563 i‡(
ªsu…
) {

564 
Áû
;

567 i‡(
kd
->
kd_fs
 =
NULL
) {

568 
ªsu…
 = 
EINVAL
;

569 
Áû
;

571 
	`KASSERT
(
kd
->
kd_øw«me
 !
NULL
);

572 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

574 
ªsu…
 = 
	`FSOP_SYNC
(
kd
->
kd_fs
);

575 i‡(
ªsu…
) {

576 
Áû
;

579 
ªsu…
 = 
	`FSOP_UNMOUNT
(
kd
->
kd_fs
);

580 i‡(
ªsu…
) {

581 
Áû
;

584 
	`k¥ötf
("vfs: Unmou¡ed %s:\n", 
kd
->
kd_«me
);

587 
kd
->
kd_fs
 = 
NULL
;

589 
	`KASSERT
(
ªsu…
==0);

591 
Áû
:

592 
	`vfs_biglock_ªÀa£
();

593  
ªsu…
;

594 
	}
}

600 
	$vfs_unmou¡Æl
()

602 
knowndev
 *
dev
;

603 
i
, 
num
;

604 
ªsu…
;

606 
	`vfs_biglock_acquúe
();

608 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

609 
i
=0; i<
num
; i++) {

610 
dev
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

611 i‡(
dev
->
kd_øw«me
 =
NULL
) {

615 i‡(
dev
->
kd_fs
 =
NULL
) {

620 
	`k¥ötf
("vfs: Unmou¡ög %s:\n", 
dev
->
kd_«me
);

622 
ªsu…
 = 
	`FSOP_SYNC
(
dev
->
kd_fs
);

623 i‡(
ªsu…
) {

624 
	`k¥ötf
("vfs: Warning: sync failed for %s: %s,Årying "

625 "agaö\n", 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

627 
ªsu…
 = 
	`FSOP_SYNC
(
dev
->
kd_fs
);

628 i‡(
ªsu…
) {

629 
	`k¥ötf
("vfs: Warning: sync failed secondÅime"

631 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

636 
ªsu…
 = 
	`FSOP_UNMOUNT
(
dev
->
kd_fs
);

637 i‡(
ªsu…
 =
EBUSY
) {

638 
	`k¥ötf
("vfs: Cannot unmount %s: (busy)\n",

639 
dev
->
kd_«me
);

642 i‡(
ªsu…
) {

643 
	`k¥ötf
("vfs: Warning: unmount failed for %s:"

645 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

650 
dev
->
kd_fs
 = 
NULL
;

653 
	`vfs_biglock_ªÀa£
();

656 
	}
}

	@test/os161/kern/vfs/vfslookup.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<limôs.h
>

37 
	~<lib.h
>

38 
	~<synch.h
>

39 
	~<vfs.h
>

40 
	~<fs.h
>

41 
	~<vnode.h
>

43 
vnode
 *
	gboŸfs_vnode
 = 
NULL
;

50 
	$ch™ge_boŸfs
(
vnode
 *
√wvn
)

52 
vnode
 *
ﬁdvn
;

54 
ﬁdvn
 = 
boŸfs_vnode
;

55 
boŸfs_vnode
 = 
√wvn
;

57 i‡(
ﬁdvn
 !
NULL
) {

58 
	`VOP_DECREF
(
ﬁdvn
);

60 
	}
}

71 
	$vfs_£tboŸfs
(c⁄° *
f¢ame
)

73 
tmp
[
NAME_MAX
+1];

74 *
s
;

75 
ªsu…
;

76 
vnode
 *
√wguy
;

78 
	`vfs_biglock_acquúe
();

80 
	`¢¥ötf
(
tmp
, —mp)-1, "%s", 
f¢ame
);

81 
s
 = 
	`°rchr
(
tmp
, ':');

82 i‡(
s
) {

84 i‡(
	`°æí
(
s
)>0) {

85 
	`vfs_biglock_ªÀa£
();

86  
EINVAL
;

90 
	`°rˇt
(
tmp
, ":");

93 
ªsu…
 = 
	`vfs_chdú
(
tmp
);

94 i‡(
ªsu…
) {

95 
	`vfs_biglock_ªÀa£
();

96  
ªsu…
;

99 
ªsu…
 = 
	`vfs_gëcurdú
(&
√wguy
);

100 i‡(
ªsu…
) {

101 
	`vfs_biglock_ªÀa£
();

102  
ªsu…
;

105 
	`ch™ge_boŸfs
(
√wguy
);

107 
	`vfs_biglock_ªÀa£
();

109 
	}
}

115 
	$vfs_˛órboŸfs
()

117 
	`vfs_biglock_acquúe
();

118 
	`ch™ge_boŸfs
(
NULL
);

119 
	`vfs_biglock_ªÀa£
();

120 
	}
}

130 
	$gëdevi˚
(*
∑th
, **
sub∑th
, 
vnode
 **
°¨tvn
)

132 
¶ash
=-1, 
cﬁ⁄
=-1, 
i
;

133 
vnode
 *
vn
;

134 
ªsu…
;

136 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

142 
i
=0; 
∑th
[i]; i++) {

143 i‡(
∑th
[
i
]==':') {

144 
cﬁ⁄
 = 
i
;

147 i‡(
∑th
[
i
]=='/') {

148 
¶ash
 = 
i
;

153 i‡(
cﬁ⁄
 < 0 && 
¶ash
 != 0) {

161 *
sub∑th
 = 
∑th
;

162  
	`vfs_gëcurdú
(
°¨tvn
);

165 i‡(
cﬁ⁄
>0) {

167 
∑th
[
cﬁ⁄
]=0;

168 
∑th
[
cﬁ⁄
+1]=='/') {

170 
cﬁ⁄
++;

172 *
sub∑th
 = &
∑th
[
cﬁ⁄
+1];

174 
ªsu…
 = 
	`vfs_gëroŸ
(
∑th
, 
°¨tvn
);

175 i‡(
ªsu…
) {

176  
ªsu…
;

188 
	`KASSERT
(
cﬁ⁄
==0 || 
¶ash
==0);

190 i‡(
∑th
[0]=='/') {

191 i‡(
boŸfs_vnode
==
NULL
) {

192  
ENOENT
;

194 
	`VOP_INCREF
(
boŸfs_vnode
);

195 *
°¨tvn
 = 
boŸfs_vnode
;

198 
	`KASSERT
(
∑th
[0]==':');

200 
ªsu…
 = 
	`vfs_gëcurdú
(&
vn
);

201 i‡(
ªsu…
) {

202  
ªsu…
;

209 
	`KASSERT
(
vn
->
vn_fs
!=
NULL
);

211 *
°¨tvn
 = 
	`FSOP_GETROOT
(
vn
->
vn_fs
);

213 
	`VOP_DECREF
(
vn
);

216 
∑th
[1]=='/') {

218 
∑th
++;

221 *
sub∑th
 = 
∑th
+1;

224 
	}
}

232 
	$vfs_look∑ª¡
(*
∑th
, 
vnode
 **
ªtvÆ
,

233 *
buf
, 
size_t
 
buÊí
)

235 
vnode
 *
°¨tvn
;

236 
ªsu…
;

238 
	`vfs_biglock_acquúe
();

240 
ªsu…
 = 
	`gëdevi˚
(
∑th
, &∑th, &
°¨tvn
);

241 i‡(
ªsu…
) {

242 
	`vfs_biglock_ªÀa£
();

243  
ªsu…
;

246 i‡(
	`°æí
(
∑th
)==0) {

252 
ªsu…
 = 
EINVAL
;

255 
ªsu…
 = 
	`VOP_LOOKPARENT
(
°¨tvn
, 
∑th
, 
ªtvÆ
, 
buf
, 
buÊí
);

258 
	`VOP_DECREF
(
°¨tvn
);

260 
	`vfs_biglock_ªÀa£
();

261  
ªsu…
;

262 
	}
}

265 
	$vfs_lookup
(*
∑th
, 
vnode
 **
ªtvÆ
)

267 
vnode
 *
°¨tvn
;

268 
ªsu…
;

270 
	`vfs_biglock_acquúe
();

272 
ªsu…
 = 
	`gëdevi˚
(
∑th
, &∑th, &
°¨tvn
);

273 i‡(
ªsu…
) {

274 
	`vfs_biglock_ªÀa£
();

275  
ªsu…
;

278 i‡(
	`°æí
(
∑th
)==0) {

279 *
ªtvÆ
 = 
°¨tvn
;

280 
	`vfs_biglock_ªÀa£
();

284 
ªsu…
 = 
	`VOP_LOOKUP
(
°¨tvn
, 
∑th
, 
ªtvÆ
);

286 
	`VOP_DECREF
(
°¨tvn
);

287 
	`vfs_biglock_ªÀa£
();

288  
ªsu…
;

289 
	}
}

	@test/os161/kern/vfs/vfspath.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<kîn/f˙é.h
>

37 
	~<limôs.h
>

38 
	~<lib.h
>

39 
	~<vfs.h
>

40 
	~<vnode.h
>

45 
	$vfs_›í
(*
∑th
, 
›íÊags
, 
mode_t
 
mode
, 
vnode
 **
ªt
)

47 
how
;

48 
ªsu…
;

49 
ˇnwrôe
;

50 
vnode
 *
vn
 = 
NULL
;

52 
how
 = 
›íÊags
 & 
O_ACCMODE
;

54 
how
) {

55 
O_RDONLY
:

56 
ˇnwrôe
=0;

58 
O_WRONLY
:

59 
O_RDWR
:

60 
ˇnwrôe
=1;

63  
EINVAL
;

66 i‡(
›íÊags
 & 
O_CREAT
) {

67 
«me
[
NAME_MAX
+1];

68 
vnode
 *
dú
;

69 
ex˛
 = (
›íÊags
 & 
O_EXCL
)!=0;

71 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
dú
, 
«me
, (name));

72 i‡(
ªsu…
) {

73  
ªsu…
;

76 
ªsu…
 = 
	`VOP_CREAT
(
dú
, 
«me
, 
ex˛
, 
mode
, &
vn
);

78 
	`VOP_DECREF
(
dú
);

81 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

84 i‡(
ªsu…
) {

85  
ªsu…
;

88 
	`KASSERT
(
vn
 !
NULL
);

90 
ªsu…
 = 
	`VOP_OPEN
(
vn
, 
›íÊags
);

91 i‡(
ªsu…
) {

92 
	`VOP_DECREF
(
vn
);

93  
ªsu…
;

96 
	`VOP_INCOPEN
(
vn
);

98 i‡(
›íÊags
 & 
O_TRUNC
) {

99 i‡(
ˇnwrôe
==0) {

100 
ªsu…
 = 
EINVAL
;

103 
ªsu…
 = 
	`VOP_TRUNCATE
(
vn
, 0);

105 i‡(
ªsu…
) {

106 
	`VOP_DECOPEN
(
vn
);

107 
	`VOP_DECREF
(
vn
);

108  
ªsu…
;

112 *
ªt
 = 
vn
;

115 
	}
}

119 
	$vfs_˛o£
(
vnode
 *
vn
)

135 
	`VOP_DECOPEN
(
vn
);

136 
	`VOP_DECREF
(
vn
);

137 
	}
}

141 
	$vfs_ªmove
(*
∑th
)

143 
vnode
 *
dú
;

144 
«me
[
NAME_MAX
+1];

145 
ªsu…
;

147 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
dú
, 
«me
, (name));

148 i‡(
ªsu…
) {

149  
ªsu…
;

152 
ªsu…
 = 
	`VOP_REMOVE
(
dú
, 
«me
);

153 
	`VOP_DECREF
(
dú
);

155  
ªsu…
;

156 
	}
}

160 
	$vfs_ª«me
(*
ﬁd∑th
, *
√w∑th
)

162 
vnode
 *
ﬁddú
;

163 
ﬁd«me
[
NAME_MAX
+1];

164 
vnode
 *
√wdú
;

165 
√w«me
[
NAME_MAX
+1];

166 
ªsu…
;

168 
ªsu…
 = 
	`vfs_look∑ª¡
(
ﬁd∑th
, &
ﬁddú
, 
ﬁd«me
, (oldname));

169 i‡(
ªsu…
) {

170  
ªsu…
;

172 
ªsu…
 = 
	`vfs_look∑ª¡
(
√w∑th
, &
√wdú
, 
√w«me
, (newname));

173 i‡(
ªsu…
) {

174 
	`VOP_DECREF
(
ﬁddú
);

175  
ªsu…
;

178 i‡(
ﬁddú
->
vn_fs
==
NULL
 || 
√wdú
->vn_fs==NULL ||

179 
ﬁddú
->
vn_fs
 !
√wdú
->vn_fs) {

180 
	`VOP_DECREF
(
√wdú
);

181 
	`VOP_DECREF
(
ﬁddú
);

182  
EXDEV
;

185 
ªsu…
 = 
	`VOP_RENAME
(
ﬁddú
, 
ﬁd«me
, 
√wdú
, 
√w«me
);

187 
	`VOP_DECREF
(
√wdú
);

188 
	`VOP_DECREF
(
ﬁddú
);

190  
ªsu…
;

191 
	}
}

195 
	$vfs_lök
(*
ﬁd∑th
, *
√w∑th
)

197 
vnode
 *
ﬁdfûe
;

198 
vnode
 *
√wdú
;

199 
√w«me
[
NAME_MAX
+1];

200 
ªsu…
;

202 
ªsu…
 = 
	`vfs_lookup
(
ﬁd∑th
, &
ﬁdfûe
);

203 i‡(
ªsu…
) {

204  
ªsu…
;

206 
ªsu…
 = 
	`vfs_look∑ª¡
(
√w∑th
, &
√wdú
, 
√w«me
, (newname));

207 i‡(
ªsu…
) {

208 
	`VOP_DECREF
(
ﬁdfûe
);

209  
ªsu…
;

212 i‡(
ﬁdfûe
->
vn_fs
==
NULL
 || 
√wdú
->vn_fs==NULL ||

213 
ﬁdfûe
->
vn_fs
 !
√wdú
->vn_fs) {

214 
	`VOP_DECREF
(
√wdú
);

215 
	`VOP_DECREF
(
ﬁdfûe
);

216  
EXDEV
;

219 
ªsu…
 = 
	`VOP_LINK
(
√wdú
, 
√w«me
, 
ﬁdfûe
);

221 
	`VOP_DECREF
(
√wdú
);

222 
	`VOP_DECREF
(
ﬁdfûe
);

224  
ªsu…
;

225 
	}
}

235 
	$vfs_symlök
(c⁄° *
c⁄ã¡s
, *
∑th
)

237 
vnode
 *
√wdú
;

238 
√w«me
[
NAME_MAX
+1];

239 
ªsu…
;

241 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
√wdú
, 
√w«me
, (newname));

242 i‡(
ªsu…
) {

243  
ªsu…
;

246 
ªsu…
 = 
	`VOP_SYMLINK
(
√wdú
, 
√w«me
, 
c⁄ã¡s
);

247 
	`VOP_DECREF
(
√wdú
);

249  
ªsu…
;

250 
	}
}

260 
	$vfs_ªadlök
(*
∑th
, 
uio
 *uio)

262 
vnode
 *
vn
;

263 
ªsu…
;

265 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

266 i‡(
ªsu…
) {

267  
ªsu…
;

270 
ªsu…
 = 
	`VOP_READLINK
(
vn
, 
uio
);

272 
	`VOP_DECREF
(
vn
);

274  
ªsu…
;

275 
	}
}

281 
	$vfs_mkdú
(*
∑th
, 
mode_t
 
mode
)

283 
vnode
 *
∑ª¡
;

284 
«me
[
NAME_MAX
+1];

285 
ªsu…
;

287 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
∑ª¡
, 
«me
, (name));

288 i‡(
ªsu…
) {

289  
ªsu…
;

292 
ªsu…
 = 
	`VOP_MKDIR
(
∑ª¡
, 
«me
, 
mode
);

294 
	`VOP_DECREF
(
∑ª¡
);

296  
ªsu…
;

297 
	}
}

303 
	$vfs_rmdú
(*
∑th
)

305 
vnode
 *
∑ª¡
;

306 
«me
[
NAME_MAX
+1];

307 
ªsu…
;

309 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
∑ª¡
, 
«me
, (name));

310 i‡(
ªsu…
) {

311  
ªsu…
;

314 
ªsu…
 = 
	`VOP_RMDIR
(
∑ª¡
, 
«me
);

316 
	`VOP_DECREF
(
∑ª¡
);

318  
ªsu…
;

319 
	}
}

	@test/os161/kern/vfs/vnode.c

33 
	~<ty≥s.h
>

34 
	~<kîn/î∫o.h
>

35 
	~<lib.h
>

36 
	~<synch.h
>

37 
	~<vfs.h
>

38 
	~<vnode.h
>

45 
	$vnode_öô
(
vnode
 *
vn
, c⁄° 
vnode_›s
 *
›s
,

46 
fs
 *fs, *
fsd©a
)

48 
	`KASSERT
(
vn
!=
NULL
);

49 
	`KASSERT
(
›s
!=
NULL
);

51 
vn
->
vn_›s
 = 
›s
;

52 
vn
->
vn_ªfcou¡
 = 1;

53 
vn
->
vn_›ícou¡
 = 0;

54 
vn
->
vn_fs
 = 
fs
;

55 
vn
->
vn_d©a
 = 
fsd©a
;

57 
	}
}

64 
	$vnode_˛ónup
(
vnode
 *
vn
)

66 
	`KASSERT
(
vn
->
vn_ªfcou¡
==1);

67 
	`KASSERT
(
vn
->
vn_›ícou¡
==0);

69 
vn
->
vn_›s
 = 
NULL
;

70 
vn
->
vn_ªfcou¡
 = 0;

71 
vn
->
vn_›ícou¡
 = 0;

72 
vn
->
vn_fs
 = 
NULL
;

73 
vn
->
vn_d©a
 = 
NULL
;

74 
	}
}

82 
	$vnode_ö¸ef
(
vnode
 *
vn
)

84 
	`KASSERT
(
vn
 !
NULL
);

86 
	`vfs_biglock_acquúe
();

88 
vn
->
vn_ªfcou¡
++;

90 
	`vfs_biglock_ªÀa£
();

91 
	}
}

99 
	$vnode_de¸ef
(
vnode
 *
vn
)

101 
ªsu…
;

103 
	`KASSERT
(
vn
 !
NULL
);

105 
	`vfs_biglock_acquúe
();

107 
	`KASSERT
(
vn
->
vn_ªfcou¡
>0);

108 i‡(
vn
->
vn_ªfcou¡
>1) {

109 
vn
->
vn_ªfcou¡
--;

112 
ªsu…
 = 
	`VOP_RECLAIM
(
vn
);

113 i‡(
ªsu…
 !0 &&Ñesu… !
EBUSY
) {

115 
	`k¥ötf
("vfs: Warning: VOP_RECLAIM: %s\n",

116 
	`°ªº‹
(
ªsu…
));

120 
	`vfs_biglock_ªÀa£
();

121 
	}
}

128 
	$vnode_öc›í
(
vnode
 *
vn
)

130 
	`KASSERT
(
vn
 !
NULL
);

132 
	`vfs_biglock_acquúe
();

133 
vn
->
vn_›ícou¡
++;

134 
	`vfs_biglock_ªÀa£
();

135 
	}
}

142 
	$vnode_dec›í
(
vnode
 *
vn
)

144 
ªsu…
;

146 
	`KASSERT
(
vn
 !
NULL
);

148 
	`vfs_biglock_acquúe
();

150 
	`KASSERT
(
vn
->
vn_›ícou¡
>0);

151 
vn
->
vn_›ícou¡
--;

153 i‡(
vn
->
vn_›ícou¡
 > 0) {

154 
	`vfs_biglock_ªÀa£
();

158 
ªsu…
 = 
	`VOP_CLOSE
(
vn
);

159 i‡(
ªsu…
) {

163 
	`k¥ötf
("vfs: W¨nög: VOP_CLOSE: %s\n", 
	`°ªº‹
(
ªsu…
));

166 
	`vfs_biglock_ªÀa£
();

167 
	}
}

174 
	$vnode_check
(
vnode
 *
v
, c⁄° *
›°r
)

176 
	`vfs_biglock_acquúe
();

178 i‡(
v
 =
NULL
) {

179 
	`∑nic
("vnode_check: v›_%s:ÇuŒ vnode\n", 
›°r
);

181 i‡(
v
 == (*)0xdeadbeef) {

182 
	`∑nic
("vnode_check: v›_%s: dódbì‡vnode\n", 
›°r
);

185 i‡(
v
->
vn_›s
 =
NULL
) {

186 
	`∑nic
("vnode_check: v›_%s:ÇuŒ op†poöãr\n", 
›°r
);

188 i‡(
v
->
vn_›s
 == (*)0xdeadbeef) {

189 
	`∑nic
("vnode_check: v›_%s: dódbì‡›†poöãr\n", 
›°r
);

192 i‡(
v
->
vn_›s
->
v›_magic
 !
VOP_MAGIC
) {

193 
	`∑nic
("vnode_check: vop_%s: ops with bad magicÇumber %lx\n",

194 
›°r
, 
v
->
vn_›s
->
v›_magic
);

201 i‡(
v
->
vn_fs
 == (*)0xdeadbeef) {

202 
	`∑nic
("vnode_check: v›_%s: dódbì‡f†poöãr\n", 
›°r
);

205 i‡(
v
->
vn_ªfcou¡
 < 0) {

206 
	`∑nic
("vnode_check: v›_%s:Çeg©ivêªfcou¡ %d\n", 
›°r
,

207 
v
->
vn_ªfcou¡
);

209 i‡(
v
->
vn_ªfcou¡
 =0 && 
	`°rcmp
(
›°r
, "reclaim")) {

210 
	`∑nic
("vnode_check: v›_%s: zîÿªfcou¡\n", 
›°r
);

212 i‡(
v
->
vn_ªfcou¡
 > 0x100000) {

213 
	`k¥ötf
("vnode_check: vop_%s: warning:ÜargeÑefcount %d\n",

214 
›°r
, 
v
->
vn_ªfcou¡
);

217 i‡(
v
->
vn_›ícou¡
 < 0) {

218 
	`∑nic
("vnode_check: v›_%s:Çeg©ivê›ícou¡ %d\n", 
›°r
,

219 
v
->
vn_›ícou¡
);

221 i‡(
v
->
vn_›ícou¡
 > 0x100000) {

222 
	`k¥ötf
("vnode_check: vop_%s: warning:Üarge opencount %d\n",

223 
›°r
, 
v
->
vn_›ícou¡
);

226 
	`vfs_biglock_ªÀa£
();

227 
	}
}

	@test/os161/kern/vm/copyinout.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<£tjmp.h
>

34 
	~<thªad.h
>

35 
	~<cuºít.h
>

36 
	~<vm.h
>

37 
	~<c›yöout.h
>

100 
	$c›yÁû
()

102 
	`l⁄gjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
, 1);

103 
	}
}

118 
	$c›ycheck
(
c⁄°_u£Ωå_t
 
u£Ωå
, 
size_t
 
Àn
, size_à*
°›Àn
)

120 
vaddr_t
 
bŸ
, 
t›
;

122 *
°›Àn
 = 
Àn
;

124 
bŸ
 = (
vaddr_t
Ë
u£Ωå
;

125 
t›
 = 
bŸ
+
Àn
-1;

127 i‡(
t›
 < 
bŸ
) {

129  
EFAULT
;

132 i‡(
bŸ
 >
USERSPACETOP
) {

134  
EFAULT
;

137 i‡(
t›
 >
USERSPACETOP
) {

139 *
°›Àn
 = 
USERSPACETOP
 - 
bŸ
;

143 
	}
}

153 
	$c›yö
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
)

155 
ªsu…
;

156 
size_t
 
°›Àn
;

158 
ªsu…
 = 
	`c›ycheck
(
u£r§c
, 
Àn
, &
°›Àn
);

159 i‡(
ªsu…
) {

160  
ªsu…
;

162 i‡(
°›Àn
 !
Àn
) {

164  
EFAULT
;

167 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

169 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

170 i‡(
ªsu…
) {

171 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

172  
EFAULT
;

175 
	`mem˝y
(
de°
, (c⁄° *)
u£r§c
, 
Àn
);

177 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

179 
	}
}

189 
	$c›yout
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
)

191 
ªsu…
;

192 
size_t
 
°›Àn
;

194 
ªsu…
 = 
	`c›ycheck
(
u£rde°
, 
Àn
, &
°›Àn
);

195 i‡(
ªsu…
) {

196  
ªsu…
;

198 i‡(
°›Àn
 !
Àn
) {

200  
EFAULT
;

203 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

205 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

206 i‡(
ªsu…
) {

207 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

208  
EFAULT
;

211 
	`mem˝y
((*)
u£rde°
, 
§c
, 
Àn
);

213 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

215 
	}
}

235 
	$c›y°r
(*
de°
, c⁄° *
§c
, 
size_t
 
maxÀn
, size_à
°›Àn
,

236 
size_t
 *
gŸÀn
)

238 
size_t
 
i
;

240 
i
=0; i<
maxÀn
 && i<
°›Àn
; i++) {

241 
de°
[
i
] = 
§c
[i];

242 i‡(
§c
[
i
] == 0) {

243 i‡(
gŸÀn
 !
NULL
) {

244 *
gŸÀn
 = 
i
+1;

249 i‡(
°›Àn
 < 
maxÀn
) {

251  
EFAULT
;

254  
ENAMETOOLONG
;

255 
	}
}

266 
	$c›yö°r
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
, size_à*
a˘uÆ
)

268 
ªsu…
;

269 
size_t
 
°›Àn
;

271 
ªsu…
 = 
	`c›ycheck
(
u£r§c
, 
Àn
, &
°›Àn
);

272 i‡(
ªsu…
) {

273  
ªsu…
;

276 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

278 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

279 i‡(
ªsu…
) {

280 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

281  
EFAULT
;

284 
ªsu…
 = 
	`c›y°r
(
de°
, (c⁄° *)
u£r§c
, 
Àn
, 
°›Àn
, 
a˘uÆ
);

286 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

287  
ªsu…
;

288 
	}
}

299 
	$c›yout°r
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
, size_à*
a˘uÆ
)

301 
ªsu…
;

302 
size_t
 
°›Àn
;

304 
ªsu…
 = 
	`c›ycheck
(
u£rde°
, 
Àn
, &
°›Àn
);

305 i‡(
ªsu…
) {

306  
ªsu…
;

309 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

311 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

312 i‡(
ªsu…
) {

313 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

314  
EFAULT
;

317 
ªsu…
 = 
	`c›y°r
((*)
u£rde°
, 
§c
, 
Àn
, 
°›Àn
, 
a˘uÆ
);

319 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

320  
ªsu…
;

321 
	}
}

	@test/os161/kern/vm/kmalloc.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<•ölock.h
>

33 
	~<vm.h
>

42 
	$fûl_dódbìf
(*
v±r
, 
size_t
 
Àn
)

44 
uöt32_t
 *
±r
 = 
v±r
;

45 
size_t
 
i
;

47 
i
=0; i<
Àn
/(
uöt32_t
); i++) {

48 
±r
[
i
] = 0xdeadbeef;

50 
	}
}

79 #unde‡
SLOW


80 #unde‡
SLOWER


84 #i‡
PAGE_SIZE
 == 4096

86 
	#NSIZES
 8

	)

87 c⁄° 
size_t
 
	gsizes
[
NSIZES
] = { 16, 32, 64, 128, 256, 512, 1024, 2048 };

89 
	#SMALLEST_SUBPAGE_SIZE
 16

	)

90 
	#LARGEST_SUBPAGE_SIZE
 2048

	)

92 #ñi‡
PAGE_SIZE
 == 8192

100 
	s‰ìli°
 {

101 
‰ìli°
 *
	m√xt
;

104 
	s∑gîef
 {

105 
∑gîef
 *
	m√xt_ßmesize
;

106 
∑gîef
 *
	m√xt_Æl
;

107 
vaddr_t
 
	m∑góddr_™d_blockty≥
;

108 
uöt16_t
 
	m‰ìli°_off£t
;

109 
uöt16_t
 
	mn‰ì
;

112 
	#INVALID_OFFSET
 (0xffff)

	)

114 
	#PR_PAGEADDR
(
¥
Ë(’r)->
∑góddr_™d_blockty≥
 & 
PAGE_FRAME
)

	)

115 
	#PR_BLOCKTYPE
(
¥
Ë(’r)->
∑góddr_™d_blockty≥
 & ~
PAGE_FRAME
)

	)

116 
	#MKPAB
(
∑
, 
blk
Ë((’a)&
PAGE_FRAME
Ë| ((blkË& ~PAGE_FRAME))

	)

138 
	#NPAGEREFS
 (
PAGE_SIZE
 / (
∑gîef
))

	)

139 
∑gîef
 
	g∑gîefs
[
NPAGEREFS
];

141 
	#INUSE_WORDS
 (
NPAGEREFS
/32)

	)

142 
uöt32_t
 
	g∑gîefs_öu£
[
INUSE_WORDS
];

145 
∑gîef
 *

146 
	$Ælo˝agîef
()

148 
i
,
j
;

149 
uöt32_t
 
k
;

151 
i
=0; i<
INUSE_WORDS
; i++) {

152 i‡(
∑gîefs_öu£
[
i
]==0xffffffff) {

156 
k
=1,
j
=0; k!=0; k<<=1,j++) {

157 i‡((
∑gîefs_öu£
[
i
] & 
k
)==0) {

158 
∑gîefs_öu£
[
i
] |
k
;

159  &
∑gîefs
[
i
*32 + 
j
];

162 
	`KASSERT
(0);

166  
NULL
;

167 
	}
}

171 
	$‰ì∑gîef
(
∑gîef
 *
p
)

173 
size_t
 
i
, 
j
;

174 
uöt32_t
 
k
;

176 
j
 = 
p
-
∑gîefs
;

177 
	`KASSERT
(
j
 < 
NPAGEREFS
);

178 
i
 = 
j
/32;

179 
k
 = ((
uöt32_t
)1Ë<< (
j
%32);

180 
	`KASSERT
((
∑gîefs_öu£
[
i
] & 
k
) != 0);

181 
∑gîefs_öu£
[
i
] &~
k
;

182 
	}
}

186 
∑gîef
 *
	gsizeba£s
[
NSIZES
];

187 
∑gîef
 *
	gÆlba£
;

198 
•ölock
 
	gkmÆloc_•ölock
 = 
SPINLOCK_INITIALIZER
;

203 #ifde‡
SLOWER


204 #i‚de‡
SLOW


205 
	#SLOW


	)

209 #ifde‡
SLOW


212 
	$checksub∑ge
(
∑gîef
 *
¥
)

214 
vaddr_t
 
¥∑ge
, 
Êa
;

215 
‰ìli°
 *
Ê
;

216 
blkty≥
;

217 
n‰ì
=0;

219 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
kmÆloc_•ölock
));

221 i‡(
¥
->
‰ìli°_off£t
 =
INVALID_OFFSET
) {

222 
	`KASSERT
(
¥
->
n‰ì
==0);

226 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

227 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

229 
	`KASSERT
(
¥
->
‰ìli°_off£t
 < 
PAGE_SIZE
);

230 
	`KASSERT
(
¥
->
‰ìli°_off£t
 % 
sizes
[
blkty≥
] == 0);

232 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

233 
Ê
 = (
‰ìli°
 *)
Êa
;

235 ; 
Ê
 !
NULL
; f»Ê->
√xt
) {

236 
Êa
 = (
vaddr_t
)
Ê
;

237 
	`KASSERT
(
Êa
 >
¥∑ge
 && fœ <ÖΩagê+ 
PAGE_SIZE
);

238 
	`KASSERT
((
Êa
-
¥∑ge
Ë% 
sizes
[
blkty≥
] == 0);

239 
	`KASSERT
(
Êa
 >
MIPS_KSEG0
);

240 
	`KASSERT
(
Êa
 < 
MIPS_KSEG1
);

241 
n‰ì
++;

243 
	`KASSERT
(
n‰ì
==
¥
->nfree);

244 
	}
}

246 
	#checksub∑ge
(
¥
Ë(()’r))

	)

249 #ifde‡
SLOWER


252 
	$checksub∑ges
()

254 
∑gîef
 *
¥
;

255 
i
;

256 
sc
=0, 
ac
=0;

258 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
kmÆloc_•ölock
));

260 
i
=0; i<
NSIZES
; i++) {

261 
¥
 = 
sizeba£s
[
i
];Ö∏!
NULL
;Ö∏¥->
√xt_ßmesize
) {

262 
	`checksub∑ge
(
¥
);

263 
	`KASSERT
(
sc
 < 
NPAGEREFS
);

264 
sc
++;

268 
¥
 = 
Ælba£
;Ö∏!
NULL
;Ö∏¥->
√xt_Æl
) {

269 
	`checksub∑ge
(
¥
);

270 
	`KASSERT
(
ac
 < 
NPAGEREFS
);

271 
ac
++;

274 
	`KASSERT
(
sc
==
ac
);

275 
	}
}

277 
	#checksub∑ges
()

	)

284 
	$dumpsub∑ge
(
∑gîef
 *
¥
)

286 
vaddr_t
 
¥∑ge
, 
Êa
;

287 
‰ìli°
 *
Ê
;

288 
blkty≥
;

289 
i
, 
n
, 
ödex
;

290 
uöt32_t
 
‰ìm≠
[
PAGE_SIZE
 / (
SMALLEST_SUBPAGE_SIZE
*32)];

292 
	`checksub∑ge
(
¥
);

293 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
kmÆloc_•ölock
));

296 
i
=0; i<(
‰ìm≠
)/(freemap[0]); i++) {

297 
‰ìm≠
[
i
] = 0;

300 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

301 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

304 
n
 = 
PAGE_SIZE
 / 
sizes
[
blkty≥
];

305 
	`KASSERT
(
n
 <32*(
‰ìm≠
)/(freemap[0]));

307 i‡(
¥
->
‰ìli°_off£t
 !
INVALID_OFFSET
) {

308 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

309 
Ê
 = (
‰ìli°
 *)
Êa
;

311 ; 
Ê
 !
NULL
; f»Ê->
√xt
) {

312 
Êa
 = (
vaddr_t
)
Ê
;

313 
ödex
 = (
Êa
-
¥∑ge
Ë/ 
sizes
[
blkty≥
];

314 
	`KASSERT
(
ödex
<
n
);

315 
‰ìm≠
[
ödex
/32] |= (1<<(index%32));

319 
	`k¥ötf
("at 0x%08lx: size %-4lu %u/%u free\n",

320 ()
¥∑ge
, (Ë
sizes
[
blkty≥
],

321 (Ë
¥
->
n‰ì
, 
n
);

322 
	`k¥ötf
(" ");

323 
i
=0; i<
n
; i++) {

324 
vÆ
 = (
‰ìm≠
[
i
/32] & (1<<(i%32)))!=0;

325 
	`k¥ötf
("%c", 
vÆ
 ? '.' : '*');

326 i‡(
i
%64==63 && i<
n
-1) {

327 
	`k¥ötf
("\n ");

330 
	`k¥ötf
("\n");

331 
	}
}

334 
	$khóp_¥öt°©s
()

336 
∑gîef
 *
¥
;

339 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

341 
	`k¥ötf
("Subpageállocator status:\n");

343 
¥
 = 
Ælba£
;Ö∏!
NULL
;Ö∏¥->
√xt_Æl
) {

344 
	`dumpsub∑ge
(
¥
);

347 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

348 
	}
}

354 
	$ªmove_li°s
(
∑gîef
 *
¥
, 
blkty≥
)

356 
∑gîef
 **
guy
;

358 
	`KASSERT
(
blkty≥
>=0 && blkty≥<
NSIZES
);

360 
guy
 = &
sizeba£s
[
blkty≥
]; *guy; guy = &(*guy)->
√xt_ßmesize
) {

361 
	`checksub∑ge
(*
guy
);

362 i‡(*
guy
 =
¥
) {

363 *
guy
 = 
¥
->
√xt_ßmesize
;

368 
guy
 = &
Ælba£
; *guy; guy = &(*guy)->
√xt_Æl
) {

369 
	`checksub∑ge
(*
guy
);

370 i‡(*
guy
 =
¥
) {

371 *
guy
 = 
¥
->
√xt_Æl
;

375 
	}
}

378 
ölöe


379 
	$blockty≥
(
size_t
 
sz
)

381 
i
;

382 
i
=0; i<
NSIZES
; i++) {

383 i‡(
sz
 <
sizes
[
i
]) {

384  
i
;

388 
	`∑nic
("Subpageállocator cannot handleállocation of size %lu\n",

389 ()
sz
);

393 
	}
}

397 
	$sub∑ge_kmÆloc
(
size_t
 
sz
)

399 
blkty≥
;

400 
∑gîef
 *
¥
;

401 
vaddr_t
 
¥∑ge
;

402 
vaddr_t
 
Êa
;

403 
‰ìli°
 *vﬁ©ûê
Ê
;

404 *
ªçå
;

406 vﬁ©ûê
i
;

409 
blkty≥
 = 
	`blockty≥
(
sz
);

410 
sz
 = 
sizes
[
blkty≥
];

412 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

414 
	`checksub∑ges
();

416 
¥
 = 
sizeba£s
[
blkty≥
];Ö∏!
NULL
;Ö∏¥->
√xt_ßmesize
) {

419 
	`KASSERT
(
	`PR_BLOCKTYPE
(
¥
Ë=
blkty≥
);

420 
	`checksub∑ge
(
¥
);

422 i‡(
¥
->
n‰ì
 > 0) {

424 
dﬂŒoc
:

426 
	`KASSERT
(
¥
->
‰ìli°_off£t
 < 
PAGE_SIZE
);

427 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

428 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

429 
Ê
 = (
‰ìli°
 *)
Êa
;

431 
ªçå
 = 
Ê
;

432 
Ê
 = fl->
√xt
;

433 
¥
->
n‰ì
--;

435 i‡(
Ê
 !
NULL
) {

436 
	`KASSERT
(
¥
->
n‰ì
 > 0);

437 
Êa
 = (
vaddr_t
)
Ê
;

438 
	`KASSERT
(
Êa
 - 
¥∑ge
 < 
PAGE_SIZE
);

439 
¥
->
‰ìli°_off£t
 = 
Êa
 - 
¥∑ge
;

442 
	`KASSERT
(
¥
->
n‰ì
 == 0);

443 
¥
->
‰ìli°_off£t
 = 
INVALID_OFFSET
;

446 
	`checksub∑ges
();

448 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

449  
ªçå
;

462 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

463 
¥∑ge
 = 
	`Æloc_k∑ges
(1);

464 i‡(
¥∑ge
==0) {

466 
	`k¥ötf
("kmalloc: Subpageállocator couldn't getáÖage\n");

467  
NULL
;

469 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

471 
¥
 = 
	`Ælo˝agîef
();

472 i‡(
¥
==
NULL
) {

474 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

475 
	`‰ì_k∑ges
(
¥∑ge
);

476 
	`k¥ötf
("kmalloc: Subpageállocator couldn't getÖageref\n");

477  
NULL
;

480 
¥
->
∑góddr_™d_blockty≥
 = 
	`MKPAB
(
¥∑ge
, 
blkty≥
);

481 
¥
->
n‰ì
 = 
PAGE_SIZE
 / 
sizes
[
blkty≥
];

489 
Êa
 = 
¥∑ge
;

490 
Ê
 = (
‰ìli°
 *)
Êa
;

491 
Ê
->
√xt
 = 
NULL
;

492 
i
=1; i<
¥
->
n‰ì
; i++) {

493 
Ê
 = (
‰ìli°
 *)(
Êa
 + 
i
*
sizes
[
blkty≥
]);

494 
Ê
->
√xt
 = (
‰ìli°
 *)(
Êa
 + (
i
-1)*
sizes
[
blkty≥
]);

495 
	`KASSERT
(
Ê
 !Ê->
√xt
);

497 
Êa
 = (
vaddr_t
Ë
Ê
;

498 
¥
->
‰ìli°_off£t
 = 
Êa
 - 
¥∑ge
;

499 
	`KASSERT
(
¥
->
‰ìli°_off£t
 =’r->
n‰ì
-1)*
sizes
[
blkty≥
]);

501 
¥
->
√xt_ßmesize
 = 
sizeba£s
[
blkty≥
];

502 
sizeba£s
[
blkty≥
] = 
¥
;

504 
¥
->
√xt_Æl
 = 
Ælba£
;

505 
Ælba£
 = 
¥
;

508 
dﬂŒoc
;

509 
	}
}

513 
	$sub∑ge_k‰ì
(*
±r
)

515 
blkty≥
;

516 
vaddr_t
 
±øddr
;

517 
∑gîef
 *
¥
;

518 
vaddr_t
 
¥∑ge
;

519 
vaddr_t
 
Êa
;

520 
‰ìli°
 *
Ê
;

521 
vaddr_t
 
off£t
;

523 
±øddr
 = (
vaddr_t
)
±r
;

525 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

527 
	`checksub∑ges
();

529 
¥
 = 
Ælba£
;Ör;Ö∏¥->
√xt_Æl
) {

530 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

531 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

534 
	`KASSERT
(
blkty≥
>=0 && blkty≥<
NSIZES
);

535 
	`checksub∑ge
(
¥
);

537 i‡(
±øddr
 >
¥∑ge
 &&Öåadd∏<ÖΩagê+ 
PAGE_SIZE
) {

542 i‡(
¥
==
NULL
) {

544 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

548 
off£t
 = 
±øddr
 - 
¥∑ge
;

551 i‡(
off£t
 >
PAGE_SIZE
 || off£à% 
sizes
[
blkty≥
] != 0) {

552 
	`∑nic
("k‰ì: sub∑gê‰ì o‡övÆidádd∏%p\n", 
±r
);

559 
	`fûl_dódbìf
(
±r
, 
sizes
[
blkty≥
]);

566 
Êa
 = 
¥∑ge
 + 
off£t
;

567 
Ê
 = (
‰ìli°
 *)
Êa
;

568 i‡(
¥
->
‰ìli°_off£t
 =
INVALID_OFFSET
) {

569 
Ê
->
√xt
 = 
NULL
;

571 
Ê
->
√xt
 = (
‰ìli°
 *)(
¥∑ge
 + 
¥
->
‰ìli°_off£t
);

573 
¥
->
‰ìli°_off£t
 = 
off£t
;

574 
¥
->
n‰ì
++;

576 
	`KASSERT
(
¥
->
n‰ì
 <
PAGE_SIZE
 / 
sizes
[
blkty≥
]);

577 i‡(
¥
->
n‰ì
 =
PAGE_SIZE
 / 
sizes
[
blkty≥
]) {

579 
	`ªmove_li°s
(
¥
, 
blkty≥
);

580 
	`‰ì∑gîef
(
¥
);

582 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

583 
	`‰ì_k∑ges
(
¥∑ge
);

586 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

589 #ifde‡
SLOWER


590 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

591 
	`checksub∑ges
();

592 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

596 
	}
}

602 
	$kmÆloc
(
size_t
 
sz
)

604 i‡(
sz
>=
LARGEST_SUBPAGE_SIZE
) {

605 
≈ages
;

606 
vaddr_t
 
addªss
;

609 
≈ages
 = (
sz
 + 
PAGE_SIZE
 - 1)/PAGE_SIZE;

610 
addªss
 = 
	`Æloc_k∑ges
(
≈ages
);

611 i‡(
addªss
==0) {

612  
NULL
;

615  (*)
addªss
;

618  
	`sub∑ge_kmÆloc
(
sz
);

619 
	}
}

622 
	$k‰ì
(*
±r
)

627 i‡(
±r
 =
NULL
) {

629 } i‡(
	`sub∑ge_k‰ì
(
±r
)) {

630 
	`KASSERT
((
vaddr_t
)
±r
%
PAGE_SIZE
==0);

631 
	`‰ì_k∑ges
((
vaddr_t
)
±r
);

633 
	}
}

	@test/os161/kern/vm/uw-vmstats.c

13 
	~<ty≥s.h
>

14 
	~<lib.h
>

15 
	~<synch.h
>

16 
	~<•l.h
>

17 
	~<uw-vm°©s.h
>

20 
	g°©s_cou¡s
[
VMSTAT_COUNT
];

22 
•ölock
 
	g°©s_lock
 = 
SPINLOCK_INITIALIZER
;

25 c⁄° *
	g°©s_«mes
[] = {

42 
	$vm°©s_öc
(
ödex
)

44 
	`•ölock_acquúe
(&
°©s_lock
);

45 
	`_vm°©s_öc
(
ödex
);

46 
	`•ölock_ªÀa£
(&
°©s_lock
);

47 
	}
}

51 
	$vm°©s_öô
()

56 
	`•ölock_öô
(&
°©s_lock
);

58 
	`•ölock_acquúe
(&
°©s_lock
);

59 
	`_vm°©s_öô
();

60 
	`•ölock_ªÀa£
(&
°©s_lock
);

61 
	}
}

65 
	$_vm°©s_öc
(
ödex
)

67 
	`KASSERT
(
ödex
 < 
VMSTAT_COUNT
);

68 
°©s_cou¡s
[
ödex
]++;

69 
	}
}

73 
	$_vm°©s_öô
()

75 
i
 = 0;

77 i‡((
°©s_«mes
Ë/ (*Ë!
VMSTAT_COUNT
) {

78 
	`k¥ötf
("vmstats_init:Çumber of stats_names = %d != VMSTAT_COUNT = %d\n",

79 ((
°©s_«mes
Ë/ (*)), 
VMSTAT_COUNT
);

80 
	`∑nic
("ShouldÑeally fixÅhis beforeÖroceeding\n");

83 
i
=0; i<
VMSTAT_COUNT
; i++) {

84 
°©s_cou¡s
[
i
] = 0;

87 
	}
}

97 
	$vm°©s_¥öt
()

99 
i
 = 0;

100 
‰ì_∂us_ª∂a˚
 = 0;

101 
disk_∂us_zî€d_∂us_ªlﬂd
 = 0;

102 
éb_Áu…s
 = 0;

103 
ñf_∂us_sw≠_ªads
 = 0;

104 
disk_ªads
 = 0;

106 
	`k¥ötf
("VMSTATS:\n");

107 
i
=0; i<
VMSTAT_COUNT
; i++) {

108 
	`k¥ötf
("VMSTAT %25†%10d\n", 
°©s_«mes
[
i
], 
°©s_cou¡s
[i]);

111 
éb_Áu…s
 = 
°©s_cou¡s
[
VMSTAT_TLB_FAULT
];

112 
‰ì_∂us_ª∂a˚
 = 
°©s_cou¡s
[
VMSTAT_TLB_FAULT_FREE
] + sèts_cou¡s[
VMSTAT_TLB_FAULT_REPLACE
];

113 
disk_∂us_zî€d_∂us_ªlﬂd
 = 
°©s_cou¡s
[
VMSTAT_PAGE_FAULT_DISK
] +

114 
°©s_cou¡s
[
VMSTAT_PAGE_FAULT_ZERO
] + sèts_cou¡s[
VMSTAT_TLB_RELOAD
];

115 
ñf_∂us_sw≠_ªads
 = 
°©s_cou¡s
[
VMSTAT_ELF_FILE_READ
] + sèts_cou¡s[
VMSTAT_SWAP_FILE_READ
];

116 
disk_ªads
 = 
°©s_cou¡s
[
VMSTAT_PAGE_FAULT_DISK
];

118 
	`k¥ötf
("VMSTAT TLB Fau…†wôh Fªê+ TLB Fau…†wôh Rïœ˚ = %d\n", 
‰ì_∂us_ª∂a˚
);

119 i‡(
éb_Áu…s
 !
‰ì_∂us_ª∂a˚
) {

120 
	`k¥ötf
("WARNING: TLB Faults (%d) != TLB Faults with Free + TLB Faults with Replace (%d)\n",

121 
éb_Áu…s
, 
‰ì_∂us_ª∂a˚
);

124 
	`k¥ötf
("VMSTAT TLB Reloads + Page Faults (Zeroed) + Page Faults (Disk) = %d\n",

125 
disk_∂us_zî€d_∂us_ªlﬂd
);

126 i‡(
éb_Áu…s
 !
disk_∂us_zî€d_∂us_ªlﬂd
) {

127 
	`k¥ötf
("WARNING: TLB Faults (%d) != TLB Reloads + Page Faults (Zeroed) + Page Faults (Disk) (%d)\n",

128 
éb_Áu…s
, 
disk_∂us_zî€d_∂us_ªlﬂd
);

131 
	`k¥ötf
("VMSTAT ELF Fûêªad†+ Sw≠fûêªad†%d\n", 
ñf_∂us_sw≠_ªads
);

132 i‡(
disk_ªads
 !
ñf_∂us_sw≠_ªads
) {

133 
	`k¥ötf
("WARNING: ELF FileÑeads + SwapfileÑeads != Page Faults (Disk) %d\n",

134 
ñf_∂us_sw≠_ªads
);

136 
	}
}

	@test/os161/root/hostinclude/hostcompat.h

31 
	~<sys/ty≥s.h
>

33 
ho°com∑t_öô
(
¨gc
, **
¨gv
);

35 
time_t
 
__time
—ime_à*
£cs
, *
n£cs
);

	@test/os161/root/include/assert.h

30 #i‚de‡
_ASSERT_H_


31 
	#_ASSERT_H_


	)

36 #unde‡
as£π


41 
__bad_as£π
(c⁄° *
fûe
, 
löe
, c⁄° *
msg
);

47 #ifde‡
NDEBUG


50 
	#as£π
(
x
Ë(()(x)Ë

	)

52 
	#as£π
(
x
Ë(()0Ë

	)

56 
	#as£π
(
x
Ë((xË? ()0 : 
	`__bad_as£π
(
__FILE__
, 
__LINE__
, #x))

	)

	@test/os161/root/include/err.h

30 #i‚de‡
_ERR_H_


31 
	#_ERR_H_


	)

33 
	~<kîn/ty≥s.h
>

47 
w¨n
(c⁄° *
fmt
, ...);

48 
w¨nx
(c⁄° *
fmt
, ...);

49 
îr
(
exôcode
, c⁄° *
fmt
, ...);

50 
îrx
(
exôcode
, c⁄° *
fmt
, ...);

52 
vw¨n
(c⁄° *
fmt
, 
__va_li°
);

53 
vw¨nx
(c⁄° *
fmt
, 
__va_li°
);

54 
vîr
(
exôcode
, c⁄° *
fmt
, 
__va_li°
);

55 
vîrx
(
exôcode
, c⁄° *
fmt
, 
__va_li°
);

	@test/os161/root/include/errno.h

30 #i‚de‡
_ERRNO_H_


31 
	#_ERRNO_H_


	)

34 
	~<kîn/î∫o.h
>

37 
î∫o
;

	@test/os161/root/include/fcntl.h

31 
	~<uni°d.h
>

	@test/os161/root/include/kern/endian.h

30 #i‚de‡
_KERN_ENDIAN_H_


31 
	#_KERN_ENDIAN_H_


	)

42 
	#_LITTLE_ENDIAN
 1234

	)

43 
	#_BIG_ENDIAN
 4321

	)

44 
	#_PDP_ENDIAN
 3412

	)

47 
	~<kîn/machöe/ídün.h
>

	@test/os161/root/include/kern/errmsg.h

30 #i‚de‡
_KERN_ERRMSG_H_


31 
	#_KERN_ERRMSG_H_


	)

41 c⁄° *c⁄° 
	gsys_îæi°
[] = {

112 c⁄° 
	gsys_√º
 = (
sys_îæi°
)/(const *);

	@test/os161/root/include/kern/errno.h

30 #i‚de‡
_KERN_ERRNO_H_


31 
	#_KERN_ERRNO_H_


	)

45 
	#ENOSYS
 1

	)

46 
	#EUNIMP
 2

	)

47 
	#ENOMEM
 3

	)

48 
	#EAGAIN
 4

	)

49 
	#EINTR
 5

	)

50 
	#EFAULT
 6

	)

51 
	#ENAMETOOLONG
 7

	)

52 
	#EINVAL
 8

	)

53 
	#EPERM
 9

	)

54 
	#EACCES
 10

	)

55 
	#EMPROC
 11

	)

56 
	#ENPROC
 12

	)

57 
	#ENOEXEC
 13

	)

58 
	#E2BIG
 14

	)

59 
	#ESRCH
 15

	)

60 
	#ECHILD
 16

	)

61 
	#ENOTDIR
 17

	)

62 
	#EISDIR
 18

	)

63 
	#ENOENT
 19

	)

64 
	#ELOOP
 20

	)

65 
	#ENOTEMPTY
 21

	)

66 
	#EEXIST
 22

	)

67 
	#EMLINK
 23

	)

68 
	#EXDEV
 24

	)

69 
	#ENODEV
 25

	)

70 
	#ENXIO
 26

	)

71 
	#EBUSY
 27

	)

72 
	#EMFILE
 28

	)

73 
	#ENFILE
 29

	)

74 
	#EBADF
 30

	)

75 
	#EIOCTL
 31

	)

76 
	#EIO
 32

	)

77 
	#ESPIPE
 33

	)

78 
	#EPIPE
 34

	)

79 
	#EROFS
 35

	)

80 
	#ENOSPC
 36

	)

81 
	#EDQUOT
 37

	)

82 
	#EFBIG
 38

	)

83 
	#EFTYPE
 39

	)

84 
	#EDOM
 40

	)

85 
	#ERANGE
 41

	)

86 
	#EILSEQ
 42

	)

87 
	#ENOTSOCK
 43

	)

88 
	#EISSOCK
 44

	)

89 
	#EISCONN
 45

	)

90 
	#ENOTCONN
 46

	)

91 
	#ESHUTDOWN
 47

	)

92 
	#EPFNOSUPPORT
 48

	)

93 
	#ESOCKTNOSUPPORT
 49

	)

94 
	#EPROTONOSUPPORT
 50

	)

95 
	#EPROTOTYPE
 51

	)

96 
	#EAFNOSUPPORT
 52

	)

97 
	#ENOPROTOOPT
 53

	)

98 
	#EADDRINUSE
 54

	)

99 
	#EADDRNOTAVAIL
 55

	)

100 
	#ENETDOWN
 56

	)

101 
	#ENETUNREACH
 57

	)

102 
	#EHOSTDOWN
 58

	)

103 
	#EHOSTUNREACH
 59

	)

104 
	#ECONNREFUSED
 60

	)

105 
	#ETIMEDOUT
 61

	)

106 
	#ECONNRESET
 62

	)

107 
	#EMSGSIZE
 63

	)

108 
	#ENOTSUP
 64

	)

	@test/os161/root/include/kern/fcntl.h

30 #i‚de‡
_KERN_FCNTL_H_


31 
	#_KERN_FCNTL_H_


	)

43 
	#O_RDONLY
 0

	)

44 
	#O_WRONLY
 1

	)

45 
	#O_RDWR
 2

	)

47 
	#O_CREAT
 4

	)

48 
	#O_EXCL
 8

	)

49 
	#O_TRUNC
 16

	)

50 
	#O_APPEND
 32

	)

51 
	#O_NOCTTY
 64

	)

54 
	#O_ACCMODE
 3

	)

61 
	#LOCK_SH
 1

	)

62 
	#LOCK_EX
 2

	)

63 
	#LOCK_UN
 3

	)

64 
	#LOCK_NB
 4

	)

71 
	#F_DUPFD
 0

	)

72 
	#F_GETFD
 1

	)

73 
	#F_SETFD
 2

	)

74 
	#F_GETFL
 3

	)

75 
	#F_SETFL
 4

	)

76 
	#F_GETOWN
 5

	)

77 
	#F_SETOWN
 6

	)

78 
	#F_GETLK
 7

	)

79 
	#F_SETLK
 8

	)

80 
	#F_SETLKW
 9

	)

83 
	#FD_CLOEXEC
 1

	)

86 
	#F_RDLCK
 0

	)

87 
	#F_WRLCK
 1

	)

88 
	#F_UNLCK
 2

	)

91 
	sÊock
 {

92 
off_t
 
	ml_°¨t
;

93 
	ml_whí˚
;

94 
	ml_ty≥
;

95 
off_t
 
	ml_Àn
;

96 
pid_t
 
	ml_pid
;

	@test/os161/root/include/kern/ioctl.h

30 #i‚de‡
_KERN_IOCTL_H_


31 
	#_KERN_IOCTL_H_


	)

	@test/os161/root/include/kern/iovec.h

30 #i‚de‡
_KERN_IOVEC_H_


31 
	#_KERN_IOVEC_H_


	)

38 
	siovec
 {

57 #ifde‡
_KERNEL


59 
u£Ωå_t
 
	miov_uba£
;

60 *
	miov_kba£
;

63 *
	miov_ba£
;

65 
size_t
 
	miov_Àn
;

	@test/os161/root/include/kern/limits.h

30 #i‚de‡
_KERN_LIMITS_H_


31 
	#_KERN_LIMITS_H_


	)

52 
	#__NAME_MAX
 255

	)

55 
	#__PATH_MAX
 1024

	)

58 
	#__ARG_MAX
 (64 * 1024)

	)

66 
	#__PID_MIN
 2

	)

69 
	#__PID_MAX
 32767

	)

72 
	#__PIPE_BUF
 512

	)

80 
	#__NGROUPS_MAX
 32

	)

83 
	#__LOGIN_NAME_MAX
 17

	)

94 
	#__OPEN_MAX
 128

	)

97 
	#__IOV_MAX
 1024

	)

	@test/os161/root/include/kern/mips/endian.h

30 #i‚de‡
_KERN_MIPS_ENDIAN_H_


31 
	#_KERN_MIPS_ENDIAN_H_


	)

42 
	#_BYTE_ORDER
 
_BIG_ENDIAN


	)

	@test/os161/root/include/kern/mips/regdefs.h

36 #i‚de‡
_KERN_MIPS_REGDEFS_H_


37 
	#_KERN_MIPS_REGDEFS_H_


	)

40 
	#z0
 
$0


	)

41 
	#AT
 
$1


	)

42 
	#v0
 
$2


	)

43 
	#v1
 
$3


	)

44 
	#a0
 
$4


	)

45 
	#a1
 
$5


	)

46 
	#a2
 
$6


	)

47 
	#a3
 
$7


	)

48 
	#t0
 
$8


	)

49 
	#t1
 
$9


	)

50 
	#t2
 
$10


	)

51 
	#t3
 
$11


	)

52 
	#t4
 
$12


	)

53 
	#t5
 
$13


	)

54 
	#t6
 
$14


	)

55 
	#t7
 
$15


	)

56 
	#s0
 
$16


	)

57 
	#s1
 
$17


	)

58 
	#s2
 
$18


	)

59 
	#s3
 
$19


	)

60 
	#s4
 
$20


	)

61 
	#s5
 
$21


	)

62 
	#s6
 
$22


	)

63 
	#s7
 
$23


	)

64 
	#t8
 
$24


	)

65 
	#t9
 
$25


	)

66 
	#k0
 
$26


	)

67 
	#k1
 
$27


	)

68 
	#gp
 
$28


	)

69 
	#•
 
$29


	)

70 
	#s8
 
$30


	)

71 
	#ø
 
$31


	)

	@test/os161/root/include/kern/mips/setjmp.h

30 #i‚de‡
_MIPS_SETJMP_H_


31 
	#_MIPS_SETJMP_H_


	)

41 
	#__JB_REGS
 11

	)

44 
uöt32_t
 
	tjmp_buf
[
__JB_REGS
];

	@test/os161/root/include/kern/mips/signal.h

31 #i‚de‡
_KERN_MIPS_SIGNAL_H_


32 
	#_KERN_MIPS_SIGNAL_H_


	)

41 
	ssigc⁄ãxt
 {

	@test/os161/root/include/kern/mips/types.h

30 #i‚de‡
_KERN_MIPS_TYPES_H_


31 
	#_KERN_MIPS_TYPES_H_


	)

43 
	t__i8
;

44 
	t__i16
;

45 
	t__i32
;

46 
	t__i64
;

48 
	t__u8
;

49 
	t__u16
;

50 
	t__u32
;

51 
	t__u64
;

54 
	t__öçå_t
;

55 
	t__uöçå_t
;

65 
	t__size_t
;

66 
	t__ssize_t
;

67 
	t__±rdiff_t
;

69 
	t__size_t
;

70 
	t__ssize_t
;

71 
	t__±rdiff_t
;

75 
	#__CHAR_BIT
 8

	)

	@test/os161/root/include/kern/reboot.h

30 #i‚de‡
_KERN_REBOOT_H_


31 
	#_KERN_REBOOT_H_


	)

40 
	#RB_REBOOT
 0

	)

41 
	#RB_HALT
 1

	)

42 
	#RB_POWEROFF
 2

	)

	@test/os161/root/include/kern/resource.h

30 #i‚de‡
_KERN_RESOURCE_H_


31 
	#_KERN_RESOURCE_H_


	)

41 
	#PRIO_MIN
 (-20)

	)

42 
	#PRIO_MAX
 20

	)

45 
	#PRIO_PROCESS
 0

	)

46 
	#PRIO_PGRP
 1

	)

47 
	#PRIO_USER
 2

	)

50 
	#RUSAGE_SELF
 0

	)

51 
	#RUSAGE_CHILDREN
 (-1)

	)

53 
	srußge
 {

54 
timevÆ
 
	mru_utime
;

55 
timevÆ
 
	mru_°ime
;

56 
__size_t
 
	mru_maxrss
;

57 
__cou¡î_t
 
	mru_ixrss
;

58 
__cou¡î_t
 
	mru_idrss
;

59 
__cou¡î_t
 
	mru_i§ss
;

60 
__cou¡î_t
 
	mru_möÊt
;

61 
__cou¡î_t
 
	mru_majÊt
;

62 
__cou¡î_t
 
	mru_nsw≠
;

63 
__cou¡î_t
 
	mru_öblock
;

64 
__cou¡î_t
 
	mru_oublock
;

65 
__cou¡î_t
 
	mru_msgrcv
;

66 
__cou¡î_t
 
	mru_msg¢d
;

67 
__cou¡î_t
 
	mru_nsig«ls
;

68 
__cou¡î_t
 
	mru_nvcsw
;

69 
__cou¡î_t
 
	mru_nivcsw
;

74 
	#RLIMIT_NPROC
 0

	)

75 
	#RLIMIT_NOFILE
 1

	)

76 
	#RLIMIT_CPU
 2

	)

77 
	#RLIMIT_DATA
 3

	)

78 
	#RLIMIT_STACK
 4

	)

79 
	#RLIMIT_MEMLOCK
 5

	)

80 
	#RLIMIT_RSS
 6

	)

81 
	#RLIMIT_CORE
 7

	)

82 
	#RLIMIT_FSIZE
 8

	)

83 
	#__RLIMIT_NUM
 9

	)

85 
	sæimô
 {

86 
__æim_t
 
	mæim_cur
;

87 
__æim_t
 
	mæim_max
;

90 
	#RLIM_INFINITY
 (~(
__æim_t
)0)

	)

	@test/os161/root/include/kern/seek.h

30 #i‚de‡
_KERN_SEEK_H_


31 
	#_KERN_SEEK_H_


	)

42 
	#SEEK_SET
 0

	)

43 
	#SEEK_CUR
 1

	)

44 
	#SEEK_END
 2

	)

	@test/os161/root/include/kern/sfs.h

30 #i‚de‡
_KERN_SFS_H_


31 
	#_KERN_SFS_H_


	)

39 
	#SFS_MAGIC
 0xabadf001

	)

40 
	#SFS_BLOCKSIZE
 512

	)

41 
	#SFS_VOLNAME_SIZE
 32

	)

42 
	#SFS_NDIRECT
 15

	)

43 
	#SFS_DBPERIDB
 128

	)

44 
	#SFS_NAMELEN
 60

	)

45 
	#SFS_SB_LOCATION
 0

	)

46 
	#SFS_ROOT_LOCATION
 1

	)

47 
	#SFS_MAP_LOCATION
 2

	)

48 
	#SFS_NOINO
 0

	)

51 
	#SFS_BLOCKBITS
 (
SFS_BLOCKSIZE
 * 
CHAR_BIT
)

	)

54 
	#SFS_ROUNDUP
(
a
,
b
Ë(((◊)+(b)-1)/(b))*b)

	)

57 
	#SFS_BITMAPSIZE
(
nblocks
Ë
	`SFS_ROUNDUP
“blocks, 
SFS_BLOCKBITS
)

	)

60 
	#SFS_BITBLOCKS
(
nblocks
Ë(
	`SFS_BITMAPSIZE
“blocks)/
SFS_BLOCKBITS
)

	)

63 
	#SFS_TYPE_INVAL
 0

	)

64 
	#SFS_TYPE_FILE
 1

	)

65 
	#SFS_TYPE_DIR
 2

	)

70 
	ssfs_su≥r
 {

71 
uöt32_t
 
	m•_magic
;

72 
uöt32_t
 
	m•_nblocks
;

73 
	m•_vﬁ«me
[
SFS_VOLNAME_SIZE
];

74 
uöt32_t
 
	mª£rved
[118];

80 
	ssfs_öode
 {

81 
uöt32_t
 
	msfi_size
;

82 
uöt16_t
 
	msfi_ty≥
;

83 
uöt16_t
 
	msfi_lökcou¡
;

84 
uöt32_t
 
	msfi_dúe˘
[
SFS_NDIRECT
];

85 
uöt32_t
 
	msfi_ödúe˘
;

86 
uöt32_t
 
	msfi_wa°e
[128-3-
SFS_NDIRECT
];

92 
	ssfs_dú
 {

93 
uöt32_t
 
	msfd_öo
;

94 
	msfd_«me
[
SFS_NAMELEN
];

	@test/os161/root/include/kern/signal.h

37 #i‚de‡
_KERN_SIGNAL_H_


38 
	#_KERN_SIGNAL_H_


	)

56 
	#SIGHUP
 1

	)

57 
	#SIGINT
 2

	)

58 
	#SIGQUIT
 3

	)

59 
	#SIGILL
 4

	)

60 
	#SIGTRAP
 5

	)

61 
	#SIGABRT
 6

	)

62 
	#SIGEMT
 7

	)

63 
	#SIGFPE
 8

	)

64 
	#SIGKILL
 9

	)

65 
	#SIGBUS
 10

	)

66 
	#SIGSEGV
 11

	)

67 
	#SIGSYS
 12

	)

68 
	#SIGPIPE
 13

	)

69 
	#SIGALRM
 14

	)

70 
	#SIGTERM
 15

	)

71 
	#SIGURG
 16

	)

72 
	#SIGSTOP
 17

	)

73 
	#SIGTSTP
 18

	)

74 
	#SIGCONT
 19

	)

75 
	#SIGCHLD
 20

	)

76 
	#SIGTTIN
 21

	)

77 
	#SIGTTOU
 22

	)

78 
	#SIGIO
 23

	)

79 
	#SIGXCPU
 24

	)

80 
	#SIGXFSZ
 25

	)

81 
	#SIGVTALRM
 26

	)

82 
	#SIGPROF
 27

	)

83 
	#SIGWINCH
 28

	)

84 
	#SIGINFO
 29

	)

85 
	#SIGUSR1
 20

	)

86 
	#SIGUSR2
 31

	)

87 
	#SIGPWR
 32

	)

88 
	#_NSIG
 32

	)

92 
__u32
 
	tsig£t_t
;

95 
	#SA_ONSTACK
 1

	)

96 
	#SA_RESTART
 2

	)

97 
	#SA_RESETHAND
 4

	)

100 
	#SIG_BLOCK
 1

	)

101 
	#SIG_UNBLOCK
 2

	)

102 
	#SIG_SETMASK
 3

	)

105 (*
	t__sigfunc
)();

108 
	#SIG_DFL
 ((
__sigfunc
Ë0Ë

	)

109 
	#SIG_IGN
 ((
__sigfunc
Ë1Ë

	)

114 
	ssiga˘i⁄
 {

115 
__sigfunc
 
ß_h™dÀr
;

116 
sig£t_t
 
ß_mask
;

117 
ß_Êags
;

124 
	ssigÆt°ack
 {

125 *
ss_•
;

126 
size_t
 
ss_size
;

127 
ss_Êags
;

	@test/os161/root/include/kern/socket.h

30 #i‚de‡
_KERN_SOCKET_H_


31 
	#_KERN_SOCKET_H_


	)

43 
	#SOCK_STREAM
 1

	)

44 
	#SOCK_DGRAM
 2

	)

45 
	#SOCK_RAW
 3

	)

48 
	#AF_UNSPEC
 0

	)

49 
	#AF_UNIX
 1

	)

50 
	#AF_INET
 2

	)

51 
	#AF_INET6
 3

	)

54 
	#PF_UNSPEC
 
AF_UNSPEC


	)

55 
	#PF_UNIX
 
AF_UNIX


	)

56 
	#PF_INET
 
AF_INET


	)

57 
	#PF_INET6
 
AF_INET6


	)

73 
	ssockaddr
 {

74 
__u8
 
	mß_Àn
;

75 
__u8
 
	mß_Ámûy
;

78 
	#_SS_SIZE
 128

	)

79 
	ssockaddr_°‹age
 {

80 
__u8
 
	mss_Àn
;

81 
__u8
 
	mss_Ámûy
;

82 
__u8
 
	m__ss_∑d1
;

83 
__u8
 
	m__ss_∑d2
;

84 
__u32
 
	m__ss_∑d3
;

85 
__u64
 
	m__ss_∑d4
;

86 
	m__ss_∑d5
[
_SS_SIZE
 - (
__u64
Ë- (
__u32
Ë- 4*(
__u8
)];

98 
	smsghdr
 {

99 *
	mmsg_«me
;

100 
sockÀn_t
 
	mmsg_«mñí
;

101 
iovec
 *
	mmsg_iov
;

102 
	mmsg_iovÀn
;

103 *
	mmsg_c⁄åﬁ
;

104 
sockÀn_t
 
	mmsg_c⁄åﬁÀn
;

105 
	mmsg_Êags
;

108 
	scmsghdr
 {

109 
sockÀn_t
 
	mcmsg_Àn
;

110 
	mcmsg_Àvñ
;

111 
	mcmsg_ty≥
;

	@test/os161/root/include/kern/stat.h

30 #i‚de‡
_KERN_STAT_H_


31 
	#_KERN_STAT_H_


	)

42 
	s°©
 {

44 
off_t
 
	m°_size
;

45 
mode_t
 
	m°_mode
;

46 
∆ök_t
 
	m°_∆ök
;

47 
blk˙t_t
 
	m°_blocks
;

50 
dev_t
 
	m°_dev
;

51 
öo_t
 
	m°_öo
;

52 
dev_t
 
	m°_rdev
;

55 
time_t
 
	m°_©ime
;

56 
time_t
 
	m°_˘ime
;

57 
time_t
 
	m°_mtime
;

58 
__u32
 
	m°_©imí£c
;

59 
__u32
 
	m°_˘imí£c
;

60 
__u32
 
	m°_mtimí£c
;

63 
uid_t
 
	m°_uid
;

64 
gid_t
 
	m°_gid
;

67 
__u32
 
	m°_gí
;

68 
blksize_t
 
	m°_blksize
;

	@test/os161/root/include/kern/stattypes.h

30 #i‚de‡
_KERN_STATTYPES_H_


31 
	#_KERN_STATTYPES_H_


	)

45 
	#_S_IFMT
 070000

	)

46 
	#_S_IFREG
 010000

	)

47 
	#_S_IFDIR
 020000

	)

48 
	#_S_IFLNK
 030000

	)

49 
	#_S_IFIFO
 040000

	)

50 
	#_S_IFSOCK
 050000

	)

51 
	#_S_IFCHR
 060000

	)

52 
	#_S_IFBLK
 070000

	)

	@test/os161/root/include/kern/syscall.h

30 #i‚de‡
_KERN_SYSCALL_H_


31 
	#_KERN_SYSCALL_H_


	)

50 
	#SYS_f‹k
 0

	)

51 
	#SYS_vf‹k
 1

	)

52 
	#SYS_execv
 2

	)

53 
	#SYS__exô
 3

	)

54 
	#SYS_waôpid
 4

	)

55 
	#SYS_gëpid
 5

	)

56 
	#SYS_gëµid
 6

	)

58 
	#SYS_sbrk
 7

	)

59 
	#SYS_mm≠
 8

	)

60 
	#SYS_munm≠
 9

	)

61 
	#SYS_m¥Ÿe˘
 10

	)

69 
	#SYS_umask
 17

	)

70 
	#SYS_is£tugid
 18

	)

71 
	#SYS_gëªsuid
 19

	)

72 
	#SYS_£åesuid
 20

	)

73 
	#SYS_gëªsgid
 21

	)

74 
	#SYS_£åesgid
 22

	)

75 
	#SYS_gëgroups
 23

	)

76 
	#SYS_£tgroups
 24

	)

77 
	#SYS___gëlogö
 25

	)

78 
	#SYS___£éogö
 26

	)

80 
	#SYS_kûl
 27

	)

81 
	#SYS_siga˘i⁄
 28

	)

82 
	#SYS_sig≥ndög
 29

	)

83 
	#SYS_sig¥ocmask
 30

	)

84 
	#SYS_sigsu•íd
 31

	)

85 
	#SYS_sigªtu∫
 32

	)

105 
	#SYS_›í
 45

	)

106 
	#SYS_pùe
 46

	)

107 
	#SYS_dup
 47

	)

108 
	#SYS_dup2
 48

	)

109 
	#SYS_˛o£
 49

	)

110 
	#SYS_ªad
 50

	)

111 
	#SYS_¥ód
 51

	)

114 
	#SYS_gëdúíåy
 54

	)

115 
	#SYS_wrôe
 55

	)

116 
	#SYS_pwrôe
 56

	)

119 
	#SYS_l£ek
 59

	)

120 
	#SYS_Êock
 60

	)

121 
	#SYS_·runˇã
 61

	)

122 
	#SYS_fsync
 62

	)

123 
	#SYS_f˙é
 63

	)

124 
	#SYS_io˘l
 64

	)

125 
	#SYS_£À˘
 65

	)

126 
	#SYS_pﬁl
 66

	)

129 
	#SYS_lök
 67

	)

130 
	#SYS_ªmove
 68

	)

131 
	#SYS_mkdú
 69

	)

132 
	#SYS_rmdú
 70

	)

133 
	#SYS_mkfifo
 71

	)

134 
	#SYS_ª«me
 72

	)

135 
	#SYS_ac˚ss
 73

	)

137 
	#SYS_chdú
 74

	)

138 
	#SYS_fchdú
 75

	)

139 
	#SYS___gëcwd
 76

	)

141 
	#SYS_symlök
 77

	)

142 
	#SYS_ªadlök
 78

	)

144 
	#SYS_mou¡
 79

	)

145 
	#SYS_unmou¡
 80

	)

149 
	#SYS_°©
 81

	)

150 
	#SYS_f°©
 82

	)

151 
	#SYS_l°©
 83

	)

153 
	#SYS_utimes
 84

	)

154 
	#SYS_futimes
 85

	)

155 
	#SYS_lutimes
 86

	)

157 
	#SYS_chmod
 87

	)

158 
	#SYS_chown
 88

	)

159 
	#SYS_fchmod
 89

	)

160 
	#SYS_fchown
 90

	)

161 
	#SYS_lchmod
 91

	)

162 
	#SYS_lchown
 92

	)

172 
	#SYS_sockë
 98

	)

173 
	#SYS_böd
 99

	)

174 
	#SYS_c⁄√˘
 100

	)

175 
	#SYS_li°í
 101

	)

176 
	#SYS_ac˚±
 102

	)

178 
	#SYS_shutdown
 104

	)

179 
	#SYS_gësock«me
 105

	)

180 
	#SYS_gë≥î«me
 106

	)

181 
	#SYS_gësock›t
 107

	)

182 
	#SYS_£tsock›t
 108

	)

189 
	#SYS___time
 113

	)

190 
	#SYS___£âime
 114

	)

191 
	#SYS_«no¶ìp
 115

	)

196 
	#SYS_sync
 118

	)

197 
	#SYS_ªboŸ
 119

	)

	@test/os161/root/include/kern/time.h

30 #i‚de‡
_KERN_TIME_H_


31 
	#_KERN_TIME_H_


	)

43 
	stimevÆ
 {

44 
__time_t
 
	mtv_£c
;

45 
__i32
 
	mtv_u£c
;

48 
	stime•ec
 {

49 
__time_t
 
	mtv_£c
;

50 
__i32
 
	mtv_n£c
;

59 
	#ITIMER_REAL
 0

	)

60 
	#ITIMER_VIRTUAL
 1

	)

61 
	#ITIMER_PROF
 2

	)

64 
	sôimîvÆ
 {

65 
timevÆ
 
	mô_öãrvÆ
;

66 
timevÆ
 
	mô_vÆue
;

	@test/os161/root/include/kern/types.h

30 #i‚de‡
_KERN_TYPES_H_


31 
	#_KERN_TYPES_H_


	)

34 
	~<kîn/machöe/ty≥s.h
>

64 
__u32
 
	t__blk˙t_t
;

65 
__u32
 
	t__blksize_t
;

66 
__u64
 
	t__cou¡î_t
;

67 
__u32
 
	t__daddr_t
;

68 
__u32
 
	t__dev_t
;

69 
__u32
 
	t__fsid_t
;

70 
__i32
 
	t__gid_t
;

71 
__u32
 
	t__ö_addr_t
;

72 
__u32
 
	t__ö_p‹t_t
;

73 
__u32
 
	t__öo_t
;

74 
__u32
 
	t__mode_t
;

75 
__u16
 
	t__∆ök_t
;

76 
__i64
 
	t__off_t
;

77 
__i32
 
	t__pid_t
;

78 
__u64
 
	t__æim_t
;

79 
__u8
 
	t__ß_Ámûy_t
;

80 
__i64
 
	t__time_t
;

81 
__i32
 
	t__uid_t
;

83 
	t__nfds_t
;

84 
	t__sockÀn_t
;

87 #ifde‡
__GNUC__


88 
__buûtö_va_li°
 
	t__va_li°
;

	@test/os161/root/include/kern/unistd.h

30 #i‚de‡
_KERN_UNISTD_H_


31 
	#_KERN_UNISTD_H_


	)

34 
	#STDIN_FILENO
 0

	)

35 
	#STDOUT_FILENO
 1

	)

36 
	#STDERR_FILENO
 2

	)

	@test/os161/root/include/kern/wait.h

30 #i‚de‡
_KERN_WAIT_H_


31 
	#_KERN_WAIT_H_


	)

39 
	#WNOHANG
 1

	)

40 
	#WUNTRACED
 2

	)

43 
	#WAIT_ANY
 (-1Ë

	)

44 
	#WAIT_MYPGRP
 0

	)

54 
	#_WWHAT
(
x
Ë((x)&3Ë

	)

55 
	#_WVAL
(
x
Ë((x)>>2Ë

	)

56 
	#_MKWVAL
(
x
Ë((x)<<2Ë

	)

59 
	#__WEXITED
 0

	)

60 
	#__WSIGNALED
 1

	)

61 
	#__WCORED
 2

	)

62 
	#__WSTOPPED
 3

	)

65 
	#WIFEXITED
(
x
Ë(
	`_WWHAT
(x)==
__WEXITED
)

	)

66 
	#WIFSIGNALED
(
x
Ë(
	`_WWHAT
(x)==
__WSIGNALED
 || _WWHAT(x)==
__WCORED
)

	)

67 
	#WIFSTOPPED
(
x
Ë(
	`_WWHAT
(x)==
__WSTOPPED
)

	)

68 
	#WEXITSTATUS
(
x
Ë(
	`_WVAL
(x))

	)

69 
	#WTERMSIG
(
x
Ë(
	`_WVAL
(x))

	)

70 
	#WSTOPSIG
(
x
Ë(
	`_WVAL
(x))

	)

71 
	#WCOREDUMP
(
x
Ë(
	`_WWHAT
(x)==
__WCORED
)

	)

74 
	#_MKWAIT_EXIT
(
x
Ë(
	`_MKWVAL
(x)|
__WEXITED
)

	)

75 
	#_MKWAIT_SIG
(
x
Ë(
	`_MKWVAL
(x)|
__WSIGNALED
)

	)

76 
	#_MKWAIT_CORE
(
x
Ë(
	`_MKWVAL
(x)|
__WCORED
)

	)

77 
	#_MKWAIT_STOP
(
x
Ë(
	`_MKWVAL
(x)|
__WSTOPPED
)

	)

	@test/os161/root/include/limits.h

30 #i‚de‡
_LIMITS_H_


31 
	#_LIMITS_H_


	)

38 
	~<kîn/limôs.h
>

41 
	#NAME_MAX
 
__NAME_MAX


	)

42 
	#PATH_MAX
 
__PATH_MAX


	)

43 
	#ARG_MAX
 
__ARG_MAX


	)

44 
	#PID_MIN
 
__PID_MIN


	)

45 
	#PID_MAX
 
__PID_MAX


	)

46 
	#PIPE_BUF
 
__PIPE_BUF


	)

47 
	#NGROUPS_MAX
 
__NGROUPS_MAX


	)

48 
	#LOGIN_NAME_MAX
 
__LOGIN_NAME_MAX


	)

49 
	#OPEN_MAX
 
__OPEN_MAX


	)

50 
	#IOV_MAX
 
__IOV_MAX


	)

	@test/os161/root/include/setjmp.h

30 #i‚de‡
_SETJMP_H_


31 
	#_SETJMP_H_


	)

34 
	~<machöe/£tjmp.h
>

49 
£tjmp
(
jmp_buf
 
jb
);

50 
l⁄gjmp
(
jmp_buf
 
jb
, 
code
);

	@test/os161/root/include/signal.h

30 
	~<kîn/sig«l.h
>

	@test/os161/root/include/stdarg.h

30 #i‚de‡
_STDARG_H_


31 
	#_STDARG_H_


	)

33 
	~<kîn/ty≥s.h
>

41 
__va_li°
 
	tva_li°
;

43 
	#va_°¨t
(
≠
,
fmt
Ë
	`__buûtö_°d¨g_°¨t
◊p,fmt)

	)

44 
	#va_¨g
(
≠
,
t
Ë
	`__buûtö_va_¨g
◊p,t)

	)

45 
	#va_c›y
(
≠1
,
≠2
Ë
	`__buûtö_va_c›y
◊p1,≠2)

	)

46 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

	@test/os161/root/include/stdint.h

30 #i‚de‡
_STDINT_H_


31 
	#_STDINT_H_


	)

37 
	~<kîn/ty≥s.h
>

39 
__i8
 
	töt8_t
;

40 
__i16
 
	töt16_t
;

41 
__i32
 
	töt32_t
;

42 
__i64
 
	töt64_t
;

43 
__u8
 
	tuöt8_t
;

44 
__u16
 
	tuöt16_t
;

45 
__u32
 
	tuöt32_t
;

46 
__u64
 
	tuöt64_t
;

48 
__öçå_t
 
	töçå_t
;

49 
__uöçå_t
 
	tuöçå_t
;

	@test/os161/root/include/stdio.h

30 #i‚de‡
_STDIO_H_


31 
	#_STDIO_H_


	)

37 
	~<kîn/ty≥s.h
>

38 
	~<ty≥s/size_t.h
>

39 
	~<sys/nuŒ.h
>

42 
	#EOF
 (-1)

	)

48 
__v¥ötf
((*
£ndfunc
)(*
˛õ¡d©a
, c⁄° *, 
size_t
 
Àn
),

49 *
˛õ¡d©a
,

50 c⁄° *
fmt
,

51 
__va_li°
 
≠
);

54 
	`¥ötf
(c⁄° *
fmt
, ...);

55 
	`v¥ötf
(c⁄° *
fmt
, 
__va_li°
 
≠
);

56 
	`¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, ...);

57 
	`v¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, 
__va_li°
 
≠
);

60 
	`puts
(const *);

64 
	`__puts
(const *);

67 
	`putch¨
();

70 
	`gëch¨
();

	@test/os161/root/include/stdlib.h

30 #i‚de‡
_STDLIB_H_


31 
	#_STDLIB_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
	~<ty≥s/size_t.h
>

35 
	~<sys/nuŒ.h
>

40 
©oi
(const *);

45 
ab‹t
();

51 
exô
(
code
);

56 
sy°em
(c⁄° *
comm™d
);

61 
	#RAND_MAX
 0x7fffffff

	)

62 
øndom
();

63 
§™dom
(
£ed
);

64 *
öô°©e
(, *, 
size_t
);

65 *
£t°©e
(*);

70 *
mÆloc
(
size_t
 
size
);

71 
‰ì
(*
±r
);

	@test/os161/root/include/string.h

30 #i‚de‡
_STRING_H_


31 
	#_STRING_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
	~<ty≥s/size_t.h
>

35 
	~<sys/nuŒ.h
>

40 *
°rˇt
(*, const *);

41 *
°r˝y
(*, const *);

42 *
°rchr
(const *, );

43 *
°ºchr
(const *, );

44 
°rcmp
(const *, const *);

45 
size_t
 
°æí
(const *);

46 *
°πok_r
(*, const *, **);

47 *
°πok
(*, const *);

49 *
mem£t
(*, 
c
, 
size_t
);

50 *
mem˝y
(*, c⁄° *, 
size_t
);

51 *
memmove
(*, c⁄° *, 
size_t
);

52 
memcmp
(c⁄° *, c⁄° *, 
size_t
);

57 c⁄° *
°ªº‹
(
îrcode
);

62 
bzîo
(*, 
size_t
);

	@test/os161/root/include/sys/endian.h

30 #i‚de‡
_SYS_ENDIAN_H_


31 
	#_SYS_ENDIAN_H_


	)

33 
	~<kîn/ídün.h
>

	@test/os161/root/include/sys/ioctl.h

31 
	~<uni°d.h
>

	@test/os161/root/include/sys/null.h

30 #i‚de‡
_SYS_NULL_H_


31 
	#_SYS_NULL_H_


	)

37 
	#NULL
 ((*)0)

	)

	@test/os161/root/include/sys/reboot.h

31 
	~<uni°d.h
>

	@test/os161/root/include/sys/stat.h

30 #i‚de‡
_SYS_STAT_H_


31 
	#_SYS_STAT_H_


	)

36 
	~<kîn/°©.h
>

37 
	~<kîn/°©ty≥s.h
>

42 
	#S_ISDIR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFDIR
)

	)

43 
	#S_ISREG
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFREG
)

	)

44 
	#S_ISDIR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFDIR
)

	)

45 
	#S_ISLNK
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFLNK
)

	)

46 
	#S_ISIFO
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFIFO
)

	)

47 
	#S_ISSOCK
(
mode
Ë((modê& 
_S_IFMT
Ë==
_S_IFSOCK
)

	)

48 
	#S_ISCHR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFCHR
)

	)

49 
	#S_ISBLK
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFBLK
)

	)

55 
	#S_IFMT
 
_S_IFMT


	)

56 
	#S_IFREG
 
_S_IFREG


	)

57 
	#S_IFDIR
 
_S_IFDIR


	)

58 
	#S_IFLNK
 
_S_IFLNK


	)

59 
	#S_IFIFO
 
_S_IFIFO


	)

60 
	#S_IFSOCK
 
_S_IFSOCK


	)

61 
	#S_IFCHR
 
_S_IFCHR


	)

62 
	#S_IFBLK
 
_S_IFBLK


	)

71 
f°©
(
fûeh™dÀ
, 
°©
 *
buf
);

72 
°©
(c⁄° *
∑th
, °© *
buf
);

73 
l°©
(c⁄° *
∑th
, 
°©
 *
buf
);

80 
mkdú
(c⁄° *
dú«me
, 
ign‹e
);

	@test/os161/root/include/sys/types.h

30 #i‚de‡
_SYS_TYPES_H_


31 
	#_SYS_TYPES_H_


	)

42 
	~<kîn/ty≥s.h
>

45 
	~<ty≥s/size_t.h
>

46 
	~<sys/nuŒ.h
>

55 
__ssize_t
 
	tssize_t
;

56 
__±rdiff_t
 
	t±rdiff_t
;

59 
__blk˙t_t
 
	tblk˙t_t
;

60 
__blksize_t
 
	tblksize_t
;

61 
__daddr_t
 
	tdaddr_t
;

62 
__dev_t
 
	tdev_t
;

63 
__fsid_t
 
	tfsid_t
;

64 
__gid_t
 
	tgid_t
;

65 
__ö_addr_t
 
	tö_addr_t
;

66 
__ö_p‹t_t
 
	tö_p‹t_t
;

67 
__öo_t
 
	töo_t
;

68 
__mode_t
 
	tmode_t
;

69 
__∆ök_t
 
	t∆ök_t
;

70 
__off_t
 
	toff_t
;

71 
__pid_t
 
	tpid_t
;

72 
__æim_t
 
	tæim_t
;

73 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

74 
__time_t
 
	ttime_t
;

75 
__uid_t
 
	tuid_t
;

77 
__nfds_t
 
	tnfds_t
;

78 
__sockÀn_t
 
	tsockÀn_t
;

84 
	#CHAR_BIT
 
__CHAR_BIT


	)

	@test/os161/root/include/sys/wait.h

31 
	~<uni°d.h
>

	@test/os161/root/include/time.h

31 
	~<uni°d.h
>

	@test/os161/root/include/types/size_t.h

30 #i‚de‡
_TYPES_SIZE_T_H_


31 
	#_TYPES_SIZE_T_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
__size_t
 
	tsize_t
;

	@test/os161/root/include/unistd.h

30 #i‚de‡
_UNISTD_H_


31 
	#_UNISTD_H_


	)

33 
	~<sys/ty≥s.h
>

40 
	~<kîn/f˙é.h
>

41 
	~<kîn/io˘l.h
>

42 
	~<kîn/ªboŸ.h
>

43 
	~<kîn/£ek.h
>

44 
	~<kîn/time.h
>

45 
	~<kîn/uni°d.h
>

46 
	~<kîn/waô.h
>

110 #ifde‡
__GNUC__


112 
	#__DEAD
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

114 
	#__DEAD


	)

118 
__DEAD
 
_exô
(
code
);

119 
execv
(c⁄° *
¥og
, *c⁄° *
¨gs
);

120 
pid_t
 
f‹k
();

121 
waôpid
(
pid_t
 
pid
, *
ªtu∫code
, 
Êags
);

127 
›í
(c⁄° *
fûíame
, 
Êags
, ...);

128 
ªad
(
fûeh™dÀ
, *
buf
, 
size_t
 
size
);

129 
wrôe
(
fûeh™dÀ
, c⁄° *
buf
, 
size_t
 
size
);

130 
˛o£
(
fûeh™dÀ
);

131 
ªboŸ
(
code
);

132 
sync
();

134 
rmdú
(c⁄° *
dú«me
);

137 
gëpid
();

138 
io˘l
(
fûeh™dÀ
, 
code
, *
buf
);

139 
off_t
 
l£ek
(
fûeh™dÀ
, off_à
pos
, 
code
);

140 
fsync
(
fûeh™dÀ
);

141 
·runˇã
(
fûeh™dÀ
, 
off_t
 
size
);

142 
ªmove
(c⁄° *
fûíame
);

143 
ª«me
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
);

144 
lök
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
);

146 
chdú
(c⁄° *
∑th
);

149 *
sbrk
(
ch™ge
);

150 
gëdúíåy
(
fûeh™dÀ
, *
buf
, 
size_t
 
buÊí
);

151 
symlök
(c⁄° *
èrgë
, c⁄° *
lök«me
);

152 
ªadlök
(c⁄° *
∑th
, *
buf
, 
size_t
 
buÊí
);

153 
dup2
(
fûeh™dÀ
, 
√wh™dÀ
);

154 
pùe
(
fûeh™dÀs
[2]);

155 
time_t
 
__time
—ime_à*
£c⁄ds
, *
«no£c⁄ds
);

156 
__gëcwd
(*
buf
, 
size_t
 
buÊí
);

164 *
gëcwd
(*
buf
, 
size_t
 
buÊí
);

165 
time_t
 
time
—ime_à*
£c⁄ds
);

	@test/os161/user/bin/cat/cat.c

30 
	~<uni°d.h
>

31 
	~<°rög.h
>

32 
	~<îr.h
>

44 
	$doˇt
(c⁄° *
«me
, 
fd
)

46 
buf
[1024];

47 
Àn
, 
wr
, 
wπŸ
;

55 (
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf)))>0) {

60 
wπŸ
 = 0;

61 
wπŸ
 < 
Àn
) {

62 
wr
 = 
	`wrôe
(
STDOUT_FILENO
, 
buf
+
wπŸ
, 
Àn
-wrtot);

63 i‡(
wr
<0) {

64 
	`îr
(1, "stdout");

66 
wπŸ
 +
wr
;

72 i‡(
Àn
<0) {

73 
	`îr
(1, "%s", 
«me
);

75 
	}
}

80 
	$ˇt
(c⁄° *
fûe
)

82 
fd
;

87 i‡(!
	`°rcmp
(
fûe
, "-")) {

88 
	`doˇt
("°dö", 
STDIN_FILENO
);

96 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
);

97 i‡(
fd
<0) {

98 
	`îr
(1, "%s", 
fûe
);

100 
	`doˇt
(
fûe
, 
fd
);

101 
	`˛o£
(
fd
);

102 
	}
}

106 
	$maö
(
¨gc
, *
¨gv
[])

108 i‡(
¨gc
==1) {

110 
	`doˇt
("°dö", 
STDIN_FILENO
);

114 
i
;

115 
i
=1; i<
¨gc
; i++) {

116 
	`ˇt
(
¨gv
[
i
]);

120 
	}
}

	@test/os161/user/bin/cp/cp.c

30 
	~<uni°d.h
>

31 
	~<îr.h
>

42 
	$c›y
(c⁄° *
‰om
, c⁄° *
to
)

44 
‰omfd
;

45 
tofd
;

46 
buf
[1024];

47 
Àn
, 
wr
, 
wπŸ
;

52 
‰omfd
 = 
	`›í
(
‰om
, 
O_RDONLY
);

53 i‡(
‰omfd
<0) {

54 
	`îr
(1, "%s", 
‰om
);

56 
tofd
 = 
	`›í
(
to
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
);

57 i‡(
tofd
<0) {

58 
	`îr
(1, "%s", 
to
);

67 (
Àn
 = 
	`ªad
(
‰omfd
, 
buf
, (buf)))>0) {

72 
wπŸ
 = 0;

73 
wπŸ
 < 
Àn
) {

74 
wr
 = 
	`wrôe
(
tofd
, 
buf
+
wπŸ
, 
Àn
-wrtot);

75 i‡(
wr
<0) {

76 
	`îr
(1, "%s", 
to
);

78 
wπŸ
 +
wr
;

84 i‡(
Àn
<0) {

85 
	`îr
(1, "%s", 
‰om
);

88 i‡(
	`˛o£
(
‰omfd
) < 0) {

89 
	`îr
(1, "%s: clo£", 
‰om
);

92 i‡(
	`˛o£
(
tofd
) < 0) {

93 
	`îr
(1, "%s: clo£", 
to
);

95 
	}
}

98 
	$maö
(
¨gc
, *
¨gv
[])

108 i‡(
¨gc
!=3) {

109 
	`îrx
(1, "Usage: cp OLDFILE NEWFILE");

111 
	`c›y
(
¨gv
[1],árgv[2]);

113 
	}
}

	@test/os161/user/bin/false/false.c

30 
	~<uni°d.h
>

31 
	~<°dlib.h
>

41 
	$maö
()

44 
	`exô
(1);

45 
	}
}

	@test/os161/user/bin/ln/ln.c

30 
	~<uni°d.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<îr.h
>

51 
	$dosymlök
(c⁄° *
ãxt
, c⁄° *
∑th
)

53 i‡(
	`symlök
(
ãxt
, 
∑th
)) {

54 
	`îr
(1, "%s", 
∑th
);

56 
	}
}

65 
	$doh¨dlök
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
)

67 i‡(
	`lök
(
ﬁdfûe
, 
√wfûe
)) {

68 
	`îr
(1, "%†‹ %s", 
ﬁdfûe
, 
√wfûe
);

69 
	`exô
(1);

71 
	}
}

74 
	$maö
(
¨gc
, *
¨gv
[])

82 i‡(
¨gc
==4 && !
	`°rcmp
(
¨gv
[1], "-s")) {

83 
	`dosymlök
(
¨gv
[2],árgv[3]);

85 i‡(
¨gc
==3) {

86 
	`doh¨dlök
(
¨gv
[1],árgv[2]);

89 
	`w¨nx
("Usage:Ün oldfileÇewfile");

90 
	`îrx
(1, "Ün -s symlinkcontents symlinkfile\n");

93 
	}
}

	@test/os161/user/bin/ls/ls.c

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<°dio.h
>

33 
	~<uni°d.h
>

34 
	~<°rög.h
>

35 
	~<î∫o.h
>

36 
	~<îr.h
>

49 
	ga›t
=0;

50 
	gd›t
=0;

51 
	gl›t
=0;

52 
	gR›t
=0;

53 
	gs›t
=0;

58 
	$›ti⁄
(
ch
)

60 
ch
) {

61 'a': 
a›t
=1; ;

62 'd': 
d›t
=1; ;

63 'l': 
l›t
=1; ;

64 'R': 
R›t
=1; ;

65 's': 
s›t
=1; ;

67 
	`îrx
(1, "Unknow¿›ti⁄ -%c", 
ch
);

69 
	}
}

76 
	$ba£«me
(c⁄° *
∑th
)

78 c⁄° *
s
;

80 
s
 = 
	`°ºchr
(
∑th
, '/');

81 i‡(
s
) {

82  
s
+1;

84  
∑th
;

85 
	}
}

92 
	$isdú
(c⁄° *
∑th
)

94 
°©
 
buf
;

95 
fd
;

98 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

99 i‡(
fd
<0) {

100 
	`îr
(1, "%s", 
∑th
);

102 i‡(
	`f°©
(
fd
, &
buf
)<0) {

103 
	`îr
(1, "%s: f°©", 
∑th
);

105 
	`˛o£
(
fd
);

107  
	`S_ISDIR
(
buf
.
°_mode
);

108 
	}
}

116 
	$¥öthódî
(c⁄° *
fûe
)

119 
fú°
=1;

120 i‡(
fú°
) {

121 
fú°
 = 0;

124 
	`¥ötf
("\n");

126 
	`¥ötf
("%s:\n", 
fûe
);

127 
	}
}

135 
	$¥öt
(c⁄° *
∑th
)

137 
°©
 
°©buf
;

138 c⁄° *
fûe
;

139 
ty≥ch
;

141 i‡(
l›t
 || 
s›t
) {

142 
fd
;

144 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

145 i‡(
fd
<0) {

146 
	`îr
(1, "%s", 
∑th
);

148 i‡(
	`f°©
(
fd
, &
°©buf
)<0) {

149 
	`îr
(1, "%s: f°©", 
∑th
);

151 
	`˛o£
(
fd
);

154 
fûe
 = 
	`ba£«me
(
∑th
);

156 i‡(
s›t
) {

157 
	`¥ötf
("%3d ", 
°©buf
.
°_blocks
);

160 i‡(
l›t
) {

161 i‡(
	`S_ISREG
(
°©buf
.
°_mode
)) {

162 
ty≥ch
 = '-';

164 i‡(
	`S_ISDIR
(
°©buf
.
°_mode
)) {

165 
ty≥ch
 = 'd';

167 i‡(
	`S_ISLNK
(
°©buf
.
°_mode
)) {

168 
ty≥ch
 = 'l';

170 i‡(
	`S_ISCHR
(
°©buf
.
°_mode
)) {

171 
ty≥ch
 = 'c';

173 i‡(
	`S_ISBLK
(
°©buf
.
°_mode
)) {

174 
ty≥ch
 = 'b';

177 
ty≥ch
 = '?';

180 
	`¥ötf
("%crwx------ %2dÑoot %-8llu",

181 
ty≥ch
,

182 
°©buf
.
°_∆ök
,

183 
°©buf
.
°_size
);

185 
	`¥ötf
("%s\n", 
fûe
);

186 
	}
}

193 
	$li°dú
(c⁄° *
∑th
, 
showhódî
)

195 
fd
;

196 
buf
[1024];

197 
√w∑th
[1024];

198 
Àn
;

200 i‡(
showhódî
) {

201 
	`¥öthódî
(
∑th
);

207 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

208 i‡(
fd
<0) {

209 
	`îr
(1, "%s", 
∑th
);

215 (
Àn
 = 
	`gëdúíåy
(
fd
, 
buf
, (buf)-1)) > 0) {

216 
buf
[
Àn
] = 0;

219 
	`¢¥ötf
(
√w∑th
, “ew∑th), "%s/%s", 
∑th
, 
buf
);

221 i‡(
a›t
 || 
buf
[0]!='.') {

223 
	`¥öt
(
√w∑th
);

226 i‡(
Àn
<0) {

227 
	`îr
(1, "%s: gëdúíåy", 
∑th
);

231 
	`˛o£
(
fd
);

232 
	}
}

236 
	$ªcur£dú
(c⁄° *
∑th
)

238 
fd
;

239 
buf
[1024];

240 
√w∑th
[1024];

241 
Àn
;

246 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

247 i‡(
fd
<0) {

248 
	`îr
(1, "%s", 
∑th
);

254 (
Àn
 = 
	`gëdúíåy
(
fd
, 
buf
, (buf)-1)) > 0) {

255 
buf
[
Àn
] = 0;

258 
	`¢¥ötf
(
√w∑th
, “ew∑th), "%s/%s", 
∑th
, 
buf
);

260 i‡(!
a›t
 && 
buf
[0]=='.') {

265 i‡(!
	`°rcmp
(
buf
, ".") || !strcmp(buf, "..")) {

270 i‡(!
	`isdú
(
√w∑th
)) {

274 
	`li°dú
(
√w∑th
, 1 );

275 i‡(
R›t
) {

276 
	`ªcur£dú
(
√w∑th
);

279 i‡(
Àn
<0) {

280 
	`îr
(1, "%s", 
∑th
);

283 
	`˛o£
(
fd
);

284 
	}
}

288 
	$li°ôem
(c⁄° *
∑th
, 
showhódî
)

290 i‡(!
d›t
 && 
	`isdú
(
∑th
)) {

291 
	`li°dú
(
∑th
, 
showhódî
 || 
R›t
);

292 i‡(
R›t
) {

293 
	`ªcur£dú
(
∑th
);

297 
	`¥öt
(
∑th
);

299 
	}
}

302 
	$maö
(
¨gc
, *
¨gv
[])

304 
i
,
j
, 
ôems
=0;

309 
i
=1; i<
¨gc
; i++) {

310 i‡(
¨gv
[
i
][0]!='-') {

311 
ôems
++;

318 
i
=1; i<
¨gc
; i++) {

319 i‡(
¨gv
[
i
][0]=='-') {

324 
j
=1; 
¨gv
[
i
][j]; j++) {

325 
	`›ti⁄
(
¨gv
[
i
][
j
]);

332 
	`li°ôem
(
¨gv
[
i
], 
ôems
>1);

340 i‡(
ôems
==0) {

341 
	`li°ôem
(".", 0);

345 
	}
}

	@test/os161/user/bin/mkdir/mkdir.c

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<uni°d.h
>

33 
	~<îr.h
>

43 
	$maö
(
¨gc
, *
¨gv
[])

45 i‡(
¨gc
!=2) {

46 
	`îrx
(1, "Usage: mkdir DIRECTORY");

49 i‡(
	`mkdú
(
¨gv
[1], 0775)) {

50 
	`îr
(1, "%s", 
¨gv
[1]);

53 
	}
}

	@test/os161/user/bin/mv/mv.c

30 
	~<uni°d.h
>

31 
	~<îr.h
>

49 
	$d‹íame
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
)

51 i‡(
	`ª«me
(
ﬁdfûe
, 
√wfûe
)) {

52 
	`îr
(1, "%†‹ %s", 
ﬁdfûe
, 
√wfûe
);

54 
	}
}

57 
	$maö
(
¨gc
, *
¨gv
[])

59 i‡(
¨gc
!=3) {

60 
	`îrx
(1, "Usage: mv oldfileÇewfile");

62 
	`d‹íame
(
¨gv
[1],árgv[2]);

64 
	}
}

	@test/os161/user/bin/pwd/pwd.c

30 
	~<°dio.h
>

31 
	~<uni°d.h
>

32 
	~<°rög.h
>

33 
	~<îr.h
>

34 
	~<limôs.h
>

45 
	$maö
()

47 
buf
[
PATH_MAX
+1], *
p
;

49 
p
 = 
	`gëcwd
(
buf
, (buf));

50 i‡(
p
 =
NULL
) {

51 
	`îr
(1, ".");

53 
	`¥ötf
("%s\n", 
buf
);

55 
	}
}

	@test/os161/user/bin/rm/rm.c

30 
	~<uni°d.h
>

31 
	~<îr.h
>

41 
	$d‹emove
(c⁄° *
fûe
)

43 i‡(
	`ªmove
(
fûe
)) {

44 
	`îr
(1, "%s", 
fûe
);

46 
	}
}

49 
	$maö
(
¨gc
, *
¨gv
[])

51 
i
;

53 i‡(
¨gc
<2) {

55 
	`îrx
(1, "Usage:Ñm FILES");

59 
i
=1; i<
¨gc
; i++) {

60 
	`d‹emove
(
¨gv
[
i
]);

64 
	}
}

	@test/os161/user/bin/rmdir/rmdir.c

30 
	~<uni°d.h
>

31 
	~<îr.h
>

41 
	$maö
(
¨gc
, *
¨gv
[])

43 i‡(
¨gc
!=2) {

44 
	`îrx
(1, "Usage:Ñmdir DIRECTORY");

47 i‡(
	`rmdú
(
¨gv
[1])) {

48 
	`îr
(1, "%s", 
¨gv
[1]);

51 
	}
}

	@test/os161/user/bin/sh/sh.c

38 
	~<sys/ty≥s.h
>

39 
	~<sys/waô.h
>

40 
	~<as£π.h
>

41 
	~<uni°d.h
>

42 
	~<°dlib.h
>

43 
	~<°dio.h
>

44 
	~<°rög.h
>

45 
	~<limôs.h
>

46 
	~<î∫o.h
>

47 
	~<îr.h
>

49 #ifde‡
HOST


50 
	~"ho°com∑t.h
"

53 #i‚de‡
NARG_MAX


55 
	#NARG_MAX
 1024

	)

59 #i‡
ARG_MAX
 > 4096

60 
	#CMDLINE_MAX
 4096

	)

62 
	#CMDLINE_MAX
 
ARG_MAX


	)

66 
	gtimög
 = 0;

69 
	#MAXBG
 128

	)

70 
pid_t
 
	gbgpids
[
MAXBG
];

78 
	$ˇn_bg
()

80 
i
;

82 
i
 = 0; i < 
MAXBG
; i++) {

83 i‡(
bgpids
[
i
] == 0) {

89 
	}
}

98 
	$ªmembî_bg
(
pid_t
 
pid
)

100 
i
;

101 
i
 = 0; i < 
MAXBG
; i++) {

102 i‡(
bgpids
[
i
] == 0) {

103 
bgpids
[
i
] = 
pid
;

107 
	`as£π
(0);

108 
	}
}

116 
	$¥öt°©us
(
°©us
)

118 i‡(
	`WIFEXITED
(
°©us
)) {

119 
	`¥ötf
("Exô %d", 
	`WEXITSTATUS
(
°©us
));

121 i‡(
	`WIFSIGNALED
(
°©us
Ë&& 
	`WCOREDUMP
(status)) {

122 
	`¥ötf
("Sig«»%d (c‹êdum≥d)", 
	`WTERMSIG
(
°©us
));

124 i‡(
	`WIFSIGNALED
(
°©us
)) {

125 
	`¥ötf
("Sig«»%d", 
	`WTERMSIG
(
°©us
));

127 i‡(
	`WIFSTOPPED
(
°©us
)) {

128 
	`¥ötf
("St›≥d o¿sig«»%d", 
	`WSTOPSIG
(
°©us
));

131 
	`¥ötf
("InvÆid sètu†codê%d", 
°©us
);

133 
	}
}

141 
	$dowaô
(
pid_t
 
pid
)

143 
°©us
;

144 i‡(
	`waôpid
(
pid
, &
°©us
, 0)<0) {

145 
	`w¨n
("pid %d", 
pid
);

148 
	`¥ötf
("pid %d: ", 
pid
);

149 
	`¥öt°©us
(
°©us
);

150 
	`¥ötf
("\n");

152 
	}
}

154 #ifde‡
WNOHANG


161 
	$dowaôpﬁl
(
pid_t
 
pid
)

163 
°©us
;

164 
pid_t
 
ªsu…
;

165 
ªsu…
 = 
	`waôpid
(
pid
, &
°©us
, 
WNOHANG
);

166 i‡(
ªsu…
<0) {

167 
	`w¨n
("pid %d", 
pid
);

169 i‡(
ªsu…
!=0) {

170 
	`¥ötf
("pid %d: ", 
pid
);

171 
	`¥öt°©us
(
°©us
);

172 
	`¥ötf
("\n");

176 
	}
}

184 
	$waôpﬁl
()

186 
i
;

187 
i
=0; i < 
MAXBG
; i++) {

188 i‡(
bgpids
[
i
] != 0) {

189 i‡(
	`dowaôpﬁl
(
bgpids
[
i
])) {

190 
bgpids
[
i
] = 0;

194 
	}
}

205 
	$cmd_waô
(
ac
, *
av
[])

207 
i
;

208 
pid_t
 
pid
;

210 i‡(
ac
 == 2) {

211 
pid
 = 
	`©oi
(
av
[1]);

212 
	`dowaô
(
pid
);

213 
i
 = 0; i < 
MAXBG
; i++) {

214 i‡(
bgpids
[
i
]==
pid
) {

215 
bgpids
[
i
] = 0;

220 i‡(
ac
 == 1) {

221 
i
=0; i < 
MAXBG
; i++) {

222 i‡(
bgpids
[
i
] != 0) {

223 
	`dowaô
(
bgpids
[
i
]);

224 
bgpids
[
i
] = 0;

229 
	`¥ötf
("Usage: wait [pid]\n");

231 
	}
}

240 
	$cmd_chdú
(
ac
, *
av
[])

242 i‡(
ac
 == 2) {

243 i‡(
	`chdú
(
av
[1])) {

244 
	`w¨n
("chdir");

249 
	`¥ötf
("Usage: chdir dir\n");

251 
	}
}

260 
	$cmd_exô
(
ac
, *
av
[])

262 
code
;

264 i‡(
ac
 == 1) {

265 
code
 = 0;

267 i‡(
ac
 == 2) {

268 
code
 = 
	`©oi
(
av
[1]);

271 
	`¥ötf
("Usage:Éxit [code]\n");

275 
	`exô
(
code
);

278 
	}
}

285 c⁄° *
	m«me
;

286 (*
	mfunc
)(, **);

287 } 
	gbuûtös
[] = {

288 { "cd", 
cmd_chdú
 },

289 { "chdú", 
cmd_chdú
 },

290 { "exô", 
cmd_exô
 },

291 { "waô", 
cmd_waô
 },

292 { 
NULL
, NULL }

304 
	$docomm™d
(*
buf
)

306 *
¨gs
[
NARG_MAX
 + 1];

307 
«rgs
, 
i
;

308 *
s
;

309 
pid_t
 
pid
;

310 
°©us
;

311 
bg
=0;

312 
time_t
 
°¨t£cs
, 
íd£cs
;

313 
°¨ä£cs
, 
ídn£cs
;

315 
«rgs
 = 0;

316 
s
 = 
	`°πok
(
buf
, " \t\r\n"); s; s = såtok(
NULL
, " \t\r\n")) {

317 i‡(
«rgs
 >
NARG_MAX
) {

318 
	`¥ötf
("%s: Too manyárguments "

320 
¨gs
[0]);

323 
¨gs
[
«rgs
++] = 
s
;

325 
¨gs
[
«rgs
] = 
NULL
;

327 i‡(
«rgs
==0) {

332 
i
=0; 
buûtös
[i].
«me
; i++) {

333 i‡(!
	`°rcmp
(
buûtös
[
i
].
«me
, 
¨gs
[0])) {

334  
buûtös
[
i
].
	`func
(
«rgs
, 
¨gs
);

340 i‡(
«rgs
 > 0 && !
	`°rcmp
(
¨gs
[nargs-1], "&")) {

342 i‡(!
	`ˇn_bg
()) {

343 
	`¥ötf
("%s: Too many background jobs; wait for "

345 
¨gs
[0]);

348 
«rgs
--;

349 
¨gs
[
«rgs
] = 
NULL
;

350 
bg
 = 1;

353 i‡(
timög
) {

354 
	`__time
(&
°¨t£cs
, &
°¨ä£cs
);

357 
pid
 = 
	`f‹k
();

358 
pid
) {

361 
	`w¨n
("fork");

362  
	`_MKWAIT_EXIT
(255);

365 
	`execv
(
¨gs
[0],árgs);

366 
	`w¨n
("%s", 
¨gs
[0]);

374 
	`_exô
(1);

380 i‡(
bg
) {

382 
	`ªmembî_bg
(
pid
);

383 
	`¥ötf
("[%d] %†... &\n", 
pid
, 
¨gs
[0]);

387 i‡(
	`waôpid
(
pid
, &
°©us
, 0) < 0) {

388 
	`w¨n
("waitpid");

389 
°©us
 = -1;

392 i‡(
timög
) {

393 
	`__time
(&
íd£cs
, &
ídn£cs
);

394 i‡(
ídn£cs
 < 
°¨ä£cs
) {

395 
ídn£cs
 += 1000000000;

396 
íd£cs
--;

398 
ídn£cs
 -
°¨ä£cs
;

399 
íd£cs
 -
°¨t£cs
;

400 
	`w¨nx
("subprocessÅime: %lu.%09lu seconds",

401 (Ë
íd£cs
, (Ë
ídn£cs
);

404  
°©us
;

405 
	}
}

419 
	$gëcmd
(*
buf
, 
size_t
 
Àn
)

421 
size_t
 
pos
 = 0;

422 
d⁄e
=0, 
ch
;

428 !
d⁄e
) {

429 
ch
 = 
	`gëch¨
();

430 i‡((
ch
 ='\b' || ch =127Ë&& 
pos
 > 0) {

431 
	`putch¨
('\b');

432 
	`putch¨
(' ');

433 
	`putch¨
('\b');

434 
pos
--;

436 i‡(
ch
 == '\r' || ch == '\n') {

437 
	`putch¨
('\r');

438 
	`putch¨
('\n');

439 
d⁄e
 = 1;

441 i‡(
ch
 >32 && ch < 127 && 
pos
 < 
Àn
-1) {

442 
buf
[
pos
++] = 
ch
;

443 
	`putch¨
(
ch
);

447 
	`putch¨
('\a');

450 
buf
[
pos
] = 0;

451 
	}
}

461 
	$öãø˘ive
()

463 
buf
[
CMDLINE_MAX
];

464 
°©us
;

467 
	`¥ötf
("OS/161$ ");

468 
	`gëcmd
(
buf
, (buf));

469 
°©us
 = 
	`docomm™d
(
buf
);

470 i‡(
°©us
) {

471 
	`¥öt°©us
(
°©us
);

472 
	`¥ötf
("\n");

474 #ifde‡
WNOHANG


475 
	`waôpﬁl
();

478 
	}
}

482 
	$check_timög
()

484 
time_t
 
£cs
;

485 
n£cs
;

486 i‡(
	`__time
(&
£cs
, &
n£cs
) != -1) {

487 
timög
 = 1;

488 
	`w¨nx
("TimingÉnabled.");

490 
	}
}

498 
	$maö
(
¨gc
, *
¨gv
[])

500 #ifde‡
HOST


501 
	`ho°com∑t_öô
(
¨gc
, 
¨gv
);

503 
	`check_timög
();

509 i‡(
¨gc
 == 0 ||árgc == 1) {

510 
	`öãø˘ive
();

512 i‡(
¨gc
 =3 && !
	`°rcmp
(
¨gv
[1], "-c")) {

513  
	`docomm™d
(
¨gv
[2]);

516 
	`îrx
(1, "Usage: sh [-c command]");

519 
	}
}

	@test/os161/user/bin/sync/sync.c

30 
	~<uni°d.h
>

39 
	$maö
()

41 
	`sync
();

43 
	}
}

	@test/os161/user/bin/true/true.c

30 
	~<uni°d.h
>

31 
	~<°dlib.h
>

38 
	$maö
()

41 
	`exô
(0);

42 
	}
}

	@test/os161/user/include/assert.h

30 #i‚de‡
_ASSERT_H_


31 
	#_ASSERT_H_


	)

36 #unde‡
as£π


41 
__bad_as£π
(c⁄° *
fûe
, 
löe
, c⁄° *
msg
);

47 #ifde‡
NDEBUG


50 
	#as£π
(
x
Ë(()(x)Ë

	)

52 
	#as£π
(
x
Ë(()0Ë

	)

56 
	#as£π
(
x
Ë((xË? ()0 : 
	`__bad_as£π
(
__FILE__
, 
__LINE__
, #x))

	)

	@test/os161/user/include/err.h

30 #i‚de‡
_ERR_H_


31 
	#_ERR_H_


	)

33 
	~<kîn/ty≥s.h
>

47 
w¨n
(c⁄° *
fmt
, ...);

48 
w¨nx
(c⁄° *
fmt
, ...);

49 
îr
(
exôcode
, c⁄° *
fmt
, ...);

50 
îrx
(
exôcode
, c⁄° *
fmt
, ...);

52 
vw¨n
(c⁄° *
fmt
, 
__va_li°
);

53 
vw¨nx
(c⁄° *
fmt
, 
__va_li°
);

54 
vîr
(
exôcode
, c⁄° *
fmt
, 
__va_li°
);

55 
vîrx
(
exôcode
, c⁄° *
fmt
, 
__va_li°
);

	@test/os161/user/include/errno.h

30 #i‚de‡
_ERRNO_H_


31 
	#_ERRNO_H_


	)

34 
	~<kîn/î∫o.h
>

37 
î∫o
;

	@test/os161/user/include/fcntl.h

31 
	~<uni°d.h
>

	@test/os161/user/include/limits.h

30 #i‚de‡
_LIMITS_H_


31 
	#_LIMITS_H_


	)

38 
	~<kîn/limôs.h
>

41 
	#NAME_MAX
 
__NAME_MAX


	)

42 
	#PATH_MAX
 
__PATH_MAX


	)

43 
	#ARG_MAX
 
__ARG_MAX


	)

44 
	#PID_MIN
 
__PID_MIN


	)

45 
	#PID_MAX
 
__PID_MAX


	)

46 
	#PIPE_BUF
 
__PIPE_BUF


	)

47 
	#NGROUPS_MAX
 
__NGROUPS_MAX


	)

48 
	#LOGIN_NAME_MAX
 
__LOGIN_NAME_MAX


	)

49 
	#OPEN_MAX
 
__OPEN_MAX


	)

50 
	#IOV_MAX
 
__IOV_MAX


	)

	@test/os161/user/include/setjmp.h

30 #i‚de‡
_SETJMP_H_


31 
	#_SETJMP_H_


	)

34 
	~<machöe/£tjmp.h
>

49 
£tjmp
(
jmp_buf
 
jb
);

50 
l⁄gjmp
(
jmp_buf
 
jb
, 
code
);

	@test/os161/user/include/signal.h

30 
	~<kîn/sig«l.h
>

	@test/os161/user/include/stdarg.h

30 #i‚de‡
_STDARG_H_


31 
	#_STDARG_H_


	)

33 
	~<kîn/ty≥s.h
>

41 
__va_li°
 
	tva_li°
;

43 
	#va_°¨t
(
≠
,
fmt
Ë
	`__buûtö_°d¨g_°¨t
◊p,fmt)

	)

44 
	#va_¨g
(
≠
,
t
Ë
	`__buûtö_va_¨g
◊p,t)

	)

45 
	#va_c›y
(
≠1
,
≠2
Ë
	`__buûtö_va_c›y
◊p1,≠2)

	)

46 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

	@test/os161/user/include/stdint.h

30 #i‚de‡
_STDINT_H_


31 
	#_STDINT_H_


	)

37 
	~<kîn/ty≥s.h
>

39 
__i8
 
	töt8_t
;

40 
__i16
 
	töt16_t
;

41 
__i32
 
	töt32_t
;

42 
__i64
 
	töt64_t
;

43 
__u8
 
	tuöt8_t
;

44 
__u16
 
	tuöt16_t
;

45 
__u32
 
	tuöt32_t
;

46 
__u64
 
	tuöt64_t
;

48 
__öçå_t
 
	töçå_t
;

49 
__uöçå_t
 
	tuöçå_t
;

	@test/os161/user/include/stdio.h

30 #i‚de‡
_STDIO_H_


31 
	#_STDIO_H_


	)

37 
	~<kîn/ty≥s.h
>

38 
	~<ty≥s/size_t.h
>

39 
	~<sys/nuŒ.h
>

42 
	#EOF
 (-1)

	)

48 
__v¥ötf
((*
£ndfunc
)(*
˛õ¡d©a
, c⁄° *, 
size_t
 
Àn
),

49 *
˛õ¡d©a
,

50 c⁄° *
fmt
,

51 
__va_li°
 
≠
);

54 
	`¥ötf
(c⁄° *
fmt
, ...);

55 
	`v¥ötf
(c⁄° *
fmt
, 
__va_li°
 
≠
);

56 
	`¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, ...);

57 
	`v¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, 
__va_li°
 
≠
);

60 
	`puts
(const *);

64 
	`__puts
(const *);

67 
	`putch¨
();

70 
	`gëch¨
();

	@test/os161/user/include/stdlib.h

30 #i‚de‡
_STDLIB_H_


31 
	#_STDLIB_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
	~<ty≥s/size_t.h
>

35 
	~<sys/nuŒ.h
>

40 
©oi
(const *);

45 
ab‹t
();

51 
exô
(
code
);

56 
sy°em
(c⁄° *
comm™d
);

61 
	#RAND_MAX
 0x7fffffff

	)

62 
øndom
();

63 
§™dom
(
£ed
);

64 *
öô°©e
(, *, 
size_t
);

65 *
£t°©e
(*);

70 *
mÆloc
(
size_t
 
size
);

71 
‰ì
(*
±r
);

	@test/os161/user/include/string.h

30 #i‚de‡
_STRING_H_


31 
	#_STRING_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
	~<ty≥s/size_t.h
>

35 
	~<sys/nuŒ.h
>

40 *
°rˇt
(*, const *);

41 *
°r˝y
(*, const *);

42 *
°rchr
(const *, );

43 *
°ºchr
(const *, );

44 
°rcmp
(const *, const *);

45 
size_t
 
°æí
(const *);

46 *
°πok_r
(*, const *, **);

47 *
°πok
(*, const *);

49 *
mem£t
(*, 
c
, 
size_t
);

50 *
mem˝y
(*, c⁄° *, 
size_t
);

51 *
memmove
(*, c⁄° *, 
size_t
);

52 
memcmp
(c⁄° *, c⁄° *, 
size_t
);

57 c⁄° *
°ªº‹
(
îrcode
);

62 
bzîo
(*, 
size_t
);

	@test/os161/user/include/sys/endian.h

30 #i‚de‡
_SYS_ENDIAN_H_


31 
	#_SYS_ENDIAN_H_


	)

33 
	~<kîn/ídün.h
>

	@test/os161/user/include/sys/ioctl.h

31 
	~<uni°d.h
>

	@test/os161/user/include/sys/null.h

30 #i‚de‡
_SYS_NULL_H_


31 
	#_SYS_NULL_H_


	)

37 
	#NULL
 ((*)0)

	)

	@test/os161/user/include/sys/reboot.h

31 
	~<uni°d.h
>

	@test/os161/user/include/sys/stat.h

30 #i‚de‡
_SYS_STAT_H_


31 
	#_SYS_STAT_H_


	)

36 
	~<kîn/°©.h
>

37 
	~<kîn/°©ty≥s.h
>

42 
	#S_ISDIR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFDIR
)

	)

43 
	#S_ISREG
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFREG
)

	)

44 
	#S_ISDIR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFDIR
)

	)

45 
	#S_ISLNK
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFLNK
)

	)

46 
	#S_ISIFO
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFIFO
)

	)

47 
	#S_ISSOCK
(
mode
Ë((modê& 
_S_IFMT
Ë==
_S_IFSOCK
)

	)

48 
	#S_ISCHR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFCHR
)

	)

49 
	#S_ISBLK
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFBLK
)

	)

55 
	#S_IFMT
 
_S_IFMT


	)

56 
	#S_IFREG
 
_S_IFREG


	)

57 
	#S_IFDIR
 
_S_IFDIR


	)

58 
	#S_IFLNK
 
_S_IFLNK


	)

59 
	#S_IFIFO
 
_S_IFIFO


	)

60 
	#S_IFSOCK
 
_S_IFSOCK


	)

61 
	#S_IFCHR
 
_S_IFCHR


	)

62 
	#S_IFBLK
 
_S_IFBLK


	)

71 
f°©
(
fûeh™dÀ
, 
°©
 *
buf
);

72 
°©
(c⁄° *
∑th
, °© *
buf
);

73 
l°©
(c⁄° *
∑th
, 
°©
 *
buf
);

80 
mkdú
(c⁄° *
dú«me
, 
ign‹e
);

	@test/os161/user/include/sys/types.h

30 #i‚de‡
_SYS_TYPES_H_


31 
	#_SYS_TYPES_H_


	)

42 
	~<kîn/ty≥s.h
>

45 
	~<ty≥s/size_t.h
>

46 
	~<sys/nuŒ.h
>

55 
__ssize_t
 
	tssize_t
;

56 
__±rdiff_t
 
	t±rdiff_t
;

59 
__blk˙t_t
 
	tblk˙t_t
;

60 
__blksize_t
 
	tblksize_t
;

61 
__daddr_t
 
	tdaddr_t
;

62 
__dev_t
 
	tdev_t
;

63 
__fsid_t
 
	tfsid_t
;

64 
__gid_t
 
	tgid_t
;

65 
__ö_addr_t
 
	tö_addr_t
;

66 
__ö_p‹t_t
 
	tö_p‹t_t
;

67 
__öo_t
 
	töo_t
;

68 
__mode_t
 
	tmode_t
;

69 
__∆ök_t
 
	t∆ök_t
;

70 
__off_t
 
	toff_t
;

71 
__pid_t
 
	tpid_t
;

72 
__æim_t
 
	tæim_t
;

73 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

74 
__time_t
 
	ttime_t
;

75 
__uid_t
 
	tuid_t
;

77 
__nfds_t
 
	tnfds_t
;

78 
__sockÀn_t
 
	tsockÀn_t
;

84 
	#CHAR_BIT
 
__CHAR_BIT


	)

	@test/os161/user/include/sys/wait.h

31 
	~<uni°d.h
>

	@test/os161/user/include/time.h

31 
	~<uni°d.h
>

	@test/os161/user/include/types/size_t.h

30 #i‚de‡
_TYPES_SIZE_T_H_


31 
	#_TYPES_SIZE_T_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
__size_t
 
	tsize_t
;

	@test/os161/user/include/unistd.h

30 #i‚de‡
_UNISTD_H_


31 
	#_UNISTD_H_


	)

33 
	~<sys/ty≥s.h
>

40 
	~<kîn/f˙é.h
>

41 
	~<kîn/io˘l.h
>

42 
	~<kîn/ªboŸ.h
>

43 
	~<kîn/£ek.h
>

44 
	~<kîn/time.h
>

45 
	~<kîn/uni°d.h
>

46 
	~<kîn/waô.h
>

110 #ifde‡
__GNUC__


112 
	#__DEAD
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

114 
	#__DEAD


	)

118 
__DEAD
 
_exô
(
code
);

119 
execv
(c⁄° *
¥og
, *c⁄° *
¨gs
);

120 
pid_t
 
f‹k
();

121 
waôpid
(
pid_t
 
pid
, *
ªtu∫code
, 
Êags
);

127 
›í
(c⁄° *
fûíame
, 
Êags
, ...);

128 
ªad
(
fûeh™dÀ
, *
buf
, 
size_t
 
size
);

129 
wrôe
(
fûeh™dÀ
, c⁄° *
buf
, 
size_t
 
size
);

130 
˛o£
(
fûeh™dÀ
);

131 
ªboŸ
(
code
);

132 
sync
();

134 
rmdú
(c⁄° *
dú«me
);

137 
gëpid
();

138 
io˘l
(
fûeh™dÀ
, 
code
, *
buf
);

139 
off_t
 
l£ek
(
fûeh™dÀ
, off_à
pos
, 
code
);

140 
fsync
(
fûeh™dÀ
);

141 
·runˇã
(
fûeh™dÀ
, 
off_t
 
size
);

142 
ªmove
(c⁄° *
fûíame
);

143 
ª«me
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
);

144 
lök
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
);

146 
chdú
(c⁄° *
∑th
);

149 *
sbrk
(
ch™ge
);

150 
gëdúíåy
(
fûeh™dÀ
, *
buf
, 
size_t
 
buÊí
);

151 
symlök
(c⁄° *
èrgë
, c⁄° *
lök«me
);

152 
ªadlök
(c⁄° *
∑th
, *
buf
, 
size_t
 
buÊí
);

153 
dup2
(
fûeh™dÀ
, 
√wh™dÀ
);

154 
pùe
(
fûeh™dÀs
[2]);

155 
time_t
 
__time
—ime_à*
£c⁄ds
, *
«no£c⁄ds
);

156 
__gëcwd
(*
buf
, 
size_t
 
buÊí
);

164 *
gëcwd
(*
buf
, 
size_t
 
buÊí
);

165 
time_t
 
time
—ime_à*
£c⁄ds
);

	@test/os161/user/lib/hostcompat/err.c

34 
	~<uni°d.h
>

35 
	~<°dio.h
>

36 
	~<î∫o.h
>

37 
	~<°rög.h
>

39 
	~"ho°-îr.h
"

41 #ifde‡
NEED_ERR


46 c⁄° *
ho°com∑t_¥og«me
;

53 
	$ho°com∑t_¥öãº
(
u£_î∫o
, c⁄° *
fmt
, 
va_li°
 
≠
)

55 c⁄° *
îrmsg
;

62 
îrmsg
 = 
	`°ªº‹
(
î∫o
);

71 i‡(
ho°com∑t_¥og«me
 !
NULL
) {

72 
	`Ârötf
(
°dîr
, "%s: ", 
ho°com∑t_¥og«me
);

75 
	`Ârötf
(
°dîr
, "libhostcompat: hostcompat_initÇot called\n");

76 
	`Ârötf
(
°dîr
, "libhostcompat-program: ");

80 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

82 i‡(
u£_î∫o
) {

84 
	`Ârötf
(
°dîr
, ": %s\n", 
îrmsg
);

88 
	`Ârötf
(
°dîr
, "\n");

90 
	}
}

98 
	$vw¨n
(c⁄° *
fmt
, 
va_li°
 
≠
)

100 
	`ho°com∑t_¥öãº
(1, 
fmt
, 
≠
);

101 
	}
}

105 
	$vw¨nx
(c⁄° *
fmt
, 
va_li°
 
≠
)

107 
	`ho°com∑t_¥öãº
(0, 
fmt
, 
≠
);

108 
	}
}

112 
	$vîr
(
exôcode
, c⁄° *
fmt
, 
va_li°
 
≠
)

114 
	`ho°com∑t_¥öãº
(1, 
fmt
, 
≠
);

115 
	`exô
(
exôcode
);

116 
	}
}

120 
	$vîrx
(
exôcode
, c⁄° *
fmt
, 
va_li°
 
≠
)

122 
	`ho°com∑t_¥öãº
(0, 
fmt
, 
≠
);

123 
	`exô
(
exôcode
);

124 
	}
}

132 
	$w¨n
(c⁄° *
fmt
, ...)

134 
va_li°
 
≠
;

135 
	`va_°¨t
(
≠
, 
fmt
);

136 
	`vw¨n
(
fmt
, 
≠
);

137 
	`va_íd
(
≠
);

138 
	}
}

141 
	$w¨nx
(c⁄° *
fmt
, ...)

143 
va_li°
 
≠
;

144 
	`va_°¨t
(
≠
, 
fmt
);

145 
	`vw¨nx
(
fmt
, 
≠
);

146 
	`va_íd
(
≠
);

147 
	}
}

150 
	$îr
(
exôcode
, c⁄° *
fmt
, ...)

152 
va_li°
 
≠
;

153 
	`va_°¨t
(
≠
, 
fmt
);

154 
	`vîr
(
exôcode
, 
fmt
, 
≠
);

155 
	`va_íd
(
≠
);

156 
	}
}

159 
	$îrx
(
exôcode
, c⁄° *
fmt
, ...)

161 
va_li°
 
≠
;

162 
	`va_°¨t
(
≠
, 
fmt
);

163 
	`vîrx
(
exôcode
, 
fmt
, 
≠
);

164 
	`va_íd
(
≠
);

165 
	}
}

	@test/os161/user/lib/hostcompat/host-err.h

31 #i‚de‡
HOSTCOMPAT_ERR_H


32 
	#HOSTCOMPAT_ERR_H


	)

34 
	~<°d¨g.h
>

48 
w¨n
(c⁄° *
fmt
, ...);

49 
w¨nx
(c⁄° *
fmt
, ...);

50 
îr
(
exôcode
, c⁄° *
fmt
, ...);

51 
îrx
(
exôcode
, c⁄° *
fmt
, ...);

53 
vw¨n
(c⁄° *
fmt
, 
va_li°
);

54 
vw¨nx
(c⁄° *
fmt
, 
va_li°
);

55 
vîr
(
exôcode
, c⁄° *
fmt
, 
va_li°
);

56 
vîrx
(
exôcode
, c⁄° *
fmt
, 
va_li°
);

	@test/os161/user/lib/hostcompat/hostcompat.c

30 
	~<uni°d.h
>

31 
	~<ãrmios.h
>

32 
	~<sig«l.h
>

33 
	~<°dlib.h
>

34 
	~<°dio.h
>

36 
	~"ho°com∑t.h
"

42 c⁄° *
	gho°com∑t_¥og«me
 = 
NULL
;

48 
ãrmios
 
	gho°com∑t_ru¡ios
;

49 
ãrmios
 
	gho°com∑t_ßvëios
;

56 
	$ho°com∑t_âyª£t
()

58 
	`tc£èâr
(
STDIN_FILENO
, 
TCSADRAIN
, &
ho°com∑t_ßvëios
);

59 
	}
}

66 
	$ho°com∑t_âyªsume
()

68 
	`tc£èâr
(
STDIN_FILENO
, 
TCSADRAIN
, &
ho°com∑t_ru¡ios
);

69 
	}
}

76 
	$ho°com∑t_ây£tup
()

78 
ãrmios
 
tios
;

81 i‡(
	`tcgë©å
(
STDIN_FILENO
, &
tios
) < 0) {

86 
ho°com∑t_ßvëios
 = 
tios
;

89 
tios
.
c_lÊag
 &~
ICANON
;

95 
tios
.
c_cc
[
VMIN
] = 1;

98 
tios
.
c_cc
[
VTIME
] = 0;

101 
tios
.
c_lÊag
 &~(
ECHO
|
ECHONL
|
ECHOCTL
);

104 
tios
.
c_iÊag
 &~(
IXON
|
IXOFF
);

107 
tios
.
c_iÊag
 &~(
INLCR
|
IGNCR
|
ICRNL
);

110 #ifde‡
OCRNL


111 
tios
.
c_oÊag
 &~(
OCRNL
);

113 
tios
.
c_oÊag
 |
OPOST
|
ONLCR
;

116 
tios
.
c_lÊag
 |
ISIG
;

119 
ho°com∑t_ru¡ios
 = 
tios
;

120 
	`tc£èâr
(
STDIN_FILENO
, 
TCSADRAIN
, &
tios
);

123 
	}
}

130 
	$ho°com∑t_dõ
(
sig
)

133 
	`ho°com∑t_âyª£t
();

136 
	`sig«l
(
sig
, 
SIG_DFL
);

139 
	`kûl
(
	`gëpid
(), 
sig
);

142 
	`_exô
(255);

143 
	}
}

150 
	$ho°com∑t_°›
(
sig
)

153 
	`ho°com∑t_âyª£t
();

156 
	`sig«l
(
sig
, 
SIG_DFL
);

159 
	`kûl
(
	`gëpid
(), 
sig
);

160 
	}
}

167 
	$ho°com∑t_c⁄t
(
sig
)

169 ()
sig
;

172 
	`ho°com∑t_âyªsume
();

178 
	`sig«l
(
SIGTTIN
, 
ho°com∑t_°›
);

179 
	`sig«l
(
SIGTTOU
, 
ho°com∑t_°›
);

180 
	`sig«l
(
SIGTSTP
, 
ho°com∑t_°›
);

181 
	`sig«l
(
SIGCONT
, 
ho°com∑t_c⁄t
);

182 
	}
}

188 
	$ho°com∑t_öô
(
¨gc
, *
¨gv
[])

191 i‡(
¨gc
 > 0 && 
¨gv
[0] !
NULL
) {

192 
ho°com∑t_¥og«me
 = 
¨gv
[0];

196 i‡(
	`ho°com∑t_ây£tup
() < 0) {

201 
	`©exô
(
ho°com∑t_âyª£t
);

204 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

205 
	`£tvbuf
(
°dîr
, 
NULL
, 
_IONBF
, 0);

208 
	`sig«l
(
SIGHUP
, 
ho°com∑t_dõ
);

209 
	`sig«l
(
SIGINT
, 
ho°com∑t_dõ
);

210 
	`sig«l
(
SIGQUIT
, 
ho°com∑t_dõ
);

211 
	`sig«l
(
SIGILL
, 
ho°com∑t_dõ
);

212 
	`sig«l
(
SIGTRAP
, 
ho°com∑t_dõ
);

213 
	`sig«l
(
SIGABRT
, 
ho°com∑t_dõ
);

214 #ifde‡
SIGEMT


215 
	`sig«l
(
SIGEMT
, 
ho°com∑t_dõ
);

217 
	`sig«l
(
SIGFPE
, 
ho°com∑t_dõ
);

218 
	`sig«l
(
SIGBUS
, 
ho°com∑t_dõ
);

219 
	`sig«l
(
SIGSEGV
, 
ho°com∑t_dõ
);

220 
	`sig«l
(
SIGSYS
, 
ho°com∑t_dõ
);

221 
	`sig«l
(
SIGPIPE
, 
ho°com∑t_dõ
);

222 
	`sig«l
(
SIGALRM
, 
ho°com∑t_dõ
);

223 
	`sig«l
(
SIGTERM
, 
ho°com∑t_dõ
);

224 
	`sig«l
(
SIGXCPU
, 
ho°com∑t_dõ
);

225 
	`sig«l
(
SIGXFSZ
, 
ho°com∑t_dõ
);

226 
	`sig«l
(
SIGVTALRM
, 
ho°com∑t_dõ
);

227 
	`sig«l
(
SIGPROF
, 
ho°com∑t_dõ
);

228 
	`sig«l
(
SIGUSR1
, 
ho°com∑t_dõ
);

229 
	`sig«l
(
SIGUSR2
, 
ho°com∑t_dõ
);

232 
	`sig«l
(
SIGTTIN
, 
ho°com∑t_°›
);

233 
	`sig«l
(
SIGTTOU
, 
ho°com∑t_°›
);

234 
	`sig«l
(
SIGTSTP
, 
ho°com∑t_°›
);

237 
	`sig«l
(
SIGCONT
, 
ho°com∑t_c⁄t
);

238 
	}
}

	@test/os161/user/lib/hostcompat/hostcompat.h

31 
	~<sys/ty≥s.h
>

33 
ho°com∑t_öô
(
¨gc
, **
¨gv
);

35 
time_t
 
__time
—ime_à*
£cs
, *
n£cs
);

	@test/os161/user/lib/hostcompat/time.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/time.h
>

36 
	~<°rög.h
>

38 
	~"ho°com∑t.h
"

40 
time_t


41 
	$__time
(
time_t
 *
£cs
, *
n£cs
)

43 
timevÆ
 
tv
;

44 i‡(
	`gëtimeofday
(&
tv
, 
NULL
) < 0) {

47 i‡(
£cs
) {

48 *
£cs
 = 
tv
.
tv_£c
;

50 i‡(
n£cs
) {

51 *
n£cs
 = 
tv
.
tv_u£c
 * 1000;

53  
tv
.
tv_£c
;

54 
	}
}

	@test/os161/user/lib/libc/stdio/__puts.c

30 
	~<°dio.h
>

40 
	$__puts
(c⁄° *
°r
)

42 
cou¡
=0;

43 *
°r
) {

44 
	`putch¨
(*
°r
);

45 
°r
++;

46 
cou¡
++;

48  
cou¡
;

49 
	}
}

	@test/os161/user/lib/libc/stdio/getchar.c

30 
	~<°dio.h
>

31 
	~<uni°d.h
>

39 
	$gëch¨
()

41 
ch
;

42 
Àn
;

44 
Àn
 = 
	`ªad
(
STDIN_FILENO
, &
ch
, 1);

45 i‡(
Àn
<=0) {

47  
EOF
;

55  ()()
ch
;

56 
	}
}

	@test/os161/user/lib/libc/stdio/printf.c

30 
	~<°dio.h
>

31 
	~<°d¨g.h
>

43 
	$__¥ötf_£nd
(*
myd©a
, c⁄° *
d©a
, 
size_t
 
Àn
)

45 
i
;

46 ()
myd©a
;

48 
i
=0; i<
Àn
; i++) {

49 
	`putch¨
(
d©a
[
i
]);

51 
	}
}

55 
	$¥ötf
(c⁄° *
fmt
, ...)

57 
ch¨s
;

58 
va_li°
 
≠
;

59 
	`va_°¨t
(
≠
, 
fmt
);

60 
ch¨s
 = 
	`v¥ötf
(
fmt
, 
≠
);

61 
	`va_íd
(
≠
);

62  
ch¨s
;

63 
	}
}

67 
	$v¥ötf
(c⁄° *
fmt
, 
va_li°
 
≠
)

69  
	`__v¥ötf
(
__¥ötf_£nd
, 
NULL
, 
fmt
, 
≠
);

70 
	}
}

	@test/os161/user/lib/libc/stdio/putchar.c

30 
	~<°dio.h
>

31 
	~<uni°d.h
>

41 
	$putch¨
(
ch
)

43 
c
 = 
ch
;

44 
Àn
;

45 
Àn
 = 
	`wrôe
(
STDOUT_FILENO
, &
c
, 1);

46 i‡(
Àn
<=0) {

47  
EOF
;

49  
ch
;

50 
	}
}

	@test/os161/user/lib/libc/stdio/puts.c

30 
	~<°dio.h
>

37 
	$puts
(c⁄° *
s
)

39 
	`__puts
(
s
);

40 
	`putch¨
('\n');

42 
	}
}

	@test/os161/user/lib/libc/stdlib/abort.c

30 
	~<°dlib.h
>

31 
	~<uni°d.h
>

42 
	$ab‹t
()

44 
	`_exô
(255);

45 
	}
}

	@test/os161/user/lib/libc/stdlib/exit.c

30 
	~<°dlib.h
>

31 
	~<uni°d.h
>

38 
	$exô
(
code
)

45 
	`_exô
(
code
);

46 
	}
}

73 
__exô_hack
();

76 
	$__exô_hack
()

78 vﬁ©ûê
bœh
 = 1;

79 
bœh
) {}

80 
	}
}

	@test/os161/user/lib/libc/stdlib/malloc.c

39 
	~<°dlib.h
>

40 
	~<uni°d.h
>

41 
	~<îr.h
>

42 
	~<°döt.h
>

44 #unde‡
MALLOCDEBUG


46 #i‡
deföed
(
__mùs__
Ë|| deföed(
__i386__
)

47 
	#MALLOC32


	)

48 #ñi‡
deföed
(
__Æpha__
)

49 
	#MALLOC64


	)

70 
	smhódî
 {

72 #i‡
deföed
(
MALLOC32
)

73 
	#MBLOCKSIZE
 8

	)

74 
	#MBLOCKSHIFT
 3

	)

75 
	#MMAGIC
 2

	)

80 
	mmh_¥evblock
:29;

81 
	mmh_∑d
:1;

82 
	mmh_magic1
:2;

84 
	mmh_√xtblock
:29;

85 
	mmh_öu£
:1;

86 
	mmh_magic2
:2;

88 #ñi‡
deföed
(
MALLOC64
)

89 
	#MBLOCKSIZE
 16

	)

90 
	#MBLOCKSHIFT
 4

	)

91 
	#MMAGIC
 6

	)

96 
	mmh_¥evblock
:62;

97 
	mmh_∑d
:1;

98 
	mmh_magic1
:3;

100 
	mmh_√xtblock
:62;

101 
	mmh_öu£
:1;

102 
	mmh_magic2
:3;

124 
	#M_NEXTOFF
(
mh
Ë((
size_t
)(((size_t)((mh)->
mh_√xtblock
))<<
MBLOCKSHIFT
))

	)

125 
	#M_PREVOFF
(
mh
Ë((
size_t
)(((size_t)((mh)->
mh_¥evblock
))<<
MBLOCKSHIFT
))

	)

126 
	#M_NEXT
(
mh
Ë((
mhódî
 *)(((*)(mh))+
	`M_NEXTOFF
(mh)))

	)

127 
	#M_PREV
(
mh
Ë((
mhódî
 *)(((*)(mh))-
	`M_PREVOFF
(mh)))

	)

129 
	#M_DATA
(
mh
Ë((*)((mh)+1))

	)

130 
	#M_SIZE
(
mh
Ë(
	`M_NEXTOFF
(mh)-
MBLOCKSIZE
)

	)

132 
	#M_OK
(
mh
Ë((mh)->
mh_magic1
==
MMAGIC
 && (mh)->
mh_magic2
==MMAGIC)

	)

134 
	#M_MKFIELD
(
off
Ë((off)>>
MBLOCKSHIFT
)

	)

141 
uöçå_t
 
	g__hópba£
, 
	g__hó±›
;

148 
	$__mÆloc_öô
()

150 *
x
;

155 i‡((
mhódî
Ë!
MBLOCKSIZE
) {

156 
	`îrx
(1, "malloc: InternalÉrror - MBLOCKSIZE wrong");

158 i‡((
MBLOCKSIZE
 & (MBLOCKSIZE-1))!=0) {

159 
	`îrx
(1, "malloc: InternalÉrror - MBLOCKSIZEÇotÖower of 2");

161 i‡(1<<
MBLOCKSHIFT
 !
MBLOCKSIZE
) {

162 
	`îrx
(1, "malloc: InternalÉrror - MBLOCKSHIFT wrong");

166 i‡(
__hópba£
!=0 || 
__hó±›
!=0) {

167 
	`îrx
(1, "malloc: InternalÉrror - bad init call");

171 
x
 = 
	`sbrk
(0);

172 i‡(
x
==(*)-1) {

173 
	`îr
(1, "malloc: initial sbrk failed");

175 i‡(
x
==(*) 0) {

176 
	`îrx
(1, "malloc: InternalÉrror - heap beganát 0");

178 
__hópba£
 = 
__hó±›
 = (
uöçå_t
)
x
;

187 i‡(
__hópba£
 % 
MBLOCKSIZE
 != 0) {

188 
size_t
 
adju°
 = 
MBLOCKSIZE
 - (
__hópba£
 % MBLOCKSIZE);

189 
x
 = 
	`sbrk
(
adju°
);

190 i‡(
x
==(*)-1) {

191 
	`îr
(1, "malloc: sbrk failedáligning heap base");

193 i‡((
uöçå_t
)
x
 !
__hópba£
) {

194 
	`îr
(1, "malloc: heap base moved during init");

196 #ifde‡
MALLOCDEBUG


197 
	`w¨nx
("malloc:ádjusted heap base upwards by %lu bytes",

198 (Ë
adju°
);

200 
__hópba£
 +
adju°
;

201 
__hó±›
 = 
__hópba£
;

203 
	}
}

207 #ifde‡
MALLOCDEBUG


214 
	$__mÆloc_dump
()

216 
mhódî
 *
mh
;

217 
uöçå_t
 
i
;

218 
size_t
 
righçªvblock
;

220 
	`w¨nx
("heap: ************************************************");

222 
righçªvblock
 = 0;

223 
i
=
__hópba£
; i<
__hó±›
; i +
	`M_NEXTOFF
(
mh
)) {

224 
mh
 = (
mhódî
 *Ë
i
;

225 i‡(!
	`M_OK
(
mh
)) {

226 
	`îrx
(1, "malloc: Heap corrupt; headerát 0x%lx"

228 (Ë
i
);

230 i‡(
mh
->
mh_¥evblock
 !
righçªvblock
) {

231 
	`îrx
(1, "malloc: Heap corrupt; headerát 0x%lx"

234 (Ë
i
,

235 (Ë
mh
->
mh_¥evblock
 << 
MBLOCKSHIFT
,

236 (Ë
righçªvblock
 << 
MBLOCKSHIFT
);

238 
righçªvblock
 = 
mh
->
mh_√xtblock
;

240 
	`w¨nx
("heap: 0x%lx 0x%-6lx (next: 0x%lx) %s",

241 (Ë
i
 + 
MBLOCKSIZE
,

242 (Ë
	`M_SIZE
(
mh
),

243 (Ë(
i
+
	`M_NEXTOFF
(
mh
)),

244 
mh
->
mh_öu£
 ? "INUSE" : "FREE");

246 i‡(
i
!=
__hó±›
) {

247 
	`îrx
(1, "malloc: Heap corrupt;Ñan offÉnd");

250 
	`w¨nx
("heap: ************************************************");

251 
	}
}

263 
	$__mÆloc_sbrk
(
size_t
 
size
)

265 *
x
;

267 
x
 = 
	`sbrk
(
size
);

268 i‡(
x
 == (*)-1) {

269  
NULL
;

272 i‡((
uöçå_t
)
x
 !
__hó±›
) {

273 
	`îrx
(1, "malloc: InternalÉrror - "

275 (Ë
__hó±›
,

276 (Ë(
uöçå_t
Ë
x
);

278 
__hó±›
 +
size
;

279  
x
;

280 
	}
}

292 
	$__mÆloc_•lô
(
mhódî
 *
mh
, 
size_t
 
size
)

294 
mhódî
 *
mh√xt
, *
mh√w
;

295 
size_t
 
ﬁdsize
;

297 i‡(
size
 % 
MBLOCKSIZE
 != 0) {

298 
	`îrx
(1, "malloc: InternalÉrror (size %luÖassedÅo split)",

299 (Ë
size
);

302 i‡(
	`M_SIZE
(
mh
Ë- 
size
 < 2*
MBLOCKSIZE
) {

307 
mh√xt
 = 
	`M_NEXT
(
mh
);

309 
ﬁdsize
 = 
	`M_SIZE
(
mh
);

310 
mh
->
mh_√xtblock
 = 
	`M_MKFIELD
(
size
 + 
MBLOCKSIZE
);

312 
mh√w
 = 
	`M_NEXT
(
mh
);

313 i‡(
mh√w
==
mh√xt
) {

314 
	`îrx
(1, "malloc: InternalÉrror (split screwed up?)");

317 
mh√w
->
mh_¥evblock
 = 
	`M_MKFIELD
(
size
 + 
MBLOCKSIZE
);

318 
mh√w
->
mh_∑d
 = 0;

319 
mh√w
->
mh_magic1
 = 
MMAGIC
;

320 
mh√w
->
mh_√xtblock
 = 
	`M_MKFIELD
(
ﬁdsize
 - 
size
);

321 
mh√w
->
mh_öu£
 = 0;

322 
mh√w
->
mh_magic2
 = 
MMAGIC
;

324 i‡(
mh√xt
 !(
mhódî
 *Ë
__hó±›
) {

325 
mh√xt
->
mh_¥evblock
 = 
mh√w
->
mh_√xtblock
;

327 
	}
}

333 
	$mÆloc
(
size_t
 
size
)

335 
mhódî
 *
mh
;

336 
uöçå_t
 
i
;

337 
size_t
 
righçªvblock
;

339 i‡(
__hópba£
==0) {

340 
	`__mÆloc_öô
();

342 i‡(
__hópba£
==0 || 
__hó±›
==0 || __heapbase > __heaptop) {

343 
	`w¨nx
("malloc: InternalÉrror -Üocal data corrupt");

344 
	`îrx
(1, "malloc: heapbase 0x%lx; heaptop 0x%lx",

345 (Ë
__hópba£
, (Ë
__hó±›
);

348 #ifde‡
MALLOCDEBUG


349 
	`w¨nx
("malloc:áboutÅoállocate %lu (0x%lx) bytes",

350 (Ë
size
, () size);

351 
	`__mÆloc_dump
();

355 
size
 = ((sizê+ 
MBLOCKSIZE
 - 1Ë& ~(
size_t
)(MBLOCKSIZE-1));

361 
righçªvblock
 = 0;

362 
i
=
__hópba£
; i<
__hó±›
; i +
	`M_NEXTOFF
(
mh
)) {

363 
mh
 = (
mhódî
 *Ë
i
;

364 i‡(!
	`M_OK
(
mh
)) {

365 
	`îrx
(1, "malloc: Heap corrupt; headerát 0x%lx"

367 (Ë
i
);

369 i‡(
mh
->
mh_¥evblock
 !
righçªvblock
) {

370 
	`îrx
(1, "malloc: Heap corrupt; headerát 0x%lx"

373 (Ë
i
,

374 (Ë
mh
->
mh_¥evblock
 << 
MBLOCKSHIFT
,

375 (Ë
righçªvblock
 << 
MBLOCKSHIFT
);

377 
righçªvblock
 = 
mh
->
mh_√xtblock
;

380 i‡(
mh
->
mh_öu£
) {

385 i‡(
	`M_SIZE
(
mh
Ë< 
size
) {

390 
	`__mÆloc_•lô
(
mh
, 
size
);

395 
mh
->
mh_öu£
 = 1;

397 #ifde‡
MALLOCDEBUG


398 
	`w¨nx
("mÆloc:áŒoˇtögáà%p", 
	`M_DATA
(
mh
));

399 
	`__mÆloc_dump
();

401  
	`M_DATA
(
mh
);

403 i‡(
i
!=
__hó±›
) {

404 
	`îrx
(1, "malloc: Heap corrupt;Ñan offÉnd");

411 
mh
 = 
	`__mÆloc_sbrk
(
size
 + 
MBLOCKSIZE
);

412 i‡(
mh
 =
NULL
) {

413  
NULL
;

416 
mh
->
mh_¥evblock
 = 
righçªvblock
;

417 
mh
->
mh_magic1
 = 
MMAGIC
;

418 
mh
->
mh_magic2
 = 
MMAGIC
;

419 
mh
->
mh_∑d
 = 0;

420 
mh
->
mh_öu£
 = 1;

421 
mh
->
mh_√xtblock
 = 
	`M_MKFIELD
(
size
 + 
MBLOCKSIZE
);

423 #ifde‡
MALLOCDEBUG


424 
	`w¨nx
("mÆloc:áŒoˇtögáà%p", 
	`M_DATA
(
mh
));

425 
	`__mÆloc_dump
();

427  
	`M_DATA
(
mh
);

428 
	}
}

438 
	$__mÆloc_dódbìf
(*
±r
, 
size_t
 
size
)

440 
uöt32_t
 *
x
 = 
±r
;

441 
size_t
 
i
, 
n
 = 
size
/(
uöt32_t
);

442 
i
=0; i<
n
; i++) {

443 
x
[
i
] = 0xdeadbeef;

445 
	}
}

452 
	$__mÆloc_åymîge
(
mhódî
 *
mh
, mhódî *
mh√xt
)

454 
mhódî
 *
mh√xäext
;

456 i‡(
mh
->
mh_√xtblock
 !
mh√xt
->
mh_¥evblock
) {

457 
	`îrx
(1, "free: Heap corrupt (%pánd %p inconsistent)",

458 
mh
, 
mh√xt
);

460 i‡(
mh
->
mh_öu£
 || 
mh√xt
->mh_inuse) {

465 
mh√xäext
 = 
	`M_NEXT
(
mh√xt
);

467 
mh
->
mh_√xtblock
 = 
	`M_MKFIELD
(
MBLOCKSIZE
 + 
	`M_SIZE
(mh) +

468 
MBLOCKSIZE
 + 
	`M_SIZE
(
mh√xt
));

470 i‡(
mh√xäext
 !(
mhódî
 *)
__hó±›
) {

471 
mh√xäext
->
mh_¥evblock
 = 
mh
->
mh_√xtblock
;

475 
	`__mÆloc_dódbìf
(
mh√xt
, (
mhódî
));

476 
	}
}

482 
	$‰ì
(*
x
)

484 
mhódî
 *
mh
, *
mh√xt
, *
mh¥ev
;

486 i‡(
x
==
NULL
) {

492 i‡(
__hópba£
==0 || 
__hó±›
==0 || __heapbase > __heaptop) {

493 
	`w¨nx
("free: InternalÉrror -Üocal data corrupt");

494 
	`îrx
(1, "free: heapbase 0x%lx; heaptop 0x%lx",

495 (Ë
__hópba£
, (Ë
__hó±›
);

499 i‡((
uöçå_t
)
x
 < 
__hópba£
 || (uöçå_t)x >
__hó±›
) {

500 
	`îrx
(1, "‰ì: InvÆidÖoöã∏%∞‰ìd (ouào‡ønge)", 
x
);

503 #ifde‡
MALLOCDEBUG


504 
	`w¨nx
("‰ì:ábouàtÿ‰ì %p", 
x
);

505 
	`__mÆloc_dump
();

508 
mh
 = ((
mhódî
 *)
x
)-1;

509 i‡(!
	`M_OK
(
mh
)) {

510 
	`îrx
(1, "‰ì: InvÆidÖoöã∏%∞‰ìd (c‹ru± hódî)", 
x
);

513 i‡(!
mh
->
mh_öu£
) {

514 
	`îrx
(1, "‰ì: InvÆidÖoöã∏%∞‰ìd (Æªady fªe)", 
x
);

518 
mh
->
mh_öu£
 = 0;

521 
	`__mÆloc_dódbìf
(
	`M_DATA
(
mh
), 
	`M_SIZE
(mh));

524 
mh√xt
 = 
	`M_NEXT
(
mh
);

525 i‡(
mh√xt
 !(
mhódî
 *)
__hó±›
) {

526 
	`__mÆloc_åymîge
(
mh
, 
mh√xt
);

530 i‡(
mh
 !(
mhódî
 *)
__hópba£
) {

531 
mh¥ev
 = 
	`M_PREV
(
mh
);

532 
	`__mÆloc_åymîge
(
mh¥ev
, 
mh
);

535 #ifde‡
MALLOCDEBUG


536 
	`w¨nx
("‰ì: fªed %p", 
x
);

537 
	`__mÆloc_dump
();

539 
	}
}

	@test/os161/user/lib/libc/stdlib/random.c

41 
	~<as£π.h
>

42 
	~<î∫o.h
>

43 
	~<°dlib.h
>

49 
	#LOCKME
()

	)

50 
	#UNLOCKME
()

	)

52 
§™dom_u∆ocked
();

53 
øndom_u∆ocked
();

122 
	#TYPE_0
 0

	)

123 
	#BREAK_0
 8

	)

124 
	#DEG_0
 0

	)

125 
	#SEP_0
 0

	)

127 
	#TYPE_1
 1

	)

128 
	#BREAK_1
 32

	)

129 
	#DEG_1
 7

	)

130 
	#SEP_1
 3

	)

132 
	#TYPE_2
 2

	)

133 
	#BREAK_2
 64

	)

134 
	#DEG_2
 15

	)

135 
	#SEP_2
 1

	)

137 
	#TYPE_3
 3

	)

138 
	#BREAK_3
 128

	)

139 
	#DEG_3
 31

	)

140 
	#SEP_3
 3

	)

142 
	#TYPE_4
 4

	)

143 
	#BREAK_4
 256

	)

144 
	#DEG_4
 63

	)

145 
	#SEP_4
 1

	)

151 
	#MAX_TYPES
 5

	)

153 c⁄° 
	gdegªes
[
MAX_TYPES
] = { 
DEG_0
, 
DEG_1
, 
DEG_2
, 
DEG_3
, 
DEG_4
 };

154 c⁄° 
	g£ps
[
MAX_TYPES
] = { 
SEP_0
, 
SEP_1
, 
SEP_2
, 
SEP_3
, 
SEP_4
 };

170 
	gøndtbl
[
DEG_3
 + 1] = {

171 
TYPE_3
,

199 *
	gÂå
 = &
øndtbl
[
SEP_3
 + 1];

200 *
	gΩå
 = &
øndtbl
[1];

212 *
	g°©e
 = &
øndtbl
[1];

213 
	gønd_ty≥
 = 
TYPE_3
;

214 
	gønd_deg
 = 
DEG_3
;

215 
	gønd_£p
 = 
SEP_3
;

216 *
	gíd_±r
 = &
øndtbl
[
DEG_3
 + 1];

232 
	$§™dom_u∆ocked
(
x
)

234 
i
;

236 i‡(
ønd_ty≥
 =
TYPE_0
)

237 
°©e
[0] = 
x
;

239 
°©e
[0] = 
x
;

240 
i
 = 1; i < 
ønd_deg
; i++)

241 
°©e
[
i
] = 1103515245L * state[i - 1] + 12345L;

242 
Âå
 = &
°©e
[
ønd_£p
];

243 
Ωå
 = &
°©e
[0];

244 
i
 = 0; i < 10 * 
ønd_deg
; i++)

245 ()
	`øndom_u∆ocked
();

247 
	}
}

250 
	$§™dom
(
x
)

253 
	`LOCKME
();

254 
	`§™dom_u∆ocked
(
x
);

255 
	`UNLOCKME
();

256 
	}
}

282 
	$öô°©e
(

283 
£ed
,

284 *
¨g_°©e
,

285 
size_t
 
n
)

287 *
o°©e
 = (*)(&
°©e
[-1]);

288 *
l⁄g_¨g_°©e
;

290 
	`as£π
(
¨g_°©e
 !
NULL
);

292 
l⁄g_¨g_°©e
 = (*)(*)
¨g_°©e
;

294 
	`LOCKME
();

295 i‡(
ønd_ty≥
 =
TYPE_0
)

296 
°©e
[-1] = 
ønd_ty≥
;

298 
°©e
[-1] = 
MAX_TYPES
 * (
Ωå
 - sèãË+ 
ønd_ty≥
;

299 i‡(
n
 < 
BREAK_0
) {

300 
	`UNLOCKME
();

301  (
NULL
);

302 } i‡(
n
 < 
BREAK_1
) {

303 
ønd_ty≥
 = 
TYPE_0
;

304 
ønd_deg
 = 
DEG_0
;

305 
ønd_£p
 = 
SEP_0
;

306 } i‡(
n
 < 
BREAK_2
) {

307 
ønd_ty≥
 = 
TYPE_1
;

308 
ønd_deg
 = 
DEG_1
;

309 
ønd_£p
 = 
SEP_1
;

310 } i‡(
n
 < 
BREAK_3
) {

311 
ønd_ty≥
 = 
TYPE_2
;

312 
ønd_deg
 = 
DEG_2
;

313 
ønd_£p
 = 
SEP_2
;

314 } i‡(
n
 < 
BREAK_4
) {

315 
ønd_ty≥
 = 
TYPE_3
;

316 
ønd_deg
 = 
DEG_3
;

317 
ønd_£p
 = 
SEP_3
;

319 
ønd_ty≥
 = 
TYPE_4
;

320 
ønd_deg
 = 
DEG_4
;

321 
ønd_£p
 = 
SEP_4
;

323 
°©e
 = (*Ë(
l⁄g_¨g_°©e
 + 1);

324 
íd_±r
 = &
°©e
[
ønd_deg
];

325 
	`§™dom_u∆ocked
(
£ed
);

326 i‡(
ønd_ty≥
 =
TYPE_0
)

327 
l⁄g_¨g_°©e
[0] = 
ønd_ty≥
;

329 
l⁄g_¨g_°©e
[0] = 
MAX_TYPES
 * (
Ωå
 - 
°©e
Ë+ 
ønd_ty≥
;

330 
	`UNLOCKME
();

331 ((*)
o°©e
);

332 
	}
}

354 
	$£t°©e
(*
¨g_°©e
)

356 *
√w_°©e
;

357 
ty≥
;

358 
ª¨
;

359 *
o°©e
 = (*)(&
°©e
[-1]);

361 
	`as£π
(
¨g_°©e
 !
NULL
);

363 
√w_°©e
 = (*)(*)
¨g_°©e
;

364 
ty≥
 = ()(
√w_°©e
[0] % 
MAX_TYPES
);

365 
ª¨
 = ()(
√w_°©e
[0] / 
MAX_TYPES
);

367 
	`LOCKME
();

368 i‡(
ønd_ty≥
 =
TYPE_0
)

369 
°©e
[-1] = 
ønd_ty≥
;

371 
°©e
[-1] = 
MAX_TYPES
 * (
Ωå
 - sèãË+ 
ønd_ty≥
;

372 
ty≥
) {

373 
TYPE_0
:

374 
TYPE_1
:

375 
TYPE_2
:

376 
TYPE_3
:

377 
TYPE_4
:

378 
ønd_ty≥
 = 
ty≥
;

379 
ønd_deg
 = 
degªes
[
ty≥
];

380 
ønd_£p
 = 
£ps
[
ty≥
];

383 
	`UNLOCKME
();

384  (
NULL
);

386 
°©e
 = (*Ë(
√w_°©e
 + 1);

387 i‡(
ønd_ty≥
 !
TYPE_0
) {

388 
Ωå
 = &
°©e
[
ª¨
];

389 
Âå
 = &
°©e
[(
ª¨
 + 
ønd_£p
Ë% 
ønd_deg
];

391 
íd_±r
 = &
°©e
[
ønd_deg
];

392 
	`UNLOCKME
();

393 ((*)
o°©e
);

394 
	}
}

415 
	$øndom_u∆ocked
()

417 
i
;

418 *
f
, *
r
;

420 i‡(
ønd_ty≥
 =
TYPE_0
) {

421 
i
 = 
°©e
[0];

422 
°©e
[0] = 
i
 = (i * 1103515245L + 12345L) & 0x7fffffff;

427 
f
 = 
Âå
; 
r
 = 
Ωå
;

428 *
f
 +*
r
;

430 
i
 = (()*
f
 >> 1) & 0x7fffffff;

431 i‡(++
f
 >
íd_±r
) {

432 
f
 = 
°©e
;

433 ++
r
;

435 i‡(++
r
 >
íd_±r
) {

436 
r
 = 
°©e
;

439 
Âå
 = 
f
; 
Ωå
 = 
r
;

441 (
i
);

442 
	}
}

445 
	$øndom
()

447 
r
;

449 
	`LOCKME
();

450 
r
 = 
	`øndom_u∆ocked
();

451 
	`UNLOCKME
();

452  (
r
);

453 
	}
}

	@test/os161/user/lib/libc/stdlib/system.c

30 
	~<î∫o.h
>

31 
	~<°dlib.h
>

32 
	~<uni°d.h
>

33 
	~<°rög.h
>

41 
	#MAXCMDSIZE
 2048

	)

42 
	#MAXARGS
 128

	)

45 
	$sy°em
(c⁄° *
cmd
)

53 
tmp
[
MAXCMDSIZE
];

54 *
¨gv
[
MAXARGS
+1];

55 
«rgs
=0;

56 *
s
;

57 
pid
, 
°©us
;

59 i‡(
	`°æí
(
cmd
Ë>(
tmp
)) {

60 
î∫o
 = 
E2BIG
;

63 
	`°r˝y
(
tmp
, 
cmd
);

65 
s
 = 
	`°πok
(
tmp
, " \t"); s; s = såtok(
NULL
, " \t")) {

66 i‡(
«rgs
 < 
MAXARGS
) {

67 
¨gv
[
«rgs
++] = 
s
;

70 
î∫o
 = 
E2BIG
;

75 
¨gv
[
«rgs
] = 
NULL
;

77 
pid
 = 
	`f‹k
();

78 
pid
) {

83 
	`execv
(
¨gv
[0],árgv);

85 
	`_exô
(255);

88 
	`waôpid
(
pid
, &
°©us
, 0);

89  
°©us
;

91 
	}
}

	@test/os161/user/lib/libc/string/memcmp.c

30 
	~<°rög.h
>

38 
	$memcmp
(c⁄° *
av
, c⁄° *
bv
, 
size_t
 
Àn
)

40 c⁄° *
a
 = 
av
;

41 c⁄° *
b
 = 
bv
;

42 
size_t
 
i
;

44 
i
=0; i<
Àn
; i++) {

45 i‡(
a
[
i
] !
b
[i]) {

46  ()(
a
[
i
] - 
b
[i]);

50 
	}
}

	@test/os161/user/lib/libc/string/memset.c

30 
	~<°rög.h
>

37 
	$mem£t
(*
±r
, 
ch
, 
size_t
 
Àn
)

39 *
p
 = 
±r
;

40 
size_t
 
i
;

42 
i
=0; i<
Àn
; i++) {

43 
p
[
i
] = 
ch
;

46  
±r
;

47 
	}
}

	@test/os161/user/lib/libc/string/strerror.c

30 
	~<°rög.h
>

31 
	~<kîn/îrmsg.h
>

37 
	$°ªº‹
(
îrcode
)

39 i‡(
îrcode
>=0 &&Éºcodê< 
sys_√º
) {

40  
sys_îæi°
[
îrcode
];

43 
	}
}

	@test/os161/user/lib/libc/string/strtok.c

30 
	~<°rög.h
>

32 *
	g__°πok_c⁄ãxt
;

35 
	$°πok
(*
°r
, c⁄° *
£ps
)

37  
	`°πok_r
(
°r
, 
£ps
, &
__°πok_c⁄ãxt
);

38 
	}
}

	@test/os161/user/lib/libc/time/time.c

30 
	~<uni°d.h
>

38 
time_t


39 
	$time
(
time_t
 *
t
)

41  
	`__time
(
t
, 
NULL
);

42 
	}
}

	@test/os161/user/lib/libc/unix/__assert.c

30 
	~<as£π.h
>

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<uni°d.h
>

34 
	~<°rög.h
>

42 
	$__bad_as£π
(c⁄° *
fûe
, 
löe
, c⁄° *
ex¥
)

44 
buf
[256];

45 
	`¢¥ötf
(
buf
, (buf), "Assertion failed: %s (%sÜine %d)\n",

46 
ex¥
, 
fûe
, 
löe
);

48 
	`wrôe
(
STDERR_FILENO
, 
buf
, 
	`°æí
(buf));

49 
	`ab‹t
();

50 
	}
}

	@test/os161/user/lib/libc/unix/err.c

30 
	~<°dio.h
>

31 
	~<°d¨g.h
>

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

34 
	~<uni°d.h
>

35 
	~<îr.h
>

36 
	~<î∫o.h
>

45 **
__¨gv
;

52 
	$__£ndîr
(*
junk
, c⁄° *
d©a
, 
size_t
 
Àn
)

54 ()
junk
;

56 
	`wrôe
(
STDERR_FILENO
, 
d©a
, 
Àn
);

57 
	}
}

65 
	$__£ndîr°r
(c⁄° *
°r
)

67 
	`__£ndîr
(
NULL
, 
°r
, 
	`°æí
(str));

68 
	}
}

75 
	$__¥öãº
(
u£_î∫o
, c⁄° *
fmt
, 
va_li°
 
≠
)

77 c⁄° *
îrmsg
;

78 c⁄° *
¥og
;

85 
îrmsg
 = 
	`°ªº‹
(
î∫o
);

94 i‡(
__¨gv
!=
NULL
 && __argv[0]!=NULL) {

95 
¥og
 = 
__¨gv
[0];

98 
¥og
 = "(programÇame unknown)";

102 
	`__£ndîr°r
(
¥og
);

103 
	`__£ndîr°r
(": ");

106 
	`__v¥ötf
(
__£ndîr
, 
NULL
, 
fmt
, 
≠
);

109 i‡(
u£_î∫o
) {

110 
	`__£ndîr°r
(": ");

111 
	`__£ndîr°r
(
îrmsg
);

115 
	`__£ndîr°r
("\n");

116 
	}
}

124 
	$vw¨n
(c⁄° *
fmt
, 
va_li°
 
≠
)

126 
	`__¥öãº
(1, 
fmt
, 
≠
);

127 
	}
}

131 
	$vw¨nx
(c⁄° *
fmt
, 
va_li°
 
≠
)

133 
	`__¥öãº
(0, 
fmt
, 
≠
);

134 
	}
}

138 
	$vîr
(
exôcode
, c⁄° *
fmt
, 
va_li°
 
≠
)

140 
	`__¥öãº
(1, 
fmt
, 
≠
);

141 
	`exô
(
exôcode
);

142 
	}
}

146 
	$vîrx
(
exôcode
, c⁄° *
fmt
, 
va_li°
 
≠
)

148 
	`__¥öãº
(0, 
fmt
, 
≠
);

149 
	`exô
(
exôcode
);

150 
	}
}

158 
	$w¨n
(c⁄° *
fmt
, ...)

160 
va_li°
 
≠
;

161 
	`va_°¨t
(
≠
, 
fmt
);

162 
	`vw¨n
(
fmt
, 
≠
);

163 
	`va_íd
(
≠
);

164 
	}
}

167 
	$w¨nx
(c⁄° *
fmt
, ...)

169 
va_li°
 
≠
;

170 
	`va_°¨t
(
≠
, 
fmt
);

171 
	`vw¨nx
(
fmt
, 
≠
);

172 
	`va_íd
(
≠
);

173 
	}
}

176 
	$îr
(
exôcode
, c⁄° *
fmt
, ...)

178 
va_li°
 
≠
;

179 
	`va_°¨t
(
≠
, 
fmt
);

180 
	`vîr
(
exôcode
, 
fmt
, 
≠
);

181 
	`va_íd
(
≠
);

182 
	}
}

185 
	$îrx
(
exôcode
, c⁄° *
fmt
, ...)

187 
va_li°
 
≠
;

188 
	`va_°¨t
(
≠
, 
fmt
);

189 
	`vîrx
(
exôcode
, 
fmt
, 
≠
);

190 
	`va_íd
(
≠
);

191 
	}
}

	@test/os161/user/lib/libc/unix/errno.c

30 
	~<î∫o.h
>

41 **
	g__¨gv
;

43 
	gî∫o
;

	@test/os161/user/lib/libc/unix/getcwd.c

30 
	~<uni°d.h
>

31 
	~<î∫o.h
>

40 
	$gëcwd
(*
buf
, 
size_t
 
buÊí
)

42 
r
;

44 i‡(
buÊí
 < 1) {

45 
î∫o
 = 
EINVAL
;

46  
NULL
;

49 
r
 = 
	`__gëcwd
(
buf
, 
buÊí
-1);

50 i‡(
r
 < 0) {

51  
NULL
;

54 
buf
[
r
] = 0;

55  
buf
;

56 
	}
}

	@test/os161/user/my-testbin/example/example.c

4 
	~<uni°d.h
>

7 
	$maö
()

9 
	`ªboŸ
(
RB_POWEROFF
);

11 
	}
}

	@test/os161/user/sbin/dumpsfs/dumpsfs.c

30 
	~<sys/ty≥s.h
>

31 
	~<°döt.h
>

32 
	~<°rög.h
>

33 
	~<°dio.h
>

34 
	~<as£π.h
>

35 
	~<limôs.h
>

36 
	~<îr.h
>

38 
	~"suµ‹t.h
"

39 
	~"kîn/sfs.h
"

42 #ifde‡
HOST


44 
	~<√töë/ö.h
>

45 
	~<¨∑/öë.h
>

46 
	~"ho°com∑t.h
"

47 
	#SWAPL
(
x
Ë
	`¡ohl
(x)

	)

48 
	#SWAPS
(
x
Ë
	`¡ohs
(x)

	)

52 
	#SWAPL
(
x
Ë(x)

	)

53 
	#SWAPS
(
x
Ë(x)

	)

57 
	~"disk.h
"

60 
uöt32_t


61 
	$dumpsb
()

63 
sfs_su≥r
 
•
;

64 
	`diskªad
(&
•
, 
SFS_SB_LOCATION
);

65 i‡(
	`SWAPL
(
•
.
•_magic
Ë!
SFS_MAGIC
) {

66 
	`îrx
(1, "Notán sfs filesystem");

68 
•
.
•_vﬁ«me
[(sp.sp_volname)-1] = 0;

69 
	`¥ötf
("Vﬁumê«me: %-40† %u blocks\n", 
•
.
•_vﬁ«me
,

70 
	`SWAPL
(
•
.
•_nblocks
));

72  
	`SWAPL
(
•
.
•_nblocks
);

73 
	}
}

77 
	$dodúblock
(
uöt32_t
 
block
)

79 
sfs_dú
 
sds
[
SFS_BLOCKSIZE
/(sfs_dir)];

80 
nsds
 = 
SFS_BLOCKSIZE
/(
sfs_dú
);

81 
i
;

83 
	`diskªad
(&
sds
, 
block
);

85 
	`¥ötf
(" [block %u]\n", 
block
);

86 
i
=0; i<
nsds
; i++) {

87 
uöt32_t
 
öo
 = 
	`SWAPL
(
sds
[
i
].
sfd_öo
);

88 i‡(
öo
==
SFS_NOINO
) {

89 
	`¥ötf
(" [freeÉntry]\n");

92 
sds
[
i
].
sfd_«me
[
SFS_NAMELEN
-1] = 0;

93 
	`¥ötf
(" %u %s\n", 
öo
, 
sds
[
i
].
sfd_«me
);

96 
	}
}

100 
	$dumpdú
(
uöt32_t
 
öo
)

102 
sfs_öode
 
sfi
;

103 
uöt32_t
 
ib
[
SFS_DBPERIDB
];

104 
√¡rõs
, 
i
;

105 
uöt32_t
 
block
, 
nblocks
=0;

107 
	`diskªad
(&
sfi
, 
öo
);

109 
√¡rõs
 = 
	`SWAPL
(
sfi
.
sfi_size
Ë/ (
sfs_dú
);

110 i‡(
	`SWAPL
(
sfi
.
sfi_size
Ë% (
sfs_dú
) != 0) {

111 
	`w¨nx
("Warning: dir size isÇotá multiple of dirÉntry size");

113 
	`¥ötf
("Dúe˘‹y %u: %dÉ¡rõs\n", 
öo
, 
√¡rõs
);

115 
i
=0; i<
SFS_NDIRECT
; i++) {

116 
block
 = 
	`SWAPL
(
sfi
.
sfi_dúe˘
[
i
]);

117 i‡(
block
) {

118 
	`dodúblock
(
block
);

119 
nblocks
++;

122 i‡(
	`SWAPL
(
sfi
.
sfi_ödúe˘
)) {

123 
	`diskªad
(&
ib
, 
	`SWAPL
(
sfi
.
sfi_ödúe˘
));

124 
i
=0; i<
SFS_DBPERIDB
; i++) {

125 
block
 = 
	`SWAPL
(
ib
[
i
]);

126 i‡(
block
) {

127 
	`dodúblock
(
block
);

128 
nblocks
++;

132 
	`¥ötf
(" %u block†ö dúe˘‹y\n", 
nblocks
);

133 
	}
}

137 
	$dumpbôs
(
uöt32_t
 
fsblocks
)

139 
uöt32_t
 
nblocks
 = 
	`SFS_BITBLOCKS
(
fsblocks
);

140 
uöt32_t
 
i
, 
j
;

141 
d©a
[
SFS_BLOCKSIZE
];

143 
	`¥ötf
("Fªem≠: %u block†(%u %u %u)\n", 
nblocks
, 
	`SFS_BITMAPSIZE
(
fsblocks
), fsblocks, 
SFS_BLOCKBITS
);

145 
i
=0; i<
nblocks
; i++) {

146 
	`diskªad
(
d©a
, 
SFS_MAP_LOCATION
+
i
);

147 
j
=0; j<
SFS_BLOCKSIZE
; j++) {

148 
	`¥ötf
("%02x", ()
d©a
[
j
]);

149 i‡(
j
%32==31) {

150 
	`¥ötf
("\n");

154 
	`¥ötf
("\n");

155 
	}
}

158 
	$maö
(
¨gc
, **
¨gv
)

160 
uöt32_t
 
nblocks
;

162 #ifde‡
HOST


163 
	`ho°com∑t_öô
(
¨gc
, 
¨gv
);

166 i‡(
¨gc
!=2) {

167 
	`îrx
(1, "Usage: dumpsfs device/diskfile");

170 
	`›ídisk
(
¨gv
[1]);

171 
nblocks
 = 
	`dumpsb
();

172 
	`dumpbôs
(
nblocks
);

173 
	`dumpdú
(
SFS_ROOT_LOCATION
);

175 
	`˛o£disk
();

178 
	}
}

	@test/os161/user/sbin/halt/halt.c

30 
	~<uni°d.h
>

40 
	$maö
()

42 
	`ªboŸ
(
RB_HALT
);

44 
	}
}

	@test/os161/user/sbin/mksfs/disk.c

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<uni°d.h
>

33 
	~<as£π.h
>

34 
	~<°döt.h
>

35 
	~<°rög.h
>

36 
	~<î∫o.h
>

37 
	~<f˙é.h
>

38 
	~<îr.h
>

40 
	~"suµ‹t.h
"

41 
	~"disk.h
"

43 
	#HOSTSTRING
 "Sy°em/161 Disk Image"

	)

44 
	#BLOCKSIZE
 512

	)

46 #i‚de‡
EINTR


47 
	#EINTR
 0

	)

50 
	gfd
=-1;

51 
uöt32_t
 
	gnblocks
;

54 
	$›ídisk
(c⁄° *
∑th
)

56 
°©
 
°©buf
;

58 
	`as£π
(
fd
<0);

59 
fd
 = 
	`›í
(
∑th
, 
O_RDWR
);

60 i‡(
fd
<0) {

61 
	`îr
(1, "%s", 
∑th
);

63 i‡(
	`f°©
(
fd
, &
°©buf
)) {

64 
	`îr
(1, "%s: f°©", 
∑th
);

67 
nblocks
 = 
°©buf
.
°_size
 / 
BLOCKSIZE
;

69 #ifde‡
HOST


70 
nblocks
--;

73 
buf
[64];

74 
Àn
;

77 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf)-1);

78 i‡(
Àn
 < 0 && (
î∫o
==
EINTR
 ||Éºno==
EAGAIN
)) {

83 
buf
[
Àn
] = 0;

84 
buf
[
	`°æí
(
HOSTSTRING
)] = 0;

86 i‡(
	`°rcmp
(
buf
, 
HOSTSTRING
)) {

87 
	`îrx
(1, "%s: NŸá Sy°em/161 disk image", 
∑th
);

91 
	}
}

93 
uöt32_t


94 
	$diskblocksize
()

96 
	`as£π
(
fd
>=0);

97  
BLOCKSIZE
;

98 
	}
}

100 
uöt32_t


101 
	$diskblocks
()

103 
	`as£π
(
fd
>=0);

104  
nblocks
;

105 
	}
}

108 
	$diskwrôe
(c⁄° *
d©a
, 
uöt32_t
 
block
)

110 c⁄° *
cd©a
 = 
d©a
;

111 
uöt32_t
 
tŸ
=0;

112 
Àn
;

114 
	`as£π
(
fd
>=0);

116 #ifde‡
HOST


118 
block
++;

121 i‡(
	`l£ek
(
fd
, 
block
*
BLOCKSIZE
, 
SEEK_SET
)<0) {

122 
	`îr
(1, "lseek");

125 
tŸ
 < 
BLOCKSIZE
) {

126 
Àn
 = 
	`wrôe
(
fd
, 
cd©a
 + 
tŸ
, 
BLOCKSIZE
 -Åot);

127 i‡(
Àn
 < 0) {

128 i‡(
î∫o
==
EINTR
 ||Éºno==
EAGAIN
) {

131 
	`îr
(1, "write");

133 i‡(
Àn
==0) {

134 
	`îr
(1, "writeÑeturned 0?");

136 
tŸ
 +
Àn
;

138 
	}
}

141 
	$diskªad
(*
d©a
, 
uöt32_t
 
block
)

143 *
cd©a
 = 
d©a
;

144 
uöt32_t
 
tŸ
=0;

145 
Àn
;

147 
	`as£π
(
fd
>=0);

149 #ifde‡
HOST


151 
block
++;

154 i‡(
	`l£ek
(
fd
, 
block
*
BLOCKSIZE
, 
SEEK_SET
)<0) {

155 
	`îr
(1, "lseek");

158 
tŸ
 < 
BLOCKSIZE
) {

159 
Àn
 = 
	`ªad
(
fd
, 
cd©a
 + 
tŸ
, 
BLOCKSIZE
 -Åot);

160 i‡(
Àn
 < 0) {

161 i‡(
î∫o
==
EINTR
 ||Éºno==
EAGAIN
) {

164 
	`îr
(1, "read");

166 i‡(
Àn
==0) {

167 
	`îr
(1, "unexpected EOF in mid-sector");

169 
tŸ
 +
Àn
;

171 
	}
}

174 
	$˛o£disk
()

176 
	`as£π
(
fd
>=0);

177 i‡(
	`˛o£
(
fd
)) {

178 
	`îr
(1, "close");

180 
fd
 = -1;

181 
	}
}

	@test/os161/user/sbin/mksfs/disk.h

30 
›ídisk
(c⁄° *
∑th
);

32 
uöt32_t
 
diskblocksize
();

33 
uöt32_t
 
diskblocks
();

35 
diskwrôe
(c⁄° *
d©a
, 
uöt32_t
 
block
);

36 
diskªad
(*
d©a
, 
uöt32_t
 
block
);

38 
˛o£disk
();

	@test/os161/user/sbin/mksfs/mksfs.c

30 
	~<sys/ty≥s.h
>

31 
	~<°döt.h
>

32 
	~<°rög.h
>

33 
	~<as£π.h
>

34 
	~<limôs.h
>

35 
	~<îr.h
>

37 
	~"suµ‹t.h
"

38 
	~"kîn/sfs.h
"

41 #ifde‡
HOST


43 
	~<√töë/ö.h
>

44 
	~<¨∑/öë.h
>

45 
	~"ho°com∑t.h
"

46 
	#SWAPL
(
x
Ë
	`¡ohl
(x)

	)

47 
	#SWAPS
(
x
Ë
	`¡ohs
(x)

	)

51 
	#SWAPL
(
x
Ë(x)

	)

52 
	#SWAPS
(
x
Ë(x)

	)

56 
	~"disk.h
"

58 
	#MAXBITBLOCKS
 32

	)

62 
	$check
()

64 
	`as£π
((
sfs_su≥r
)==
SFS_BLOCKSIZE
);

65 
	`as£π
((
sfs_öode
)==
SFS_BLOCKSIZE
);

66 
	`as£π
(
SFS_BLOCKSIZE
 % (
sfs_dú
) == 0);

67 
	}
}

71 
	$wrôesu≥r
(c⁄° *
vﬁ«me
, 
uöt32_t
 
nblocks
)

73 
sfs_su≥r
 
•
;

75 
	`bzîo
((*)&
•
, (sp));

77 i‡(
	`°æí
(
vﬁ«me
Ë>
SFS_VOLNAME_SIZE
) {

78 
	`îrx
(1, "Vﬁumê«mê%†toÿl⁄g", 
vﬁ«me
);

81 
•
.
•_magic
 = 
	`SWAPL
(
SFS_MAGIC
);

82 
•
.
•_nblocks
 = 
	`SWAPL
(
nblocks
);

83 
	`°r˝y
(
•
.
•_vﬁ«me
, 
vﬁ«me
);

85 
	`diskwrôe
(&
•
, 
SFS_SB_LOCATION
);

86 
	}
}

90 
	$wrôîoŸdú
()

92 
sfs_öode
 
sfi
;

94 
	`bzîo
((*)&
sfi
, (sfi));

96 
sfi
.
sfi_size
 = 
	`SWAPL
(0);

97 
sfi
.
sfi_ty≥
 = 
	`SWAPS
(
SFS_TYPE_DIR
);

98 
sfi
.
sfi_lökcou¡
 = 
	`SWAPS
(1);

100 
	`diskwrôe
(&
sfi
, 
SFS_ROOT_LOCATION
);

101 
	}
}

103 
	gbôbuf
[
MAXBITBLOCKS
*
SFS_BLOCKSIZE
];

107 
	$dﬂŒocbô
(
uöt32_t
 
bô
)

109 
uöt32_t
 
byã
 = 
bô
/
CHAR_BIT
;

110 
mask
 = (1<<(
bô
 % 
CHAR_BIT
));

112 
	`as£π
((
bôbuf
[
byã
] & 
mask
) == 0);

113 
bôbuf
[
byã
] |
mask
;

114 
	}
}

118 
	$wrôebôm≠
(
uöt32_t
 
fsblocks
)

121 
uöt32_t
 
nbôs
 = 
	`SFS_BITMAPSIZE
(
fsblocks
);

122 
uöt32_t
 
nblocks
 = 
	`SFS_BITBLOCKS
(
fsblocks
);

123 *
±r
;

124 
uöt32_t
 
i
;

126 i‡(
nblocks
 > 
MAXBITBLOCKS
) {

127 
	`îrx
(1, "FilesystemÅooÜarge "

131 
	`dﬂŒocbô
(
SFS_SB_LOCATION
);

132 
	`dﬂŒocbô
(
SFS_ROOT_LOCATION
);

133 
i
=0; i<
nblocks
; i++) {

134 
	`dﬂŒocbô
(
SFS_MAP_LOCATION
+
i
);

136 
i
=
fsblocks
; i<
nbôs
; i++) {

137 
	`dﬂŒocbô
(
i
);

140 
i
=0; i<
nblocks
; i++) {

141 
±r
 = 
bôbuf
 + 
i
*
SFS_BLOCKSIZE
;

142 
	`diskwrôe
(
±r
, 
SFS_MAP_LOCATION
+
i
);

144 
	}
}

147 
	$maö
(
¨gc
, **
¨gv
)

149 
uöt32_t
 
size
, 
blocksize
;

150 *
vﬁ«me
, *
s
;

152 #ifde‡
HOST


153 
	`ho°com∑t_öô
(
¨gc
, 
¨gv
);

156 i‡(
¨gc
!=3) {

157 
	`îrx
(1, "Usage: mksfs device/diskfile volume-name");

160 
	`check
();

162 
vﬁ«me
 = 
¨gv
[2];

165 
s
 = 
	`°rchr
(
vﬁ«me
, ':');

166 i‡(
s
 !
NULL
) {

167 i‡(
	`°æí
(
s
)!=1) {

168 
	`îrx
(1, "IŒegÆ vﬁumê«mê%s", 
vﬁ«me
);

170 *
s
 = 0;

174 
s
 = 
	`°rchr
(
vﬁ«me
, '/');

175 i‡(
s
 !
NULL
) {

176 
	`îrx
(1, "IŒegÆ vﬁumê«mê%s", 
vﬁ«me
);

179 
	`›ídisk
(
¨gv
[1]);

180 
blocksize
 = 
	`diskblocksize
();

182 i‡(
blocksize
!=
SFS_BLOCKSIZE
) {

183 
	`îrx
(1, "Device has wrong blocksize %u (should be %u)\n",

184 
blocksize
, 
SFS_BLOCKSIZE
);

186 
size
 = 
	`diskblocks
();

188 
	`wrôesu≥r
(
vﬁ«me
, 
size
);

189 
	`wrôîoŸdú
();

190 
	`wrôebôm≠
(
size
);

192 
	`˛o£disk
();

195 
	}
}

	@test/os161/user/sbin/mksfs/support.c

	@test/os161/user/sbin/mksfs/support.h

31 #ifde‡
__osf__


33 
	#HAS_NO_SIZED_TYPES


	)

36 #i‡
deföed
(
__sun__
Ë&& deföed(
__svr4__
)

38 
	#HAS_NO_SIZED_TYPES


	)

46 #ifde‡
HAS_NO_SIZED_TYPES


48 #i‡
deföed
(
__Æpha__
Ë|| deföed(
__Æpha
)

50 
	tuöt32_t
;

51 
	tuöt16_t
;

52 
	tuöt8_t
;

54 #ñi‡
deföed
(
__•¨c__
)

56 
	tuöt32_t
;

57 
	tuöt16_t
;

58 
	tuöt8_t
;

	@test/os161/user/sbin/poweroff/poweroff.c

30 
	~<uni°d.h
>

40 
	$maö
()

42 
	`ªboŸ
(
RB_POWEROFF
);

44 
	}
}

	@test/os161/user/sbin/reboot/reboot.c

30 
	~<uni°d.h
>

40 
	$maö
()

42 
	`ªboŸ
(
RB_REBOOT
);

44 
	}
}

	@test/os161/user/sbin/sfsck/sfsck.c

30 
	~<sys/ty≥s.h
>

31 
	~<as£π.h
>

32 
	~<limôs.h
>

33 
	~<°döt.h
>

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 
	~<îr.h
>

39 
	~"suµ‹t.h
"

40 
	~"kîn/sfs.h
"

42 #ifde‡
HOST


43 
	~<√töë/ö.h
>

44 
	~<¨∑/öë.h
>

45 
	~"ho°com∑t.h
"

46 
	#SWAPL
(
x
Ë
	`¡ohl
(x)

	)

47 
	#SWAPS
(
x
Ë
	`¡ohs
(x)

	)

51 
	#SWAPL
(
x
Ë(x)

	)

52 
	#SWAPS
(
x
Ë(x)

	)

53 
	#NO_REALLOC


	)

54 
	#NO_QSORT


	)

58 
	~"disk.h
"

61 
	#EXIT_USAGE
 4

	)

62 
	#EXIT_FATAL
 3

	)

63 
	#EXIT_UNRECOV
 2

	)

64 
	#EXIT_RECOV
 1

	)

65 
	#EXIT_CLEAN
 0

	)

67 
	gbad√ss
=0;

71 
	$£tbad√ss
(
code
)

73 i‡(
bad√ss
 < 
code
) {

74 
bad√ss
 = 
code
;

76 
	}
}

82 
	$sw≠sb
(
sfs_su≥r
 *
•
)

84 
•
->
•_magic
 = 
	`SWAPL
(sp->sp_magic);

85 
•
->
•_nblocks
 = 
	`SWAPL
(sp->sp_nblocks);

86 
	}
}

90 
	$sw≠öode
(
sfs_öode
 *
sfi
)

92 
i
;

94 
sfi
->
sfi_size
 = 
	`SWAPL
(sfi->sfi_size);

95 
sfi
->
sfi_ty≥
 = 
	`SWAPS
(sfi->sfi_type);

96 
sfi
->
sfi_lökcou¡
 = 
	`SWAPS
(sfi->sfi_linkcount);

98 
i
=0; i<
SFS_NDIRECT
; i++) {

99 
sfi
->
sfi_dúe˘
[
i
] = 
	`SWAPL
(sfi->sfi_direct[i]);

102 #ifde‡
SFS_NIDIRECT


103 
i
=0; i<
SFS_NIDIRECT
; i++) {

104 
sfi
->
sfi_ödúe˘
[
i
] = 
	`SWAPL
(sfi->sfi_indirect[i]);

107 
sfi
->
sfi_ödúe˘
 = 
	`SWAPL
(sfi->sfi_indirect);

110 #ifde‡
SFS_NDIDIRECT


111 
i
=0; i<
SFS_NDIDIRECT
; i++) {

112 
sfi
->
sfi_dödúe˘
[
i
] = 
	`SWAPL
(sfi->sfi_dindirect[i]);

115 #ifde‡
HAS_DIDIRECT


116 
sfi
->
sfi_dödúe˘
 = 
	`SWAPL
(sfi->sfi_dindirect);

120 #ifde‡
SFS_NTIDIRECT


121 
i
=0; i<
SFS_NTIDIRECT
; i++) {

122 
sfi
->
sfi_tödúe˘
[
i
] = 
	`SWAPL
(sfi->sfi_tindirect[i]);

125 #ifde‡
HAS_TIDIRECT


126 
sfi
->
sfi_tödúe˘
 = 
	`SWAPL
(sfi->sfi_tindirect);

129 
	}
}

133 
	$sw≠dú
(
sfs_dú
 *
sfd
)

135 
sfd
->
sfd_öo
 = 
	`SWAPL
(sfd->sfd_ino);

136 
	}
}

140 
	$sw≠ödú
(
uöt32_t
 *
íåõs
)

142 
i
;

143 
i
=0; i<
SFS_DBPERIDB
; i++) {

144 
íåõs
[
i
] = 
	`SWAPL
(entries[i]);

146 
	}
}

150 
	$sw≠bôs
(
uöt8_t
 *
bôs
)

153 ()
bôs
;

154 
	}
}

160 
	$domÆloc
(
size_t
 
Àn
)

162 *
x
;

163 
x
 = 
	`mÆloc
(
Àn
);

164 i‡(
x
==
NULL
) {

165 
	`îrx
(
EXIT_FATAL
, "Out of memory");

167  
x
;

168 
	}
}

173 
	mB_SUPERBLOCK
,

174 
	mB_BITBLOCK
,

175 
	mB_INODE
,

176 
	mB_IBLOCK
,

177 
	mB_DIRDATA
,

178 
	mB_DATA
,

179 
	mB_TOFREE
,

180 
	mB_PASTEND
,

181 } 
	tblockußge_t
;

183 
uöt32_t
 
	gnblocks
, 
	gbôblocks
;

184 
uöt32_t
 
	guniquecou¡î
 = 1;

186 
	gcou¡_blocks
=0, 
	gcou¡_dús
=0, 
	gcou¡_fûes
=0;

190 
uöt8_t
 *
	gbôm≠d©a
;

191 
uöt8_t
 *
	gto‰ìd©a
;

195 
	$bôm≠_öô
(
uöt32_t
 
bôblocks
)

197 
size_t
 
i
, 
m≠size
 = 
bôblocks
 * 
SFS_BLOCKSIZE
;

198 
bôm≠d©a
 = 
	`domÆloc
(
m≠size
 * (
uöt8_t
));

199 
to‰ìd©a
 = 
	`domÆloc
(
m≠size
 * (
uöt8_t
));

200 
i
=0; i<
m≠size
; i++) {

201 
bôm≠d©a
[
i
] = 
to‰ìd©a
[i] = 0;

203 
	}
}

207 
	$blockußge°r
(
blockußge_t
 
how
, 
uöt32_t
 
howdesc
)

209 
rv
[256];

210 
how
) {

211 
B_SUPERBLOCK
:  "superblock";

212 
B_BITBLOCK
:  "bitmap block";

213 
B_INODE
:  "inode";

214 
B_IBLOCK
:

215 
	`¢¥ötf
(
rv
, (rv), "indirect block of inode %lu",

216 (Ë
howdesc
);

218 
B_DIRDATA
:

219 
	`¢¥ötf
(
rv
, (rv), "directory data from inode %lu",

220 (Ë
howdesc
);

222 
B_DATA
:

223 
	`¢¥ötf
(
rv
, (rv), "file data from inode %lu",

224 (Ë
howdesc
);

226 
B_TOFREE
:

227 
	`as£π
(0);

229 
B_PASTEND
:

232  
rv
;

233 
	}
}

237 
	$bôm≠_m¨k
(
uöt32_t
 
block
, 
blockußge_t
 
how
, uöt32_à
howdesc
)

239 
ödex
 = 
block
/8;

240 
uöt8_t
 
mask
 = ((uöt8_t)1)<<(
block
%8);

242 i‡(
how
 =
B_TOFREE
) {

243 i‡(
to‰ìd©a
[
ödex
] & 
mask
) {

247 i‡(
bôm≠d©a
[
ödex
] & 
mask
) {

251 
to‰ìd©a
[
ödex
] |
mask
;

255 i‡(
to‰ìd©a
[
ödex
] & 
mask
) {

257 
to‰ìd©a
[
ödex
] &~
mask
;

260 i‡(
bôm≠d©a
[
ödex
] & 
mask
) {

261 
	`w¨nx
("Block %lu (usedás %s)álready in use! (NOT FIXED)",

262 (Ë
block
, 
	`blockußge°r
(
how
, 
howdesc
));

263 
	`£tbad√ss
(
EXIT_UNRECOV
);

266 
bôm≠d©a
[
ödex
] |
mask
;

268 i‡(
how
 !
B_PASTEND
) {

269 
cou¡_blocks
++;

271 
	}
}

275 
	$cou¡bôs
(
uöt8_t
 
vÆ
)

277 
uöt8_t
 
x
;

278 
˘
=0;

280 
x
=1; x; x<<=1) {

281 i‡(
vÆ
 & 
x
Ë
˘
++;

283  
˘
;

284 
	}
}

288 
	$ªp‹tbôs
(
uöt32_t
 
bôblock
, uöt32_à
byã
, 
uöt8_t
 
vÆ
, c⁄° *
wh©
)

290 
uöt8_t
 
x
, 
y
;

291 
uöt32_t
 
blocknum
;

293 
x
=1, 
y
=0; x; x<<=1, y++) {

294 i‡(
vÆ
 & 
x
) {

295 
blocknum
 = 
bôblock
*
SFS_BLOCKBITS
 + 
byã
*
CHAR_BIT
 + 
y
;

296 
	`w¨nx
("Block %luÉrroneously shown %s in bitmap",

297 (Ë
blocknum
, 
wh©
);

300 
	}
}

304 
	$check_bôm≠
()

306 
uöt8_t
 
bôs
[
SFS_BLOCKSIZE
], *
found
, *
to‰ì
, 
tmp
;

307 
uöt32_t
 
Æloccou¡
=0, 
‰ìcou¡
=0, 
i
, 
j
;

308 
bch™ged
;

310 
i
=0; i<
bôblocks
; i++) {

311 
	`diskªad
(
bôs
, 
SFS_MAP_LOCATION
+
i
);

312 
	`sw≠bôs
(
bôs
);

313 
found
 = 
bôm≠d©a
 + 
i
*
SFS_BLOCKSIZE
;

314 
to‰ì
 = 
to‰ìd©a
 + 
i
*
SFS_BLOCKSIZE
;

315 
bch™ged
 = 0;

317 
j
=0; j<
SFS_BLOCKSIZE
; j++) {

319 
	`as£π
((
found
[
j
] & 
to‰ì
[j])==0);

321 i‡(
bôs
[
j
]==
found
[j]) {

325 i‡(
bôs
[
j
]==(
found
[j] | 
to‰ì
[j])) {

326 
bôs
[
j
] = 
found
[j];

327 
bch™ged
 = 1;

332 
bôs
[
j
] &~
to‰ì
[j];

335 i‡((
bôs
[
j
] & 
found
[j]) != found[j]) {

336 
tmp
 = 
found
[
j
] & ~
bôs
[j];

337 
Æloccou¡
 +
	`cou¡bôs
(
tmp
);

338 i‡(
tmp
 != 0) {

339 
	`ªp‹tbôs
(
i
, 
j
, 
tmp
, "free");

344 i‡((
bôs
[
j
] & 
found
[j]) != bits[j]) {

345 
tmp
 = 
bôs
[
j
] & ~
found
[j];

346 
‰ìcou¡
 +
	`cou¡bôs
(
tmp
);

347 i‡(
tmp
 != 0) {

348 
	`ªp‹tbôs
(
i
, 
j
, 
tmp
, "allocated");

352 
bôs
[
j
] = 
found
[j];

353 
bch™ged
 = 1;

356 i‡(
bch™ged
) {

357 
	`sw≠bôs
(
bôs
);

358 
	`diskwrôe
(
bôs
, 
SFS_MAP_LOCATION
+
i
);

362 i‡(
Æloccou¡
 > 0) {

363 
	`w¨nx
("%lu blocksÉrroneously shown free in bitmap (fixed)",

364 (Ë
Æloccou¡
);

365 
	`£tbad√ss
(
EXIT_RECOV
);

367 i‡(
‰ìcou¡
 > 0) {

368 
	`w¨nx
("%lu blocksÉrroneously shown used in bitmap (fixed)",

369 (Ë
‰ìcou¡
);

370 
	`£tbad√ss
(
EXIT_RECOV
);

372 
	}
}

376 
	söodemem‹y
 {

377 
uöt32_t
 
	möo
;

378 
uöt32_t
 
	mlökcou¡
;

381 
öodemem‹y
 *
	göodes
 = 
NULL
;

382 
	gnöodes
=0, 
	gmaxöodes
=0;

386 
	$addmem‹y
(
uöt32_t
 
öo
, uöt32_à
lökcou¡
)

388 
	`as£π
(
nöodes
 <
maxöodes
);

389 i‡(
nöodes
 =
maxöodes
) {

390 #ifde‡
NO_REALLOC


391 
√wmax
 = (
maxöodes
+1)*2;

392 *
p
 = 
	`domÆloc
(
√wmax
 * (
öodemem‹y
));

393 i‡(
öodes
) {

394 
	`mem˝y
(
p
, 
öodes
, 
nöodes
);

395 
	`‰ì
(
öodes
);

397 
öodes
 = 
p
;

399 
maxöodes
 = (maxinodes+1)*2;

400 
öodes
 = 
	`ªÆloc
(öodes, 
maxöodes
 * (
uöt32_t
));

401 i‡(
öodes
==
NULL
) {

402 
	`îrx
(
EXIT_FATAL
, "Out of memory");

406 
öodes
[
nöodes
].
öo
 = ino;

407 
öodes
[
nöodes
].
lökcou¡
 =Üinkcount;

408 
	}
}

413 
	$ªmembî_dú
(
uöt32_t
 
öo
, c⁄° *
∑thsoÁr
)

415 
i
;

418 ()
∑thsoÁr
;

420 
i
=0; i<
nöodes
; i++) {

421 i‡(
öodes
[
i
].
öo
==ino) {

422 
	`as£π
(
öodes
[
i
].
lökcou¡
==0);

427 
	`addmem‹y
(
öo
, 0);

430 
	}
}

434 
	$ob£rve_fûñök
(
uöt32_t
 
öo
)

436 
i
;

437 
i
=0; i<
nöodes
; i++) {

438 i‡(
öodes
[
i
].
öo
==ino) {

439 
	`as£π
(
öodes
[
i
].
lökcou¡
>0);

440 
öodes
[
i
].
lökcou¡
++;

444 
	`bôm≠_m¨k
(
öo
, 
B_INODE
, ino);

445 
	`addmem‹y
(
öo
, 1);

446 
	}
}

450 
	$adju°_fûñöks
()

452 
sfs_öode
 
sfi
;

453 
i
;

455 
i
=0; i<
nöodes
; i++) {

456 i‡(
öodes
[
i
].
lökcou¡
==0) {

460 
	`diskªad
(&
sfi
, 
öodes
[
i
].
öo
);

461 
	`sw≠öode
(&
sfi
);

462 
	`as£π
(
sfi
.
sfi_ty≥
 =
SFS_TYPE_FILE
);

463 i‡(
sfi
.
sfi_lökcou¡
 !
öodes
[
i
].
lökcou¡
) {

464 
	`w¨nx
("File %luÜink count %lu should be %lu (fixed)",

465 (Ë
öodes
[
i
].
öo
,

466 (Ë
sfi
.
sfi_lökcou¡
,

467 (Ë
öodes
[
i
].
lökcou¡
);

468 
sfi
.
sfi_lökcou¡
 = 
öodes
[
i
].
lökcou¡
;

469 
	`£tbad√ss
(
EXIT_RECOV
);

470 
	`sw≠öode
(&
sfi
);

471 
	`diskwrôe
(&
sfi
, 
öodes
[
i
].
öo
);

473 
cou¡_fûes
++;

475 
	}
}

481 
	$checknuŒ°rög
(*
buf
, 
size_t
 
maxÀn
)

483 
size_t
 
i
;

484 
i
=0; i<
maxÀn
; i++) {

485 i‡(
buf
[
i
]==0) {

489 
buf
[
maxÀn
-1] = 0;

491 
	}
}

495 
	$checkbad°rög
(*
buf
)

497 
size_t
 
i
;

498 
rv
=0;

500 
i
=0; 
buf
[i]; i++) {

501 i‡(
buf
[
i
]==':' || buf[i]=='/') {

502 
buf
[
i
] = '_';

503 
rv
 = 1;

506  
rv
;

507 
	}
}

513 
	$check_sb
()

515 
sfs_su≥r
 
•
;

516 
uöt32_t
 
i
;

517 
sch™ged
=0;

519 
	`diskªad
(&
•
, 
SFS_SB_LOCATION
);

520 
	`sw≠sb
(&
•
);

521 i‡(
•
.
•_magic
 !
SFS_MAGIC
) {

522 
	`îrx
(
EXIT_UNRECOV
, "Notán sfs filesystem");

525 
	`as£π
(
nblocks
==0);

526 
	`as£π
(
bôblocks
==0);

527 
nblocks
 = 
•
.
•_nblocks
;

528 
bôblocks
 = 
	`SFS_BITBLOCKS
(
nblocks
);

529 
	`as£π
(
nblocks
>0);

530 
	`as£π
(
bôblocks
>0);

532 
	`bôm≠_öô
(
bôblocks
);

533 
i
=
nblocks
; i<
bôblocks
*
SFS_BLOCKBITS
; i++) {

534 
	`bôm≠_m¨k
(
i
, 
B_PASTEND
, 0);

537 i‡(
	`checknuŒ°rög
(
•
.
•_vﬁ«me
, (sp.sp_volname))) {

538 
	`w¨nx
("VolumeÇameÇotÇull-terminated (fixed)");

539 
	`£tbad√ss
(
EXIT_RECOV
);

540 
sch™ged
 = 1;

542 i‡(
	`checkbad°rög
(
•
.
•_vﬁ«me
)) {

543 
	`w¨nx
("VolumeÇame contains illegal characters (fixed)");

544 
	`£tbad√ss
(
EXIT_RECOV
);

545 
sch™ged
 = 1;

548 i‡(
sch™ged
) {

549 
	`sw≠sb
(&
•
);

550 
	`diskwrôe
(&
•
, 
SFS_SB_LOCATION
);

553 
	`bôm≠_m¨k
(
SFS_SB_LOCATION
, 
B_SUPERBLOCK
, 0);

554 
i
=0; i<
bôblocks
; i++) {

555 
	`bôm≠_m¨k
(
SFS_MAP_LOCATION
+
i
, 
B_BITBLOCK
, i);

557 
	}
}

563 
	$check_ödúe˘_block
(
uöt32_t
 
öo
, uöt32_à*
õ¡ry
, uöt32_à*
blockp
,

564 
uöt32_t
 
nblocks
, uöt32_à*
badcou¡p
,

565 
isdú
, 
ödúe˘i⁄
)

567 
uöt32_t
 
íåõs
[
SFS_DBPERIDB
];

568 
uöt32_t
 
i
, 
˘
;

570 i‡(*
õ¡ry
 !=0) {

571 
	`diskªad
(
íåõs
, *
õ¡ry
);

572 
	`sw≠ödú
(
íåõs
);

573 
	`bôm≠_m¨k
(*
õ¡ry
, 
B_IBLOCK
, 
öo
);

576 
i
=0; i<
SFS_DBPERIDB
; i++) {

577 
íåõs
[
i
] = 0;

581 i‡(
ödúe˘i⁄
 > 1) {

582 
i
=0; i<
SFS_DBPERIDB
; i++) {

583 
	`check_ödúe˘_block
(
öo
, &
íåõs
[
i
],

584 
blockp
, 
nblocks
,

585 
badcou¡p
,

586 
isdú
,

587 
ödúe˘i⁄
-1);

591 
	`as£π
(
ödúe˘i⁄
==1);

593 
i
=0; i<
SFS_DBPERIDB
; i++) {

594 i‡(*
blockp
 < 
nblocks
) {

595 i‡(
íåõs
[
i
] != 0) {

596 
	`bôm≠_m¨k
(
íåõs
[
i
],

597 
isdú
 ? 
B_DIRDATA
 : 
B_DATA
,

598 
öo
);

602 i‡(
íåõs
[
i
] != 0) {

603 (*
badcou¡p
)++;

604 
	`bôm≠_m¨k
(
íåõs
[
i
],

605 
isdú
 ? 
B_DIRDATA
 : 
B_DATA
,

606 
öo
);

607 
íåõs
[
i
] = 0;

610 (*
blockp
)++;

614 
˘
=0;

615 
i
=
˘
=0; i<
SFS_DBPERIDB
; i++) {

616 i‡(
íåõs
[
i
]!=0Ë
˘
++;

618 i‡(
˘
==0) {

619 i‡(*
õ¡ry
 != 0) {

620 (*
badcou¡p
)++;

621 
	`bôm≠_m¨k
(*
õ¡ry
, 
B_TOFREE
, 0);

622 *
õ¡ry
 = 0;

626 
	`as£π
(*
õ¡ry
 != 0);

627 i‡(*
badcou¡p
 > 0) {

628 
	`sw≠ödú
(
íåõs
);

629 
	`diskwrôe
(
íåõs
, *
õ¡ry
);

632 
	}
}

637 
	$check_öode_blocks
(
uöt32_t
 
öo
, 
sfs_öode
 *
sfi
, 
isdú
)

639 
uöt32_t
 
size
, 
block
, 
nblocks
, 
badcou¡
;

641 
badcou¡
 = 0;

643 
size
 = 
	`SFS_ROUNDUP
(
sfi
->
sfi_size
, 
SFS_BLOCKSIZE
);

644 
nblocks
 = 
size
/
SFS_BLOCKSIZE
;

646 
block
=0; block<
SFS_NDIRECT
; block++) {

647 i‡(
block
 < 
nblocks
) {

648 i‡(
sfi
->
sfi_dúe˘
[
block
] != 0) {

649 
	`bôm≠_m¨k
(
sfi
->
sfi_dúe˘
[
block
],

650 
isdú
 ? 
B_DIRDATA
 : 
B_DATA
, 
öo
);

654 i‡(
sfi
->
sfi_dúe˘
[
block
] != 0) {

655 
badcou¡
++;

656 
	`bôm≠_m¨k
(
sfi
->
sfi_dúe˘
[
block
],

657 
B_TOFREE
, 0);

662 #ifde‡
SFS_NIDIRECT


663 
i
=0; i<
SFS_NIDIRECT
; i++) {

664 
	`check_ödúe˘_block
(
öo
, &
sfi
->
sfi_ödúe˘
[
i
],

665 &
block
, 
nblocks
, &
badcou¡
, 
isdú
, 1);

668 
	`check_ödúe˘_block
(
öo
, &
sfi
->
sfi_ödúe˘
,

669 &
block
, 
nblocks
, &
badcou¡
, 
isdú
, 1);

672 #ifde‡
SFS_NDIDIRECT


673 
i
=0; i<
SFS_NDIDIRECT
; i++) {

674 
	`check_ödúe˘_block
(
öo
, &
sfi
->
sfi_dödúe˘
[
i
],

675 &
block
, 
nblocks
, &
badcou¡
, 
isdú
, 2);

678 #ifde‡
HAS_DIDIRECT


679 
	`check_ödúe˘_block
(
öo
, &
sfi
->
sfi_dödúe˘
,

680 &
block
, 
nblocks
, &
badcou¡
, 
isdú
, 2);

684 #ifde‡
SFS_NTIDIRECT


685 
i
=0; i<
SFS_NTIDIRECT
; i++) {

686 
	`check_ödúe˘_block
(
öo
, &
sfi
->
sfi_tödúe˘
[
i
],

687 &
block
, 
nblocks
, &
badcou¡
, 
isdú
, 3);

690 #ifde‡
HAS_TIDIRECT


691 
	`check_ödúe˘_block
(
öo
, &
sfi
->
sfi_tödúe˘
,

692 &
block
, 
nblocks
, &
badcou¡
, 
isdú
, 3);

696 i‡(
badcou¡
 > 0) {

697 
	`w¨nx
("Inode %lu: %lu blocksáfter EOF (freed)",

698 (Ë
öo
, (Ë
badcou¡
);

699 
	`£tbad√ss
(
EXIT_RECOV
);

704 
	}
}

709 
uöt32_t


710 
	$ibm≠
(
uöt32_t
 
iblock
, uöt32_à
off£t
, uöt32_à
íåysize
)

712 
uöt32_t
 
íåõs
[
SFS_DBPERIDB
];

714 i‡(
iblock
 == 0) {

718 
	`diskªad
(
íåõs
, 
iblock
);

719 
	`sw≠ödú
(
íåõs
);

721 i‡(
íåysize
 > 1) {

722 
uöt32_t
 
ödex
 = 
off£t
 / 
íåysize
;

723 
off£t
 %
íåysize
;

724  
	`ibm≠
(
íåõs
[
ödex
], 
off£t
, 
íåysize
/
SFS_DBPERIDB
);

727 
	`as£π
(
off£t
 < 
SFS_DBPERIDB
);

728  
íåõs
[
off£t
];

730 
	}
}

732 
	#BMAP_ND
 
SFS_NDIRECT


	)

733 
	#BMAP_D
(
sfi
, 
x
Ë((sfi)->
sfi_dúe˘
[(x)])

	)

735 #ifde‡
SFS_NIDIRECT


736 
	#BMAP_NI
 
SFS_NIDIRECT


	)

737 
	#BMAP_I
(
sfi
, 
x
Ë((sfi)->
sfi_ödúe˘
[(x)])

	)

739 
	#BMAP_NI
 1

	)

740 
	#BMAP_I
(
sfi
, 
x
Ë(()(x), (sfi)->
sfi_ödúe˘
)

	)

743 #ifde‡
SFS_NDIDIRECT


744 
	#BMAP_NII
 
SFS_NDIDIRECT


	)

745 
	#BMAP_II
(
sfi
, 
x
Ë((sfi)->
sfi_dödúe˘
[(x)])

	)

747 #ifde‡
HAS_DIDIRECT


748 
	#BMAP_NII
 1

	)

749 
	#BMAP_II
(
sfi
, 
x
Ë(()(x), (sfi)->
sfi_dödúe˘
)

	)

751 
	#BMAP_NII
 0

	)

752 
	#BMAP_II
(
sfi
, 
x
Ë(()(x), ()(sfi), 0)

	)

756 #ifde‡
SFS_NTIDIRECT


757 
	#BMAP_NIII
 
SFS_NTIDIRECT


	)

758 
	#BMAP_III
(
sfi
, 
x
Ë((sfi)->
sfi_tödúe˘
[(x)])

	)

760 #ifde‡
HAS_TIDIRECT


761 
	#BMAP_NIII
 1

	)

762 
	#BMAP_III
(
sfi
, 
x
Ë(()(x), (sfi)->
sfi_tödúe˘
)

	)

764 
	#BMAP_NIII
 0

	)

765 
	#BMAP_III
(
sfi
, 
x
Ë(()(x), ()(sfi), 0)

	)

769 
	#BMAP_DMAX
 
BMAP_ND


	)

770 
	#BMAP_IMAX
 (
BMAP_DMAX
+
SFS_DBPERIDB
*
BMAP_NI
)

	)

771 
	#BMAP_IIMAX
 (
BMAP_IMAX
+
SFS_DBPERIDB
*
BMAP_NII
)

	)

772 
	#BMAP_IIIMAX
 (
BMAP_IIMAX
+
SFS_DBPERIDB
*
BMAP_NIII
)

	)

774 
	#BMAP_DSIZE
 1

	)

775 
	#BMAP_ISIZE
 (
BMAP_DSIZE
*
SFS_DBPERIDB
)

	)

776 
	#BMAP_IISIZE
 (
BMAP_ISIZE
*
SFS_DBPERIDB
)

	)

777 
	#BMAP_IIISIZE
 (
BMAP_IISIZE
*
SFS_DBPERIDB
)

	)

780 
uöt32_t


781 
	$dobm≠
(c⁄° 
sfs_öode
 *
sfi
, 
uöt32_t
 
fûeblock
)

783 
uöt32_t
 
iblock
, 
off£t
;

785 i‡(
fûeblock
 < 
BMAP_DMAX
) {

786  
	`BMAP_D
(
sfi
, 
fûeblock
);

788 i‡(
fûeblock
 < 
BMAP_IMAX
) {

789 
iblock
 = (
fûeblock
 - 
BMAP_DMAX
)/
BMAP_ISIZE
;

790 
off£t
 = (
fûeblock
 - 
BMAP_DMAX
)%
BMAP_ISIZE
;

791  
	`ibm≠
(
	`BMAP_I
(
sfi
, 
iblock
), 
off£t
, 
BMAP_DSIZE
);

793 i‡(
fûeblock
 < 
BMAP_IIMAX
) {

794 
iblock
 = (
fûeblock
 - 
BMAP_IMAX
)/
BMAP_IISIZE
;

795 
off£t
 = (
fûeblock
 - 
BMAP_IMAX
)%
BMAP_IISIZE
;

796  
	`ibm≠
(
	`BMAP_II
(
sfi
, 
iblock
), 
off£t
, 
BMAP_ISIZE
);

798 i‡(
fûeblock
 < 
BMAP_IIIMAX
) {

799 
iblock
 = (
fûeblock
 - 
BMAP_IIMAX
)/
BMAP_IIISIZE
;

800 
off£t
 = (
fûeblock
 - 
BMAP_IIMAX
)%
BMAP_IIISIZE
;

801  
	`ibm≠
(
	`BMAP_III
(
sfi
, 
iblock
), 
off£t
, 
BMAP_IISIZE
);

804 
	}
}

808 
	$dúªad
(
sfs_öode
 *
sfi
, 
sfs_dú
 *
d
, 
nd
)

810 c⁄° 
©⁄˚
 = 
SFS_BLOCKSIZE
/(
sfs_dú
);

811 
nblocks
 = 
	`SFS_ROUNDUP
(
nd
, 
©⁄˚
) /átonce;

812 
i
, 
j
;

814 
i
=0; i<
nblocks
; i++) {

815 
uöt32_t
 
block
 = 
	`dobm≠
(
sfi
, 
i
);

816 i‡(
block
!=0) {

817 
	`diskªad
(
d
 + 
i
*
©⁄˚
, 
block
);

818 
j
=0; j<
©⁄˚
; j++) {

819 
	`sw≠dú
(&
d
[
i
*
©⁄˚
+
j
]);

823 
	`w¨nx
("Warning: sparse directory found");

824 
	`bzîo
(
d
 + 
i
*
©⁄˚
, 
SFS_BLOCKSIZE
);

827 
	}
}

831 
	$dúwrôe
(c⁄° 
sfs_öode
 *
sfi
, 
sfs_dú
 *
d
, 
nd
)

833 c⁄° 
©⁄˚
 = 
SFS_BLOCKSIZE
/(
sfs_dú
);

834 
nblocks
 = 
	`SFS_ROUNDUP
(
nd
, 
©⁄˚
) /átonce;

835 
i
, 
j
, 
bad
;

837 
i
=0; i<
nblocks
; i++) {

838 
uöt32_t
 
block
 = 
	`dobm≠
(
sfi
, 
i
);

839 i‡(
block
!=0) {

840 
j
=0; j<
©⁄˚
; j++) {

841 
	`sw≠dú
(&
d
[
i
*
©⁄˚
+
j
]);

843 
	`diskwrôe
(
d
 + 
i
*
©⁄˚
, 
block
);

846 
j
=
bad
=0; j<
©⁄˚
; j++) {

847 i‡(
d
[
i
*
©⁄˚
+
j
].
sfd_öo
 !
SFS_NOINO
 ||

848 
d
[
i
*
©⁄˚
+
j
].
sfd_«me
[0] != 0) {

849 
bad
 = 1;

852 i‡(
bad
) {

853 
	`w¨nx
("Cannot writeÅo missing block in "

855 
	`£tbad√ss
(
EXIT_UNRECOV
);

859 
	}
}

863 
sfs_dú
 *
	gglobÆ_s‹tdús
;

866 
	$dús‹tfunc
(c⁄° *
Ø
, c⁄° *
bb
)

868 c⁄° *
a
 = (c⁄° *)
Ø
;

869 c⁄° *
b
 = (c⁄° *)
bb
;

870 c⁄° 
sfs_dú
 *
ad
 = &
globÆ_s‹tdús
[*
a
];

871 c⁄° 
sfs_dú
 *
bd
 = &
globÆ_s‹tdús
[*
b
];

872  
	`°rcmp
(
ad
->
sfd_«me
, 
bd
->sfd_name);

873 
	}
}

875 #ifde‡
NO_QSORT


878 
qs‹t
(*
d©a
, 
num
, 
size_t
 
size
, (*
f
)(const *, const *))

880 
i
, 
j
;

881 ()
size
;

884 
i
=0; i<
num
-1; i++) {

885 
j
=
i
+1; j<
num
; j++) {

886 i‡(
	`f
(&
d©a
[
i
], &d©a[
j
]) < 0) {

887 
tmp
 = 
d©a
[
i
];

888 
d©a
[
i
] = d©a[
j
];

889 
d©a
[
j
] = 
tmp
;

893 
	}
}

898 
	$s‹tdú
(*
ve˘‹
, 
sfs_dú
 *
d
, 
nd
)

900 
globÆ_s‹tdús
 = 
d
;

901 
	`qs‹t
(
ve˘‹
, 
nd
, (), 
dús‹tfunc
);

902 
	}
}

907 
	$dú_åyadd
(
sfs_dú
 *
d
, 
nd
, c⁄° *
«me
, 
uöt32_t
 
öo
)

909 
i
;

910 
i
=0; i<
nd
; i++) {

911 i‡(
d
[
i
].
sfd_öo
==
SFS_NOINO
) {

912 
d
[
i
].
sfd_öo
 = 
öo
;

913 
	`as£π
(
	`°æí
(
«me
Ë< (
d
[
i
].
sfd_«me
));

914 
	`°r˝y
(
d
[
i
].
sfd_«me
, 
«me
);

919 
	}
}

923 
	$check_dú_íåy
(c⁄° *
∑thsoÁr
, 
uöt32_t
 
ödex
, 
sfs_dú
 *
sfd
)

925 
dch™ged
 = 0;

927 i‡(
sfd
->
sfd_öo
 =
SFS_NOINO
) {

928 i‡(
sfd
->
sfd_«me
[0] != 0) {

929 
	`£tbad√ss
(
EXIT_RECOV
);

930 
	`w¨nx
("Directory /%sÉntry %lu hasÇame butÇo file",

931 
∑thsoÁr
, (Ë
ödex
);

932 
sfd
->
sfd_«me
[0] = 0;

933 
dch™ged
 = 1;

937 i‡(
sfd
->
sfd_«me
[0] == 0) {

938 
	`¢¥ötf
(
sfd
->
sfd_«me
, (sfd->sfd_name),

940 (Ë
sfd
->
sfd_öo
,

941 (Ë
uniquecou¡î
++);

942 
	`£tbad√ss
(
EXIT_RECOV
);

943 
	`w¨nx
("Directory /%sÉntry %lu has file but "

945 
∑thsoÁr
, (Ë
ödex
,

946 
sfd
->
sfd_«me
);

947 
dch™ged
 = 1;

949 i‡(
	`checknuŒ°rög
(
sfd
->
sfd_«me
, (sfd->sfd_name))) {

950 
	`£tbad√ss
(
EXIT_RECOV
);

951 
	`w¨nx
("Directory /%sÉntry %luÇot "

953 
∑thsoÁr
, (Ë
ödex
);

954 
dch™ged
 = 1;

956 i‡(
	`checkbad°rög
(
sfd
->
sfd_«me
)) {

957 
	`£tbad√ss
(
EXIT_RECOV
);

958 
	`w¨nx
("Directory /%sÉntry %lu contains invalid "

960 
∑thsoÁr
, (Ë
ödex
);

961 
dch™ged
 = 1;

964  
dch™ged
;

965 
	}
}

971 
	$check_dú
(
uöt32_t
 
öo
, uöt32_à
∑ª¡öo
, c⁄° *
∑thsoÁr
)

973 
sfs_öode
 
sfi
;

974 
sfs_dú
 *
dúíåõs
;

975 *
s‹tve˘‹
;

976 
uöt32_t
 
dúsize
, 
ndúíåõs
, 
maxdúíåõs
, 
subdúcou¡
, 
i
;

977 
ich™ged
=0, 
dch™ged
=0, 
dŸ£í
=0, 
dŸdŸ£í
=0;

979 
	`diskªad
(&
sfi
, 
öo
);

980 
	`sw≠öode
(&
sfi
);

982 i‡(
	`ªmembî_dú
(
öo
, 
∑thsoÁr
)) {

987 
	`bôm≠_m¨k
(
öo
, 
B_INODE
, ino);

988 
cou¡_dús
++;

990 i‡(
sfi
.
sfi_size
 % (
sfs_dú
) != 0) {

991 
	`£tbad√ss
(
EXIT_RECOV
);

992 
	`w¨nx
("Directory /%s has illegal size %lu (fixed)",

993 
∑thsoÁr
, (Ë
sfi
.
sfi_size
);

994 
sfi
.
sfi_size
 = 
	`SFS_ROUNDUP
(sfi.sfi_size,

995 (
sfs_dú
));

996 
ich™ged
 = 1;

999 i‡(
	`check_öode_blocks
(
öo
, &
sfi
, 1)) {

1000 
ich™ged
 = 1;

1003 
ndúíåõs
 = 
sfi
.
sfi_size
/(
sfs_dú
);

1004 
maxdúíåõs
 = 
	`SFS_ROUNDUP
(
ndúíåõs
,

1005 
SFS_BLOCKSIZE
/(
sfs_dú
));

1006 
dúsize
 = 
maxdúíåõs
 * (
sfs_dú
);

1007 
dúíåõs
 = 
	`domÆloc
(
dúsize
);

1008 
s‹tve˘‹
 = 
	`domÆloc
(
ndúíåõs
 * ());

1010 
	`dúªad
(&
sfi
, 
dúíåõs
, 
ndúíåõs
);

1011 
i
=
ndúíåõs
; i<
maxdúíåõs
; i++) {

1012 
dúíåõs
[
i
].
sfd_öo
 = 
SFS_NOINO
;

1013 
	`bzîo
(
dúíåõs
[
i
].
sfd_«me
, (direntries[i].sfd_name));

1016 
i
=0; i<
ndúíåõs
; i++) {

1017 i‡(
	`check_dú_íåy
(
∑thsoÁr
, 
i
, &
dúíåõs
[i])) {

1018 
dch™ged
 = 1;

1020 
s‹tve˘‹
[
i
] = i;

1023 
	`s‹tdú
(
s‹tve˘‹
, 
dúíåõs
, 
ndúíåõs
);

1026 
i
=0; i+1<
ndúíåõs
; i++) {

1027 
sfs_dú
 *
d1
 = &
dúíåõs
[
s‹tve˘‹
[
i
]];

1028 
sfs_dú
 *
d2
 = &
dúíåõs
[
s‹tve˘‹
[
i
+1]];

1029 
	`as£π
(
d1
 !
d2
);

1031 i‡(
d1
->
sfd_öo
 =
SFS_NOINO
) {

1035 i‡(!
	`°rcmp
(
d1
->
sfd_«me
, 
d2
->sfd_name)) {

1036 i‡(
d1
->
sfd_öo
 =
d2
->sfd_ino) {

1037 
	`£tbad√ss
(
EXIT_RECOV
);

1038 
	`w¨nx
("Directory /%s: DuplicateÉntries for "

1040 
∑thsoÁr
, 
d1
->
sfd_«me
);

1041 
d1
->
sfd_öo
 = 
SFS_NOINO
;

1042 
d1
->
sfd_«me
[0] = 0;

1045 
	`¢¥ötf
(
d1
->
sfd_«me
, (d1->sfd_name),

1047 (Ë
d1
->
sfd_öo
,

1048 (Ë
uniquecou¡î
++);

1049 
	`£tbad√ss
(
EXIT_RECOV
);

1050 
	`w¨nx
("Directory /%s: DuplicateÇames %s "

1052 
∑thsoÁr
, 
d2
->
sfd_«me
, 
d1
->sfd_name);

1054 
dch™ged
 = 1;

1058 
i
=0; i<
ndúíåõs
; i++) {

1059 i‡(!
	`°rcmp
(
dúíåõs
[
i
].
sfd_«me
, ".")) {

1060 i‡(
dúíåõs
[
i
].
sfd_öo
 !
öo
) {

1061 
	`£tbad√ss
(
EXIT_RECOV
);

1062 
	`w¨nx
("Directory /%s: Incorrect `.'Éntry "

1063 "(fixed)", 
∑thsoÁr
);

1064 
dúíåõs
[
i
].
sfd_öo
 = 
öo
;

1065 
dch™ged
 = 1;

1067 
	`as£π
(
dŸ£í
==0);

1068 
dŸ£í
 = 1;

1070 i‡(!
	`°rcmp
(
dúíåõs
[
i
].
sfd_«me
, "..")) {

1071 i‡(
dúíåõs
[
i
].
sfd_öo
 !
∑ª¡öo
) {

1072 
	`£tbad√ss
(
EXIT_RECOV
);

1073 
	`w¨nx
("Directory /%s: Incorrect `..'Éntry "

1074 "(fixed)", 
∑thsoÁr
);

1075 
dúíåõs
[
i
].
sfd_öo
 = 
∑ª¡öo
;

1076 
dch™ged
 = 1;

1078 
	`as£π
(
dŸdŸ£í
==0);

1079 
dŸdŸ£í
 = 1;

1083 i‡(!
dŸ£í
) {

1084 i‡(
	`dú_åyadd
(
dúíåõs
, 
ndúíåõs
, ".", 
öo
)==0) {

1085 
	`£tbad√ss
(
EXIT_RECOV
);

1086 
	`w¨nx
("Directory /%s: No `.'Éntry (added)",

1087 
∑thsoÁr
);

1088 
dch™ged
 = 1;

1090 i‡(
	`dú_åyadd
(
dúíåõs
, 
maxdúíåõs
, ".", 
öo
)==0) {

1091 
	`£tbad√ss
(
EXIT_RECOV
);

1092 
	`w¨nx
("Directory /%s: No `.'Éntry (added)",

1093 
∑thsoÁr
);

1094 
ndúíåõs
++;

1095 
dch™ged
 = 1;

1096 
sfi
.
sfi_size
 +(
sfs_dú
);

1097 
ich™ged
 = 1;

1100 
	`£tbad√ss
(
EXIT_UNRECOV
);

1101 
	`w¨nx
("Directory /%s: No `.'Éntry (NOT FIXED)",

1102 
∑thsoÁr
);

1106 i‡(!
dŸdŸ£í
) {

1107 i‡(
	`dú_åyadd
(
dúíåõs
, 
ndúíåõs
, "..", 
∑ª¡öo
)==0) {

1108 
	`£tbad√ss
(
EXIT_RECOV
);

1109 
	`w¨nx
("Directory /%s: No `..'Éntry (added)",

1110 
∑thsoÁr
);

1111 
dch™ged
 = 1;

1113 i‡(
	`dú_åyadd
(
dúíåõs
, 
maxdúíåõs
, "..",

1114 
∑ª¡öo
)==0) {

1115 
	`£tbad√ss
(
EXIT_RECOV
);

1116 
	`w¨nx
("Directory /%s: No `..'Éntry (added)",

1117 
∑thsoÁr
);

1118 
ndúíåõs
++;

1119 
dch™ged
 = 1;

1120 
sfi
.
sfi_size
 +(
sfs_dú
);

1121 
ich™ged
 = 1;

1124 
	`£tbad√ss
(
EXIT_UNRECOV
);

1125 
	`w¨nx
("Directory /%s: No `..'Éntry (NOT FIXED)",

1126 
∑thsoÁr
);

1130 
subdúcou¡
=0;

1131 
i
=0; i<
ndúíåõs
; i++) {

1132 i‡(!
	`°rcmp
(
dúíåõs
[
i
].
sfd_«me
, ".")) {

1135 i‡(!
	`°rcmp
(
dúíåõs
[
i
].
sfd_«me
, "..")) {

1138 i‡(
dúíåõs
[
i
].
sfd_öo
 =
SFS_NOINO
) {

1142 
∑th
[
	`°æí
(
∑thsoÁr
)+
SFS_NAMELEN
+1];

1143 
sfs_öode
 
subsfi
;

1145 
	`diskªad
(&
subsfi
, 
dúíåõs
[
i
].
sfd_öo
);

1146 
	`sw≠öode
(&
subsfi
);

1147 
	`¢¥ötf
(
∑th
, (path), "%s/%s",

1148 
∑thsoÁr
, 
dúíåõs
[
i
].
sfd_«me
);

1150 
subsfi
.
sfi_ty≥
) {

1151 
SFS_TYPE_FILE
:

1152 i‡(
	`check_öode_blocks
(
dúíåõs
[
i
].
sfd_öo
,

1153 &
subsfi
, 0)) {

1154 
	`sw≠öode
(&
subsfi
);

1155 
	`diskwrôe
(&
subsfi
,

1156 
dúíåõs
[
i
].
sfd_öo
);

1158 
	`ob£rve_fûñök
(
dúíåõs
[
i
].
sfd_öo
);

1160 
SFS_TYPE_DIR
:

1161 i‡(
	`check_dú
(
dúíåõs
[
i
].
sfd_öo
,

1162 
öo
,

1163 
∑th
)) {

1164 
	`£tbad√ss
(
EXIT_RECOV
);

1165 
	`w¨nx
("Directory /%s: CrosslinkÅo "

1167 
∑th
);

1168 
dúíåõs
[
i
].
sfd_öo
 = 
SFS_NOINO
;

1169 
dúíåõs
[
i
].
sfd_«me
[0] = 0;

1170 
dch™ged
 = 1;

1173 
subdúcou¡
++;

1177 
	`£tbad√ss
(
EXIT_RECOV
);

1178 
	`w¨nx
("Object /%s: Invalid inodeÅype "

1179 "‘emoved)", 
∑th
);

1180 
dúíåõs
[
i
].
sfd_öo
 = 
SFS_NOINO
;

1181 
dúíåõs
[
i
].
sfd_«me
[0] = 0;

1182 
dch™ged
 = 1;

1188 i‡(
sfi
.
sfi_lökcou¡
 !
subdúcou¡
+2) {

1189 
	`£tbad√ss
(
EXIT_RECOV
);

1190 
	`w¨nx
("Directory /%s: Link count %lu should be %lu (fixed)",

1191 
∑thsoÁr
, (Ë
sfi
.
sfi_lökcou¡
,

1192 (Ë
subdúcou¡
+2);

1193 
sfi
.
sfi_lökcou¡
 = 
subdúcou¡
+2;

1194 
ich™ged
 = 1;

1197 i‡(
dch™ged
) {

1198 
	`dúwrôe
(&
sfi
, 
dúíåõs
, 
ndúíåõs
);

1201 i‡(
ich™ged
) {

1202 
	`sw≠öode
(&
sfi
);

1203 
	`diskwrôe
(&
sfi
, 
öo
);

1206 
	`‰ì
(
dúíåõs
);

1207 
	`‰ì
(
s‹tve˘‹
);

1210 
	}
}

1215 
	$check_roŸ_dú
()

1217 
sfs_öode
 
sfi
;

1218 
	`diskªad
(&
sfi
, 
SFS_ROOT_LOCATION
);

1219 
	`sw≠öode
(&
sfi
);

1221 
sfi
.
sfi_ty≥
) {

1222 
SFS_TYPE_DIR
:

1224 
SFS_TYPE_FILE
:

1225 
	`w¨nx
("Root directory inode isáÑegular file (fixed)");

1226 
fix
;

1228 
	`w¨nx
("Root directory inode has invalidÅype %lu (fixed)",

1229 (Ë
sfi
.
sfi_ty≥
);

1230 
fix
:

1231 
	`£tbad√ss
(
EXIT_RECOV
);

1232 
sfi
.
sfi_ty≥
 = 
SFS_TYPE_DIR
;

1233 
	`sw≠öode
(&
sfi
);

1234 
	`diskwrôe
(&
sfi
, 
SFS_ROOT_LOCATION
);

1238 
	`check_dú
(
SFS_ROOT_LOCATION
, SFS_ROOT_LOCATION, "");

1239 
	}
}

1244 
	$maö
(
¨gc
, **
¨gv
)

1246 #ifde‡
HOST


1247 
	`ho°com∑t_öô
(
¨gc
, 
¨gv
);

1250 i‡(
¨gc
!=2) {

1251 
	`îrx
(
EXIT_USAGE
, "Usage: sfsck device/diskfile");

1254 
	`as£π
((
sfs_su≥r
)==
SFS_BLOCKSIZE
);

1255 
	`as£π
((
sfs_öode
)==
SFS_BLOCKSIZE
);

1256 
	`as£π
(
SFS_BLOCKSIZE
 % (
sfs_dú
) == 0);

1258 
	`›ídisk
(
¨gv
[1]);

1260 
	`check_sb
();

1261 
	`check_roŸ_dú
();

1262 
	`check_bôm≠
();

1263 
	`adju°_fûñöks
();

1265 
	`˛o£disk
();

1267 
	`w¨nx
("%lu blocks used (of %lu); %lu directories; %lu files",

1268 
cou¡_blocks
, (Ë
nblocks
, 
cou¡_dús
, 
cou¡_fûes
);

1270 
bad√ss
) {

1271 
EXIT_USAGE
:

1272 
EXIT_FATAL
:

1275 
	`as£π
(0);

1277 
EXIT_UNRECOV
:

1278 
	`w¨nx
("WARNING - unrecoverableÉrrors. MaybeÅryágain?");

1280 
EXIT_RECOV
:

1281 
	`w¨nx
("Caution - filesystem modified. Runágain forÜuck.");

1283 
EXIT_CLEAN
:

1287  
bad√ss
;

1288 
	}
}

	@test/os161/user/testbin/add/add.c

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~<îr.h
>

43 
	$maö
(
¨gc
, *
¨gv
[])

45 
i
, 
j
;

47 i‡(
¨gc
 != 3) {

48 
	`îrx
(1, "Usage:áddÇum1Çum2");

51 
i
 = 
	`©oi
(
¨gv
[1]);

52 
j
 = 
	`©oi
(
¨gv
[2]);

54 
	`¥ötf
("Answî: %d\n", 
i
+
j
);

57 
	}
}

	@test/os161/user/testbin/argtest/argtest.c

38 
	~<°dio.h
>

41 
	$maö
(
¨gc
, *
¨gv
[])

43 c⁄° *
tmp
;

44 
i
;

46 
	`¥ötf
("¨gc: %d\n", 
¨gc
);

48 
i
=0; i<=
¨gc
; i++) {

49 
tmp
 = 
¨gv
[
i
];

50 i‡(
tmp
==
NULL
) {

51 
tmp
 = "[NULL]";

53 
	`¥ötf
("¨gv[%d]: %s\n", 
i
, 
tmp
);

57 
	}
}

	@test/os161/user/testbin/badcall/bad_chdir.c

34 
	~<uni°d.h
>

35 
	~<î∫o.h
>

36 
	~<îr.h
>

38 
	~"ã°.h
"

42 
	$chdú_em±y
()

44 
rv
;

50 
rv
 = 
	`chdú
("");

51 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EINVAL
, 0, "chdirÅoÉmpty string");

52 
	}
}

55 
	$ã°_chdú
()

57 
	`ã°_chdú_∑th
();

58 
	`chdú_em±y
();

59 
	}
}

	@test/os161/user/testbin/badcall/bad_close.c

34 
	~"ã°.h
"

37 
	$ã°_˛o£
()

39 
	`ã°_˛o£_fd
();

40 
	}
}

	@test/os161/user/testbin/badcall/bad_dup2.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<limôs.h
>

41 
	~<î∫o.h
>

42 
	~<îr.h
>

44 
	~"c⁄fig.h
"

45 
	~"ã°.h
"

49 
	$dup2_fd2
(
fd
, c⁄° *
desc
)

51 
rv
;

53 
rv
 = 
	`dup2
(
STDIN_FILENO
, 
fd
);

54 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EBADF
, 
desc
);

56 i‡(
rv
 != -1) {

57 
	`˛o£
(
fd
);

59 
	}
}

63 
	$dup2_£lf
()

65 
°©
 
sb
;

66 
rv
;

67 
ã°fd
;

70 
ã°fd
 = 
CLOSED_FD
;

72 
rv
 = 
	`dup2
(
STDIN_FILENO
, 
ã°fd
);

73 i‡(
rv
 == -1) {

74 
	`w¨n
("UH-OH: couldn't copy stdin");

78 
rv
 = 
	`dup2
(
ã°fd
,Åestfd);

79 i‡(
rv
 =
ã°fd
) {

80 
	`w¨nx
("passed: dup2Åo same fd");

82 i‡(
rv
<0) {

83 
	`w¨n
("FAILURE: dup2Åo same fd:Érror");

86 
	`w¨nx
("FAILURE: dup2Åÿßmêfd:Ñëu∫ed %d in°ód", 
rv
);

89 
rv
 = 
	`f°©
(
ã°fd
, &
sb
);

90 i‡(
rv
==0) {

91 
	`w¨nx
("passed: fstat fdáfter dup2Åo itself");

93 i‡(
î∫o
!=
EUNIMP
 &&Éºno!=
ENOSYS
) {

94 
	`w¨n
("FAILURE: fstat fdáfter dup2Åo itself");

98 
rv
 = 
	`l£ek
(
ã°fd
, 0, 
SEEK_CUR
);

99 i‡(
rv
==0 || (rv==-1 && 
î∫o
==
ESPIPE
)) {

100 
	`w¨nx
("passed:Üseek fdáfter dup2Åo itself");

103 
	`w¨n
("FAILURE:Üseek fdáfter dup2Åo itself");

107 
	`˛o£
(
ã°fd
);

108 
	}
}

111 
	$ã°_dup2
()

114 
	`ã°_dup2_fd
();

117 
	`dup2_fd2
(-1, "dup2Åo -1");

118 
	`dup2_fd2
(-5, "dup2Åo -5");

119 
	`dup2_fd2
(
IMPOSSIBLE_FD
, "dup2Åo impossible fd");

120 #ifde‡
OPEN_MAX


121 
	`dup2_fd2
(
OPEN_MAX
, "dup2Åo OPEN_MAX");

123 
	`w¨nx
("Warning: OPEN_MAXÇot defined -Åest skipped");

126 
	`dup2_£lf
();

127 
	}
}

	@test/os161/user/testbin/badcall/bad_execv.c

34 
	~<sys/ty≥s.h
>

35 
	~<°dlib.h
>

36 
	~<uni°d.h
>

37 
	~<î∫o.h
>

38 
	~<îr.h
>

40 
	~"c⁄fig.h
"

41 
	~"ã°.h
"

45 
	$exec_comm⁄_f‹k
()

47 
pid
, 
rv
, 
°©us
;

49 
pid
 = 
	`f‹k
();

50 i‡(
pid
<0) {

51 
	`w¨n
("UH-OH: fork failed");

55 i‡(
pid
==0) {

60 
rv
 = 
	`waôpid
(
pid
, &
°©us
, 0);

61 i‡(
rv
 == -1) {

62 
	`w¨n
("UH-OH: waitpid failed");

65 i‡(!
	`WIFEXITED
(
°©us
Ë|| 
	`WEXITSTATUS
(°©usË!
MAGIC_STATUS
) {

66 
	`w¨nx
("FAILURE: wrongÉxit code of subprocess");

69 
	}
}

73 
	$exec_bad¥og
(c⁄° *
¥og
, c⁄° *
desc
)

75 
rv
;

76 *
¨gs
[2];

77 
¨gs
[0] = (*)"foo";

78 
¨gs
[1] = 
NULL
;

80 i‡(
	`exec_comm⁄_f‹k
() != 0) {

84 
rv
 = 
	`execv
(
¥og
, 
¨gs
);

85 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

86 
	`exô
(
MAGIC_STATUS
);

87 
	}
}

91 
	$exec_em±y¥og
()

93 
rv
;

94 *
¨gs
[2];

95 
¨gs
[0] = (*)"foo";

96 
¨gs
[1] = 
NULL
;

98 i‡(
	`exec_comm⁄_f‹k
() != 0) {

102 
rv
 = 
	`execv
("", 
¨gs
);

103 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EINVAL
, 
EISDIR
, "execÅheÉmpty string");

104 
	`exô
(
MAGIC_STATUS
);

105 
	}
}

109 
	$exec_bad¨gs
(*
¨gs
, c⁄° *
desc
)

111 
rv
;

113 i‡(
	`exec_comm⁄_f‹k
() != 0) {

117 
rv
 = 
	`execv
("/bö/åue", 
¨gs
);

118 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

119 
	`exô
(
MAGIC_STATUS
);

120 
	}
}

124 
	$exec_⁄órg
(*
±r
, c⁄° *
desc
)

126 
rv
;

128 *
¨gs
[3];

129 
¨gs
[0] = (*)"foo";

130 
¨gs
[1] = (*)
±r
;

131 
¨gs
[2] = 
NULL
;

133 i‡(
	`exec_comm⁄_f‹k
() != 0) {

137 
rv
 = 
	`execv
("/bö/åue", 
¨gs
);

138 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

139 
	`exô
(
MAGIC_STATUS
);

140 
	}
}

143 
	$ã°_execv
()

145 
	`exec_bad¥og
(
NULL
, "exec NULL");

146 
	`exec_bad¥og
(
INVAL_PTR
, "exec invalidÖointer");

147 
	`exec_bad¥og
(
KERN_PTR
, "exec kernelÖointer");

149 
	`exec_em±y¥og
();

151 
	`exec_bad¨gs
(
NULL
, "exec /bin/true with NULLárglist");

152 
	`exec_bad¨gs
(
INVAL_PTR
, "exec /bin/true with invalidÖointerárglist");

153 
	`exec_bad¨gs
(
KERN_PTR
, "exec /bin/true with kernelÖointerárglist");

155 
	`exec_⁄órg
(
INVAL_PTR
, "exec /bin/true with invalidÖointerárg");

156 
	`exec_⁄órg
(
KERN_PTR
, "exec /bin/true with kernelÖointerárg");

157 
	}
}

	@test/os161/user/testbin/badcall/bad_fsync.c

34 
	~"ã°.h
"

37 
	$ã°_fsync
()

39 
	`ã°_fsync_fd
();

40 
	}
}

	@test/os161/user/testbin/badcall/bad_ftruncate.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$·runˇã_fd_devi˚
()

50 
rv
, 
fd
;

52 
fd
 = 
	`›í
("nuŒ:", 
O_RDWR
);

53 i‡(
fd
<0) {

54 
	`w¨n
("UH-OH: openingÇull: failed");

58 
rv
 = 
	`·runˇã
(
fd
, 6);

59 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "ftruncate on device");

61 
	`˛o£
(
fd
);

62 
	}
}

66 
	$·runˇã_size_√g
()

68 
rv
, 
fd
;

70 
fd
 = 
	`›í_ã°fûe
(0);

71 i‡(
fd
<0) {

75 
rv
 = 
	`·runˇã
(
fd
, -60);

76 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "ftruncateÅoÇegative size");

78 
	`˛o£
(
fd
);

79 
	`ªmove
(
TESTFILE
);

80 
	}
}

83 
	$ã°_·runˇã
()

85 
	`ã°_·runˇã_fd
();

87 
	`·runˇã_fd_devi˚
();

88 
	`·runˇã_size_√g
();

89 
	}
}

	@test/os161/user/testbin/badcall/bad_getcwd.c

34 
	~"ã°.h
"

37 
	$ã°_gëcwd
()

39 
	`ã°_gëcwd_buf
();

40 
	}
}

	@test/os161/user/testbin/badcall/bad_getdirentry.c

34 
	~"ã°.h
"

37 
	$ã°_gëdúíåy
()

39 
	`ã°_gëdúíåy_fd
();

40 
	`ã°_gëdúíåy_buf
();

41 
	}
}

	@test/os161/user/testbin/badcall/bad_ioctl.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/io˘l.h
>

36 
	~<uni°d.h
>

37 
	~<°dio.h
>

38 
	~<î∫o.h
>

40 
	~"c⁄fig.h
"

41 
	~"ã°.h
"

45 
	$⁄e_io˘l_badbuf
(
fd
, 
code
, c⁄° *
codíame
,

46 *
±r
, c⁄° *
±rdesc
)

48 
desc
[128];

49 
rv
;

51 
	`¢¥ötf
(
desc
, (desc), "io˘»%†wôh %s", 
codíame
, 
±rdesc
);

52 
rv
 = 
	`io˘l
(
fd
, 
code
, 
±r
);

53 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

54 
	}
}

58 
	$™y_io˘l_badbuf
(
fd
, 
code
, c⁄° *
codíame
)

60 
	`⁄e_io˘l_badbuf
(
fd
, 
code
, 
codíame
, 
NULL
, "NULLÖointer");

61 
	`⁄e_io˘l_badbuf
(
fd
, 
code
, 
codíame
, 
INVAL_PTR
, "invalidÖointer");

62 
	`⁄e_io˘l_badbuf
(
fd
, 
code
, 
codíame
, 
KERN_PTR
, "kernelÖointer");

63 
	}
}

65 
	#IOCTL
(
fd
, 
sym
Ë
	`™y_io˘l_badbuf
(fd, sym, #sym)

	)

69 
	$io˘l_badbuf
()

82 ()
™y_io˘l_badbuf
;

83 
	}
}

87 
	$io˘l_badcode
()

89 
rv
;

90 
rv
 = 
	`io˘l
(
STDIN_FILENO
, 
NONEXIST_IOCTL
, 
NULL
);

91 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EIOCTL
, "invalid ioctl");

92 
	}
}

95 
	$ã°_io˘l
()

97 
	`ã°_io˘l_fd
();

100 
	`io˘l_badcode
();

101 
	`io˘l_badbuf
();

102 
	}
}

	@test/os161/user/testbin/badcall/bad_link.c

34 
	~<uni°d.h
>

35 
	~<î∫o.h
>

37 
	~"ã°.h
"

41 
	$lök_dú
()

43 
rv
;

44 
rv
 = 
	`lök
(".", 
TESTDIR
);

45 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "hardÜink of .");

46 i‡(
rv
==0) {

48 
	`ªmove
(
TESTDIR
);

50 
	}
}

54 
	$lök_em±y1
()

56 
rv
;

57 
rv
 = 
	`lök
("", 
TESTDIR
);

58 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "hardÜink ofÉmpty string");

59 
	}
}

63 
	$lök_em±y2
()

65 
rv
;

66 i‡(
	`¸óã_ã°dú
()<0) {

69 
rv
 = 
	`lök
(
TESTDIR
, "");

70 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "hardÜinkÅoÉmpty string");

71 
	`rmdú
(
TESTDIR
);

72 
	}
}

75 
	$ã°_lök
()

77 
	`ã°_lök_∑ths
();

78 
	`lök_dú
();

79 
	`lök_em±y1
();

80 
	`lök_em±y2
();

81 
	}
}

	@test/os161/user/testbin/badcall/bad_lseek.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$l£ek_fd_devi˚
()

50 
fd
, 
rv
;

52 
fd
 = 
	`›í
("nuŒ:", 
O_RDONLY
);

53 i‡(
fd
<0) {

54 
	`w¨n
("UH-OH: openingÇull: failed");

58 
rv
 = 
	`l£ek
(
fd
, 309, 
SEEK_SET
);

59 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
ESPIPE
, "lseek on device");

61 
	`˛o£
(
fd
);

62 
	}
}

66 
	$l£ek_fûe_°dö
()

68 
fd
, 
fd2
, 
rv
, 
°©us
;

69 c⁄° 
¶og™
[] = "Thereáin'tÇo suchÅhingásá freeÜunch";

70 
size_t
 
Àn
 = 
	`°æí
(
¶og™
);

71 
pid_t
 
pid
;

74 
pid
 = 
	`f‹k
();

75 i‡(
pid
<0) {

76 
	`w¨n
("UH-OH: fork failed");

79 i‡(
pid
!=0) {

81 
rv
 = 
	`waôpid
(
pid
, &
°©us
, 0);

82 i‡(
rv
<0) {

83 
	`w¨n
("UH-OH: waitpid failed");

85 i‡(
	`WIFSIGNALED
(
°©us
)) {

86 
	`w¨n
("UH-OH: subprocessÉxited with signal %d",

87 
	`WTERMSIG
(
°©us
));

89 i‡(
	`WIFEXITED
(
°©us
Ë&& 
	`WEXITSTATUS
(status) != 0) {

90 
	`w¨n
("UH-OH: subprocessÉxited with code %d",

91 
	`WEXITSTATUS
(
°©us
));

98 
fd
 = 
	`›í_ã°fûe
(
NULL
);

99 i‡(
fd
<0) {

100 
	`_exô
(0);

110 
fd2
 = 
	`dup2
(
fd
, 
STDIN_FILENO
);

111 i‡(
fd2
<0) {

112 
	`w¨n
("UH-OH: dup2Åo stdin failed");

113 
	`˛o£
(
fd
);

114 
	`ªmove
(
TESTFILE
);

115 
	`_exô
(0);

117 i‡(
fd2
 !
STDIN_FILENO
) {

118 
	`w¨n
("UH-OH: dup2Ñeturned wrong file handle");

119 
	`˛o£
(
fd
);

120 
	`ªmove
(
TESTFILE
);

121 
	`_exô
(0);

123 
	`˛o£
(
fd
);

125 
rv
 = 
	`wrôe
(
STDIN_FILENO
, 
¶og™
, 
Àn
);

126 i‡(
rv
<0) {

127 
	`w¨n
("UH-OH: wrôêtÿ%†(vü stdöËÁûed", 
TESTFILE
);

128 
	`ªmove
(
TESTFILE
);

129 
	`_exô
(0);

132 i‡(()
rv
 !
Àn
) {

133 
	`w¨nx
("UH-OH: writeÅo %s (via stdin) got short count",

134 
TESTFILE
);

135 
	`ªmove
(
TESTFILE
);

136 
	`_exô
(0);

139 
rv
 = 
	`l£ek
(
STDIN_FILENO
, 0, 
SEEK_SET
);

140 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 0, "lseek stdin when open on file (try 1)");

142 
rv
 = 
	`l£ek
(
STDIN_FILENO
, 0, 
SEEK_END
);

143 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 0, "lseek stdin when open on file (try 2)");

145 
	`ªmove
(
TESTFILE
);

146 
	`_exô
(0);

147 
	}
}

151 
	$l£ek_loc_√g©ive
()

153 
fd
, 
rv
;

155 
fd
 = 
	`›í_ã°fûe
(
NULL
);

156 i‡(
fd
<0) {

160 
rv
 = 
	`l£ek
(
fd
, -309, 
SEEK_SET
);

161 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "lseekÅoÇegative offset");

163 
	`˛o£
(
fd
);

164 
	`ªmove
(
TESTFILE
);

165 
	}
}

169 
	$l£ek_whí˚_övÆ
()

171 
fd
, 
rv
;

173 
fd
 = 
	`›í_ã°fûe
(0);

174 i‡(
fd
<0) {

178 
rv
 = 
	`l£ek
(
fd
, 0, 3594);

179 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "lseek with invalid whence code");

181 
	`˛o£
(
fd
);

182 
	`ªmove
(
TESTFILE
);

183 
	}
}

187 
	$l£ek_loc_∑°eof
()

189 c⁄° *
mesßge
 = "blahblah";

190 
fd
;

191 
off_t
 
pos
;

193 
fd
 = 
	`›í_ã°fûe
(
mesßge
);

194 i‡(
fd
<0) {

198 
pos
 = 
	`l£ek
(
fd
, 5340, 
SEEK_SET
);

199 i‡(
pos
 == -1) {

200 
	`w¨n
("FAILURE:ÜseekÖast EOF failed");

201 
out
;

203 i‡(
pos
 != 5340) {

204 
	`w¨nx
("FAILURE:Ü£ekÅÿ5340 gŸ off£à%ld", (Ë
pos
);

205 
out
;

208 
pos
 = 
	`l£ek
(
fd
, -50, 
SEEK_CUR
);

209 i‡(
pos
 == -1) {

210 
	`w¨n
("FAILURE: small seek beyond EOF failed");

211 
out
;

213 i‡(
pos
 != 5290) {

214 
	`w¨nx
("FAILURE: SEEK_CURÅÿ5290 gŸ off£à%ld", (Ë
pos
);

215 
out
;

218 
pos
 = 
	`l£ek
(
fd
, 0, 
SEEK_END
);

219 i‡(
pos
 == -1) {

220 
	`w¨n
("FAILURE: seekÅo EOF failed");

221 
out
;

224 i‡(
pos
 !(
off_t
Ë
	`°æí
(
mesßge
)) {

225 
	`w¨nx
("FAILURE: seekÅo EOF got %ld (should be %d)",

226 (Ë
pos
, 
	`°æí
(
mesßge
));

227 
out
;

230 
	`w¨nx
("passed: seekÖast/to EOF");

232 
out
:

233 
	`˛o£
(
fd
);

234 
	`ªmove
(
TESTFILE
);

236 
	}
}

239 
	$ã°_l£ek
()

241 
	`ã°_l£ek_fd
();

243 
	`l£ek_fd_devi˚
();

244 
	`l£ek_fûe_°dö
();

245 
	`l£ek_loc_√g©ive
();

246 
	`l£ek_loc_∑°eof
();

247 
	`l£ek_whí˚_övÆ
();

248 
	}
}

	@test/os161/user/testbin/badcall/bad_mkdir.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$mkdú_dŸ
()

50 
rv
;

52 
rv
 = 
	`mkdú
(".", 0775);

53 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EEXIST
, "mkdir .");

54 
	}
}

58 
	$mkdú_dŸdŸ
()

60 
rv
;

62 
rv
 = 
	`mkdú
("..", 0775);

63 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EEXIST
, "mkdir ..");

64 
	}
}

68 
	$mkdú_em±y
()

70 
rv
;

71 
rv
 = 
	`mkdú
("", 0775);

72 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "mkdir ofÉmpty string");

73 
	}
}

76 
	$ã°_mkdú
()

78 
	`ã°_mkdú_∑th
();

80 
	`mkdú_dŸ
();

81 
	`mkdú_dŸdŸ
();

82 
	`mkdú_em±y
();

83 
	}
}

	@test/os161/user/testbin/badcall/bad_open.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$›í_badÊags
()

50 
fd
;

52 
fd
 = 
	`›í
("null:", 309842);

53 
	`ªp‹t_ã°
(
fd
, 
î∫o
, 
EINVAL
, "openÇull: with bad flags");

54 
	}
}

58 
	$›í_em±y
()

60 
rv
;

61 
rv
 = 
	`›í
("", 
O_RDONLY
);

62 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 0, 
EINVAL
, "openÉmpty string");

63 i‡(
rv
>=0) {

64 
	`˛o£
(
rv
);

66 
	}
}

69 
	$ã°_›í
()

71 
	`ã°_›í_∑th
();

73 
	`›í_badÊags
();

74 
	`›í_em±y
();

75 
	}
}

	@test/os161/user/testbin/badcall/bad_pipe.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$pùe_bad±r
(*
±r
, c⁄° *
desc
)

50 
rv
;

52 
rv
 = 
	`pùe
(
±r
);

53 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

54 
	}
}

58 
	$pùe_u«lig√d
()

60 
fds
[3], 
rv
;

61 *
±r
;

63 
±r
 = (*)&
fds
[0];

64 
±r
++;

66 
rv
 = 
	`pùe
((*)
±r
);

67 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "pipe with unalignedÖointer");

68 
	}
}

71 
	$ã°_pùe
()

73 
	`pùe_bad±r
(
NULL
, "pipe with NULLÖointer");

74 
	`pùe_bad±r
(
INVAL_PTR
, "pipe with invalidÖointer");

75 
	`pùe_bad±r
(
KERN_PTR
, "pipe with kernelÖointer");

77 
	`pùe_u«lig√d
();

78 
	}
}

	@test/os161/user/testbin/badcall/bad_read.c

34 
	~"ã°.h
"

37 
	$ã°_ªad
()

39 
	`ã°_ªad_fd
();

40 
	`ã°_ªad_buf
();

41 
	}
}

	@test/os161/user/testbin/badcall/bad_readlink.c

34 
	~<uni°d.h
>

35 
	~<î∫o.h
>

37 
	~"ã°.h
"

41 
	$ªadlök_fûe
()

43 
buf
[128];

44 
fd
, 
rv
;

46 
fd
 = 
	`›í_ã°fûe
("the question containsán invalidássumption");

47 i‡(
fd
<0) {

50 
	`˛o£
(
fd
);

51 
rv
 = 
	`ªadlök
(
TESTFILE
, 
buf
, (buf));

52 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "readlink on file");

53 
	`ªmove
(
TESTFILE
);

54 
	}
}

58 
	$ªadlök_dú
()

60 
buf
[128];

61 
rv
;

62 
rv
 = 
	`ªadlök
(".", 
buf
, (buf));

63 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EISDIR
, "readlink on .");

64 
	}
}

68 
	$ªadlök_em±y
()

70 
buf
[128];

71 
rv
;

72 
rv
 = 
	`ªadlök
("", 
buf
, (buf));

73 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "readlink onÉmpty string");

74 
	}
}

77 
	$ã°_ªadlök
()

79 
	`ã°_ªadlök_∑th
();

80 
	`ã°_ªadlök_buf
();

82 
	`ªadlök_fûe
();

83 
	`ªadlök_dú
();

84 
	`ªadlök_em±y
();

85 
	}
}

	@test/os161/user/testbin/badcall/bad_reboot.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$ªboŸ_badÊags
()

50 
rv
;

52 
	`w¨nx
("NOTICE: ifÅhis killsÅhe system, it'sá failure.");

53 
rv
 = 
	`ªboŸ
(15353);

54 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "reboot with invalid flags");

55 
	}
}

58 
	$ã°_ªboŸ
()

60 
	`ªboŸ_badÊags
();

61 
	}
}

	@test/os161/user/testbin/badcall/bad_remove.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$ªmove_dú
()

50 
rv
;

52 i‡(
	`¸óã_ã°dú
() < 0) {

56 
rv
 = 
	`ªmove
(
TESTDIR
);

57 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EISDIR
, "remove() oná directory");

58 
	`rmdú
(
TESTDIR
);

59 
	}
}

63 
	$ªmove_dŸ
()

65 
rv
;

66 
rv
 = 
	`ªmove
(".");

67 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "remove() on .");

68 
	}
}

72 
	$ªmove_dŸdŸ
()

74 
rv
;

75 
rv
 = 
	`ªmove
("..");

76 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "remove() on ..");

77 
	}
}

81 
	$ªmove_em±y
()

83 
rv
;

84 
rv
 = 
	`ªmove
("");

85 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "remove() onÉmpty string");

86 
	}
}

89 
	$ã°_ªmove
()

91 
	`ã°_ªmove_∑th
();

93 
	`ªmove_dú
();

94 
	`ªmove_dŸ
();

95 
	`ªmove_dŸdŸ
();

96 
	`ªmove_em±y
();

97 
	}
}

	@test/os161/user/testbin/badcall/bad_rename.c

34 
	~<uni°d.h
>

35 
	~<î∫o.h
>

37 
	~"ã°.h
"

41 
	$ª«me_dŸ
()

43 
rv
;

44 
rv
 = 
	`ª«me
(".", 
TESTDIR
);

45 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "rename .");

46 i‡(
rv
==0) {

48 
	`ª«me
(
TESTDIR
, ".");

50 
	}
}

54 
	$ª«me_dŸdŸ
()

56 
rv
;

57 
rv
 = 
	`ª«me
("..", 
TESTDIR
);

58 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "rename ..");

59 i‡(
rv
==0) {

61 
	`ª«me
(
TESTDIR
, "..");

63 
	}
}

67 
	$ª«me_em±y1
()

69 
rv
;

70 
rv
 = 
	`ª«me
("", 
TESTDIR
);

71 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "renameÉmpty string");

72 i‡(
rv
==0) {

74 
	`ª«me
(
TESTDIR
, TESTDIR "-foo");

76 
	}
}

80 
	$ª«me_em±y2
()

82 
rv
;

83 i‡(
	`¸óã_ã°dú
()<0) {

86 
rv
 = 
	`ª«me
(
TESTDIR
, "");

87 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "renameÅoÉmpty string");

88 
	`rmdú
(
TESTDIR
);

89 
	}
}

92 
	$ã°_ª«me
()

94 
	`ã°_ª«me_∑ths
();

96 
	`ª«me_dŸ
();

97 
	`ª«me_dŸdŸ
();

98 
	`ª«me_em±y1
();

99 
	`ª«me_em±y2
();

100 
	}
}

	@test/os161/user/testbin/badcall/bad_rmdir.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$rmdú_fûe
()

50 
rv
;

51 i‡(
	`¸óã_ã°fûe
()<0) {

54 
rv
 = 
	`rmdú
(
TESTFILE
);

55 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
ENOTDIR
, "rmdirá file");

56 
	`ªmove
(
TESTFILE
);

57 
	}
}

61 
	$rmdú_dŸ
()

63 
rv
;

65 
rv
 = 
	`rmdú
(".");

66 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "rmdir .");

67 
	}
}

71 
	$rmdú_dŸdŸ
()

73 
rv
;

75 
rv
 = 
	`rmdú
("..");

76 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EINVAL
, 
ENOTEMPTY
, "rmdir ..");

77 
	}
}

81 
	$rmdú_em±y
()

83 
rv
;

84 
rv
 = 
	`rmdú
("");

85 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "rmdirÉmpty string");

86 
	}
}

89 
	$ã°_rmdú
()

91 
	`ã°_rmdú_∑th
();

93 
	`rmdú_fûe
();

94 
	`rmdú_dŸ
();

95 
	`rmdú_dŸdŸ
();

96 
	`rmdú_em±y
();

97 
	}
}

	@test/os161/user/testbin/badcall/bad_sbrk.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$åy_sbrk
(
vÆ
)

50 *
rv
;

51 
rv
 = 
	`sbrk
(
vÆ
);

52 i‡(
rv
==(*)-1) {

53  
î∫o
;

56 
	}
}

60 
	$íf‹˚_sbrk
(
vÆ
, c⁄° *
desc
, 
îr
)

62 
e
;

64 
e
 = 
	`åy_sbrk
(
vÆ
);

65 i‡(
e
 !
îr
 &&É==0) {

66 
	`w¨nx
("FAILURE: sbrk(%s):Çÿîr‹", 
desc
);

69 i‡(
e
 !
îr
) {

70 
î∫o
 = 
e
;

71 
	`w¨n
("FAILURE: sbrk(%s): wr⁄gÉº‹", 
desc
);

74 
	`w¨nx
("∑s£d: sbrk(%s)", 
desc
);

75 
	}
}

79 
	$sbrk_bigpos
()

81 
	`íf‹˚_sbrk
(4096*1024*256, "hugêposôive", 
ENOMEM
);

82 
	}
}

86 
	$sbrk_big√g
()

88 
	`íf‹˚_sbrk
(-4096*1024*256, "hugê√g©ive", 
EINVAL
);

89 
	}
}

93 
	$sbrk_√g
()

95 
	`íf‹˚_sbrk
(-8192, "too-œrgê√g©ive", 
EINVAL
);

96 
	}
}

100 
	$sbrk_u«lig√dpos
()

102 
	`åy_sbrk
(17)) {

104 
EINVAL
:

105 
	`w¨nx
("passed: sbrk(unalignedÖositive)");

108 
	`w¨n
("FAILURE: sbrk(unalignedÖositive): wrongÉrror");

111 
	}
}

115 
	$sbrk_u«lig√d√g
()

117 
	`åy_sbrk
(-17)) {

119 
EINVAL
:

120 
	`w¨nx
("passed: sbrk(unalignedÇegative)");

123 
	`w¨n
("FAILURE: sbrk(unalignedÇegative): wrongÉrror");

126 
	}
}

129 
	$ã°_sbrk
()

131 
	`sbrk_√g
();

132 
	`sbrk_bigpos
();

133 
	`sbrk_big√g
();

134 
	`sbrk_u«lig√dpos
();

135 
	`sbrk_u«lig√d√g
();

136 
	}
}

	@test/os161/user/testbin/badcall/bad_stat.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

50 
	$badbuf_f°©
(
°©
 *
sb
)

52  
	`f°©
(
STDIN_FILENO
, 
sb
);

53 
	}
}

57 
	$badbuf_l°©
(
°©
 *
sb
)

59  
	`l°©
("nuŒ:", 
sb
);

60 
	}
}

64 
	$badbuf_°©
(
°©
 *
sb
)

66  
	`°©
("nuŒ:", 
sb
);

67 
	}
}

71 
comm⁄_badbuf
((*
°©func
)(
°©
 *), *
±r
,

72 c⁄° *
ˇŒ
, c⁄° *
±rdesc
)

74 
rv
;

75 
mydesc
[128];

77 
	`¢¥ötf
(
mydesc
, (mydesc), "%†wôh %†buf", 
ˇŒ
, 
±rdesc
);

78 
rv
 = 
	`°©func
(
±r
);

79 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
mydesc
);

80 
	}
}

84 
™y_badbuf
((*
°©func
)(
°©
 *), c⁄° *
ˇŒ
)

86 
	`comm⁄_badbuf
(
°©func
, 
NULL
, 
ˇŒ
, "NULL");

87 
	`comm⁄_badbuf
(
°©func
, 
INVAL_PTR
, 
ˇŒ
, "invalidÖointer");

88 
	`comm⁄_badbuf
(
°©func
, 
KERN_PTR
, 
ˇŒ
, "kernelÖointer");

89 
	}
}

95 
™y_em±y
((*
°©func
)(c⁄° *, 
°©
 *), c⁄° *
ˇŒ
)

97 
°©
 
sb
;

98 
desc
[128];

99 
rv
;

101 
	`¢¥ötf
(
desc
, (desc), "%†⁄Ém±y såög", 
ˇŒ
);

102 
rv
 = 
	`°©func
("", &
sb
);

103 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 0, 
EINVAL
, 
desc
);

104 
	}
}

109 
	$ã°_f°©
()

111 
	`ã°_f°©_fd
();

112 
	`™y_badbuf
(
badbuf_f°©
, "fstat");

113 
	}
}

116 
	$ã°_l°©
()

118 
	`ã°_l°©_∑th
();

119 
	`™y_em±y
(
l°©
, "stat");

120 
	`™y_badbuf
(
badbuf_l°©
, "lstat");

121 
	}
}

124 
	$ã°_°©
()

126 
	`ã°_°©_∑th
();

127 
	`™y_em±y
(
°©
, "stat");

128 
	`™y_badbuf
(
badbuf_°©
, "stat");

129 
	}
}

	@test/os161/user/testbin/badcall/bad_symlink.c

34 
	~<uni°d.h
>

35 
	~<î∫o.h
>

37 
	~"ã°.h
"

41 
	$symlök_em±y1
()

43 
rv
;

44 
rv
 = 
	`symlök
("", 
TESTLINK
);

45 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 0, 
EINVAL
, "symlink ->Émpty string");

46 
	`ªmove
(
TESTLINK
);

47 
	}
}

51 
	$symlök_em±y2
()

53 
rv
;

54 
rv
 = 
	`symlök
("foo", "");

55 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "symlinkÇamedÉmpty string");

56 
	}
}

59 
	$ã°_symlök
()

61 
	`ã°_symlök_∑ths
();

62 
	`symlök_em±y1
();

63 
	`symlök_em±y2
();

64 
	}
}

	@test/os161/user/testbin/badcall/bad_time.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$time_bad£cs
(*
±r
, c⁄° *
desc
)

50 
rv
;

52 
rv
 = 
	`__time
(
±r
, 
NULL
);

53 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

54 
	}
}

58 
	$time_badn£cs
(*
±r
, c⁄° *
desc
)

60 
rv
;

62 
rv
 = 
	`__time
(
NULL
, 
±r
);

63 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

64 
	}
}

67 
	$ã°_time
()

69 
	`time_bad£cs
(
INVAL_PTR
, "__time with invalid secondsÖointer");

70 
	`time_bad£cs
(
KERN_PTR
, "__time with kernel secondsÖointer");

72 
	`time_badn£cs
(
INVAL_PTR
, "__time with invalidÇsecsÖointer");

73 
	`time_badn£cs
(
KERN_PTR
, "__time with kernelÇsecsÖointer");

74 
	}
}

	@test/os161/user/testbin/badcall/bad_waitpid.c

34 
	~<sys/ty≥s.h
>

35 
	~<°dlib.h
>

36 
	~<uni°d.h
>

37 
	~<î∫o.h
>

38 
	~<îr.h
>

40 
	~"c⁄fig.h
"

41 
	~"ã°.h
"

45 
	$waô_badpid
(
pid
, c⁄° *
desc
)

47 
rv
, 
x
;

48 
rv
 = 
	`waôpid
(
pid
, &
x
, 0);

49 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EINVAL
, 
NOSUCHPID_ERROR
, 
desc
);

50 
	}
}

54 
	$waô_bad°©us
(*
±r
, c⁄° *
desc
)

56 
rv
, 
pid
, 
x
;

58 
pid
 = 
	`f‹k
();

59 i‡(
pid
<0) {

60 
	`w¨n
("UH-OH: fork failed");

63 i‡(
pid
==0) {

64 
	`exô
(0);

67 
rv
 = 
	`waôpid
(
pid
, 
±r
, 0);

68 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

69 
	`waôpid
(
pid
, &
x
, 0);

70 
	}
}

74 
	$waô_u«lig√d
()

76 
rv
, 
pid
, 
x
;

77 
°©us
[2];

78 *
±r
;

80 
pid
 = 
	`f‹k
();

81 i‡(
pid
<0) {

82 
	`w¨n
("UH-OH: fork failed");

85 i‡(
pid
==0) {

86 
	`exô
(0);

90 
±r
 = (*)(&
°©us
[0]);

93 
±r
++;

95 
rv
 = 
	`waôpid
(
pid
, (*)
±r
, 0);

96 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "wait with unaligned status");

97 i‡(
rv
<0) {

98 
	`waôpid
(
pid
, &
x
, 0);

100 
	}
}

104 
	$waô_badÊags
()

106 
rv
, 
x
, 
pid
;

108 
pid
 = 
	`f‹k
();

109 i‡(
pid
<0) {

110 
	`w¨n
("UH-OH: fork failed");

113 i‡(
pid
==0) {

114 
	`exô
(0);

117 
rv
 = 
	`waôpid
(
pid
, &
x
, 309429);

118 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "wait with bad flags");

119 
	`waôpid
(
pid
, &
x
, 0);

120 
	}
}

124 
	$waô_£lf
()

126 
rv
, 
x
;

127 
rv
 = 
	`waôpid
(
	`gëpid
(), &
x
, 0);

128 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "wait for self");

129 
	}
}

133 
	$waô_∑ª¡
()

135 
mypid
, 
chûdpid
, 
rv
, 
x
;

137 
mypid
 = 
	`gëpid
();

138 
chûdpid
 = 
	`f‹k
();

139 i‡(
chûdpid
<0) {

140 
	`w¨n
("UH-OH: can't fork");

143 i‡(
chûdpid
==0) {

145 
rv
 = 
	`waôpid
(
mypid
, &
x
, 0);

146 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "wait forÖarent (from child)");

147 
	`_exô
(0);

149 
rv
 = 
	`waôpid
(
chûdpid
, &
x
, 0);

150 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "wait forÖarentÅest (fromÖarent)");

151 
	}
}

157 
	$waô_siblögs_chûd
()

159 
pids
[2], 
mypid
, 
Ÿhîpid
, 
fd
, 
rv
, 
x
;

161 
mypid
 = 
	`gëpid
();

163 
fd
 = 
	`›í
(
TESTFILE
, 
O_RDONLY
);

164 i‡(
fd
<0) {

165 
	`w¨n
("UH-OH: childÖrocess (pid %d) can't open %s",

166 
mypid
, 
TESTFILE
);

175 
rv
 = 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

176 i‡(
rv
<0) {

177 
	`w¨n
("UH-OH: childÖrocess (pid %d)ÜseekÉrror",

178 
mypid
);

181 
rv
 = 
	`ªad
(
fd
, 
pids
, (pids));

182 i‡(
rv
<0) {

183 
	`w¨n
("UH-OH: childÖrocess (pid %d)ÑeadÉrror",

184 
mypid
);

187 } 
rv
 < ()(
pids
));

189 i‡(
mypid
==
pids
[0]) {

190 
Ÿhîpid
 = 
pids
[1];

192 i‡(
mypid
==
pids
[1]) {

193 
Ÿhîpid
 = 
pids
[0];

196 
	`w¨n
("UH-OH: childÖrocess (pid %d) got garbage in comm file",

197 
mypid
);

200 
	`˛o£
(
fd
);

202 
rv
 = 
	`waôpid
(
Ÿhîpid
, &
x
, 0);

203 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "sibling wait");

204 
	}
}

208 
	$waô_siblögs
()

210 
pids
[2], 
fd
, 
rv
, 
x
;

214 
fd
 = 
	`›í_ã°fûe
(
NULL
);

215 i‡(
fd
<0) {

219 
pids
[0] = 
	`f‹k
();

220 i‡(
pids
[0]<0) {

221 
	`w¨n
("UH-OH: can't fork");

224 i‡(
pids
[0]==0) {

225 
	`˛o£
(
fd
);

226 
	`waô_siblögs_chûd
();

227 
	`_exô
(0);

230 
pids
[1] = 
	`f‹k
();

231 i‡(
pids
[1]<0) {

232 
	`w¨n
("UH-OH: can't fork");

236 i‡(
pids
[1]==0) {

237 
	`˛o£
(
fd
);

238 
	`waô_siblögs_chûd
();

239 
	`_exô
(0);

242 
rv
 = 
	`wrôe
(
fd
, 
pids
, (pids));

243 i‡(
rv
 < 0) {

244 
	`w¨n
("UH-OH: wrôêîr‹ o¿%s", 
TESTFILE
);

248 i‡(
rv
 !()(
pids
)) {

249 
	`w¨nx
("UH-OH: wrôêîr‹ o¿%s: sh‹àcou¡", 
TESTFILE
);

254 
rv
 = 
	`waôpid
(
pids
[0], &
x
, 0);

255 i‡(
rv
<0) {

256 
	`w¨n
("UH-OH:Éº‹ waôög f‹ chûd 0 (pid %d)", 
pids
[0]);

258 
rv
 = 
	`waôpid
(
pids
[1], &
x
, 0);

259 i‡(
rv
<0) {

260 
	`w¨n
("UH-OH:Éº‹ waôög f‹ chûd 1 (pid %d)", 
pids
[1]);

262 
	`w¨nx
("passed: siblings wait forÉach other");

263 
	`˛o£
(
fd
);

264 
	`ªmove
(
TESTFILE
);

265 
	}
}

270 
	$ã°_waôpid
()

272 
	`waô_badpid
(-8, "wait forÖid -8");

273 
	`waô_badpid
(-1, "wait forÖid -1");

274 
	`waô_badpid
(0, "pid zero");

275 
	`waô_badpid
(
NONEXIST_PID
, "nonexistentÖid");

277 
	`waô_bad°©us
(
NULL
, "wait with NULL status");

278 
	`waô_bad°©us
(
INVAL_PTR
, "wait with invalidÖointer status");

279 
	`waô_bad°©us
(
KERN_PTR
, "wait with kernelÖointer status");

281 
	`waô_u«lig√d
();

283 
	`waô_badÊags
();

285 
	`waô_£lf
();

286 
	`waô_∑ª¡
();

287 
	`waô_siblögs
();

288 
	}
}

	@test/os161/user/testbin/badcall/bad_write.c

34 
	~"ã°.h
"

37 
	$ã°_wrôe
()

39 
	`ã°_wrôe_fd
();

40 
	`ã°_wrôe_buf
();

41 
	}
}

	@test/os161/user/testbin/badcall/common_buf.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<limôs.h
>

41 
	~<î∫o.h
>

42 
	~<îr.h
>

44 
	~"c⁄fig.h
"

45 
	~"ã°.h
"

47 
	gbuf_fd
;

49 
	sbu·e°
 {

50 (*
	m£tup
)();

51 (*
	m›
)(*);

52 (*
	m˛ónup
)();

53 c⁄° *
	m«me
;

60 
	$ªad_£tup
()

62 
buf_fd
 = 
	`›í_ã°fûe
("i doÇotÜike greenÉggsánd ham");

63 i‡(
buf_fd
<0) {

67 
	}
}

71 
	$ªad_badbuf
(*
buf
)

73  
	`ªad
(
buf_fd
, 
buf
, 128);

74 
	}
}

78 
	$ªad_˛ónup
()

80 
	`˛o£
(
buf_fd
);

81 
	`ªmove
(
TESTFILE
);

82 
	}
}

88 
	$wrôe_£tup
()

90 
buf_fd
 = 
	`›í_ã°fûe
(
NULL
);

91 i‡(
buf_fd
<0) {

95 
	}
}

99 
	$wrôe_badbuf
(*
±r
)

101  
	`wrôe
(
buf_fd
, 
±r
, 128);

102 
	}
}

106 
	$wrôe_˛ónup
()

108 
	`˛o£
(
buf_fd
);

109 
	`ªmove
(
TESTFILE
);

110 
	}
}

116 
	$gëdúíåy_£tup
()

118 
buf_fd
 = 
	`›í
(".", 
O_RDONLY
);

119 i‡(
buf_fd
 < 0) {

120 
	`w¨n
("UH-OH: couldn't open .");

124 
	}
}

128 
	$gëdúíåy_badbuf
(*
±r
)

130  
	`gëdúíåy
(
buf_fd
, 
±r
, 1024);

131 
	}
}

135 
	$gëdúíåy_˛ónup
()

137 
	`˛o£
(
buf_fd
);

138 
	}
}

144 
	$ªadlök_£tup
()

146  
	`¸óã_ã°lök
();

147 
	}
}

151 
	$ªadlök_badbuf
(*
buf
)

153  
	`ªadlök
(
TESTLINK
, 
buf
, 168);

154 
	}
}

158 
	$ªadlök_˛ónup
()

160 
	`ªmove
(
TESTLINK
);

161 
	}
}

165 
	$gëcwd_£tup
(Ë{  0; 
	}
}

166 
	$gëcwd_˛ónup
(Ë{
	}
}

170 
	$gëcwd_badbuf
(*
buf
)

172  
	`__gëcwd
(
buf
, 408);

173 
	}
}

179 
	$comm⁄_badbuf
(
bu·e°
 *
öfo
, *
buf
, c⁄° *
bufdesc
)

181 
mydesc
[128];

182 
rv
;

184 
	`¢¥ötf
(
mydesc
, (mydesc), "%s with %s buffer",

185 
öfo
->
«me
, 
bufdesc
);

186 
öfo
->
	`£tup
();

187 
rv
 = 
öfo
->
	`›
(
buf
);

188 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
mydesc
);

189 
öfo
->
	`˛ónup
();

190 
	}
}

194 
	$™y_badbuf
(
bu·e°
 *
öfo
)

196 
	`comm⁄_badbuf
(
öfo
, 
NULL
, "NULL");

197 
	`comm⁄_badbuf
(
öfo
, 
INVAL_PTR
, "invalid");

198 
	`comm⁄_badbuf
(
öfo
, 
KERN_PTR
, "kernel-space");

199 
	}
}

203 
	#T
(
ˇŒ
) \

205 
ã°_
##
ˇŒ
##
	`_buf
() \

207 
bu·e°
 
öfo
 = { \

208 
ˇŒ
##
_£tup
, \

209 
ˇŒ
##
_badbuf
, \

210 
ˇŒ
##
_˛ónup
, \

213 
	`™y_badbuf
(&
öfo
); \

214 }

	)

216 
T
(
ªad
);

217 
T
(
wrôe
);

218 
T
(
gëdúíåy
);

219 
T
(
ªadlök
);

220 
T
(
gëcwd
);

	@test/os161/user/testbin/badcall/common_fds.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<limôs.h
>

41 
	~<î∫o.h
>

42 
	~<îr.h
>

44 
	~"c⁄fig.h
"

45 
	~"ã°.h
"

50 
	$ªad_badfd
(
fd
)

52 
buf
[128];

53  
	`ªad
(
fd
, 
buf
, (buf));

54 
	}
}

58 
	$wrôe_badfd
(
fd
)

60 
buf
[128];

61 
	`mem£t
(
buf
, 'a', (buf));

62  
	`wrôe
(
fd
, 
buf
, (buf));

63 
	}
}

68 
	$˛o£_badfd
(
fd
)

70  
	`˛o£
(
fd
);

71 
	}
}

75 
	$io˘l_badfd
(
fd
)

77  
	`io˘l
(
fd
, 0, 
NULL
);

78 
	}
}

82 
	$l£ek_badfd
(
fd
)

84  
	`l£ek
(
fd
, 0, 
SEEK_SET
);

85 
	}
}

89 
	$fsync_badfd
(
fd
)

91  
	`fsync
(
fd
);

92 
	}
}

96 
	$·runˇã_badfd
(
fd
)

98  
	`·runˇã
(
fd
, 60);

99 
	}
}

103 
	$f°©_badfd
(
fd
)

105 
°©
 
sb
;

106  
	`f°©
(
fd
, &
sb
);

107 
	}
}

111 
	$gëdúíåy_badfd
(
fd
)

113 
buf
[32];

114  
	`gëdúíåy
(
fd
, 
buf
, (buf));

115 
	}
}

119 
	$dup2_badfd
(
fd
)

122  
	`dup2
(
fd
, 
CLOSED_FD
+1);

123 
	}
}

127 
	$dup2_˛ónup
()

129 
	`˛o£
(
CLOSED_FD
+1);

130 
	}
}

136 
™y_badfd
((*
func
)(
fd
), (*
˛ónup
)(), c⁄° *
ˇŒ«me
,

137 
fd
, c⁄° *
fddesc
)

139 
fuŒdesc
[128];

140 
rv
;

142 
	`¢¥ötf
(
fuŒdesc
, (fuŒdesc), "%†usög %s", 
ˇŒ«me
, 
fddesc
);

143 
rv
 = 
	`func
(
fd
);

144 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EBADF
, 
fuŒdesc
);

145 i‡(
˛ónup
) {

146 
	`˛ónup
();

148 
	}
}

152 
ru¡e°
((*
func
)(
fd
), (*
˛ónup
)(), c⁄° *
ˇŒ«me
)

159 
	`™y_badfd
(
func
, 
˛ónup
, 
ˇŒ«me
, -1, "fd -1");

162 
	`™y_badfd
(
func
, 
˛ónup
, 
ˇŒ«me
, -5, "fd -5");

165 
	`™y_badfd
(
func
, 
˛ónup
, 
ˇŒ«me
, 
CLOSED_FD
, "closed fd");

168 
	`™y_badfd
(
func
, 
˛ónup
, 
ˇŒ«me
, 
IMPOSSIBLE_FD
, "impossible fd");

171 #ifde‡
OPEN_MAX


172 
	`™y_badfd
(
func
, 
˛ónup
, 
ˇŒ«me
, 
OPEN_MAX
, "fd OPEN_MAX");

174 
	`w¨nx
("Warning: OPEN_MAXÇot defined,Åest skipped");

176 
	}
}

180 
	#T
(
ˇŒ
) \

182 
ã°_
##
ˇŒ
##
	`_fd
() \

184 
	`ru¡e°
(
ˇŒ
##
_badfd
, 
NULL
, #call); \

185 }

	)

187 
	#TC
(
ˇŒ
) \

189 
ã°_
##
ˇŒ
##
	`_fd
() \

191 
	`ru¡e°
(
ˇŒ
##
_badfd
, cÆl##
_˛ónup
, #call);\

192 }

	)

194 
T
(
ªad
);

195 
T
(
wrôe
);

196 
T
(
˛o£
);

197 
T
(
io˘l
);

198 
T
(
l£ek
);

199 
T
(
fsync
);

200 
T
(
·runˇã
);

201 
T
(
f°©
);

202 
T
(
gëdúíåy
);

203 
TC
(
dup2
);

	@test/os161/user/testbin/badcall/common_path.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<limôs.h
>

41 
	~<î∫o.h
>

42 
	~<îr.h
>

44 
	~"c⁄fig.h
"

45 
	~"ã°.h
"

49 
	$›í_bad∑th
(c⁄° *
∑th
)

51  
	`›í
(
∑th
, 
O_RDONLY
);

52 
	}
}

56 
	$ªmove_bad∑th
(c⁄° *
∑th
)

58  
	`ªmove
(
∑th
);

59 
	}
}

63 
	$ª«me_bad∑th1
(c⁄° *
∑th
)

65  
	`ª«me
(
∑th
, 
TESTFILE
);

66 
	}
}

70 
	$ª«me_bad∑th2
(c⁄° *
∑th
)

72  
	`ª«me
(
TESTFILE
, 
∑th
);

73 
	}
}

77 
	$lök_bad∑th1
(c⁄° *
∑th
)

79  
	`lök
(
∑th
, 
TESTFILE
);

80 
	}
}

84 
	$lök_bad∑th2
(c⁄° *
∑th
)

86  
	`lök
(
TESTFILE
, 
∑th
);

87 
	}
}

91 
	$mkdú_bad∑th
(c⁄° *
∑th
)

93  
	`mkdú
(
∑th
, 0775);

94 
	}
}

98 
	$rmdú_bad∑th
(c⁄° *
∑th
)

100  
	`rmdú
(
∑th
);

101 
	}
}

105 
	$chdú_bad∑th
(c⁄° *
∑th
)

107  
	`chdú
(
∑th
);

108 
	}
}

112 
	$symlök_bad∑th1
(c⁄° *
∑th
)

114  
	`symlök
(
∑th
, 
TESTFILE
);

115 
	}
}

119 
	$symlök_bad∑th2
(c⁄° *
∑th
)

121  
	`symlök
(
TESTFILE
, 
∑th
);

122 
	}
}

126 
	$ªadlök_bad∑th
(c⁄° *
∑th
)

128 
buf
[128];

129  
	`ªadlök
(
∑th
, 
buf
, (buf));

130 
	}
}

134 
	$l°©_bad∑th
(c⁄° *
«me
)

136 
°©
 
sb
;

137  
	`l°©
(
«me
, &
sb
);

138 
	}
}

142 
	$°©_bad∑th
(c⁄° *
«me
)

144 
°©
 
sb
;

145  
	`°©
(
«me
, &
sb
);

146 
	}
}

152 
comm⁄_bad∑th
((*
func
)(c⁄° *
∑th
), 
mk
, 
rm
, const *path,

153 c⁄° *
ˇŒ
, c⁄° *
∑thdesc
)

155 
mydesc
[128];

156 
rv
;

158 i‡(
mk
) {

159 i‡(
	`¸óã_ã°fûe
()<0) {

164 
	`¢¥ötf
(
mydesc
, (mydesc), "%†wôh %†∑th", 
ˇŒ
, 
∑thdesc
);

165 
rv
 = 
	`func
(
∑th
);

166 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
mydesc
);

168 i‡(
mk
 || 
rm
) {

169 
	`ªmove
(
TESTFILE
);

171 
	}
}

175 
™y_bad∑th
((*
func
)(c⁄° *
∑th
), c⁄° *
ˇŒ
, 
mk
, 
rm
)

177 
	`comm⁄_bad∑th
(
func
, 
mk
, 
rm
, 
NULL
, 
ˇŒ
, "NULL");

178 
	`comm⁄_bad∑th
(
func
, 
mk
, 
rm
, 
INVAL_PTR
, 
ˇŒ
, "invalid-pointer");

179 
	`comm⁄_bad∑th
(
func
, 
mk
, 
rm
, 
KERN_PTR
, 
ˇŒ
, "kernel-pointer");

180 
	}
}

185 
	#T
(
ˇŒ
) \

187 
ã°_
##
ˇŒ
##
	`_∑th
() \

189 
	`™y_bad∑th
(
ˇŒ
##
_bad∑th
, #call, 0, 0); \

190 }

	)

192 
T
(
›í
);

193 
T
(
ªmove
);

194 
T
(
mkdú
);

195 
T
(
rmdú
);

196 
T
(
chdú
);

197 
T
(
ªadlök
);

198 
T
(
°©
);

199 
T
(
l°©
);

202 
	#T2
(
ˇŒ
) \

204 
ã°_
##
ˇŒ
##
	`_∑ths
() \

206 
	`™y_bad∑th
(
ˇŒ
##
_bad∑th1
, #call "(arg1)", 0, 1); \

207 
	`™y_bad∑th
(
ˇŒ
##
_bad∑th2
, #call "(arg2)", 1, 1); \

208 }

	)

210 
T2
(
ª«me
);

211 
T2
(
lök
);

212 
T2
(
symlök
);

	@test/os161/user/testbin/badcall/config.h

37 #i‡
deföed
(
__mùs__
)

38 
	#KERN_PTR
 ((*)0x80000000Ë

	)

39 
	#INVAL_PTR
 ((*)0x40000000Ë

	)

48 
	#CLOSED_FD
 10

	)

51 
	#IMPOSSIBLE_FD
 1234567890

	)

54 
	#NONEXIST_PID
 34000

	)

57 #ifde‡
ESRCH


58 
	#NOSUCHPID_ERROR
 
ESRCH


	)

60 
	#NOSUCHPID_ERROR
 
EINVAL


	)

64 
	#MAGIC_STATUS
 107

	)

67 
	#NONEXIST_IOCTL
 12345

	)

	@test/os161/user/testbin/badcall/driver.c

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<uni°d.h
>

36 
	~<î∫o.h
>

37 
	~<îr.h
>

39 
	~"c⁄fig.h
"

40 
	~"ã°.h
"

46 
	$födîr‹
(
rv
, 
îr‹
)

48 i‡(
rv
==-1) {

49  
îr‹
;

54 
	}
}

57 
	$ªp‹t_survivÆ
(
rv
, 
îr‹
, c⁄° *
desc
)

60 
î∫o
 = 
	`födîr‹
(
rv
, 
îr‹
);

61 
	`w¨n
("∑s£d: %s", 
desc
);

62 
	}
}

65 
	$ªp‹t_ã°
(
rv
, 
îr‹
, 
right_îr‹
, c⁄° *
desc
)

67 
gŸîr‹
 = 
	`födîr‹
(
rv
, 
îr‹
);

69 i‡(
gŸîr‹
 =
right_îr‹
) {

70 
	`w¨nx
("∑s£d: %s", 
desc
);

72 i‡(
gŸîr‹
 =
EUNIMP
 || gŸîr‹ =
ENOSYS
) {

73 
	`w¨nx
("------: %†(unim∂emíãd)", 
desc
);

76 
î∫o
 = 
gŸîr‹
;

77 
	`w¨n
("FAILURE: %s", 
desc
);

79 
	}
}

82 
	$ªp‹t_ã°2
(
rv
, 
îr‹
, 
okîr1
, 
okîr2
, c⁄° *
desc
)

84 
gŸîr‹
 = 
	`födîr‹
(
rv
, 
îr‹
);

85 i‡(
gŸîr‹
 =
okîr1
 || gŸîr‹ =
okîr2
) {

86 
	`w¨nx
("∑s£d: %s", 
desc
);

88 i‡(
gŸîr‹
 =
EUNIMP
 || gŸîr‹ =
ENOSYS
) {

89 
	`w¨nx
("------: %†(unim∂emíãd)", 
desc
);

92 
î∫o
 = 
gŸîr‹
;

93 
	`w¨n
("FAILURE: %s", 
desc
);

95 
	}
}

100 
	$›í_ã°fûe
(c⁄° *
°rög
)

102 
fd
, 
rv
;

103 
size_t
 
Àn
;

105 
fd
 = 
	`›í
(
TESTFILE
, 
O_RDWR
|
O_CREAT
|
O_TRUNC
);

106 i‡(
fd
<0) {

107 
	`w¨n
("UH-OH: cª©ög %s: faûed", 
TESTFILE
);

111 i‡(
°rög
) {

112 
Àn
 = 
	`°æí
(
°rög
);

113 
rv
 = 
	`wrôe
(
fd
, 
°rög
, 
Àn
);

114 i‡(
rv
<0) {

115 
	`w¨n
("UH-OH: wrôêtÿ%†Áûed", 
TESTFILE
);

116 
	`˛o£
(
fd
);

117 
	`ªmove
(
TESTFILE
);

120 i‡(()
rv
 !
Àn
) {

121 
	`w¨nx
("UH-OH: wrôêtÿ%†gŸ sh‹àcou¡", 
TESTFILE
);

122 
	`˛o£
(
fd
);

123 
	`ªmove
(
TESTFILE
);

126 
rv
 = 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

127 i‡(
rv
<0) {

128 
	`w¨n
("UH-OH:Ñewöd o‡%†Áûed", 
TESTFILE
);

129 
	`˛o£
(
fd
);

130 
	`ªmove
(
TESTFILE
);

134  
fd
;

135 
	}
}

138 
	$¸óã_ã°fûe
()

140 
fd
, 
rv
;

142 
fd
 = 
	`›í_ã°fûe
(
NULL
);

143 i‡(
fd
<0) {

147 
rv
 = 
	`˛o£
(
fd
);

148 i‡(
rv
<0) {

149 
	`w¨n
("UH-OH: closög %†Áûed", 
TESTFILE
);

154 
	}
}

157 
	$¸óã_ã°dú
()

159 
rv
;

160 
rv
 = 
	`mkdú
(
TESTDIR
, 0775);

161 i‡(
rv
<0) {

162 
	`w¨n
("UH-OH: mkdú %†Áûed", 
TESTDIR
);

166 
	}
}

169 
	$¸óã_ã°lök
()

171 
rv
;

172 
rv
 = 
	`symlök
("bœhbœh", 
TESTLINK
);

173 i‡(
rv
<0) {

174 
	`w¨n
("UH-OH: makög symlök %†Áûed", 
TESTLINK
);

178 
	}
}

184 
	mch
;

185 
	mas°
;

186 c⁄° *
	m«me
;

187 (*
	mf
)();

188 } 
	g›s
[] = {

189 { 'a', 2, "execv", 
ã°_execv
 },

190 { 'b', 2, "waôpid", 
ã°_waôpid
 },

191 { 'c', 2, "›í", 
ã°_›í
 },

192 { 'd', 2, "ªad", 
ã°_ªad
 },

193 { 'e', 2, "wrôe", 
ã°_wrôe
 },

194 { 'f', 2, "˛o£", 
ã°_˛o£
 },

195 { 'g', 0, "ªboŸ", 
ã°_ªboŸ
 },

196 { 'h', 3, "sbrk", 
ã°_sbrk
 },

197 { 'i', 5, "io˘l", 
ã°_io˘l
 },

198 { 'j', 2, "l£ek", 
ã°_l£ek
 },

199 { 'k', 4, "fsync", 
ã°_fsync
 },

200 { 'l', 4, "·runˇã", 
ã°_·runˇã
 },

201 { 'm', 4, "f°©", 
ã°_f°©
 },

202 { 'n', 4, "ªmove", 
ã°_ªmove
 },

203 { 'o', 4, "ª«me", 
ã°_ª«me
 },

204 { 'p', 5, "lök", 
ã°_lök
 },

205 { 'q', 4, "mkdú", 
ã°_mkdú
 },

206 { 'r', 4, "rmdú", 
ã°_rmdú
 },

207 { 's', 2, "chdú", 
ã°_chdú
 },

208 { 't', 4, "gëdúíåy", 
ã°_gëdúíåy
 },

209 { 'u', 5, "symlök", 
ã°_symlök
 },

210 { 'v', 5, "ªadlök", 
ã°_ªadlök
 },

211 { 'w', 2, "dup2", 
ã°_dup2
 },

212 { 'x', 5, "pùe", 
ã°_pùe
 },

213 { 'y', 5, "__time", 
ã°_time
 },

214 { 'z', 2, "__gëcwd", 
ã°_gëcwd
 },

215 { '{', 5, "°©", 
ã°_°©
 },

216 { '|', 5, "l°©", 
ã°_l°©
 },

217 { 0, 0, 
NULL
, NULL }

220 
	#LOWEST
 'a'

	)

221 
	#HIGHEST
 '|'

	)

225 
	$míu
()

227 
i
;

228 
i
=0; 
›s
[i].
«me
; i++) {

229 
	`¥ötf
("[%c] %-24s", 
›s
[
i
].
ch
, ops[i].
«me
);

230 i‡(
i
%2==1) {

231 
	`¥ötf
("\n");

234 i‡(
i
%2==1) {

235 
	`¥ötf
("\n");

237 
	`¥ötf
("[1] %-24s", "asst1");

238 
	`¥ötf
("[2] %-24s\n", "asst2");

239 
	`¥ötf
("[3] %-24s", "asst3");

240 
	`¥ötf
("[4] %-24s\n", "asst4");

241 
	`¥ötf
("[*] %-24s", "all");

242 
	`¥ötf
("[!] %-24s\n", "quit");

243 
	}
}

247 
	$runô
(
›
)

249 
i
, 
k
;

251 i‡(
›
=='!') {

252 
	`exô
(0);

255 i‡(
›
=='?') {

256 
	`míu
();

260 i‡(
›
=='*') {

261 
i
=0; 
›s
[i].
«me
; i++) {

262 
	`¥ötf
("[%s]\n", 
›s
[
i
].
«me
);

263 
›s
[
i
].
	`f
();

268 i‡(
›
>='1' && op <= '4') {

269 
k
 = 
›
-'0';

270 
i
=0; 
›s
[i].
«me
; i++) {

271 i‡(
›s
[
i
].
as°
 <
k
) {

272 
	`¥ötf
("[%s]\n", 
›s
[
i
].
«me
);

273 
›s
[
i
].
	`f
();

279 i‡(
›
 < 
LOWEST
 || o∞> 
HIGHEST
) {

280 
	`¥ötf
("InvÆidÑeque° %c\n", 
›
);

284 
›s
[
›
-'a'].
	`f
();

285 
	}
}

288 
	$maö
(
¨gc
, **
¨gv
)

290 
›
, 
i
, 
j
;

292 
	`¥ötf
("[%c-%c, 1-4, *, ?=míu, !=quô]\n", 
LOWEST
, 
HIGHEST
);

294 i‡(
¨gc
 > 1) {

295 
i
=1; i<
¨gc
; i++) {

296 
j
=0; 
¨gv
[
i
][j]; j++) {

297 
	`¥ötf
("Choose: %c\n",

298 
¨gv
[
i
][
j
]);

299 
	`runô
(
¨gv
[
i
][
j
]);

304 
	`míu
();

306 
	`¥ötf
("Choose: ");

307 
›
 = 
	`gëch¨
();

308 i‡(
›
==
EOF
) {

311 
	`¥ötf
("%c\n", 
›
);

312 
	`runô
(
›
);

317 
	}
}

	@test/os161/user/testbin/badcall/test.h

30 
	#TESTFILE
 "badˇŒfûe"

	)

31 
	#TESTDIR
 "badˇŒdú"

	)

32 
	#TESTLINK
 "badˇŒlök"

	)

35 
ªp‹t_survivÆ
(
rv
, 
îr‹
, c⁄° *
desc
);

36 
ªp‹t_ã°
(
rv
, 
îr‹
, 
right_îr‹
, c⁄° *
desc
);

37 
ªp‹t_ã°2
(
rv
, 
îr‹
, 
okîr1
, 
okîr2
, c⁄° *
desc
);

38 
›í_ã°fûe
(c⁄° *
°r
);

39 
¸óã_ã°fûe
();

40 
¸óã_ã°dú
();

41 
¸óã_ã°lök
();

44 
ã°_ªad_buf
();

45 
ã°_wrôe_buf
();

46 
ã°_gëdúíåy_buf
();

47 
ã°_gëcwd_buf
();

48 
ã°_ªadlök_buf
();

51 
ã°_ªad_fd
();

52 
ã°_wrôe_fd
();

53 
ã°_˛o£_fd
();

54 
ã°_io˘l_fd
();

55 
ã°_l£ek_fd
();

56 
ã°_fsync_fd
();

57 
ã°_·runˇã_fd
();

58 
ã°_f°©_fd
();

59 
ã°_gëdúíåy_fd
();

60 
ã°_dup2_fd
();

63 
ã°_›í_∑th
();

64 
ã°_ªmove_∑th
();

65 
ã°_ª«me_∑ths
();

66 
ã°_lök_∑ths
();

67 
ã°_mkdú_∑th
();

68 
ã°_rmdú_∑th
();

69 
ã°_chdú_∑th
();

70 
ã°_symlök_∑ths
();

71 
ã°_ªadlök_∑th
();

72 
ã°_°©_∑th
();

73 
ã°_l°©_∑th
();

76 
ã°_execv
();

77 
ã°_waôpid
();

78 
ã°_›í
();

79 
ã°_ªad
();

80 
ã°_wrôe
();

81 
ã°_˛o£
();

82 
ã°_ªboŸ
();

83 
ã°_sbrk
();

84 
ã°_io˘l
();

85 
ã°_l£ek
();

86 
ã°_fsync
();

87 
ã°_·runˇã
();

88 
ã°_f°©
();

89 
ã°_ªmove
();

90 
ã°_ª«me
();

91 
ã°_lök
();

92 
ã°_mkdú
();

93 
ã°_rmdú
();

94 
ã°_chdú
();

95 
ã°_gëdúíåy
();

96 
ã°_symlök
();

97 
ã°_ªadlök
();

98 
ã°_dup2
();

99 
ã°_pùe
();

100 
ã°_time
();

101 
ã°_gëcwd
();

102 
ã°_°©
();

103 
ã°_l°©
();

	@test/os161/user/testbin/bigfile/bigfile.c

39 
	~<°dlib.h
>

40 
	~<°dio.h
>

41 
	~<°rög.h
>

42 
	~<uni°d.h
>

43 
	~<îr.h
>

45 
	gbuf„r
[100];

48 
	$maö
(
¨gc
, *
¨gv
[])

50 c⁄° *
fûíame
;

51 
i
, 
size
;

52 
fûeid
;

53 
Àn
;

55 i‡(
¨gc
 != 3) {

56 
	`îrx
(1, "Usage: bigfile <filename> <size>");

59 
fûíame
 = 
¨gv
[1];

60 
size
 = 
	`©oi
(
¨gv
[2]);

62 
	`¥ötf
("Cª©ögá fûêo‡sizê%d\n", 
size
);

64 
fûeid
 = 
	`›í
(
fûíame
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
);

65 i‡(
fûeid
 < 0) {

66 
	`îr
(1, "%s: cª©e", 
fûíame
);

69 
i
=0;

70 
i
<
size
) {

71 
	`¢¥ötf
(
buf„r
, (buf„r), "%-10d", 
i
);

72 
Àn
 = 
	`wrôe
(
fûeid
, 
buf„r
, 
	`°æí
(buffer));

73 i‡(
Àn
<0) {

74 
	`îr
(1, "%s: wrôe", 
fûíame
);

76 
i
 +
Àn
;

79 
	`˛o£
(
fûeid
);

82 
	}
}

	@test/os161/user/testbin/conman/conman.c

37 
	~<uni°d.h
>

38 
	~<îr.h
>

41 
	$maö
() {

42 
ch
=0;

43 
Àn
;

45 
ch
!='q') {

46 
Àn
 = 
	`ªad
(
STDIN_FILENO
, &
ch
, 1);

47 i‡(
Àn
 < 0) {

48 
	`îr
(1, "stdin:Ñead");

50 i‡(
Àn
==0) {

54 
	`wrôe
(
STDOUT_FILENO
, &
ch
, 1);

57 
	}
}

	@test/os161/user/testbin/crash/crash.c

44 
	~<°dio.h
>

45 
	~<°döt.h
>

46 
	~<uni°d.h
>

47 
	~<îr.h
>

49 #i‡
deföed
(
__mùs__
)

50 
	#KERNEL_ADDR
 0x80000000

	)

51 
	#INVAL_ADDR
 0x40000000

	)

52 
	#INSN_TYPE
 
uöt32_t


	)

53 
	#INVAL_INSN
 0x0000003f

	)

58 (*
	tfunc
)();

62 
	$ªad_‰om_nuŒ
()

64 *
nuŒ
 = 
NULL
;

65 vﬁ©ûê
x
;

66 
x
 = *
nuŒ
;

67 
	}
}

71 
	$ªad_‰om_övÆ
()

73 *
±r
 = (*Ë
INVAL_ADDR
;

74 vﬁ©ûê
x
;

75 
x
 = *
±r
;

76 
	}
}

80 
	$ªad_‰om_kî√l
()

82 *
±r
 = (*Ë
KERNEL_ADDR
;

83 vﬁ©ûê
x
;

84 
x
 = *
±r
;

85 
	}
}

89 
	$wrôe_to_nuŒ
()

91 *
nuŒ
 = 
NULL
;

92 *
nuŒ
 = 6;

93 
	}
}

97 
	$wrôe_to_övÆ
()

99 *
±r
 = (*Ë
INVAL_ADDR
;

100 *
±r
 = 8;

101 
	}
}

105 
	$wrôe_to_code
()

107 
INSN_TYPE
 *
x
 = (INSN_TYPE *)
wrôe_to_code
;

108 *
x
 = 
INVAL_INSN
;

109 
	}
}

113 
	$wrôe_to_kî√l
()

115 *
±r
 = (*Ë
KERNEL_ADDR
;

116 *
±r
 = 8;

117 
	}
}

121 
	$jump_to_nuŒ
()

123 
func
 
f
 = 
NULL
;

124 
	`f
();

125 
	}
}

129 
	$jump_to_övÆ
()

131 
func
 
f
 = (funcË
INVAL_ADDR
;

132 
	`f
();

133 
	}
}

137 
	$jump_to_kî√l
()

139 
func
 
f
 = (funcË
KERNEL_ADDR
;

140 
	`f
();

141 
	}
}

146 
	$ûÀgÆ_ö°ru˘i⁄
()

148 #i‡
	`deföed
(
__mùs__
)

149 
	`asm
(".long 0x0000003f");

153 
	}
}

157 
	$Æignmít_îr‹
()

159 
x
;

160 *
±r
 = &
x
;

161 *
bad±r
 = (*)(((*)
±r
)+1);

163 vﬁ©ûê
j
;

164 
j
 = *
bad±r
;

165 
	}
}

169 
	$divide_by_zîo
()

171 vﬁ©ûê
x
 = 6;

172 vﬁ©ûê
z
 = 0;

173 vﬁ©ûê
a
;

175 
a
 = 
x
/
z
;

176 
	}
}

180 
	$mod_by_zîo
()

182 vﬁ©ûê
x
 = 6;

183 vﬁ©ûê
z
 = 0;

184 vﬁ©ûê
a
;

186 
a
 = 
x
%
z
;

187 
	}
}

191 
	$ªcur£_öf
()

193 vﬁ©ûê
buf
[16];

194 
buf
[0] = 0;

195 
	`ªcur£_öf
();

196 
buf
[0] = 1;

197 
	}
}

202 
	mch
;

203 c⁄° *
	m«me
;

204 
func
 
	mf
;

205 } 
	g›s
[] = {

206 { 'a', "ªad from NULL", 
ªad_‰om_nuŒ
 },

207 { 'b', "ªad from invÆidáddªss", 
ªad_‰om_övÆ
 },

208 { 'c', "ªad from kî√»addªss", 
ªad_‰om_kî√l
 },

209 { 'd', "wrôêtÿNULL", 
wrôe_to_nuŒ
 },

210 { 'e', "wrôêtÿövÆidáddªss", 
wrôe_to_övÆ
 },

211 { 'f', "wrôêtÿcodê£gmít", 
wrôe_to_code
 },

212 { 'g', "wrôêtÿkî√»addªss", 
wrôe_to_kî√l
 },

213 { 'h', "jum∞tÿNULL", 
jump_to_nuŒ
 },

214 { 'i', "jum∞tÿövÆidáddªss", 
jump_to_övÆ
 },

215 { 'j', "jum∞tÿkî√»addªss", 
jump_to_kî√l
 },

216 { 'k', "Æignmíàîr‹", 
Æignmít_îr‹
 },

217 { 'l', "ûÀgÆ in°ru˘i⁄", 
ûÀgÆ_ö°ru˘i⁄
 },

218 { 'm', "dividêby zîo", 
divide_by_zîo
 },

219 { 'n', "mod by zîo", 
mod_by_zîo
 },

220 { 'o', "Recur£ inföôñy", 
ªcur£_öf
 },

221 { 0, 
NULL
, NULL }

225 
	$maö
(
¨gc
, **
¨gv
)

227 
›
, 
i
, 
°©us
;

228 
pid_t
 
pid
;

230 i‡(
¨gc
 == 2) {

231 
›
 = 
¨gv
[1][0];

234 
i
=0; 
›s
[i].
«me
; i++) {

235 
	`¥ötf
("[%c] %s\n", 
›s
[
i
].
ch
, ops[i].
«me
);

237 
	`¥ötf
("[*] RunÉverything (in subprocesses)\n");

238 
	`¥ötf
("Note: [f] mayÇot causeánÉxception on some "

241 
	`¥ötf
("Choose: ");

242 
›
 = 
	`gëch¨
();

245 i‡(
›
=='*') {

246 
i
=0; 
›s
[i].
«me
; i++) {

247 
	`¥ötf
("Ru¬ög: [%c] %s\n", 
›s
[
i
].
ch
, ops[i].
«me
);

248 
pid
 = 
	`f‹k
();

249 i‡(
pid
<0) {

251 
	`w¨n
("fork");

253 i‡(
pid
==0) {

255 
›s
[
i
].
	`f
();

256 
	`¥ötf
("I wasn't killed -Åest fails!\n");

257 
	`_exô
(1);

259 
	`waôpid
(
pid
, &
°©us
, 0);

260 i‡(
	`WIFSIGNALED
(
°©us
)) {

261 
	`¥ötf
("Sig«»%d\n", 
	`WTERMSIG
(
°©us
));

264 
	`¥ötf
("Exô %d\n", 
	`WEXITSTATUS
(
°©us
));

270 
›s
[
›
-'a'].
	`f
();

272 
	`¥ötf
("I wasn't killed -Åest fails!\n");

276 
	}
}

	@test/os161/user/testbin/ctest/ctest.c

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

47 
	#SIZE
 (1024*1024/(
íåy
))

	)

48 
	#DEFAULT
 477

	)

50 
	síåy
 {

51 
íåy
 *
	me
;

54 
íåy
 
	g¨øy
[
SIZE
];

57 
	$maö
(
¨gc
, **
¨gv
)

59 vﬁ©ûê
íåy
 *
e
;

60 
i
, 
°ride
;

62 
°ride
 = 
DEFAULT
;

63 i‡(
¨gc
 == 2) {

64 
°ride
 = 
	`©oi
(
¨gv
[1]);

66 i‡(
°ride
 <0 || 
¨gc
 > 2) {

67 
	`¥ötf
("Usage: ctest [stridesize]\n");

68 
	`¥ötf
(" stridesize shouldÇot beá multiple of 2.\n");

72 
	`¥ötf
("Sèπög cã°: såidê%d\n", 
°ride
);

81 
i
=0; i<
SIZE
; i++) {

82 
¨øy
[
i
].
e
 = &¨øy[(i+
°ride
Ë% 
SIZE
];

91 
e
 = &
¨øy
[0];

92 
i
=0; i<
SIZE
; i++) {

93 i‡(
i
 % 
°ride
 == 0) {

94 
	`putch¨
('.');

96 
e
 =É->e;

99 
	`¥ötf
("\nDone!\n");

101 
	}
}

	@test/os161/user/testbin/dirconc/dirconc.c

37 
	~<sys/ty≥s.h
>

38 
	~<sys/waô.h
>

39 
	~<sys/°©.h
>

40 
	~<î∫o.h
>

41 
	~<°dio.h
>

42 
	~<uni°d.h
>

43 
	~<°dlib.h
>

44 
	~<°d¨g.h
>

45 
	~<°rög.h
>

47 
	#NTRIES
 100

	)

48 
	#NPROCS
 5

	)

50 
	#TESTDIR
 "dúc⁄c"

	)

51 
	#NNAMES
 4

	)

52 
	#NAMESIZE
 32

	)

56 c⁄° *c⁄° 
	g«mes
[
NNAMES
] = {

65 
	$choo£_«me
(*
buf
, 
size_t
 
Àn
)

67 c⁄° *
a
, *
b
, *
c
;

69 
a
 = 
«mes
[
	`øndom
()%
NNAMES
];

70 i‡(
	`øndom
()%2==0) {

71 
	`¢¥ötf
(
buf
, 
Àn
, "%s", 
a
);

74 
b
 = 
«mes
[
	`øndom
()%
NNAMES
];

75 i‡(
	`øndom
()%2==0) {

76 
	`¢¥ötf
(
buf
, 
Àn
, "%s/%s", 
a
, 
b
);

79 
c
 = 
«mes
[
	`øndom
()%
NNAMES
];

80 
	`¢¥ötf
(
buf
, 
Àn
, "%s/%s/%s", 
a
, 
b
, 
c
);

81 
	}
}

91 #ifde‡
__GNUC__


92 
__©åibuã__
((
	$__f‹m©__
(
__¥ötf__
, 1, 2)))

94 
	$ßy
(c⁄° *
fmt
, ...)

96 
buf
[512];

97 
va_li°
 
≠
;

98 
	`va_°¨t
(
≠
, 
fmt
);

99 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
≠
);

100 
	`va_íd
(
≠
);

101 
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
	`°æí
(buf));

102 
	}
}

108 
	$d‹íame
(c⁄° *
«me1
, c⁄° *
«me2
)

110 i‡(
	`ª«me
(
«me1
, 
«me2
) < 0) {

111 
î∫o
) {

112 
ENOENT
:

113 
ENOTEMPTY
:

114 
EINVAL
:

117 
	`ßy
("pid %d:Ñename %s -> %s: %s\n",

118 
	`gëpid
(), 
«me1
, 
«me2
, 
	`°ªº‹
(
î∫o
));

122 
	}
}

126 
	$domkdú
(c⁄° *
«me
)

128 i‡(
	`mkdú
(
«me
, 0775)<0) {

129 
î∫o
) {

130 
ENOENT
:

131 
EEXIST
:

134 
	`ßy
("pid %d: mkdir %s: %s\n",

135 
	`gëpid
(), 
«me
, 
	`°ªº‹
(
î∫o
));

139 
	}
}

143 
	$d‹mdú
(c⁄° *
«me
)

145 i‡(
	`rmdú
(
«me
)<0) {

146 
î∫o
) {

147 
ENOENT
:

148 
ENOTEMPTY
:

151 
	`ßy
("pid %d:Ñmdir %s: %s\n",

152 
	`gëpid
(), 
«me
, 
	`°ªº‹
(
î∫o
));

156 
	}
}

160 
	$˛ónup_rmdú
(c⁄° *
«me
)

162 i‡(
	`rmdú
(
«me
)<0) {

163 
î∫o
) {

164 
ENOENT
:

167 
	`ßy
("cleanup (pid %d):Ñmdir %s: %s\n",

168 
	`gëpid
(), 
«me
, 
	`°ªº‹
(
î∫o
));

172 
	}
}

178 
	$ª«me_¥oc
()

180 
«me1
[
NAMESIZE
], 
«me2
[NAMESIZE];

181 
˘
;

183 
˘
=0; ct<
NTRIES
; ct++) {

184 
	`choo£_«me
(
«me1
, (name1));

185 
	`choo£_«me
(
«me2
, (name2));

186 
	`ßy
("pid %2d:Ñíamê%†-> %s\n", ()
	`gëpid
(), 
«me1
, 
«me2
);

187 
	`d‹íame
(
«me1
, 
«me2
);

189 
	}
}

193 
	$mkdú_¥oc
()

195 
«me
[
NAMESIZE
];

196 
˘
;

198 
˘
=0; ct<
NTRIES
; ct++) {

199 
	`choo£_«me
(
«me
, (name));

200 
	`ßy
("pid %2d: mkdú %s\n", ()
	`gëpid
(), 
«me
);

201 
	`domkdú
(
«me
);

203 
	}
}

207 
	$rmdú_¥oc
()

209 
«me
[
NAMESIZE
];

210 
˘
;

212 
˘
=0; ct<
NTRIES
; ct++) {

213 
	`choo£_«me
(
«me
, (name));

214 
	`ßy
("pid %2d:Ñmdú %s\n", ()
	`gëpid
(), 
«me
);

215 
	`d‹mdú
(
«me
);

217 
	}
}

222 
pid_t


223 
dof‹k
((*
func
)())

225 
pid_t
 
pid
;

227 
pid
 = 
	`f‹k
();

228 i‡(
pid
 < 0) {

229 
	`ßy
("f‹k: %s\n", 
	`°ªº‹
(
î∫o
));

232 i‡(
pid
 == 0) {

234 
	`func
();

235 
	`exô
(0);

237  
pid
;

238 
	}
}

242 
	$run
()

244 
pid_t
 
pids
[
NPROCS
*4], 
wp
;

245 
i
, 
°©us
;

247 
i
=0; i<
NPROCS
; i++) {

248 
pids
[
i
*4] = 
	`dof‹k
(
mkdú_¥oc
);

249 
pids
[
i
*4+1] = 
	`dof‹k
(
mkdú_¥oc
);

250 
pids
[
i
*4+2] = 
	`dof‹k
(
ª«me_¥oc
);

251 
pids
[
i
*4+3] = 
	`dof‹k
(
rmdú_¥oc
);

254 
i
=0; i<
NPROCS
*4; i++) {

255 i‡(
pids
[
i
]>=0) {

256 
wp
 = 
	`waôpid
(
pids
[
i
], &
°©us
, 0);

257 i‡(
wp
<0) {

258 
	`ßy
("waôpid %d: %s\n", (Ë
pids
[
i
],

259 
	`°ªº‹
(
î∫o
));

261 i‡(
	`WIFSIGNALED
(
°©us
)) {

262 
	`ßy
("pid %d: sig«»%d\n", (Ë
pids
[
i
],

263 
	`WTERMSIG
(
°©us
));

265 i‡(
	`WIFEXITED
(
°©us
Ë&& 
	`WEXITSTATUS
(status)!=0) {

266 
	`ßy
("pid %d:Éxô %d\n", (Ë
pids
[
i
],

267 
	`WEXITSTATUS
(
°©us
));

271 
	}
}

277 
	$£tup
(c⁄° *
fs
)

279 i‡(
	`chdú
(
fs
)<0) {

280 
	`ßy
("chdú: %s: %s\n", 
fs
, 
	`°ªº‹
(
î∫o
));

281 
	`exô
(1);

283 i‡(
	`mkdú
(
TESTDIR
, 0775)<0) {

284 
	`ßy
("mkdú: %s: %s\n", 
TESTDIR
, 
	`°ªº‹
(
î∫o
));

285 
	`exô
(1);

287 i‡(
	`chdú
(
TESTDIR
)<0) {

288 
	`ßy
("chdú: %s: %s\n", 
TESTDIR
, 
	`°ªº‹
(
î∫o
));

289 
	`exô
(1);

291 
	}
}

295 
	$ªcursive_˛ónup
(c⁄° *
soÁr
, 
dïth
)

297 
buf
[
NAMESIZE
*32];

298 
i
;

300 
i
=0; i<
NNAMES
; i++) {

301 
	`¢¥ötf
(
buf
, (buf), "%s/%s", 
soÁr
, 
«mes
[
i
]);

302 i‡(
	`rmdú
(
buf
)<0) {

303 i‡(
î∫o
==
ENOTEMPTY
) {

304 
	`ªcursive_˛ónup
(
buf
, 
dïth
+1);

305 
	`˛ónup_rmdú
(
buf
);

307 i‡(
î∫o
!=
ENOENT
) {

308 
	`ßy
("cleanup (pid %d):Ñmdir %s: %s\n",

309 
	`gëpid
(), 
buf
, 
	`°ªº‹
(
î∫o
));

313 
	}
}

317 
	$˛ónup
()

319 
	`ªcursive_˛ónup
(".", 0);

321 
	`chdú
("..");

322 
	`˛ónup_rmdú
(
TESTDIR
);

323 
	}
}

328 
	$maö
(
¨gc
, *
¨gv
[])

330 c⁄° *
fs
;

331 
£ed
 = 0;

333 
	`ßy
("Concurrent directory opsÅest\n");

335 i‡(
¨gc
==0 || 
¨gv
==
NULL
) {

336 
	`ßy
("Warning:árgc is 0 -ássuming you meanÅoÑun onÜhd1: "

338 
fs
 = "lhd1:";

340 i‡(
¨gc
==2) {

341 
fs
 = 
¨gv
[1];

343 i‡(
¨gc
==3) {

344 
fs
 = 
¨gv
[1];

345 
£ed
 = 
	`©oi
(
¨gv
[2]);

348 
	`ßy
("Usage: dirconc filesystem [random-seed]\n");

349 
	`exô
(1);

352 
	`§™dom
(
£ed
);

353 
	`£tup
(
fs
);

354 
	`ßy
("Sèπög i¿%s/%s\n", 
fs
, 
TESTDIR
);

356 
	`run
();

358 
	`ßy
("Cleaning up\n");

359 
	`˛ónup
();

362 
	}
}

	@test/os161/user/testbin/dirseek/dirseek.c

49 
	~<sys/ty≥s.h
>

50 
	~<sys/°©.h
>

51 
	~<uni°d.h
>

52 
	~<°rög.h
>

53 
	~<°dio.h
>

54 
	~<°dlib.h
>

55 
	~<îr.h
>

57 
	#TESTDIR
 "£ekã°dú"

	)

60 c⁄° *
	m«me
;

61 
	mmake_ô
;

62 
off_t
 
	mpos
;

63 } 
	gã°fûes
[] = {

84 { 
NULL
, 0, 0 }

91 
	gdúfd
;

95 
	$födíåy
(c⁄° *
«me
)

97 
i
;

99 
i
=0; 
ã°fûes
[i].
«me
; i++) {

100 i‡(!
	`°rcmp
(
ã°fûes
[
i
].
«me
,Çame)) {

101  
i
;

105 
	}
}

109 
	$›íô
()

111 
dúfd
 = 
	`›í
(".", 
O_RDONLY
);

112 i‡(
dúfd
 < 0) {

113 
	`îr
(1, ".: open");

115 
	}
}

119 
	$˛o£ô
()

121 i‡(
	`˛o£
(
dúfd
)<0) {

122 
	`îr
(1, ".: close");

124 
dúfd
 = -1;

125 
	}
}

129 
	$ªadô
()

131 
buf
[4096];

132 
off_t
 
pos
;

133 
Àn
;

134 
n
, 
i
, 
ix
;

136 
i
=0; 
ã°fûes
[i].
«me
; i++) {

137 
ã°fûes
[
i
].
pos
 = -1;

140 
pos
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_CUR
);

141 i‡(
pos
 < 0) {

142 
	`îr
(1, ".:Üseek(0, SEEK_CUR)");

144 
n
 = 0;

146 (
Àn
 = 
	`gëdúíåy
(
dúfd
, 
buf
, (buf)-1)) > 0) {

148 i‡(()
Àn
 >(
buf
)-1) {

149 
	`îrx
(1, ".:Éntry %d: getdirentryÑeturned "

150 "övÆidÜígth %d", 
n
, 
Àn
);

152 
buf
[
Àn
] = 0;

153 
ix
 = 
	`födíåy
(
buf
);

154 i‡(
ix
 < 0) {

155 
	`îrx
(1, ".:Éntry %d: getdirentryÑeturned "

156 "u√x≥˘edÇamê%s", 
n
, 
buf
);

159 i‡(
ã°fûes
[
ix
].
pos
 >= 0) {

160 
	`îrx
(1, ".:Éntry %d: getdirentryÑeturned "

161 "%†®£c⁄dÅime", 
n
, 
buf
);

164 
ã°fûes
[
ix
].
pos
 =Öos;

166 
pos
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_CUR
);

167 i‡(
pos
 < 0) {

168 
	`îr
(1, ".:Üseek(0, SEEK_CUR)");

170 
n
++;

172 i‡(
Àn
<0) {

173 
	`îr
(1, ".:É¡ry %d: gëdúíåy", 
n
);

176 
i
=0; 
ã°fûes
[i].
«me
; i++) {

177 i‡(
ã°fûes
[
i
].
pos
 < 0) {

178 
	`îrx
(1, ".: getdirentry failedÅoÑeturn %s",

179 
ã°fûes
[
i
].
«me
);

182 i‡(
i
!=
n
) {

189 
	`îrx
(1, ".: getdirentryÑeturned %dÇames,Çot %d (huh...?)",

190 
n
, 
i
);

192 
	}
}

196 
	$fú°ªad
()

198 
off_t
 
pos
;

200 
pos
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_CUR
);

201 i‡(
pos
 < 0) {

202 
	`îr
(1, ".:Üseek(0, SEEK_CUR)");

204 i‡(
pos
 != 0) {

205 
	`îrx
(1, ".: FileÖositionáfter openÇot 0");

208 
	`¥ötf
("Scanning directory...\n");

210 
	`ªadô
();

211 
	}
}

215 
	$d‹ód©0
()

217 
off_t
 
pos
;

219 
	`¥ötf
("Rewinding directoryándÑeading itágain...\n");

221 
pos
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_SET
);

222 i‡(
pos
 < 0) {

223 
	`îr
(1, ".:Üseek(0, SEEK_SET)");

225 i‡(
pos
 != 0) {

226 
	`îrx
(1, ".:Ü£ek(0, SEEK_SETËªtu∫ed %ld", (Ë
pos
);

229 
	`ªadô
();

230 
	}
}

234 
	$ªad⁄e
(c⁄° *
shouldbe
)

236 
buf
[4096];

237 
Àn
;

239 
Àn
 = 
	`gëdúíåy
(
dúfd
, 
buf
, (buf)-1);

240 i‡(
Àn
 < 0) {

241 
	`îr
(1, ".: getdirentry");

243 i‡(()
Àn
 >(
buf
)-1) {

244 
	`îrx
(1, ".: gëdúíåyÑëu∫ed invÆidÜígth %d", 
Àn
);

246 
buf
[
Àn
] = 0;

248 i‡(
	`°rcmp
(
buf
, 
shouldbe
)) {

249 
	`îrx
(1, ".: getdirentryÑeturned %s (expected %s)",

250 
buf
, 
shouldbe
);

252 
	}
}

256 
	$d‹ód⁄e
(
which
)

258 
off_t
 
pos
;

259 
pos
 = 
	`l£ek
(
dúfd
, 
ã°fûes
[
which
].pos, 
SEEK_SET
);

260 i‡(
pos
<0) {

261 
	`îr
(1, ".:Ü£ek(%ld, SEEK_SET)", (Ë
ã°fûes
[
which
].
pos
);

263 i‡(
pos
 !
ã°fûes
[
which
].pos) {

264 
	`îrx
(1, ".:Üseek(%ld, SEEK_SET)Ñeturned %ld",

265 (Ë
ã°fûes
[
which
].
pos
, ()Öos);

268 
	`ªad⁄e
(
ã°fûes
[
which
].
«me
);

269 
	}
}

273 
	$ªadÆl⁄eby⁄e
()

275 
i
;

277 
	`¥ötf
("TryingÅoÑeadÉachÉntryágain...\n");

278 
i
=0; 
ã°fûes
[i].
«me
; i++) {

279 
	`d‹ód⁄e
(
i
);

281 
	}
}

285 
	$ªadÆÃ™domly
()

287 
n
, 
i
, 
x
;

289 
	`¥ötf
("TryingÅoÑeadá bunch ofÉntriesÑandomly...\n");

291 
i
=0; 
ã°fûes
[i].
«me
; i++);

292 
n
 = 
i
;

294 
	`§™dom
(39584);

295 
i
=0; i<512; i++) {

296 
x
 = ()(
	`øndom
()%
n
);

297 
	`d‹ód⁄e
(
x
);

299 
	}
}

303 
	$ªad©eof
()

305 
buf
[4096];

306 
Àn
;

308 
Àn
 = 
	`gëdúíåy
(
dúfd
, 
buf
, (buf)-1);

309 i‡(
Àn
 < 0) {

310 
	`îr
(1, ".:át EOF: getdirentry");

312 i‡(
Àn
==0) {

315 i‡(()
Àn
 >(
buf
)-1) {

316 
	`îrx
(1, ".:át EOF: getdirentryÑeturned "

317 "övÆidÜígth %d", 
Àn
);

319 
buf
[
Àn
] = 0;

320 
	`îrx
(1, ".:áàEOF: gŸ u√x≥˘edÇamê%s", 
buf
);

321 
	}
}

325 
	$d‹ód©eof
()

327 
off_t
 
pos
;

328 
i
;

330 
	`¥ötf
("TryingÅoÑeadáfter goingÅo EOF...\n");

332 
pos
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_END
);

333 i‡(
pos
<0) {

334 
	`îr
(1, ".:Üseek(0, SEEK_END)");

337 
i
=0; 
ã°fûes
[i].
«me
; i++) {

338 i‡(
pos
 <
ã°fûes
[
i
].pos) {

339 
	`îrx
(1, ".: EOFÖosition %ld belowÖosition %ld of %s",

340 
pos
, 
ã°fûes
[
i
].pos,Åe°fûes[i].
«me
);

344 
	`ªad©eof
();

345 
	}
}

349 
	$övÆ_ªad
()

351 
buf
[4096];

352 
Àn
;

354 
Àn
 = 
	`gëdúíåy
(
dúfd
, 
buf
, (buf)-1);

357 ()
Àn
;

358 
	}
}

362 
	$dobadªads
()

364 
off_t
 
pos
, 
pos2
, 
eof
;

365 
vÆid
, 
i
, 
k
=0;

367 
	`¥ötf
("Trying someÖossibly invalidÑeads...\n");

369 
eof
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_END
);

370 i‡(
eof
 < 0) {

371 
	`îr
(1, ".:Üseek(0, SEEK_END)");

374 
pos
=0;Öo†< 
eof
;Öos++) {

375 
vÆid
 = 0;

376 
i
=0; 
ã°fûes
[i].
«me
; i++) {

377 i‡(
pos
==
ã°fûes
[
i
].pos) {

378 
vÆid
 = 1;

381 i‡(
vÆid
) {

386 
pos2
 = 
	`l£ek
(
dúfd
, 
pos
, 
SEEK_SET
);

387 i‡(
pos2
 < 0) {

391 
	`övÆ_ªad
();

392 
k
++;

396 i‡(
k
>0) {

397 
	`¥ötf
("Survived %d invÆidÑóds...\n", 
k
);

400 
	`¥ötf
("Couldn't findány invalid offsetsÅoÅry...\n");

403 
	`¥ötf
("TryingÅoÑead beyond EOF...\n");

404 
pos2
 = 
	`l£ek
(
dúfd
, 
eof
 + 1000, 
SEEK_SET
);

405 i‡(
pos2
 < 0) {

409 
	`övÆ_ªad
();

411 
	}
}

415 
	$dŸe°
()

417 
	`¥ötf
("Opening directory...\n");

418 
	`›íô
();

420 
	`¥ötf
("RunningÅests...\n");

423 
	`fú°ªad
();

426 
	`ªad©eof
();

429 
	`ªadÆl⁄eby⁄e
();

432 
	`d‹ód©eof
();

435 
	`ªadÆÃ™domly
();

438 
	`d‹ód©0
();

441 
	`dobadªads
();

444 
	`d‹ód©0
();

446 
	`¥ötf
("Closing directory...\n");

447 
	`˛o£ô
();

448 
	}
}

456 
	$mkfûe
(c⁄° *
«me
)

458 
fd
, 
i
, 
r
;

459 c⁄° 
mesßge
[] = "TheÅurtle moves!\n";

460 
buf
[32*(
mesßge
)+1];

462 
buf
[0]=0;

463 
i
=0; i<32; i++) {

464 
	`°rˇt
(
buf
, 
mesßge
);

468 
fd
 = 
	`›í
(
«me
, 
O_WRONLY
|
O_CREAT
|
O_EXCL
, 0664);

469 i‡(
fd
<0) {

470 
	`îr
(1, "%s: cª©e", 
«me
);

473 
r
 = 
	`wrôe
(
fd
, 
buf
, 
	`°æí
(buf));

474 i‡(
r
<0) {

475 
	`îr
(1, "%s: wrôe", 
«me
);

477 i‡(()
r
 !
	`°æí
(
buf
)) {

478 
	`îrx
(1, "%s: sh‹àwrôê(%d byãs)", 
«me
, 
r
);

481 i‡(
	`˛o£
(
fd
)<0) {

482 
	`îr
(1, "%s: clo£", 
«me
);

484 
	}
}

488 
	$£tup
()

490 
i
;

492 
	`¥ötf
("Makög dúe˘‹y %s...\n", 
TESTDIR
);

495 i‡(
	`mkdú
(
TESTDIR
, 0775)<0) {

496 
	`îr
(1, "%s: mkdú", 
TESTDIR
);

500 i‡(
	`chdú
(
TESTDIR
)<0) {

501 
	`îr
(1, "%s: chdú", 
TESTDIR
);

504 
	`¥ötf
("Making some files...\n");

507 
i
=0; 
ã°fûes
[i].
«me
; i++) {

508 i‡(
ã°fûes
[
i
].
make_ô
) {

509 
	`mkfûe
(
ã°fûes
[
i
].
«me
);

511 
ã°fûes
[
i
].
pos
 = -1;

513 
	}
}

517 
	$˛ónup
()

519 
i
;

521 
	`¥ötf
("Cleaning up...\n");

524 
i
=0; 
ã°fûes
[i].
«me
; i++) {

525 i‡(
ã°fûes
[
i
].
make_ô
) {

526 i‡(
	`ªmove
(
ã°fûes
[
i
].
«me
)<0) {

527 
	`îr
(1, "%s:Ñemove", 
ã°fûes
[
i
].
«me
);

533 i‡(
	`chdú
("..")<0) {

534 
	`îr
(1, "..: chdir");

538 i‡(
	`rmdú
(
TESTDIR
)<0) {

539 
	`îr
(1, "%s:Ñmdú", 
TESTDIR
);

541 
	}
}

545 
	$maö
()

547 
	`£tup
();

550 
	`dŸe°
();

551 
	`dŸe°
();

553 
	`˛ónup
();

555 
	}
}

	@test/os161/user/testbin/dirtest/dirtest.c

42 
	~<sys/ty≥s.h
>

43 
	~<sys/°©.h
>

44 
	~<°dio.h
>

45 
	~<uni°d.h
>

46 
	~<°rög.h
>

47 
	~<îr.h
>

49 
	#MAXLEVELS
 5

	)

52 
	$maö
()

54 
i
;

55 c⁄° *
⁄íame
 = "testdir";

56 
dú«me
[512];

58 
	`°r˝y
(
dú«me
, 
⁄íame
);

60 
i
=0; i<
MAXLEVELS
; i++) {

61 
	`¥ötf
("Cª©ög dúe˘‹y: %s\n", 
dú«me
);

63 i‡(
	`mkdú
(
dú«me
, 0755)) {

64 
	`îr
(1, "%s: mkdú", 
dú«me
);

67 
	`°rˇt
(
dú«me
, "/");

68 
	`°rˇt
(
dú«me
, 
⁄íame
);

71 
	`¥ötf
("Passed directory creationÅest.\n");

73 
i
=0; i<
MAXLEVELS
; i++) {

74 
dú«me
[
	`°æí
(dú«meË- såÀn(
⁄íame
) - 1] = 0;

76 
	`¥ötf
("Removög dúe˘‹y: %s\n", 
dú«me
);

78 i‡(
	`rmdú
(
dú«me
)) {

79 
	`îr
(1, "%s:Ñmdú", 
dú«me
);

82 
	`¥ötf
("Passed directoryÑemovalÅest.\n");

85 
	}
}

	@test/os161/user/testbin/f_test/f_hdr.h

30 
sub¥oc_ªad
();

31 
sub¥oc_wrôe
();

	@test/os161/user/testbin/f_test/f_read.c

44 
	#Se˘‹Size
 512

	)

46 
	#TMULT
 50

	)

47 
	#FSIZE
 ((
Se˘‹Size
 + 1Ë* 
TMULT
)

	)

49 
	#FNAME
 "f-ã°fûe"

	)

50 
	#READCHAR
 'r'

	)

51 
	#WRITECHAR
 'w'

	)

53 
	~<°dio.h
>

54 
	~<uni°d.h
>

55 
	~<îr.h
>

56 
	~"f_hdr.h
"

58 
	gbuf„r
[
Se˘‹Size
 + 1];

62 
	$check_buf„r
()

64 
i
;

65 
ch
 = 
buf„r
[0];

67 
i
 = 1; i < 
Se˘‹Size
 + 1; i++) {

68 i‡(
buf„r
[
i
] !
ch
) {

69 
	`îrx
(1, "RódÉº‹: %s", 
buf„r
);

73 
	`putch¨
(
ch
);

74 
	}
}

77 
	$sub¥oc_ªad
()

79 
fd
;

80 
i
, 
ªs
;

82 
	`¥ötf
("File Reader starting ...\n\n");

84 
fd
 = 
	`›í
(
FNAME
, 
O_RDONLY
);

85 i‡(
fd
 < 0) {

86 
	`îr
(1, "%s: o≥n", 
FNAME
);

89 
i
=0; i<
TMULT
; i++) {

90 
ªs
 = 
	`ªad
(
fd
, 
buf„r
, 
Se˘‹Size
 + 1);

91 i‡(
ªs
 < 0) {

92 
	`îr
(1, "%s:Ñód", 
FNAME
);

97 i‡(
ªs
 !
Se˘‹Size
 + 1) {

98 
	`îrx
(1, "%s:Ñód: sh‹àcou¡", 
FNAME
);

100 
	`check_buf„r
();

103 
	`˛o£
(
fd
);

105 
	`¥ötf
("File ReadÉxited successfully!\n");

106 
	}
}

	@test/os161/user/testbin/f_test/f_test.c

43 
	~<sys/ty≥s.h
>

44 
	~<sys/°©.h
>

45 
	~<°dio.h
>

46 
	~<°rög.h
>

47 
	~<uni°d.h
>

48 
	~<îr.h
>

49 
	~"f_hdr.h
"

51 
	#SECTOR_SIZE
 512

	)

54 
	#BUFFER_SIZE
 (2 * 
SECTOR_SIZE
 + 1)

	)

55 
	#BIGFILE_SIZE
 (270 * 
BUFFER_SIZE
)

	)

56 
	#BIGFILE_NAME
 "œrge-f"

	)

58 
	#LETTER
(
x
Ë('a' + (x % 31))

	)

60 
	gfbuf„r
[
BUFFER_SIZE
];

61 
	gibuf„r
[32];

64 
	#DIR_DEPTH
 8

	)

65 
	#DIR_NAME
 "/t"

	)

66 
	#DIRFILE_NAME
 "a"

	)

69 
	#FNAME
 "f-ã°fûe"

	)

70 
	#TMULT
 50

	)

71 
	#FSIZE
 ((
SECTOR_SIZE
 + 1Ë* 
TMULT
)

	)

73 
	#READCHAR
 'r'

	)

74 
	#WRITECHAR
 'w'

	)

76 
	gcbuf„r
[
SECTOR_SIZE
 + 1];

84 
pid_t


85 
f‹koff
((*
func
)())

87 
pid_t
 
pid
 = 
	`f‹k
();

88 
pid
) {

90 
	`w¨n
("fork");

93 
	`func
();

94 
	`_exô
(0);

97  
pid
;

98 
	}
}

102 
	$dowaô
(
pid
)

104 
°©us
;

106 i‡(
	`waôpid
(
pid
, &
°©us
, 0)<0) {

107 
	`w¨n
("waôpid f‹ %d", 
pid
);

109 i‡(
	`WIFSIGNALED
(
°©us
)) {

110 
	`w¨nx
("pid %d: sig«»%d", 
pid
, 
	`WTERMSIG
(
°©us
));

112 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

113 
	`w¨nx
("pid %d:Éxô %d", 
pid
, 
	`WEXITSTATUS
(
°©us
));

115 
	}
}

123 
	$big_fûe
(
size
)

125 
i
, 
j
, 
fûeid
;

127 
	`¥ötf
("[BIGFILE]Åest starting :\n");

128 
	`¥ötf
("\tCª©ögá fûêo‡size: %d\n", 
size
);

130 
fûeid
 = 
	`›í
(
BIGFILE_NAME
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

131 i‡(
fûeid
 < 0) {

132 
	`îr
(1, "[BIGFILE]: %s: o≥¿f‹ wrôe", 
BIGFILE_NAME
);

135 
i
 = 0; i < 
BUFFER_SIZE
; i++) {

136 
fbuf„r
[
i
] = 
	`LETTER
(i);

139 
	`¥ötf
("\tWritingÅo file.\n");

140 
i
 = 0; i < 
size
; i +
BUFFER_SIZE
) {

141 
	`wrôe
(
fûeid
, 
fbuf„r
, 
BUFFER_SIZE
);

143 i‡(!(
i
 % (10 * 
BUFFER_SIZE
))) {

144 
	`¥ötf
("\rBW : %d", 
i
);

148 
	`¥ötf
("\n\tReading from file.\n");

149 
	`˛o£
(
fûeid
);

151 
fûeid
 = 
	`›í
(
BIGFILE_NAME
, 
O_RDONLY
);

152 i‡(
fûeid
 < 0) {

153 
	`îr
(1, "[BIGFILE]: %s: o≥¿f‹Ñód", 
BIGFILE_NAME
);

156 
i
 = 0; i < 
size
; i +
BUFFER_SIZE
) {

157 
j
 = 
	`ªad
(
fûeid
, 
fbuf„r
, 
BUFFER_SIZE
);

158 i‡(
j
<0) {

159 
	`îr
(1, "[BIGFILE]:Ñead");

161 i‡(
j
 !
BUFFER_SIZE
) {

162 
	`îrx
(1, "[BIGFILE]:Ñód: o∆y %d byãs", 
j
);

166 i‡(!(
i
 % (10 * 
BUFFER_SIZE
))) {

167 
	`¥ötf
("\rBR : %d", 
i
);

171 
j
 = 0; j < 
BUFFER_SIZE
; j++) {

172 i‡(
fbuf„r
[
j
] !
	`LETTER
(j)) {

173 
	`îrx
(1, "[BIGFILE] : FailedÑead check : "

174 "öc⁄si°íàd©®ªad: %d", 
i
+
j
);

179 
	`˛o£
(
fûeid
);

180 i‡(
	`ªmove
(
BIGFILE_NAME
)) {

181 
	`îr
(1, "[BIGFILE]: %s:Ñemove", 
BIGFILE_NAME
);

184 
	`¥ötf
("\n[BIGFILE] : Success!\n");

185 
	}
}

193 
	$c⁄cur
()

195 
i
, 
fd
;

196 
r1
, 
r2
, 
w1
;

198 
	`¥ötf
("Spawning 2Ñeaders, 1 writer.\n");

201 
fd
 = 
	`›í
(
FNAME
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

202 i‡(
fd
 < 0) {

203 
	`îr
(1, "[CONCUR]: %s: o≥n", 
FNAME
);

206 
	`¥ötf
("InitializingÅest file: ");

208 
i
 = 0; i < 
SECTOR_SIZE
 + 1; i++) {

209 
cbuf„r
[
i
] = 
READCHAR
;

212 
i
 = 0; i < 
TMULT
; i++) {

213 
	`wrôe
(
fd
, 
cbuf„r
, 
SECTOR_SIZE
 + 1);

217 
	`˛o£
(
fd
);

219 
	`¥ötf
("Done initializing. StartingÖrocesses...\n");

221 
r1
 = 
	`f‹koff
(
sub¥oc_ªad
);

222 
w1
 = 
	`f‹koff
(
sub¥oc_wrôe
);

223 
r2
 = 
	`f‹koff
(
sub¥oc_ªad
);

225 
	`¥ötf
("Waiting forÖrocesses.\n");

227 
	`dowaô
(
r1
);

228 
	`dowaô
(
r2
);

229 
	`dowaô
(
w1
);

231 i‡(
	`ªmove
(
FNAME
)) {

232 
	`îr
(1, "[CONCUR]: %s:Ñemove", 
FNAME
);

235 
	`¥ötf
("[CONCUR] Done!\n");

236 
	}
}

244 
	$dú_ã°
(
dïth
)

246 
i
, 
fd
;

247 
tmp
[] = 
DIR_NAME
;

248 
fmp
[] = 
DIRFILE_NAME
;

249 
dú«me
[64];

251 
	`°r˝y
(
dú«me
, ".");

253 
i
 = 0; i < 
dïth
; i++) {

254 
	`°rˇt
(
dú«me
, 
tmp
);

256 
	`¥ötf
("\tCª©ög dú : %s\n", 
dú«me
);

258 i‡(
	`mkdú
(
dú«me
, 0775) < 0) {

259 
	`îr
(1, "[DIRTEST]: %s: mkdú", 
dú«me
);

262 
	`°rˇt
(
dú«me
, 
fmp
);

263 
	`¥ötf
("\tCª©ög fûe: %s\n", 
dú«me
);

265 
fd
 = 
	`›í
(
dú«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

266 i‡(
fd
<0) {

267 
	`îr
(1, "[DIRTEST]: %s: o≥n", 
dú«me
);

270 
dú«me
[
	`°æí
(dú«meË- såÀn(
fmp
)] = '\0';

273 
	`¥ötf
("[DIRTEST] : Passed directory creationÅest.\n");

275 
i
 = 0; i < 
dïth
; i++) {

276 
	`°rˇt
(
dú«me
, 
fmp
);

278 
	`¥ötf
("\tDñëög fûe: %s\n", 
dú«me
);

280 i‡(
	`ªmove
(
dú«me
)) {

281 
	`îr
(1, "[DIRTEST]: %s:Ñemove", 
dú«me
);

284 
dú«me
[
	`°æí
(dú«meË- såÀn(
fmp
)] = '\0';

285 
	`¥ötf
("\tRemovög dú : %s\n", 
dú«me
);

287 i‡(
	`rmdú
(
dú«me
)) {

288 
	`îr
(1, "[DIRTEST]: %s:Ñmdú", 
dú«me
);

291 
dú«me
[
	`°æí
(dú«meË- såÀn(
tmp
)] = '\0';

294 
	`¥ötf
("[DIRTEST] : Passed directoryÑemovalÅest.\n");

295 
	`¥ötf
("[DIRTEST] : Success!\n");

296 
	}
}

302 
	#RUNBIGFILE
 0x1

	)

303 
	#RUNDIRTEST
 0x2

	)

304 
	#RUNCONCUR
 0x4

	)

305 
	#RUNTHEMALL
 (
RUNBIGFILE
 | 
RUNDIRTEST
 | 
RUNCONCUR
)

	)

308 
	$maö
(
¨gc
, * 
¨gv
[])

310 
tv
 = 0;

312 i‡(
¨gc
 > 1) {

313 i‡(*
¨gv
[1]=='1') {

314 
tv
 = 
RUNBIGFILE
;

316 i‡(*
¨gv
[1]=='2') {

317 
tv
 = 
RUNDIRTEST
;

319 i‡(*
¨gv
[1]=='3') {

320 
tv
 = 
RUNCONCUR
;

324 
tv
 = 
RUNTHEMALL
;

327 i‡(
tv
 & 
RUNBIGFILE
) {

328 
	`¥ötf
("[BIGFILE] : Run #1\n");

329 
	`big_fûe
(
BIGFILE_SIZE
);

330 
	`¥ötf
("[BIGFILE] : Run #2\n");

331 
	`big_fûe
(
BIGFILE_SIZE
);

334 i‡(
tv
 & 
RUNDIRTEST
) {

335 
	`¥ötf
("[DIRTEST] : Run #1\n");

336 
	`dú_ã°
(
DIR_DEPTH
);

337 
	`¥ötf
("[DIRTEST] : Run #2\n");

338 
	`dú_ã°
(
DIR_DEPTH
);

341 i‡(
tv
 & 
RUNCONCUR
) {

342 
	`¥ötf
("[CONCUR]\n");

343 
	`c⁄cur
();

346 
	}
}

	@test/os161/user/testbin/f_test/f_write.c

44 
	#Se˘‹Size
 512

	)

46 
	#TMULT
 50

	)

47 
	#FSIZE
 ((
Se˘‹Size
 + 1Ë* 
TMULT
)

	)

49 
	#FNAME
 "f-ã°fûe"

	)

50 
	#READCHAR
 'r'

	)

51 
	#WRITECHAR
 'w'

	)

53 
	~<uni°d.h
>

54 
	~<°dio.h
>

55 
	~<îr.h
>

56 
	~"f_hdr.h
"

58 
	gbuf„r
[
Se˘‹Size
 + 1];

61 
	$sub¥oc_wrôe
()

63 
fd
;

64 
i
;

66 
i
=0; i < 
Se˘‹Size
 + 1; i++) {

67 
buf„r
[
i
] = 
WRITECHAR
;

70 
	`¥ötf
("File Writer starting ...\n");

72 
fd
 = 
	`›í
(
FNAME
, 
O_WRONLY
);

73 i‡(
fd
 < 0) {

74 
	`îr
(1, "%s: o≥n", 
FNAME
);

77 
i
=0; i<
TMULT
; i++) {

79 
	`wrôe
(
fd
, 
buf„r
, 
Se˘‹Size
 + 1);

82 
	`˛o£
(
fd
);

84 
	`¥ötf
("File WriteÉxited successfully!\n");

85 
	}
}

	@test/os161/user/testbin/farm/farm.c

40 
	~<uni°d.h
>

41 
	~<îr.h
>

43 *
	gh¨gv
[2] = { (*)"hog", 
NULL
 };

44 *
	gˇrgv
[3] = { (*)"ˇt", (*)"ˇtfûe", 
NULL
 };

46 
	#MAXPROCS
 6

	)

47 
	gpids
[
MAXPROCS
], 
	g≈ids
;

51 
	$•awnv
(c⁄° *
¥og
, **
¨gv
)

53 
pid
 = 
	`f‹k
();

54 
pid
) {

56 
	`îr
(1, "fork");

59 
	`execv
(
¥og
, 
¨gv
);

60 
	`îr
(1, "%s", 
¥og
);

63 
pids
[
≈ids
++] = 
pid
;

66 
	}
}

70 
	$waôÆl
()

72 
i
, 
°©us
;

73 
i
=0; i<
≈ids
; i++) {

74 i‡(
	`waôpid
(
pids
[
i
], &
°©us
, 0)<0) {

75 
	`w¨n
("waôpid f‹ %d", 
pids
[
i
]);

77 i‡(
	`WIFSIGNALED
(
°©us
)) {

78 
	`w¨nx
("pid %d: sig«»%d", 
pids
[
i
], 
	`WTERMSIG
(
°©us
));

80 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

81 
	`w¨nx
("pid %d:Éxô %d", 
pids
[
i
], 
	`WEXITSTATUS
(
°©us
));

84 
	}
}

88 
	$hog
()

90 
	`•awnv
("/ã°bö/hog", 
h¨gv
);

91 
	}
}

95 
	$ˇt
()

97 
	`•awnv
("/bö/ˇt", 
ˇrgv
);

98 
	}
}

101 
	$maö
()

103 
	`hog
();

104 
	`hog
();

105 
	`hog
();

106 
	`ˇt
();

108 
	`waôÆl
();

111 
	}
}

	@test/os161/user/testbin/faulter/faulter.c

39 
	~<°dio.h
>

41 
	#REALLY_BIG_ADDRESS
 0x40000000

	)

44 
	$maö
()

46 vﬁ©ûê
i
;

48 
	`¥ötf
("\nEnteringÅhe faulterÖrogram - I should die immediately\n");

49 
i
 = *(*)
REALLY_BIG_ADDRESS
;

50 
	`¥ötf
("I didn't get killed! Program hasá bug\n");

52 
	}
}

	@test/os161/user/testbin/filetest/filetest.c

41 
	~<°dio.h
>

42 
	~<°rög.h
>

43 
	~<uni°d.h
>

44 
	~<îr.h
>

47 
	$maö
(
¨gc
, *
¨gv
[])

49 
wrôebuf
[40] = "Twiddle dee dee, Twiddle dum dum.......\n";

50 
ªadbuf
[41];

52 
fd
, 
rv
;

54 i‡(
¨gc
!=2) {

55 
	`îrx
(1, "Usage: filetest <filename>");

58 
fd
 = 
	`›í
(
¨gv
[1], 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

59 i‡(
fd
<0) {

60 
	`îr
(1, "%s: o≥¿f‹ wrôe", 
¨gv
[1]);

64 
rv
 = 
	`wrôe
(
fd
, 
wrôebuf
, 40);

65 i‡(
rv
<0) {

66 
	`îr
(1, "%s: wrôe", 
¨gv
[1]);

69 
rv
 = 
	`˛o£
(
fd
);

70 i‡(
rv
<0) {

71 
	`îr
(1, "%s: clo£ (1°Åime)", 
¨gv
[1]);

74 
fd
 = 
	`›í
(
¨gv
[1], 
O_RDONLY
);

75 i‡(
fd
<0) {

76 
	`îr
(1, "%s: o≥¿f‹Ñód", 
¨gv
[1]);

79 
rv
 = 
	`ªad
(
fd
, 
ªadbuf
, 40);

80 i‡(
rv
<0) {

81 
	`îr
(1, "%s:Ñód", 
¨gv
[1]);

83 
rv
 = 
	`˛o£
(
fd
);

84 i‡(
rv
<0) {

85 
	`îr
(1, "%s: clo£ (2ndÅime)", 
¨gv
[1]);

88 
ªadbuf
[40] = 0;

90 i‡(
	`°rcmp
(
ªadbuf
, 
wrôebuf
)) {

91 
	`îrx
(1, "Buffer data mismatch!");

94 
rv
 = 
	`ªmove
(
¨gv
[1]);

95 i‡(
rv
<0) {

96 
	`îr
(1, "%s:Ñemove", 
¨gv
[1]);

98 
	`¥ötf
("Passed filetest.\n");

100 
	}
}

	@test/os161/user/testbin/forkbomb/forkbomb.c

50 
	~<uni°d.h
>

51 
	~<îr.h
>

53 vﬁ©ûê
	gpid
;

56 
	$maö
()

58 
i
;

61 
	`f‹k
();

63 
pid
 = 
	`gëpid
();

66 
i
=0; i<300; i++) {

67 vﬁ©ûê
£ípid
;

68 
£ípid
 = 
pid
;

69 i‡(
£ípid
 !
	`gëpid
()) {

70 
	`îrx
(1, "pid mismatch (%d, should be %d) "

72 
£ípid
, 
	`gëpid
());

76 
	}
}

	@test/os161/user/testbin/forktest/forktest.c

39 
	~<uni°d.h
>

40 
	~<°rög.h
>

41 
	~<°dlib.h
>

42 
	~<°dio.h
>

43 
	~<îr.h
>

49 vﬁ©ûê
	gmypid
;

56 
	$dof‹k
()

58 
pid
;

59 
pid
 = 
	`f‹k
();

60 i‡(
pid
 < 0) {

61 
	`w¨n
("fork");

63  
pid
;

64 
	}
}

73 
	$check
()

75 
i
;

77 
mypid
 = 
	`gëpid
();

80 
i
=0; i<800; i++) {

81 vﬁ©ûê
£ípid
;

82 
£ípid
 = 
mypid
;

83 i‡(
£ípid
 !
	`gëpid
()) {

84 
	`îrx
(1, "pid mismatch (%d, should be %d) "

86 
£ípid
, 
	`gëpid
());

89 
	}
}

102 
	$dowaô
(
nowaô
, 
pid
)

104 
x
;

106 i‡(
pid
<0) {

110 i‡(
pid
==0) {

112 
	`exô
(0);

115 i‡(!
nowaô
) {

116 i‡(
	`waôpid
(
pid
, &
x
, 0)<0) {

117 
	`w¨n
("waitpid");

119 i‡(
	`WIFSIGNALED
(
x
)) {

120 
	`w¨nx
("pid %d: sig«»%d", 
pid
, 
	`WTERMSIG
(
x
));

122 i‡(
	`WEXITSTATUS
(
x
) != 0) {

123 
	`w¨nx
("pid %d:Éxô %d", 
pid
, 
	`WEXITSTATUS
(
x
));

126 
	}
}

133 
	$ã°
(
nowaô
)

135 
pid0
, 
pid1
, 
pid2
, 
pid3
;

144 
pid0
 = 
	`dof‹k
();

145 
	`putch¨
('0');

146 
	`check
();

147 
pid1
 = 
	`dof‹k
();

148 
	`putch¨
('1');

149 
	`check
();

150 
pid2
 = 
	`dof‹k
();

151 
	`putch¨
('2');

152 
	`check
();

153 
pid3
 = 
	`dof‹k
();

154 
	`putch¨
('3');

155 
	`check
();

161 
	`dowaô
(
nowaô
, 
pid3
);

162 
	`dowaô
(
nowaô
, 
pid2
);

163 
	`dowaô
(
nowaô
, 
pid1
);

164 
	`dowaô
(
nowaô
, 
pid0
);

166 
	`putch¨
('\n');

167 
	}
}

170 
	$maö
(
¨gc
, *
¨gv
[])

172 
nowaô
=0;

174 i‡(
¨gc
==2 && !
	`°rcmp
(
¨gv
[1], "-w")) {

175 
nowaô
=1;

177 i‡(
¨gc
!=1 &&árgc!=0) {

178 
	`w¨nx
("usage: forktest [-w]");

181 
	`w¨nx
("Starting.");

183 
	`ã°
(
nowaô
);

185 
	`w¨nx
("Complete.");

187 
	}
}

	@test/os161/user/testbin/guzzle/guzzle.c

37 
	~<°dio.h
>

38 
	~<uni°d.h
>

40 
	#TOP
 1<<25

	)

46 
	$maö
(
¨gc
, *
¨gv
[])

48 vﬁ©ûê
i
;

49 
ch
 = '+';

51 i‡(
¨gc
 == 2) {

52 
ch
 = 
¨gv
[1][0];

55 
i
=0; i<
TOP
; i++) {

57 i‡–(
i
%10000) == 0) {

58 
	`putch¨
(
ch
);

62 
	}
}

	@test/os161/user/testbin/hash/hash.c

41 
	~<°dio.h
>

42 
	~<uni°d.h
>

43 
	~<f˙é.h
>

44 
	~<îr.h
>

46 #ifde‡
HOST


47 
	~"ho°com∑t.h
"

50 
	#HASHP
 104729

	)

53 
	$maö
(
¨gc
, *
¨gv
[])

55 
fd
;

56 
ªadbuf
[1];

57 
j
 = 0;

59 #ifde‡
HOST


60 
	`ho°com∑t_öô
(
¨gc
, 
¨gv
);

63 i‡(
¨gc
 != 2) {

64 
	`îrx
(1, "Usage: hash filename");

67 
fd
 = 
	`›í
(
¨gv
[1], 
O_RDONLY
, 0664);

69 i‡(
fd
<0) {

70 
	`îr
(1, "%s", 
¨gv
[1]);

74 i‡(
	`ªad
(
fd
, 
ªadbuf
, 1) <= 0) ;

75 
j
 = ((j*8Ë+ (Ë
ªadbuf
[0]Ë% 
HASHP
;

78 
	`˛o£
(
fd
);

80 
	`¥ötf
("Hash : %d\n", 
j
);

83 
	}
}

	@test/os161/user/testbin/hog/hog.c

38 
	$maö
()

40 vﬁ©ûê
i
;

42 
i
=0; i<50000; i++)

46 
	}
}

	@test/os161/user/testbin/huge/huge.c

40 
	~<°dio.h
>

41 
	~<°dlib.h
>

43 
	#PageSize
 4096

	)

44 
	#NumPages
 512

	)

46 
	g•¨£
[
NumPages
][
PageSize
];

49 
	$maö
()

51 
i
,
j
;

53 
	`¥ötf
("EnteringÅhe hugeÖrogram - I will stressÅest your VM\n");

56 
i
=0; i<
NumPages
; i++) {

57 
•¨£
[
i
][0]=i;

60 
	`¥ötf
("stage [1] done\n");

63 
j
=0; j<5; j++) {

64 
i
=0; i<
NumPages
; i++) {

65 
•¨£
[
i
][0]++;

67 
	`¥ötf
("°agê[2.%d] d⁄e\n", 
j
);

70 
	`¥ötf
("stage [2] done\n");

73 
i
=
NumPages
-1; i>=0; i--) {

74 i‡(
•¨£
[
i
][0]!=i+5) {

75 
	`¥ötf
("BAD NEWS!!! - your VM mechanism hasá bug!\n");

76 
	`exô
(1);

80 
	`¥ötf
("YouÖassed!\n");

83 
	}
}

	@test/os161/user/testbin/kitchen/kitchen.c

38 
	~<uni°d.h
>

39 
	~<îr.h
>

41 *
	gßrgv
[2] = { (*)"sök", 
NULL
 };

43 
	#MAXPROCS
 6

	)

44 
	gpids
[
MAXPROCS
], 
	g≈ids
;

48 
	$sök
()

50 
pid
 = 
	`f‹k
();

51 
pid
) {

53 
	`îr
(1, "fork");

56 
	`execv
("/ã°bö/sök", 
ßrgv
);

57 
	`îr
(1, "/testbin/sink");

60 
pids
[
≈ids
++] = 
pid
;

63 
	}
}

67 
	$waôÆl
()

69 
i
, 
°©us
;

70 
i
=0; i<
≈ids
; i++) {

71 i‡(
	`waôpid
(
pids
[
i
], &
°©us
, 0)<0) {

72 
	`w¨n
("waôpid f‹ %d", 
pids
[
i
]);

74 i‡(
	`WIFSIGNALED
(
°©us
)) {

75 
	`w¨nx
("pid %d: sig«»%d", 
pids
[
i
], 
	`WTERMSIG
(
°©us
));

77 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

78 
	`w¨nx
("pid %d:Éxô %d", 
pids
[
i
], 
	`WEXITSTATUS
(
°©us
));

81 
	}
}

85 
	$maö
()

87 
	`sök
();

88 
	`sök
();

89 
	`sök
();

90 
	`sök
();

92 
	`waôÆl
();

95 
	}
}

	@test/os161/user/testbin/malloctest/malloctest.c

40 
	~<°döt.h
>

41 
	~<°dio.h
>

42 
	~<°dlib.h
>

43 
	~<uni°d.h
>

44 
	~<f˙é.h
>

45 
	~<îr.h
>

48 
	#_PATH_RANDOM
 "øndom:"

	)

50 
	#SMALLSIZE
 72

	)

51 
	#MEDIUMSIZE
 896

	)

52 
	#BIGSIZE
 16384

	)

53 
	#HUGESIZE
 (1024 * 1024 * 1024)

	)

56 
	#OVERHEAD
 32

	)

59 
	#ABSURD_OVERHEAD
 256

	)

63 
	$gëi
()

65 
vÆ
=0;

66 
ch
, 
digôs
=0;

69 
ch
 = 
	`gëch¨
();

70 i‡(
ch
=='\n' || ch=='\r') {

71 
	`putch¨
('\n');

74 i‡((
ch
=='\b' || ch==127Ë&& 
digôs
>0) {

75 
	`¥ötf
("\b \b");

76 
vÆ
 = val/10;

77 
digôs
--;

79 i‡(
ch
>='0' && ch<='9') {

80 
	`putch¨
(
ch
);

81 
vÆ
 = vÆ*10 + (
ch
-'0');

82 
digôs
++;

85 
	`putch¨
('\a');

89 i‡(
digôs
==0) {

92  
vÆ
;

93 
	}
}

102 
	$m¨kblock
(vﬁ©ûê*
±r
, 
size_t
 
size
, 
büs
, 
d›röt
)

104 
size_t
 
n
, 
i
;

105 *
∂
;

106 
vÆ
;

108 
∂
 = (*)
±r
;

109 
n
 = 
size
 / ();

111 
i
=0; i<
n
; i++) {

112 
vÆ
 = (()
i
 ^ ()
büs
);

113 
∂
[
i
] = 
vÆ
;

114 i‡(
d›röt
 && (
i
%64==63)) {

115 
	`¥ötf
(".");

118 i‡(
d›röt
) {

119 
	`¥ötf
("\n");

121 
	}
}

128 
	$checkblock
(vﬁ©ûê*
±r
, 
size_t
 
size
, 
büs
, 
d›röt
)

130 
size_t
 
n
, 
i
;

131 *
∂
;

132 
vÆ
;

134 
∂
 = (*)
±r
;

135 
n
 = 
size
 / ();

137 
i
=0; i<
n
; i++) {

138 
vÆ
 = (()
i
 ^ ()
büs
);

139 i‡(
∂
[
i
] !
vÆ
) {

140 i‡(
d›röt
) {

141 
	`¥ötf
("\n");

143 
	`¥ötf
("FAILED: data mismatchát offset %lu of block "

145 (Ë(
i
*()),

146 ()(
uöçå_t
)
∂
,

147 
∂
[
i
], 
vÆ
);

150 i‡(
d›röt
 && (
i
%64==63)) {

151 
	`¥ötf
(".");

154 i‡(
d›röt
) {

155 
	`¥ötf
("\n");

159 
	}
}

172 
	$ã°1
()

174 vﬁ©ûê*
x
;

176 
	`¥ötf
("*** MallocÅest 1 ***\n");

177 
	`¥ötf
("AŒoˇtög %u byãs\n", 
BIGSIZE
);

178 
x
 = 
	`mÆloc
(
BIGSIZE
);

179 i‡(
x
==
NULL
) {

180 
	`¥ötf
("FAILED: malloc failed\n");

184 
	`m¨kblock
(
x
, 
BIGSIZE
, 0, 0);

185 i‡(
	`checkblock
(
x
, 
BIGSIZE
, 0, 0)) {

186 
	`¥ötf
("FAILED: data corrupt\n");

190 
	`‰ì
((*)
x
);

192 
	`¥ötf
("Passed mallocÅest 1.\n");

193 
	}
}

230 
	$ã°2
()

232 vﬁ©ûê*
x
;

233 
size_t
 
size
;

235 
	`¥ötf
("Entering mallocÅest 2.\n");

236 
	`¥ötf
("Make sure youÑeadánd understandÅhe comment in malloctest.c "

239 
	`¥ötf
("Testing how much memory we canállocate:\n");

241 
size
 = 
HUGESIZE
; (
x
 = 
	`mÆloc
(size))==
NULL
; size = size/2) {

242 
	`¥ötf
(" %9lu byãs: faûed\n", (Ë
size
);

244 
	`¥ötf
(" %9lu byãs: suc˚eded\n", (Ë
size
);

246 
	`¥ötf
("PassedÖart 1\n");

248 
	`¥ötf
("TouchingállÅhe words inÅhe block.\n");

249 
	`m¨kblock
(
x
, 
size
, 0, 1);

251 
	`¥ötf
("ValidatingÅhe words inÅhe block.\n");

252 i‡(
	`checkblock
(
x
, 
size
, 0, 1)) {

253 
	`¥ötf
("FAILED: data corrupt\n");

256 
	`¥ötf
("PassedÖart 2\n");

259 
	`¥ötf
("FreeingÅhe block\n");

260 
	`‰ì
((*)
x
);

261 
	`¥ötf
("PassedÖart 3\n");

262 
	`¥ötf
("Allocatingánother block\n");

264 
x
 = 
	`mÆloc
(
size
);

265 i‡(
x
==
NULL
) {

266 
	`¥ötf
("FAILED: free didn'tÑeturnÅhe memory?\n");

269 
	`‰ì
((*)
x
);

271 
	`¥ötf
("Passed mallocÅest 2.\n");

272 
	}
}

288 
	sã°3
 {

289 
ã°3
 *
	m√xt
;

290 
	mjunk
[(
SMALLSIZE
 - (
ã°3
 *))];

295 
	$ã°3
()

297 
ã°3
 *
li°
 = 
NULL
, *
tmp
;

298 
size_t
 
tŸ
=0;

299 
˘
=0, 
Áûed
=0;

300 *
x
;

302 
	`¥ötf
("Entering mallocÅest 3.\n");

303 
	`¥ötf
("Make sure youÑeadánd understandÅhe comment in malloctest.c "

306 
	`¥ötf
("Testing how much memory we canállocate:\n");

308 (
tmp
 = 
	`mÆloc
((
ã°3
))Ë!
NULL
) {

310 
tmp
->
√xt
 = 
li°
;

311 
li°
 = 
tmp
;

313 
tŸ
 +(
ã°3
);

315 
	`m¨kblock
(
li°
->
junk
, ÷i°->junk), (
uöçå_t
)list, 0);

317 
˘
++;

318 i‡(
˘
%128==0) {

319 
	`¥ötf
(".");

323 
	`¥ötf
("AŒoˇãd %lu byãs\n", (Ë
tŸ
);

325 
	`¥ötf
("Trying some moreállocations which IÉxpectÅo fail...\n");

327 
x
 = 
	`mÆloc
(
SMALLSIZE
);

328 i‡(
x
 !
NULL
) {

329 
	`¥ötf
("FAILED: mÆloc(%uËsuc˚eded\n", 
SMALLSIZE
);

333 
x
 = 
	`mÆloc
(
MEDIUMSIZE
);

334 i‡(
x
 !
NULL
) {

335 
	`¥ötf
("FAILED: mÆloc(%uËsuc˚eded\n", 
MEDIUMSIZE
);

339 
x
 = 
	`mÆloc
(
BIGSIZE
);

340 i‡(
x
 !
NULL
) {

341 
	`¥ötf
("FAILED: mÆloc(%uËsuc˚eded\n", 
BIGSIZE
);

345 
	`¥ötf
("Ok,Çow I'm goingÅo freeÉverything...\n");

347 
li°
 !
NULL
) {

348 
tmp
 = 
li°
->
√xt
;

350 i‡(
	`checkblock
(
li°
->
junk
, (list->junk),

351 (
uöçå_t
)
li°
, 0)) {

352 
Áûed
 = 1;

355 
	`‰ì
(
li°
);

356 
li°
 = 
tmp
;

359 i‡(
Áûed
) {

360 
	`¥ötf
("FAILED: data corruption\n");

364 
	`¥ötf
("Let me see if I canállocate some moreÇow...\n");

366 
x
 = 
	`mÆloc
(
MEDIUMSIZE
);

367 i‡(
x
 =
NULL
) {

368 
	`¥ötf
("FAIL: Nope, I couldn't.\n");

371 
	`‰ì
(
x
);

373 
	`¥ötf
("Passed mallocÅest 3\n");

374 
	}
}

389 
	$ã°4
()

391 *
x
, *
y
, *
z
;

392 
lx
, 
ly
, 
lz
, 
ovîhód
, 
zsize
;

394 
	`¥ötf
("Entering mallocÅest 4.\n");

395 
	`¥ötf
("ThisÅest is intended for first/best-fit based mallocs.\n");

396 
	`¥ötf
("ThisÅest mayÇot work correctly ifÑunáfter otherÅests.\n");

398 
	`¥ötf
("Testing freeÜist coalescing:\n");

400 
x
 = 
	`mÆloc
(
SMALLSIZE
);

401 i‡(
x
==
NULL
) {

402 
	`¥ötf
("FAILED: mÆloc(%uËÁûed\n", 
SMALLSIZE
);

406 
y
 = 
	`mÆloc
(
MEDIUMSIZE
);

407 i‡(
y
==
NULL
) {

408 
	`¥ötf
("FAILED: mÆloc(%uËÁûed\n", 
MEDIUMSIZE
);

413 
	`¥ötf
("Buh? I can't fitá void * inán unsignedÜong\n");

414 
	`¥ötf
("ENVIRONMENT FAILED...\n");

418 
lx
 = ()
x
;

419 
ly
 = ()
y
;

421 
	`¥ötf
("x i†0x%lx; y i†0x%lx\n", 
lx
, 
ly
);

432 i‡(
lx
 =
ly
) {

433 
	`¥ötf
("FAIL: x == y\n");

443 i‡(
lx
 < 
ly
 &&Üx + 
SMALLSIZE
 >Üy) {

444 
	`¥ötf
("FAIL: y starts within x\n");

447 i‡(
ly
 < 
lx
 &&Üy + 
MEDIUMSIZE
 >Üx) {

448 
	`¥ötf
("FAIL: x starts within y\n");

457 i‡(
ly
 < 
lx
) {

458 
	`¥ötf
("TEST UNSUITABLE: y is below x\n");

465 
ovîhód
 = 
ly
 - (
lx
 + 
SMALLSIZE
);

466 
	`¥ötf
("Aµ¨íàblock ovîhód: %lu\n", 
ovîhód
);

468 i‡(
ovîhód
 > 
ABSURD_OVERHEAD
) {

469 
	`¥ötf
("TEST UNSUITABLE: block overheadábsurdlyÜarge.\n");

472 i‡(
ovîhód
 > 
OVERHEAD
) {

473 
	`¥ötf
("FAIL: block overhead isÅooÜarge.\n");

477 
	`¥ötf
("Freeing blocks...\n");

478 
	`‰ì
(
x
);

479 
	`‰ì
(
y
);

481 
zsize
 = 
SMALLSIZE
 + 
MEDIUMSIZE
 + 
ovîhód
;

483 
	`¥ötf
("NowáŒoˇtög %lu byãs... shouldÑeu£Åhê•a˚.\n", 
zsize
);

484 
z
 = 
	`mÆloc
(
zsize
);

485 i‡(
z
 =
NULL
) {

486 
	`¥ötf
("FAIL: Allocation failed...\n");

490 
lz
 = (Ë
z
;

492 
	`¥ötf
("z i†0x%lx (x wa†0x%lx, y 0x%lx)\n", 
lz
, 
lx
, 
ly
);

494 i‡(
lz
==
lx
) {

495 
	`¥ötf
("Passed.\n");

498 
	`¥ötf
("Failed.\n");

501 
	`‰ì
(
z
);

502 
	}
}

518 
	$ã°567
(
ã°no
, 
£ed
)

520 c⁄° 
sizes
[8] = { 13, 17, 69, 176, 433, 871, 1150, 6060 };

522 *
±rs
[32];

523 
psizes
[32];

524 
i
, 
n
, 
size
, 
Áûed
=0;

526 
	`§™dom
(
£ed
);

527 
	`¥ötf
("SìdedÑ™domÇumbî gíî©‹ wôh %lu.\n", 
£ed
);

529 
i
=0; i<32; i++) {

530 
±rs
[
i
] = 
NULL
;

531 
psizes
[
i
] = 0;

534 
i
=0; i<100000; i++) {

535 
n
 = 
	`øndom
()%32;

536 i‡(
±rs
[
n
] =
NULL
) {

537 
size
 = 
sizes
[
	`øndom
()%8];

538 
±rs
[
n
] = 
	`mÆloc
(
size
);

539 
psizes
[
n
] = 
size
;

540 i‡(
±rs
[
n
] =
NULL
) {

541 
	`¥ötf
("\nmÆlo¯%u faûed\n", 
size
);

542 
Áûed
 = 1;

545 
	`m¨kblock
(
±rs
[
n
], 
size
,Ç, 0);

548 
size
 = 
psizes
[
n
];

549 i‡(
	`checkblock
(
±rs
[
n
], 
size
,Ç, 0)) {

550 
Áûed
 = 1;

553 
	`‰ì
(
±rs
[
n
]);

554 
±rs
[
n
] = 
NULL
;

555 
psizes
[
n
] = 0;

557 i‡(
i
%256==0) {

558 
	`¥ötf
(".");

561 
	`¥ötf
("\n");

563 
i
=0; i<32; i++) {

564 i‡(
±rs
[
i
] !
NULL
) {

565 
	`‰ì
(
±rs
[
i
]);

569 i‡(
Áûed
) {

570 
	`¥ötf
("FAILED mÆlo¯ã° %d\n", 
ã°no
);

573 
	`¥ötf
("Pas£d mÆlo¯ã° %d\n", 
ã°no
);

575 
	}
}

579 
	$ã°5
()

581 
	`¥ötf
("Beginning mallocÅest 5\n");

582 
	`ã°567
(5, 0);

583 
	}
}

587 
	$ã°6
()

589 
fd
, 
Àn
;

590 
£ed
;

592 
	`¥ötf
("Beginning mallocÅest 6\n");

594 
fd
 = 
	`›í
(
_PATH_RANDOM
, 
O_RDONLY
);

595 i‡(
fd
 < 0) {

596 
	`îr
(1, "%s", 
_PATH_RANDOM
);

598 
Àn
 = 
	`ªad
(
fd
, &
£ed
, (seed));

599 i‡(
Àn
 < 0) {

600 
	`îr
(1, "%s", 
_PATH_RANDOM
);

602 i‡(
Àn
 < ()(
£ed
)) {

603 
	`îrx
(1, "%s: Sh‹àªad", 
_PATH_RANDOM
);

605 
	`˛o£
(
fd
);

607 
	`ã°567
(6, 
£ed
);

608 
	}
}

612 
	$ã°7
()

614 
£ed
;

616 
	`¥ötf
("Beginning mallocÅest 7\n");

618 
	`¥ötf
("EnterÑandom seed: ");

619 
£ed
 = 
	`gëi
();

621 
	`ã°567
(7, 
£ed
);

622 
	}
}

627 
	mnum
;

628 c⁄° *
	mdesc
;

629 (*
	mfunc
)();

630 } 
	gã°s
[] = {

631 { 1, "Sim∂êÆloˇti⁄Åe°", 
ã°1
 },

632 { 2, "AŒoˇãáŒ mem‹y i¿®big chunk", 
ã°2
 },

633 { 3, "AŒoˇãáŒ mem‹y i¿smÆ»chunks", 
ã°3
 },

634 { 4, "Fªêli° cﬂÀscögÅe° (fú°/√xt/be°-fô o∆y)", 
ã°4
 },

635 { 5, "Såes†ã°", 
ã°5
 },

636 { 6, "R™domized såes†ã°", 
ã°6
 },

637 { 7, "Såes†ã° wôhÖ¨ticuœ∏£ed", 
ã°7
 },

638 { -1, 
NULL
, NULL }

643 
	$dŸe°
(
ä
)

645 
i
;

646 
i
=0; 
ã°s
[i].
num
>=0; i++) {

647 i‡(
ã°s
[
i
].
num
 =
ä
) {

648 
ã°s
[
i
].
	`func
();

653 
	}
}

656 
	$maö
(
¨gc
, *
¨gv
[])

658 
i
, 
ä
, 
míu
=1;

660 i‡(
¨gc
 > 1) {

661 
i
=1; i<
¨gc
; i++) {

662 
	`dŸe°
(
	`©oi
(
¨gv
[
i
]));

668 i‡(
míu
) {

669 
i
=0; 
ã°s
[i].
num
>=0; i++) {

670 
	`¥ötf
(" %2d %s\n", 
ã°s
[
i
].
num
,

671 
ã°s
[
i
].
desc
);

673 
míu
 = 0;

675 
	`¥ötf
("malloctest: ");

676 
ä
 = 
	`gëi
();

677 i‡(
ä
 < 0) {

681 i‡(
	`dŸe°
(
ä
)) {

682 
míu
 = 1;

687 
	}
}

	@test/os161/user/testbin/matmult/matmult-orig.c

48 
	~<uni°d.h
>

49 
	~<°dio.h
>

51 
	#Dim
 360

	)

55 
	#RIGHT
 46397160

	)

57 
	gA
[
Dim
][Dim];

58 
	gB
[
Dim
][Dim];

59 
	gC
[
Dim
][Dim];

62 
	$maö
()

64 
i
, 
j
, 
k
, 
r
;

66 
i
 = 0; i < 
Dim
; i++)

67 
j
 = 0; j < 
Dim
; j++) {

68 
A
[
i
][
j
] = i;

69 
B
[
i
][
j
] = j;

70 
C
[
i
][
j
] = 0;

73 
i
 = 0; i < 
Dim
; i++)

74 
j
 = 0; j < 
Dim
; j++)

75 
k
 = 0; k < 
Dim
; k++)

76 
C
[
i
][
j
] +
A
[i][
k
] * 
B
[k][j];

78 
	`¥ötf
("matmult-orig finished.\n");

79 
r
 = 
C
[
Dim
-1][Dim-1];

80 
	`¥ötf
("™swî is: %d (should bê%d)\n", 
r
, 
RIGHT
);

81 i‡(
r
 !
RIGHT
) {

82 
	`¥ötf
("FAILED\n");

85 
	`¥ötf
("Passed.\n");

88 
	}
}

	@test/os161/user/testbin/matmult/matmult.c

42 
	~<uni°d.h
>

43 
	~<°dio.h
>

45 
	#Dim
 72

	)

49 
	#RIGHT
 8772192

	)

51 
	gA
[
Dim
][Dim];

52 
	gB
[
Dim
][Dim];

53 
	gC
[
Dim
][Dim];

54 
	gT
[
Dim
][Dim][Dim];

57 
	$maö
()

59 
i
, 
j
, 
k
, 
r
;

61 
i
 = 0; i < 
Dim
; i++)

62 
j
 = 0; j < 
Dim
; j++) {

63 
A
[
i
][
j
] = i;

64 
B
[
i
][
j
] = j;

65 
C
[
i
][
j
] = 0;

68 
i
 = 0; i < 
Dim
; i++)

69 
j
 = 0; j < 
Dim
; j++)

70 
k
 = 0; k < 
Dim
; k++)

71 
T
[
i
][
j
][
k
] = 
A
[i][k] * 
B
[k][j];

73 
i
 = 0; i < 
Dim
; i++)

74 
j
 = 0; j < 
Dim
; j++)

75 
k
 = 0; k < 
Dim
; k++)

76 
C
[
i
][
j
] +
T
[i][j][
k
];

78 
r
 = 0;

79 
i
 = 0; i < 
Dim
; i++)

80 
r
 +
C
[
i
][i];

82 
	`¥ötf
("matmult finished.\n");

83 
	`¥ötf
("™swî is: %d (should bê%d)\n", 
r
, 
RIGHT
);

84 i‡(
r
 !
RIGHT
) {

85 
	`¥ötf
("FAILED\n");

88 
	`¥ötf
("Passed.\n");

90 
	}
}

	@test/os161/user/testbin/palin/palin.c

84 
	~<°dio.h
>

85 
	~<°rög.h
>

87 
	g∑lödrome
[8000] =

174 
	$maö
()

176 *
°¨t
, *
íd
;

178 
	`¥ötf
("WelcomeÅoÅheÖalindromeÅester!\n");

179 
	`¥ötf
("I willÅakeáÜargeÖalindromeándÅest it.\n");

180 
	`¥ötf
("Here it is:\n");

181 
	`¥ötf
("%s\n", 
∑lödrome
);

183 
	`¥ötf
("Testing...");

185 
íd
 = 
∑lödrome
+
	`°æí
(palindrome);

186 
íd
--;

188 
°¨t
 = 
∑lödrome
; sèπ <
íd
; start++,Énd--) {

189 
	`putch¨
('.');

190 i‡(*
°¨t
 !*
íd
) {

191 
	`¥ötf
("NOTáÖalindrome\n");

196 
	`¥ötf
("ISáÖalindrome\n");

198 
	}
}

	@test/os161/user/testbin/parallelvm/parallelvm.c

39 
	~<sys/ty≥s.h
>

40 
	~<sys/waô.h
>

41 
	~<°d¨g.h
>

42 
	~<°dio.h
>

43 
	~<°rög.h
>

44 
	~<°dlib.h
>

45 
	~<uni°d.h
>

46 
	~<îr.h
>

48 
	#NJOBS
 24

	)

50 
	#DIM
 35

	)

51 
	#NMATS
 11

	)

52 
	#JOBSIZE
 ((
NMATS
+1)*
DIM
*DIM*())

	)

54 c⁄° 
	gright_™swîs
[
NJOBS
] = {

83 
	sm©rix
 {

84 
	mm_d©a
[
DIM
][DIM];

95 
	$ßy
(c⁄° *
fmt
, ...)

97 
buf
[256];

98 
va_li°
 
≠
;

99 
	`va_°¨t
(
≠
, 
fmt
);

100 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
≠
);

101 
	`va_íd
(
≠
);

102 
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
	`°æí
(buf));

103 
	}
}

109 
	$mu…ùly
(
m©rix
 *
ªs
, c⁄° m©rix *
m1
, c⁄° m©rix *
m2
)

111 
i
, 
j
, 
k
;

113 
i
=0; i<
DIM
; i++) {

114 
j
=0; j<
DIM
; j++) {

115 
vÆ
=0;

116 
k
=0; k<
DIM
; k++) {

117 
vÆ
 +
m1
->
m_d©a
[
i
][
k
]*
m2
->m_d©a[k][
j
];

119 
ªs
->
m_d©a
[
i
][
j
] = 
vÆ
;

122 
	}
}

126 
	$addeq
(
m©rix
 *
m1
, c⁄° m©rix *
m2
)

128 
i
, 
j
;

129 
i
=0; i<
DIM
; i++) {

130 
j
=0; j<
DIM
; j++) {

131 
m1
->
m_d©a
[
i
][
j
] +
m2
->m_data[i][j];

134 
	}
}

138 
	$åa˚
(c⁄° 
m©rix
 *
m1
)

140 
i
, 
t
=0;

141 
i
=0; i<
DIM
; i++) {

142 
t
 +
m1
->
m_d©a
[
i
][i];

144  
t
;

145 
	}
}

149 
m©rix
 
	gm©s
[
NMATS
];

153 
	$p›uœã_öôül_m©rixes
(
mynum
)

155 
i
,
j
;

156 
m©rix
 *
m
 = &
m©s
[0];

157 
i
=0; i<
DIM
; i++) {

158 
j
=0; j<
DIM
; j++) {

159 
m
->
m_d©a
[
i
][
j
] = 
mynum
+i-2*j;

163 
	`mu…ùly
(&
m©s
[1], &mats[0], &mats[0]);

164 
	}
}

168 
	$compuã
(
n
)

170 
m©rix
 
tmp
;

171 
i
, 
j
;

173 
i
=0,
j
=
n
-1; i<j; i++,j--) {

174 
	`mu…ùly
(&
tmp
, &
m©s
[
i
], &m©s[
j
]);

175 
	`addeq
(&
m©s
[
n
], &
tmp
);

177 
	}
}

181 
	$compuãÆl
(
mynum
)

183 
i
;

184 
	`p›uœã_öôül_m©rixes
(
mynum
);

185 
i
=2; i<
NMATS
; i++) {

186 
	`compuã
(
i
);

188 
	}
}

192 
	$™swî
()

194  
	`åa˚
(&
m©s
[
NMATS
-1]);

195 
	}
}

199 
	$go
(
mynum
)

201 
r
;

203 
	`ßy
("Pro˚s†%d (pid %dË°¨tög compuèti⁄...\n", 
mynum
,

204 (Ë
	`gëpid
());

206 
	`compuãÆl
(
mynum
);

207 
r
 = 
	`™swî
();

209 i‡(
r
 !
right_™swîs
[
mynum
]) {

210 
	`ßy
("Process %dánswer %d: FAILED, should be %d\n",

211 
mynum
, 
r
, 
right_™swîs
[mynum]);

212 
	`exô
(1);

214 
	`ßy
("Pro˚s†%dánswî %d:Öas£d\n", 
mynum
, 
r
);

215 
	`exô
(0);

216 
	}
}

222 
	$°©us_is_Áûuª
(
°©us
)

225 i‡(
	`WIFSIGNALED
(
°©us
)) {

228 i‡(!
	`WIFEXITED
(
°©us
)) {

232 
°©us
 = 
	`WEXITSTATUS
(status);

233  
°©us
 != 0;

234 
	}
}

238 
	$makïrocs
()

240 
i
, 
°©us
, 
Áûcou¡
;

241 
pid_t
 
pids
[
NJOBS
];

243 
	`¥ötf
("Job sizê≠¥oxim©ñy %lu byãs\n", (Ë
JOBSIZE
);

244 
	`¥ötf
("F‹kög %d jobs;ÅŸÆÜﬂd %luk\n", 
NJOBS
,

245 (Ë(
NJOBS
 * 
JOBSIZE
)/1024);

247 
i
=0; i<
NJOBS
; i++) {

248 
pids
[
i
] = 
	`f‹k
();

249 i‡(
pids
[
i
]<0) {

250 
	`w¨n
("fork");

252 i‡(
pids
[
i
]==0) {

254 
	`go
(
i
);

258 
Áûcou¡
=0;

259 
i
=0; i<
NJOBS
; i++) {

260 i‡(
pids
[
i
]<0) {

261 
Áûcou¡
++;

264 i‡(
	`waôpid
(
pids
[
i
], &
°©us
, 0)<0) {

265 
	`îr
(1, "waitpid");

267 i‡(
	`°©us_is_Áûuª
(
°©us
)) {

268 
Áûcou¡
++;

273 i‡(
Áûcou¡
>0) {

274 
	`¥ötf
("%d sub¥o˚s£†Áûed\n", 
Áûcou¡
);

275 
	`exô
(1);

277 
	`¥ötf
("Test complete\n");

278 
	}
}

281 
	$maö
()

283 
	`makïrocs
();

285 
	}
}

	@test/os161/user/testbin/psort/psort.c

39 
	~<sys/ty≥s.h
>

40 
	~<sys/°©.h
>

41 
	~<sys/waô.h
>

42 
	~<°dio.h
>

43 
	~<°d¨g.h
>

44 
	~<°dlib.h
>

45 
	~<°rög.h
>

46 
	~<as£π.h
>

47 
	~<uni°d.h
>

48 
	~<f˙é.h
>

49 
	~<î∫o.h
>

51 #i‚de‡
RANDOM_MAX


53 
	#RANDOM_MAX
 
RAND_MAX


	)

56 
	#PATH_KEYS
 "s‹tkeys"

	)

57 
	#PATH_SORTED
 "ouçut"

	)

58 
	#PATH_TESTDIR
 "ps‹tdú"

	)

59 
	#PATH_RANDOM
 "ønd:"

	)

61 
	#WORKNUM
 (128*1024)

	)

64 
	gw‹k•a˚
[
WORKNUM
];

66 c⁄° *
	g¥og«me
;

68 
	gnum¥ocs
 = 4;

69 
	gnumkeys
 = 10000;

70 
	gøndom£ed
 = 15432753;

72 
off_t
 
	gc‹ª˘size
;

73 
	gchecksum
;

75 
	#NOBODY
 (-1)

	)

76 
	gme
 = 
NOBODY
;

82 
	$s‹töts
(*
v
, 
num
)

84 
pivŸvÆ
, 
pivŸpoöt
, 
pivŸcou¡
;

85 
‰⁄ços
, 
ªadpos
, 
ídpos
, 
i
, 
j
;

86 
tmp
;

88 i‡(
num
 < 2) {

92 
pivŸpoöt
 = 
num
/2;

93 
pivŸvÆ
 = 
v
[
pivŸpoöt
];

94 
pivŸcou¡
 = 0;

96 
‰⁄ços
 = 0;

97 
ªadpos
 = 0;

98 
ídpos
 = 
num
;

99 
ªadpos
 < 
ídpos
) {

100 i‡(
v
[
ªadpos
] < 
pivŸvÆ
) {

101 
v
[
‰⁄ços
++] = v[
ªadpos
++];

103 i‡(
v
[
ªadpos
] =
pivŸvÆ
) {

104 
ªadpos
++;

105 
pivŸcou¡
++;

108 
tmp
 = 
v
[--
ídpos
];

109 
v
[
ídpos
] = v[
ªadpos
];

110 
v
[
ªadpos
] = 
tmp
;

113 
	`as£π
(
ªadpos
 =
ídpos
);

114 
	`as£π
(
‰⁄ços
 + 
pivŸcou¡
 =
ªadpos
);

116 
i
=
‰⁄ços
; i<
ídpos
; i++) {

117 
v
[
i
] = 
pivŸvÆ
;

120 
i
=
ídpos
, 
j
=
num
-1; i<j; i++,j--) {

121 
tmp
 = 
v
[
i
];

122 
v
[
i
] = v[
j
];

123 
v
[
j
] = 
tmp
;

126 
	`s‹töts
(
v
, 
‰⁄ços
);

127 
	`s‹töts
(&
v
[
ídpos
], 
num
-endpos);

128 
	}
}

134 
	$öô¥og«me
(c⁄° *
av0
)

136 i‡(
av0
) {

137 
¥og«me
 = 
	`°ºchr
(
av0
, '/');

138 i‡(
¥og«me
) {

139 
¥og«me
++;

142 
¥og«me
 = 
av0
;

146 
¥og«me
 = "psort";

148 
	}
}

152 
	$vscom∂aö
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, 
va_li°
 
≠
, 
îr
)

154 
size_t
 
pos
;

156 i‡(
me
 >= 0) {

157 
	`¢¥ötf
(
buf
, 
Àn
, "%s:Öro¯%d: ", 
¥og«me
, 
me
);

160 
	`¢¥ötf
(
buf
, 
Àn
, "%s: ", 
¥og«me
);

162 
pos
 = 
	`°æí
(
buf
);

164 
	`v¢¥ötf
(
buf
+
pos
, 
Àn
-pos, 
fmt
, 
≠
);

165 
pos
 = 
	`°æí
(
buf
);

167 i‡(
îr
 >= 0) {

168 
	`¢¥ötf
(
buf
+
pos
, 
Àn
-pos, ": %s\n", 
	`°ªº‹
(
îr
));

171 
	`¢¥ötf
(
buf
+
pos
, 
Àn
-pos, "\n");

173 
	}
}

177 
	$com∂aöx
(c⁄° *
fmt
, ...)

179 
rc
;

180 
buf
[256];

181 
va_li°
 
≠
;

183 
	`va_°¨t
(
≠
, 
fmt
);

184 
	`vscom∂aö
(
buf
, (buf), 
fmt
, 
≠
, -1);

185 
	`va_íd
(
≠
);

188 
rc
 = 
	`wrôe
(
STDERR_FILENO
, 
buf
, 
	`°æí
(buf));

191 ()
rc
;

192 
	}
}

196 
	$com∂aö
(c⁄° *
fmt
, ...)

198 
rc
;

199 
buf
[256];

200 
va_li°
 
≠
;

201 
îr
 = 
î∫o
;

203 
	`va_°¨t
(
≠
, 
fmt
);

204 
	`vscom∂aö
(
buf
, (buf), 
fmt
, 
≠
, 
îr
);

205 
	`va_íd
(
≠
);

208 
rc
 = 
	`wrôe
(
STDERR_FILENO
, 
buf
, 
	`°æí
(buf));

211 ()
rc
;

212 
	}
}

218 
	$do›í
(c⁄° *
∑th
, 
Êags
, 
mode
)

220 
fd
;

222 
fd
 = 
	`›í
(
∑th
, 
Êags
, 
mode
);

223 i‡(
fd
<0) {

224 
	`com∂aö
("%s", 
∑th
);

225 
	`exô
(1);

227  
fd
;

228 
	}
}

232 
	$do˛o£
(c⁄° *
∑th
, 
fd
)

234 i‡(
	`˛o£
(
fd
)) {

235 
	`com∂aö
("%s: clo£", 
∑th
);

236 
	`exô
(1);

238 
	}
}

242 
	$do¸óã
(c⁄° *
∑th
)

244 
fd
;

246 
fd
 = 
	`do›í
(
∑th
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

247 
	`do˛o£
(
∑th
, 
fd
);

248 
	}
}

252 
	$d‹emove
(c⁄° *
∑th
)

254 
n‹emove
;

256 i‡(
n‹emove
) {

260 i‡(
	`ªmove
(
∑th
) < 0) {

261 i‡(
î∫o
 =
ENOSYS
) {

263 
n‹emove
 = 1;

265 
	`com∂aö
("%s:Ñemove", 
∑th
);

267 
	}
}

270 
off_t


271 
	$gësize
(c⁄° *
∑th
)

273 
°©
 
buf
;

274 
fd
;

275 
no_°©
, 
no_f°©
;

277 i‡(!
no_°©
) {

278 i‡(
	`°©
(
∑th
, &
buf
) == 0) {

279  
buf
.
°_size
;

281 i‡(
î∫o
 !
ENOSYS
) {

282 
	`com∂aö
("%s: sèt", 
∑th
);

283 
	`exô
(1);

286 
no_°©
 = 1;

289 
fd
 = 
	`do›í
(
∑th
, 
O_RDONLY
, 0);

290 i‡(!
no_f°©
) {

291 i‡(
	`f°©
(
fd
, &
buf
) == 0) {

292 
	`˛o£
(
fd
);

293  
buf
.
°_size
;

295 i‡(
î∫o
 !
ENOSYS
) {

296 
	`com∂aö
("%s: sèt", 
∑th
);

297 
	`exô
(1);

300 
no_f°©
 = 1;

304 i‡(
	`l£ek
(
fd
, 0, 
SEEK_END
) >= 0) {

305 
buf
.
°_size
 = 
	`l£ek
(
fd
, 0, 
SEEK_CUR
);

306 i‡(
buf
.
°_size
 >= 0) {

307  
buf
.
°_size
;

310 
	`com∂aö
("%s: gëtög fûêsizêwôhÜ£ek", 
∑th
);

311 
	`˛o£
(
fd
);

312 
	`exô
(1);

313 
	}
}

316 
size_t


317 
	$d‹ód
(c⁄° *
∑th
, 
fd
, *
buf
, 
size_t
 
Àn
)

319 
ªsu…
;

321 
ªsu…
 = 
	`ªad
(
fd
, 
buf
, 
Àn
);

322 i‡(
ªsu…
 < 0) {

323 
	`com∂aö
("%s:Ñód", 
∑th
);

324 
	`exô
(1);

326  (
size_t
Ë
ªsu…
;

327 
	}
}

331 
	$d€xa˘ªad
(c⁄° *
∑th
, 
fd
, *
buf
, 
size_t
 
Àn
)

333 
size_t
 
ªsu…
;

335 
ªsu…
 = 
	`d‹ód
(
∑th
, 
fd
, 
buf
, 
Àn
);

336 i‡(
ªsu…
 !
Àn
) {

337 
	`com∂aöx
("%s:Ñód: sh‹àcou¡", 
∑th
);

338 
	`exô
(1);

340 
	}
}

344 
	$dowrôe
(c⁄° *
∑th
, 
fd
, c⁄° *
buf
, 
size_t
 
Àn
)

346 
ªsu…
;

348 
ªsu…
 = 
	`wrôe
(
fd
, 
buf
, 
Àn
);

349 i‡(
ªsu…
 < 0) {

350 
	`com∂aö
("%s: wrôe", 
∑th
);

351 
	`exô
(1);

353 i‡((
size_t
Ë
ªsu…
 !
Àn
) {

354 
	`com∂aöx
("%s: wrôe: sh‹àcou¡", 
∑th
);

355 
	`exô
(1);

357 
	}
}

361 
	$dﬁ£ek
(c⁄° *
«me
, 
fd
, 
off_t
 
off£t
, 
whí˚
)

363 i‡(
	`l£ek
(
fd
, 
off£t
, 
whí˚
) < 0) {

364 
	`com∂aö
("%s:Ü£ek", 
«me
);

365 
	`exô
(1);

367 
	}
}

372 
	$dochdú
(c⁄° *
∑th
)

374 i‡(
	`chdú
(
∑th
) < 0) {

375 
	`com∂aö
("%s: chdú", 
∑th
);

376 
	`exô
(1);

378 
	}
}

382 
	$domkdú
(c⁄° *
∑th
, 
mode
)

384 i‡(
	`mkdú
(
∑th
, 
mode
) < 0) {

385 
	`com∂aö
("%s: mkdú", 
∑th
);

386 
	`exô
(1);

388 
	}
}

392 
pid_t


393 
	$dof‹k
()

395 
pid_t
 
pid
;

397 
pid
 = 
	`f‹k
();

398 i‡(
pid
 < 0) {

399 
	`com∂aö
("fork");

403  
pid
;

404 
	}
}

410 
	$dowaô
(
guy
, 
pid_t
 
pid
)

412 
°©us
, 
ªsu…
;

414 
ªsu…
 = 
	`waôpid
(
pid
, &
°©us
, 0);

415 i‡(
ªsu…
 < 0) {

416 
	`com∂aö
("waitpid");

419 i‡(
	`WIFSIGNALED
(
°©us
)) {

420 
	`com∂aöx
("¥o¯%d: sig«»%d", 
guy
, 
	`WTERMSIG
(
°©us
));

423 
	`as£π
(
	`WIFEXITED
(
°©us
));

424 
°©us
 = 
	`WEXITSTATUS
(status);

425 i‡(
°©us
) {

426 
	`com∂aöx
("¥o¯%d:Éxô %d", 
guy
, 
°©us
);

430 
	}
}

434 
dof‹kÆl
(c⁄° *
pha£«me
, (*
func
)())

436 
i
, 
bad
 = 0;

437 
pid_t
 
pids
[
num¥ocs
];

439 
i
=0; i<
num¥ocs
; i++) {

440 
pids
[
i
] = 
	`dof‹k
();

441 i‡(
pids
[
i
] < 0) {

442 
bad
 = 1;

444 i‡(
pids
[
i
] == 0) {

446 
me
 = 
i
;

447 
	`func
();

448 
	`exô
(0);

452 
i
=0; i<
num¥ocs
; i++) {

453 i‡(
pids
[
i
] > 0 && 
	`dowaô
(i,Öids[i])) {

454 
bad
 = 1;

458 i‡(
bad
) {

459 
	`com∂aöx
("%†Áûed.", 
pha£«me
);

460 
	`exô
(1);

462 
	}
}

466 
	$£ekmy∂a˚
(c⁄° *
«me
, 
fd
)

468 
keys_≥r
, 
myfú°
;

469 
off_t
 
off£t
;

471 
keys_≥r
 = 
numkeys
 / 
num¥ocs
;

472 
myfú°
 = 
me
*
keys_≥r
;

473 
off£t
 = 
myfú°
 * ();

475 
	`dﬁ£ek
(
«me
, 
fd
, 
off£t
, 
SEEK_SET
);

476 
	}
}

480 
	$gëmykeys
()

482 
keys_≥r
, 
myfú°
, 
mykeys
;

484 
keys_≥r
 = 
numkeys
 / 
num¥ocs
;

485 
myfú°
 = 
me
*
keys_≥r
;

486 
mykeys
 = (
me
 < 
num¥ocs
-1Ë? 
keys_≥r
 : 
numkeys
 - 
myfú°
;

488  
mykeys
;

489 
	}
}

495 
	$checksum_fûe
(c⁄° *
∑th
)

497 
fd
;

498 
buf
[512];

499 
size_t
 
cou¡
, 
i
;

500 
sum
 = 0;

502 
fd
 = 
	`do›í
(
∑th
, 
O_RDONLY
, 0);

504 (
cou¡
 = 
	`d‹ód
(
∑th
, 
fd
, 
buf
, (buf))) > 0) {

505 
i
=0; i<
cou¡
; i++) {

506 
sum
 +(Ë
buf
[
i
];

510 
	`do˛o£
(
∑th
, 
fd
);

512  
sum
;

513 
	}
}

517 *
	g£eds
;

521 
	$gíkeys_sub
()

523 
fd
, 
i
, 
mykeys
, 
keys_d⁄e
, 
keys_to_do
, 
vÆue
;

525 
fd
 = 
	`do›í
(
PATH_KEYS
, 
O_WRONLY
, 0);

527 
mykeys
 = 
	`gëmykeys
();

528 
	`£ekmy∂a˚
(
PATH_KEYS
, 
fd
);

530 
	`§™dom
(
£eds
[
me
]);

531 
keys_d⁄e
 = 0;

532 
keys_d⁄e
 < 
mykeys
) {

533 
keys_to_do
 = 
mykeys
 - 
keys_d⁄e
;

534 i‡(
keys_to_do
 > 
WORKNUM
) {

535 
keys_to_do
 = 
WORKNUM
;

538 
i
=0; i<
keys_to_do
; i++) {

539 
vÆue
 = 
	`øndom
();

542 
	`as£π
(
vÆue
 >= 0);

543 
	`as£π
(
vÆue
 <
RANDOM_MAX
);

546 
vÆue
 =0 || vÆuê=
RANDOM_MAX
) {

547 
vÆue
 = 
	`øndom
();

550 
w‹k•a˚
[
i
] = 
vÆue
;

553 
	`dowrôe
(
PATH_KEYS
, 
fd
, 
w‹k•a˚
, 
keys_to_do
*());

554 
keys_d⁄e
 +
keys_to_do
;

557 
	`do˛o£
(
PATH_KEYS
, 
fd
);

558 
	}
}

562 
	$gíkeys
()

564 
£ed•a˚
[
num¥ocs
];

565 
i
;

568 
	`do¸óã
(
PATH_KEYS
);

571 
	`§™dom
(
øndom£ed
);

572 
i
=0; i<
num¥ocs
; i++) {

573 
£ed•a˚
[
i
] = 
	`øndom
();

577 
£eds
 = 
£ed•a˚
;

578 
	`dof‹kÆl
("Inôüliz©i⁄", 
gíkeys_sub
);

579 
£eds
 = 
NULL
;

582 i‡(
	`gësize
(
PATH_KEYS
Ë!
c‹ª˘size
) {

583 
	`com∂aöx
("%s: fûêi†wr⁄g size", 
PATH_KEYS
);

584 
	`exô
(1);

588 
checksum
 = 
	`checksum_fûe
(
PATH_KEYS
);

589 
	`com∂aöx
("Checksum o‡uns‹ãd keys: %ld", 
checksum
);

590 
	}
}

596 
	$bö«me
(
a
, 
b
)

598 
rv
[32];

599 
	`¢¥ötf
(
rv
, ‘v), "bö-%d-%d", 
a
, 
b
);

600  
rv
;

601 
	}
}

605 
	$mîged«me
(
a
)

607 
rv
[32];

608 
	`¢¥ötf
(
rv
, ‘v), "mîged-%d", 
a
);

609  
rv
;

610 
	}
}

614 
	$bö
()

616 
öfd
, 
outfds
[
num¥ocs
];

617 c⁄° *
«me
;

618 
i
, 
mykeys
, 
keys_d⁄e
, 
keys_to_do
;

619 
key
, 
pivŸ
, 
bönum
;

621 
öfd
 = 
	`do›í
(
PATH_KEYS
, 
O_RDONLY
, 0);

623 
mykeys
 = 
	`gëmykeys
();

624 
	`£ekmy∂a˚
(
PATH_KEYS
, 
öfd
);

626 
i
=0; i<
num¥ocs
; i++) {

627 
«me
 = 
	`bö«me
(
me
, 
i
);

628 
outfds
[
i
] = 
	`do›í
(
«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

631 
pivŸ
 = (
RANDOM_MAX
 / 
num¥ocs
);

633 
keys_d⁄e
 = 0;

634 
keys_d⁄e
 < 
mykeys
) {

635 
keys_to_do
 = 
mykeys
 - 
keys_d⁄e
;

636 i‡(
keys_to_do
 > 
WORKNUM
) {

637 
keys_to_do
 = 
WORKNUM
;

640 
	`d€xa˘ªad
(
PATH_KEYS
, 
öfd
, 
w‹k•a˚
,

641 
keys_to_do
 * ());

643 
i
=0; i<
keys_to_do
; i++) {

644 
key
 = 
w‹k•a˚
[
i
];

646 
bönum
 = 
key
 / 
pivŸ
;

647 i‡(
key
 <= 0) {

648 
	`com∂aöx
("¥o¯%d: g¨bagêkey %d", 
me
, 
key
);

649 
key
 = 0;

651 
	`as£π
(
bönum
 >= 0);

652 
	`as£π
(
bönum
 < 
num¥ocs
);

653 
	`dowrôe
("bö", 
outfds
[
bönum
], &
key
, (key));

656 
keys_d⁄e
 +
keys_to_do
;

658 
	`do˛o£
(
PATH_KEYS
, 
öfd
);

660 
i
=0; i<
num¥ocs
; i++) {

661 
	`do˛o£
(
	`bö«me
(
me
, 
i
), 
outfds
[i]);

663 
	}
}

667 
	$s‹tbös
()

669 c⁄° *
«me
;

670 
i
, 
fd
;

671 
off_t
 
bösize
;

673 
i
=0; i<
num¥ocs
; i++) {

674 
«me
 = 
	`bö«me
(
me
, 
i
);

675 
bösize
 = 
	`gësize
(
«me
);

676 i‡(
bösize
 % () != 0) {

677 
	`com∂aöx
("%s: bö sizê%ldÇÿgood", 
«me
,

678 (Ë
bösize
);

679 
	`exô
(1);

681 i‡(
bösize
 > (
off_t
Ë(
w‹k•a˚
)) {

682 
	`com∂aöx
("¥o¯%d: %s: böÅoÿœrge", 
me
, 
«me
);

683 
	`exô
(1);

686 
fd
 = 
	`do›í
(
«me
, 
O_RDWR
, 0);

687 
	`d€xa˘ªad
(
«me
, 
fd
, 
w‹k•a˚
, 
bösize
);

689 
	`s‹töts
(
w‹k•a˚
, 
bösize
/());

691 
	`dﬁ£ek
(
«me
, 
fd
, 0, 
SEEK_SET
);

692 
	`dowrôe
(
«me
, 
fd
, 
w‹k•a˚
, 
bösize
);

693 
	`do˛o£
(
«me
, 
fd
);

695 
	}
}

699 
	$mîgebös
()

701 
öfds
[
num¥ocs
], 
outfd
;

702 
vÆues
[
num¥ocs
], 
ªady
[numprocs];

703 c⁄° *
«me
, *
ouäame
;

704 
i
, 
ªsu…
;

705 
numªady
, 
∂a˚
, 
vÆ
, 
w‹knum
;

707 
ouäame
 = 
	`mîged«me
(
me
);

708 
outfd
 = 
	`do›í
(
ouäame
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

710 
i
=0; i<
num¥ocs
; i++) {

711 
«me
 = 
	`bö«me
(
i
, 
me
);

712 
öfds
[
i
] = 
	`do›í
(
«me
, 
O_RDONLY
, 0);

713 
vÆues
[
i
] = 0;

714 
ªady
[
i
] = 0;

717 
w‹knum
 = 0;

720 
numªady
 = 0;

721 
i
=0; i<
num¥ocs
; i++) {

722 i‡(
öfds
[
i
] < 0) {

726 i‡(!
ªady
[
i
]) {

727 
ªsu…
 = 
	`d‹ód
("bö", 
öfds
[
i
],

728 &
vÆ
, ());

729 i‡(
ªsu…
 == 0) {

730 
	`do˛o£
("bö", 
öfds
[
i
]);

731 
öfds
[
i
] = -1;

734 i‡((
size_t
Ë
ªsu…
 != ()) {

735 
	`com∂aöx
("%s:Ñead: short count",

736 
	`bö«me
(
i
, 
me
));

737 
	`exô
(1);

739 
vÆues
[
i
] = 
vÆ
;

740 
ªady
[
i
] = 1;

742 
numªady
++;

744 i‡(
numªady
 == 0) {

749 
∂a˚
 = -1;

750 
i
=0; i<
num¥ocs
; i++) {

751 i‡(!
ªady
[
i
]) {

754 i‡(
∂a˚
 < 0 || 
vÆues
[
i
] < 
vÆ
) {

755 
vÆ
 = 
vÆues
[
i
];

756 
∂a˚
 = 
i
;

759 
	`as£π
(
∂a˚
 >= 0);

761 
w‹k•a˚
[
w‹knum
++] = 
vÆ
;

762 i‡(
w‹knum
 >
WORKNUM
) {

763 
	`as£π
(
w‹knum
 =
WORKNUM
);

764 
	`dowrôe
(
ouäame
, 
outfd
, 
w‹k•a˚
,

765 
w‹knum
 * ());

766 
w‹knum
 = 0;

768 
ªady
[
∂a˚
] = 0;

771 
	`dowrôe
(
ouäame
, 
outfd
, 
w‹k•a˚
, 
w‹knum
 * ());

772 
	`do˛o£
(
ouäame
, 
outfd
);

774 
i
=0; i<
num¥ocs
; i++) {

775 
	`as£π
(
öfds
[
i
] < 0);

777 
	}
}

781 
	$as£mbÀ
()

783 
off_t
 
mypos
;

784 
i
, 
fd
;

785 c⁄° *
¨gs
[3];

787 
mypos
 = 0;

788 
i
=0; i<
me
; i++) {

789 
mypos
 +
	`gësize
(
	`mîged«me
(
i
));

792 
fd
 = 
	`do›í
(
PATH_SORTED
, 
O_WRONLY
, 0);

793 
	`dﬁ£ek
(
PATH_SORTED
, 
fd
, 
mypos
, 
SEEK_SET
);

795 i‡(
	`dup2
(
fd
, 
STDOUT_FILENO
) < 0) {

796 
	`com∂aö
("dup2");

797 
	`exô
(1);

800 
	`do˛o£
(
PATH_SORTED
, 
fd
);

802 
¨gs
[0] = "cat";

803 
¨gs
[1] = 
	`mîged«me
(
me
);

804 
¨gs
[2] = 
NULL
;

805 
	`execv
("/bö/ˇt", (**Ë
¨gs
);

806 
	`com∂aö
("/bin/cat:Éxec");

807 
	`exô
(1);

808 
	}
}

812 
	$checksize_bös
()

814 
off_t
 
tŸsize
;

815 
i
, 
j
;

817 
tŸsize
 = 0;

818 
i
=0; i<
num¥ocs
; i++) {

819 
j
=0; j<
num¥ocs
; j++) {

820 
tŸsize
 +
	`gësize
(
	`bö«me
(
i
, 
j
));

823 i‡(
tŸsize
 !
c‹ª˘size
) {

824 
	`com∂aö
("Sum of bin sizes is wrong (%ld, should be %ld)",

825 (Ë
tŸsize
, (Ë
c‹ª˘size
);

826 
	`exô
(1);

828 
	}
}

832 
	$checksize_mîge
()

834 
off_t
 
tŸsize
;

835 
i
;

837 
tŸsize
 = 0;

838 
i
=0; i<
num¥ocs
; i++) {

839 
tŸsize
 +
	`gësize
(
	`mîged«me
(
i
));

841 i‡(
tŸsize
 !
c‹ª˘size
) {

842 
	`com∂aö
("Sum of merged sizes is wrong (%ld, should be %ld)",

843 (Ë
tŸsize
, (Ë
c‹ª˘size
);

844 
	`exô
(1);

846 
	}
}

850 
	$s‹t
()

852 
s‹ãdsum
;

853 
i
, 
j
;

856 
	`dof‹kÆl
("Tossög", 
bö
);

857 
	`checksize_bös
();

858 
	`com∂aöx
("DoneÅossing into bins.");

861 
	`dof‹kÆl
("S‹tög", 
s‹tbös
);

862 
	`checksize_bös
();

863 
	`com∂aöx
("Done sortingÅhe bins.");

866 
	`dof‹kÆl
("Mîgög", 
mîgebös
);

867 
	`checksize_mîge
();

868 
	`com∂aöx
("Done mergingÅhe bins.");

871 
i
=0; i<
num¥ocs
; i++) {

872 
j
=0; j<
num¥ocs
; j++) {

873 
	`d‹emove
(
	`bö«me
(
i
, 
j
));

878 
	`do¸óã
(
PATH_SORTED
);

879 
	`dof‹kÆl
("FöÆás£mbly", 
as£mbÀ
);

880 i‡(
	`gësize
(
PATH_SORTED
Ë!
c‹ª˘size
) {

881 
	`com∂aöx
("%s: fûêi†wr⁄g size", 
PATH_SORTED
);

882 
	`exô
(1);

886 
i
=0; i<
num¥ocs
; i++) {

887 
	`d‹emove
(
	`mîged«me
(
i
));

891 
s‹ãdsum
 = 
	`checksum_fûe
(
PATH_SORTED
);

892 
	`com∂aöx
("Checksum o‡s‹ãd keys: %ld", 
s‹ãdsum
);

894 i‡(
s‹ãdsum
 !
checksum
) {

895 
	`com∂aöx
("Sums doÇot match");

896 
	`exô
(1);

898 
	}
}

904 
	$vÆid«me
(
a
)

906 
rv
[32];

907 
	`¢¥ötf
(
rv
, ‘v), "vÆid-%d", 
a
);

908  
rv
;

909 
	}
}

913 
	$checksize_vÆid
()

915 
off_t
 
tŸvsize
, 
c‹ª˘vsize
;

916 
i
;

918 
c‹ª˘vsize
 = (
off_t
Ë
num¥ocs
*2*();

920 
tŸvsize
 = 0;

921 
i
=0; i<
num¥ocs
; i++) {

922 
tŸvsize
 +
	`gësize
(
	`vÆid«me
(
i
));

924 i‡(
tŸvsize
 !
c‹ª˘vsize
) {

925 
	`com∂aöx
("Sum of validation sizes is wrong "

927 (Ë
tŸvsize
, (Ë
c‹ª˘vsize
);

928 
	`exô
(1);

930 
	}
}

934 
	$dovÆid©e
()

936 c⁄° *
«me
;

937 
fd
, 
i
, 
mykeys
, 
keys_d⁄e
, 
keys_to_do
;

938 
key
, 
smÆÀ°
, 
œrge°
;

940 
«me
 = 
PATH_SORTED
;

941 
fd
 = 
	`do›í
(
«me
, 
O_RDONLY
, 0);

943 
mykeys
 = 
	`gëmykeys
();

944 
	`£ekmy∂a˚
(
«me
, 
fd
);

946 
smÆÀ°
 = 
RANDOM_MAX
;

947 
œrge°
 = 0;

949 
keys_d⁄e
 = 0;

950 
keys_d⁄e
 < 
mykeys
) {

951 
keys_to_do
 = 
mykeys
 - 
keys_d⁄e
;

952 i‡(
keys_to_do
 > 
WORKNUM
) {

953 
keys_to_do
 = 
WORKNUM
;

956 
	`d€xa˘ªad
(
«me
, 
fd
, 
w‹k•a˚
, 
keys_to_do
 * ());

958 
i
=0; i<
keys_to_do
; i++) {

959 
key
 = 
w‹k•a˚
[
i
];

961 i‡(
key
 < 0) {

962 
	`com∂aö
("%s: foundÇeg©ivêkey", 
«me
);

963 
	`exô
(1);

965 i‡(
key
 == 0) {

966 
	`com∂aö
("%s: found zîÿkey", 
«me
);

967 
	`exô
(1);

969 i‡(
key
 >
RANDOM_MAX
) {

970 
	`com∂aö
("%s: foundÅoo-œrgêkey", 
«me
);

971 
	`exô
(1);

974 i‡(
key
 < 
smÆÀ°
) {

975 
smÆÀ°
 = 
key
;

977 i‡(
key
 > 
œrge°
) {

978 
œrge°
 = 
key
;

982 
keys_d⁄e
 +
keys_to_do
;

984 
	`do˛o£
(
«me
, 
fd
);

986 
«me
 = 
	`vÆid«me
(
me
);

987 
fd
 = 
	`do›í
(
«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

988 
	`dowrôe
(
«me
, 
fd
, &
smÆÀ°
, (smallest));

989 
	`dowrôe
(
«me
, 
fd
, &
œrge°
, (largest));

990 
	`do˛o£
(
«me
, 
fd
);

991 
	}
}

995 
	$vÆid©e
()

997 
smÆÀ°
, 
œrge°
, 
¥ev_œrge°
;

998 
i
, 
fd
;

999 c⁄° *
«me
;

1001 
	`dof‹kÆl
("VÆid©i⁄", 
dovÆid©e
);

1002 
	`checksize_vÆid
();

1004 
¥ev_œrge°
 = 1;

1006 
i
=0; i<
num¥ocs
; i++) {

1007 
«me
 = 
	`vÆid«me
(
i
);

1008 
fd
 = 
	`do›í
(
«me
, 
O_RDONLY
, 0);

1010 
	`d€xa˘ªad
(
«me
, 
fd
, &
smÆÀ°
, ());

1011 
	`d€xa˘ªad
(
«me
, 
fd
, &
œrge°
, ());

1013 i‡(
smÆÀ°
 < 1) {

1014 
	`com∂aöx
("VÆid©i⁄: block %d: bad SMALLEST", 
i
);

1015 
	`exô
(1);

1017 i‡(
œrge°
 >
RANDOM_MAX
) {

1018 
	`com∂aöx
("VÆid©i⁄: block %d: bad LARGEST", 
i
);

1019 
	`exô
(1);

1021 i‡(
smÆÀ°
 > 
œrge°
) {

1022 
	`com∂aöx
("Validation: block %d: SMALLEST > LARGEST",

1023 
i
);

1024 
	`exô
(1);

1027 i‡(
smÆÀ°
 < 
¥ev_œrge°
) {

1028 
	`com∂aö
("Validation: block %d smallest key %d",

1029 
i
, 
smÆÀ°
);

1030 
	`com∂aö
("Validation:Örevious blockÜargest key %d",

1031 
¥ev_œrge°
);

1032 
	`com∂aö
("Validation failed");

1033 
	`exô
(1);

1038 
i
=0; i<
num¥ocs
; i++) {

1039 
	`d‹emove
(
	`vÆid«me
(
i
));

1041 
	}
}

1047 
	$£tdú
()

1050 
	`domkdú
(
PATH_TESTDIR
, 0775);

1051 
	`dochdú
(
PATH_TESTDIR
);

1053 
	}
}

1057 
	$un£tdú
()

1059 
	`d‹emove
(
PATH_KEYS
);

1060 
	`d‹emove
(
PATH_SORTED
);

1062 
	`dochdú
("..");

1064 i‡(
	`rmdú
(
PATH_TESTDIR
) < 0) {

1065 
	`com∂aö
("%s:Ñmdú", 
PATH_TESTDIR
);

1069 
	}
}

1075 
	$øndomize
()

1077 
fd
;

1079 
fd
 = 
	`do›í
(
PATH_RANDOM
, 
O_RDONLY
, 0);

1080 
	`d€xa˘ªad
(
PATH_RANDOM
, 
fd
, &
øndom£ed
, (randomseed));

1081 
	`do˛o£
(
PATH_RANDOM
, 
fd
);

1082 
	}
}

1086 
	$ußge
()

1088 
	`com∂aö
("Ußge: %†[-∞¥ocs] [-k keys] [-†£ed] [-r]", 
¥og«me
);

1089 
	`exô
(1);

1090 
	}
}

1094 
	$dﬂrgs
(
¨gc
, *
¨gv
[])

1096 
i
, 
ch
, 
vÆ
, 
¨g
;

1098 
i
=1; i<
¨gc
; i++) {

1099 i‡(
¨gv
[
i
][0] != '-') {

1100 
	`ußge
();

1103 
ch
 = 
¨gv
[
i
][1];

1104 
ch
) {

1105 'p': 
¨g
 = 1; ;

1106 'k': 
¨g
 = 1; ;

1107 's': 
¨g
 = 1; ;

1108 'r': 
¨g
 = 0; ;

1109 : 
	`ußge
(); ;

1111 i‡(
¨g
) {

1112 i‡(
¨gv
[
i
][2]) {

1113 
vÆ
 = 
	`©oi
(
¨gv
[
i
]+2);

1116 
i
++;

1117 i‡(!
¨gv
[
i
]) {

1118 
	`com∂aö
("Option -%cÑequiresán "

1119 "¨gumít", 
ch
);

1120 
	`exô
(1);

1122 
vÆ
 = 
	`©oi
(
¨gv
[
i
]);

1124 
ch
) {

1125 'p': 
num¥ocs
 = 
vÆ
; ;

1126 'k': 
numkeys
 = 
vÆ
; ;

1127 's': 
øndom£ed
 = 
vÆ
; ;

1128 : 
	`as£π
(0); ;

1132 
ch
) {

1133 'r': 
	`øndomize
(); ;

1134 : 
	`as£π
(0); ;

1138 
	}
}

1141 
	$maö
(
¨gc
, *
¨gv
[])

1143 
	`öô¥og«me
(
¨gc
 > 0 ? 
¨gv
[0] : 
NULL
);

1145 
	`dﬂrgs
(
¨gc
, 
¨gv
);

1146 
c‹ª˘size
 = (
off_t
Ë(
numkeys
*());

1148 
	`£tdú
();

1150 
	`gíkeys
();

1151 
	`s‹t
();

1152 
	`vÆid©e
();

1153 
	`com∂aöx
("Succeeded.");

1155 
	`un£tdú
();

1158 
	}
}

	@test/os161/user/testbin/randcall/extern.h

30 
	~<sys/ty≥s.h
>

32 *
ønd±r
();

33 
øndöt
();

34 
off_t
 
øndoff
();

35 
size_t
 
øndsize
();

37 
åyˇŒs
(
as°
, 
dof‹k
, 
cou¡
);

	@test/os161/user/testbin/randcall/main.c

30 
	~<°dlib.h
>

31 
	~<°dio.h
>

32 
	~<°rög.h
>

34 
	~"exã∫.h
"

38 
	$øndch¨
(*
c
)

40 #i‡
RAND_MAX
 != 0x7fffffff

44 
lbôs
 = 0;

45 
 um
 = 0;

47 
bô
;

48 
˘
 = 0;

50 *
c
 = 0;

52 
˘
 < 
CHAR_BIT
) {

53 i‡(
 um
==0) {

54 
lbôs
 = 
	`øndom
();

55 
 um
 = 31;

58 
bô
 = 
lbôs
 & 1;

59 i‡(
bô
) {

60 (*
c
) |= 1;

62 (*
c
) <<= 1;

63 
˘
++;

64 
lbôs
 >>= 1;

65 
 um
--;

67 
	}
}

71 
	$fûÃ™d
(*
p
, 
size_t
 
Àn
)

73 
size_t
 
i
;

74 *
˝
 = 
p
;

75 
i
=0; i<
Àn
; i++) {

76 
	`øndch¨
(&
˝
[
i
]);

78 
	}
}

81 
	$ønd±r
()

83 *
x
;

84 
	`fûÃ™d
(&
x
, (x));

85  
x
;

86 
	}
}

89 
	$øndöt
()

91 
x
;

92 
	`fûÃ™d
(&
x
, (x));

93  
x
;

94 
	}
}

96 
off_t


97 
	$øndoff
()

99 
off_t
 
x
;

100 
	`fûÃ™d
(&
x
, (x));

101  
x
;

102 
	}
}

104 
size_t


105 
	$øndsize
()

107 
size_t
 
x
;

108 
	`fûÃ™d
(&
x
, (x));

109  
x
;

110 
	}
}

114 
	$ußge
()

116 
	`¥ötf
("Usage:Ñandcall [-f] [-c count] [-r seed] 2|3|4|all\n");

117 
	`¥ötf
(" -f suppress forking\n");

118 
	`¥ötf
(" -c set iteration count (default 100)\n");

119 
	`¥ötf
(" -r setÖseudorandom seed (default 0)\n");

120 
	`exô
(1);

121 
	}
}

124 
	$maö
(
¨gc
, *
¨gv
[])

126 
cou¡
=100, 
£ed
 = 0, 
dof‹k
 = 1;

127 
™
, 
i
;

129 
i
=1; i<
¨gc
; i++) {

130 i‡(!
	`°rcmp
(
¨gv
[
i
], "-f")) {

131 
dof‹k
 = 0;

133 i‡(!
	`°rcmp
(
¨gv
[
i
], "-c"Ë&& i<
¨gc
-1) {

134 
cou¡
 = 
	`©oi
(
¨gv
[++
i
]);

136 i‡(!
	`°rcmp
(
¨gv
[
i
], "-r"Ë&& i<
¨gc
-1) {

137 
£ed
 = 
	`©oi
(
¨gv
[++
i
]);

139 i‡(
¨gv
[
i
][0] == '-') {

140 
	`ußge
();

146 i‡(
i
 !
¨gc
-1) {

147 
	`ußge
();

150 i‡(!
	`°rcmp
(
¨gv
[
i
], "all")) {

151 
™
 = 5;

154 
™
 = 
	`©oi
(
¨gv
[
i
]);

155 i‡(
™
 <2 ||án > 4) {

156 
	`ußge
();

160 
	`¥ötf
("Sìd: %d Cou¡: %d\n", 
£ed
, 
cou¡
);

162 
	`§™dom
(
£ed
);

163 
	`åyˇŒs
(
™
, 
dof‹k
, 
cou¡
);

166 
	}
}

	@test/os161/user/testbin/rmdirtest/rmdirtest.c

39 
	~<sys/ty≥s.h
>

40 
	~<sys/°©.h
>

41 
	~<°dio.h
>

42 
	~<°rög.h
>

43 
	~<uni°d.h
>

44 
	~<f˙é.h
>

45 
	~<î∫o.h
>

46 
	~<limôs.h
>

47 
	~<îr.h
>

50 c⁄° 
	gã°dú
[] = "testdir";

51 
	g°¨çoöt
[
PATH_MAX
 - (
ã°dú
)];

60 
	$°¨tup
()

62 i‡(
	`gëcwd
(
°¨çoöt
, (°¨çoöt))==
NULL
) {

63 
	`îr
(1, "getcwd (not inÅest dir)");

66 i‡(
	`mkdú
(
ã°dú
, 0775) < 0) {

67 
	`îr
(1, "%s: mkdú", 
ã°dú
);

70 i‡(
	`chdú
(
ã°dú
) < 0) {

71 
	`îr
(1, "%s: chdú", 
ã°dú
);

73 
	}
}

85 
	$kûldú
()

87 
tmp
[
PATH_MAX
];

89 
	`¢¥ötf
(
tmp
, —mp), "%s/%s", 
°¨çoöt
, 
ã°dú
);

90 i‡(
	`rmdú
(
tmp
)<0) {

91 
	`îr
(1, "%s:Ñmdú", 
tmp
);

93 
	}
}

102 
	$föish
()

104 i‡(
	`chdú
(
°¨çoöt
)<0) {

105 
	`îr
(1, "%s: chdú", 
°¨çoöt
);

107 
	}
}

117 
	$ã°1
()

119 
	`¥ötf
("Makög %s\n", 
ã°dú
);

120 
	`°¨tup
();

122 
	`¥ötf
("Removög %†whûêö it\n", 
ã°dú
);

123 
	`kûldú
();

125 
	`¥ötf
("LeavingÅheÅest directory\n");

126 
	`föish
();

127 
	}
}

135 
	$ã°2
()

137 
fd
;

139 
	`¥ötf
("NowÅrying withÅhe directory open...\n");

140 
	`°¨tup
();

141 
fd
 = 
	`›í
(".", 
O_RDONLY
);

142 i‡(
fd
<0) {

143 
	`îr
(1, ".: open");

145 
	`kûldú
();

146 
	`föish
();

149 i‡(
	`˛o£
(
fd
)<0) {

150 
	`îr
(1, "ªmoved %s: clo£", 
ã°dú
);

152 
	}
}

160 
	$ã°3
()

162 
buf
[
PATH_MAX
];

163 
fd
;

165 
	`¥ötf
("Checking if .ÉxistsáfterÑmdir\n");

166 
	`°¨tup
();

167 
	`kûldú
();

169 
fd
 = 
	`›í
(".", 
O_RDONLY
);

170 i‡(
fd
<0) {

171 
î∫o
) {

172 
EINVAL
:

173 
EIO
:

174 
ENOENT
:

177 
	`îr
(1, ".");

182 
	`˛o£
(
fd
);

185 
fd
 = 
	`›í
("..", 
O_RDONLY
);

186 i‡(
fd
<0) {

187 
î∫o
) {

188 
EINVAL
:

189 
EIO
:

190 
ENOENT
:

193 
	`îr
(1, "..");

198 
	`w¨nx
("..: openableáfterÑmdir - might be bad");

199 
	`˛o£
(
fd
);

202 
	`¢¥ötf
(
buf
, (buf), "../%s", 
ã°dú
);

203 
fd
 = 
	`›í
(
buf
, 
O_RDONLY
);

204 i‡(
fd
<0) {

205 
î∫o
) {

206 
EINVAL
:

207 
EIO
:

208 
ENOENT
:

211 
	`îr
(1, "%s", 
buf
);

216 
	`îrx
(1, "%s: w‹k†a·îÑmdú", 
buf
);

219 
	`föish
();

220 
	}
}

228 
	$ã°4
()

230 
buf
[4096];

231 
fd
;

233 
	`¥ötf
("Checking if creating files worksáfterÑmdir...\n");

234 
	`°¨tup
();

235 
	`kûldú
();

237 
fd
 = 
	`›í
("√wfûe", 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

238 i‡(
fd
<0) {

239 
î∫o
) {

240 
EINVAL
:

241 
EIO
:

242 
ENOENT
:

245 
	`îr
(1, "%s", 
buf
);

250 
	`w¨nx
("newfile: creating filesáfterÑmdir works");

251 
	`w¨nx
("(this is only ok ifÅhe space getsÑeclaimed)");

256 
	`mem£t
(
buf
, 'J', (buf));

257 
	`wrôe
(
fd
, 
buf
, (buf));

258 
	`wrôe
(
fd
, 
buf
, (buf));

259 
	`wrôe
(
fd
, 
buf
, (buf));

260 
	`wrôe
(
fd
, 
buf
, (buf));

261 
	`˛o£
(
fd
);

264 
	`föish
();

265 
	}
}

273 
	$ã°5
()

275 
	`¥ötf
("Checking if creating subdirs worksáfterÑmdir...\n");

276 
	`°¨tup
();

277 
	`kûldú
();

279 i‡(
	`mkdú
("newdir", 0775)<0) {

280 
î∫o
) {

281 
EINVAL
:

282 
EIO
:

283 
ENOENT
:

286 
	`îr
(1, "mkdir inÑemoved dir");

291 
	`w¨nx
("newfile: creating directoriesáfterÑmdir works");

292 
	`w¨nx
("(this is only ok ifÅhe space getsÑeclaimed)");

297 
	`mkdú
("newdir/t0", 0775);

298 
	`mkdú
("newdir/t1", 0775);

299 
	`mkdú
("newdir/t2", 0775);

300 
	`mkdú
("newdir/t3", 0775);

301 
	`mkdú
("newdir/t4", 0775);

302 
	`mkdú
("newdir/t5", 0775);

305 
	`föish
();

306 
	}
}

313 
	$ã°6
()

315 
buf
[
PATH_MAX
];

316 
fd
, 
Àn
;

318 
	`¥ötf
("NowÅryingÅoÜistÅhe directory...\n");

319 
	`°¨tup
();

320 
fd
 = 
	`›í
(".", 
O_RDONLY
);

321 i‡(
fd
<0) {

322 
	`îr
(1, ".: open");

324 
	`kûldú
();

326 (
Àn
 = 
	`gëdúíåy
(
fd
, 
buf
, (buf)-1))>0) {

327 i‡(()
Àn
 >(
buf
)-1) {

328 
	`îrx
(1, ".: getdirentry:Ñeturned invalidÜength");

330 
buf
[
Àn
] = 0;

331 i‡(!
	`°rcmp
(
buf
, ".") || !strcmp(buf, "..")) {

335 
	`îrx
(1, ".: gëdúíåy:Ñëu∫ed u√x≥˘edÇamê%s", 
buf
);

337 i‡(
Àn
==0) {

341 
î∫o
) {

342 
EINVAL
:

343 
EIO
:

346 
	`îr
(1, ".: getdirentry");

351 
	`föish
();

354 i‡(
	`˛o£
(
fd
)<0) {

355 
	`îr
(1, "ªmoved %s: clo£", 
ã°dú
);

357 
	}
}

364 
	$ã°7
()

366 
buf
[
PATH_MAX
];

368 
	`°¨tup
();

369 
	`kûldú
();

370 i‡(
	`gëcwd
(
buf
, (buf))==
NULL
) {

371 
î∫o
) {

372 
EINVAL
:

373 
EIO
:

374 
ENOENT
:

377 
	`îr
(1, "gëcwdá·îÑemovög %s", 
ã°dú
);

382 
	`îrx
(1, "getcwdáfterÑemoving %s: succeeded (got %s)",

383 
ã°dú
, 
buf
);

386 
	`föish
();

387 
	}
}

392 
	$maö
()

394 
	`ã°1
();

395 
	`ã°2
();

396 
	`ã°3
();

397 
	`ã°4
();

398 
	`ã°5
();

399 
	`ã°6
();

400 
	`ã°7
();

402 
	`¥ötf
("Whew... survived.\n");

404 
	}
}

	@test/os161/user/testbin/rmtest/rmtest.c

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

41 
	~<°rög.h
>

42 
	~<uni°d.h
>

43 
	~<î∫o.h
>

44 
	~<îr.h
>

46 
	#TEST
 "rmd©a"

	)

47 
	#TESTDATA
 "I wish I wa†®hódlight. -- Jîry G¨cü"

	)

48 
	#TESTLEN
 ((
TESTDATA
)-1)

	)

52 
	$d‹m
(
fd
)

63 
pid_t
 
pid
;

64 
°©us
;

66 
pid
 = 
	`f‹k
();

67 i‡(
pid
<0) {

68 
	`îr
(1, "fork");

70 i‡(
pid
==0) {

72 
	`˛o£
(
fd
);

73 i‡(
	`ªmove
(
TEST
)) {

74 
	`îr
(1, "%s:Ñemove", 
TEST
);

76 
	`_exô
(0);

79 i‡(
	`waôpid
(
pid
, &
°©us
, 0)<0) {

80 
	`îr
(1, "waitpid");

82 i‡(
	`WIFSIGNALED
(
°©us
)) {

83 
	`w¨n
("chûdÖro˚s†exôed wôh sig«»%d", 
	`WTERMSIG
(
°©us
));

85 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

86 
	`w¨nx
("chûdÖro˚s†exôed wôh codê%d",
	`WEXITSTATUS
(
°©us
));

88 
	}
}

92 
	$ßme
(c⁄° *
a
, c⁄° *
b
, 
Àn
)

94 
Àn
-- > 0) {

95 i‡(*
a
++ !*
b
++)  0;

98 
	}
}

101 
	$maö
()

103 
fûe
, 
Àn
;

104 
buf
[
TESTLEN
];

107 
fûe
 = 
	`›í
(
TEST
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
, 0664);

108 
	`wrôe
(
fûe
, 
TESTDATA
, 
TESTLEN
);

109 
	`˛o£
(
fûe
);

112 
fûe
 = 
	`›í
(
TEST
, 
O_RDONLY
);

113 
Àn
 = 
	`ªad
(
fûe
, 
buf
, 
TESTLEN
);

114 i‡(
Àn
 < 0) {

115 
	`w¨n
("read: before deletion");

117 i‡(
Àn
 < ()
TESTLEN
) {

118 
	`w¨nx
("ªad: bef‹êdñëi⁄: sh‹àcou¡ %d", 
Àn
);

120 i‡(!
	`ßme
(
buf
, 
TESTDATA
, 
TESTLEN
)) {

121 
	`îrx
(1, "Failed: dataÑead back wasÇotÅhe same");

125 i‡(
	`l£ek
(
fûe
, 0, 
SEEK_SET
)) {

126 
	`îr
(1, "lseek");

130 
	`d‹m
(
fûe
);

133 
	`mem£t
(
buf
, '\0', 
TESTLEN
);

134 
Àn
 = 
	`ªad
(
fûe
, 
buf
, 
TESTLEN
);

135 i‡(
Àn
 < 0) {

136 
	`w¨n
("read:áfter deletion");

138 i‡(
Àn
 < ()
TESTLEN
) {

139 
	`w¨nx
("ªad:á·î dñëi⁄: sh‹àcou¡ %d", 
Àn
);

142 i‡(!
	`ßme
(
buf
, 
TESTDATA
, 
TESTLEN
)) {

143 
	`îrx
(1, "Failed: dataÑeadáfter deletion wasÇotÅhe same");

147 
	`˛o£
(
fûe
);

150 
fûe
 = 
	`›í
(
TEST
, 
O_RDONLY
);

151 i‡(
fûe
 >= 0) {

152 
	`˛o£
(
fûe
);

153 
	`îrx
(1, "Failed:Åhe file could still be opened");

156 i‡(
î∫o
!=
ENOENT
) {

157 
	`îr
(1, "UnexpectedÉrrorÑeopeningÅhe file");

160 
	`¥ötf
("Succeeded!\n");

163 
	}
}

	@test/os161/user/testbin/sink/sink.c

38 
	~<uni°d.h
>

39 
	~<îr.h
>

42 
	$maö
()

44 
ch
=0;

45 
r
;

47 
ch
!='q') {

48 
r
 = 
	`ªad
(
STDIN_FILENO
, &
ch
, 1);

49 i‡(
r
<0) {

50 
	`îr
(1, "stdin");

52 i‡(
r
==0) {

59 
	}
}

	@test/os161/user/testbin/sort/sort.c

39 
	~<°dlib.h
>

40 
	~<°rög.h
>

41 
	~<îr.h
>

44 
	#SIZE
 (144*1024)

	)

59 
	$s‹t
(*
¨r
, 
size
)

61 
tmp
[
SIZE
];

62 
pivŸ
, 
i
, 
j
, 
k
;

64 i‡(
size
<2) {

68 
pivŸ
 = 
size
/2;

69 
	`s‹t
(
¨r
, 
pivŸ
);

70 
	`s‹t
(&
¨r
[
pivŸ
], 
size
-pivot);

72 
i
 = 0;

73 
j
 = 
pivŸ
;

74 
k
 = 0;

75 
i
<
pivŸ
 && 
j
<
size
) {

76 i‡(
¨r
[
i
] <áº[
j
]) {

77 
tmp
[
k
++] = 
¨r
[
i
++];

80 
tmp
[
k
++] = 
¨r
[
j
++];

83 
i
<
pivŸ
) {

84 
tmp
[
k
++] = 
¨r
[
i
++];

86 
j
<
size
) {

87 
tmp
[
k
++] = 
¨r
[
j
++];

90 
	`mem˝y
(
¨r
, 
tmp
, 
size
*());

91 
	}
}

95 
	gA
[
SIZE
];

99 
	$öô¨øy
()

101 
i
;

106 
	`§™dom
(533);

108 
i
 = 0; i < 
SIZE
; i++) {

109 
A
[
i
] = 
	`øndom
();

111 
	}
}

115 
	$check
()

117 
i
;

119 
i
=0; i<
SIZE
-1; i++) {

120 i‡(
A
[
i
] > A[i+1]) {

121 
	`îrx
(1, "Failed: A[%d] is %d, A[%d] is %d",

122 
i
, 
A
[i], i+1, A[i+1]);

125 
	`w¨nx
("Passed.");

126 
	}
}

129 
	$maö
()

131 
	`öô¨øy
();

132 
	`s‹t
(
A
, 
SIZE
);

133 
	`check
();

135 
	}
}

	@test/os161/user/testbin/sty/sty.c

39 
	~<uni°d.h
>

40 
	~<îr.h
>

42 *
	gh¨gv
[2] = { (*)"hog", 
NULL
 };

44 
	#MAXPROCS
 6

	)

45 
	gpids
[
MAXPROCS
], 
	g≈ids
;

49 
	$hog
()

51 
pid
 = 
	`f‹k
();

52 
pid
) {

54 
	`îr
(1, "fork");

57 
	`execv
("/ã°bö/hog", 
h¨gv
);

58 
	`îr
(1, "/testbin/hog");

61 
pids
[
≈ids
++] = 
pid
;

64 
	}
}

68 
	$waôÆl
()

70 
i
, 
°©us
;

71 
i
=0; i<
≈ids
; i++) {

72 i‡(
	`waôpid
(
pids
[
i
], &
°©us
, 0)<0) {

73 
	`w¨n
("waôpid f‹ %d", 
pids
[
i
]);

75 i‡(
	`WIFSIGNALED
(
°©us
)) {

76 
	`w¨nx
("pid %d: sig«»%d", 
pids
[
i
], 
	`WTERMSIG
(
°©us
));

78 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

79 
	`w¨nx
("pid %d:Éxô %d", 
pids
[
i
], 
	`WEXITSTATUS
(
°©us
));

82 
	}
}

85 
	$maö
()

87 
	`hog
();

88 
	`hog
();

89 
	`hog
();

90 
	`hog
();

91 
	`hog
();

92 
	`hog
();

94 
	`waôÆl
();

96 
	}
}

	@test/os161/user/testbin/tail/tail.c

39 
	~<uni°d.h
>

40 
	~<°dlib.h
>

41 
	~<îr.h
>

43 
	#BUFSIZE
 1000

	)

48 
	gbuf„r
[
BUFSIZE
];

52 
	$èû
(
fûe
, 
off_t
 
whîe
, c⁄° *
fûíame
)

54 
Àn
;

56 i‡(
	`l£ek
(
fûe
, 
whîe
, 
SEEK_SET
)<0) {

57 
	`îr
(1, "%s", 
fûíame
);

60 (
Àn
 = 
	`ªad
(
fûe
, 
buf„r
, (buffer))) > 0) {

61 
	`wrôe
(
STDOUT_FILENO
, 
buf„r
, 
Àn
);

63 
	}
}

66 
	$maö
(
¨gc
, **
¨gv
)

68 
fûe
;

70 i‡(
¨gc
 < 3) {

71 
	`îrx
(1, "Usage:Åail <file> <location>");

73 
fûe
 = 
	`›í
(
¨gv
[1], 
O_RDONLY
);

74 i‡(
fûe
 < 0) {

75 
	`îr
(1, "%s", 
¨gv
[1]);

77 
	`èû
(
fûe
, 
	`©oi
(
¨gv
[2]),árgv[1]);

78 
	`˛o£
(
fûe
);

80 
	}
}

	@test/os161/user/testbin/tictac/tictac.c

41 
	~<°dio.h
>

42 
	~<uni°d.h
>

44 
	#NEWLINE
 012

	)

45 
	#EMPTY
 0

	)

46 
	#X_PLAYER
 1

	)

47 
	#O_PLAYER
 2

	)

48 
	#X_MARKER
 1

	)

49 
	#O_MARKER
 2

	)

50 
	#DIM
 3

	)

51 
	#DIMCHAR
 "2"

	)

52 
	#MAXSTRING
 100

	)

54 íum { 
	mFALSE
, 
	mTRUE
 } 
	tboﬁ
;

57 
boﬁ
 
ask_ye¢o
(c⁄° *
msg
);

58 
boﬁ
 
do_move
(
∂ayî
);

59 
öôülize_bﬂrd
();

60 
boﬁ
 
is_wö
(
x
, 
y
);

61 
ªad_°rög
(*
buf
, 
Àngth
);

62 
¥öt_bﬂrd
();

63 
¥öt_ö°ru˘i⁄s
();

64 
boﬁ
 
wö_cﬁumn
(
y
, 
m¨kî
);

65 
boﬁ
 
wö_düg_À·
(
x
, 
y
, 
m¨kî
);

66 
boﬁ
 
wö_düg_right
(
x
, 
y
, 
m¨kî
);

67 
boﬁ
 
wö_row
(
x
, 
m¨kî
);

68 
boﬁ
 
Såcmp
(c⁄° *
a
, c⁄° *
b
);

74 
	gbﬂrd
[
DIM
][DIM];

79 
	$maö
()

81 
boﬁ
 
wö
 = 
FALSE
;

82 
move
, 
max_moves
;

83 
∂ayî
;

85 
	`¥öt_ö°ru˘i⁄s
();

86 
max_moves
 = 
DIM
 * DIM;

88 
TRUE
) {

89 
	`öôülize_bﬂrd
();

90 
move
 = 1; movê<
max_moves
; move++) {

91 
∂ayî
 = 
move
 % 2 == 0 ? 2 : 1;

92 
wö
 = 
	`do_move
(
∂ayî
);

93 
	`¥öt_bﬂrd
();

94 i‡(
wö
) {

95 
	`¥ötf
("Pœyî %d, you WON!\n\n", 
∂ayî
);

103 i‡(!
wö
)

104 
	`¥ötf
("Tie Game!\n\n");

105 i‡(!
	`ask_ye¢o
("Do you wishÅoÖlayágain?"))

109 
	}
}

122 
	$¥öt_ö°ru˘i⁄s
()

124 
	`¥ötf
("WelcomeÅoÅic-tac-toe!\n");

125 
	`¥ötf
("Player 1álwaysÖlays XándÖlayer 2álwaysÖlay O\n");

126 
	`¥ötf
("GoodÜuck!\n\n\n");

127 
	}
}

140 
	$¥öt_bﬂrd
()

142 
i
, 
j
;

145 
	`¥ötf
("\n 0 1 2\n");

147 
i
 = 0; i < 
DIM
; i++) {

149 
	`¥ötf
(" %d ", 
i
);

150 
j
 = 0; j < 
DIM
; j++) {

151 
bﬂrd
[
i
][
j
]) {

152 
EMPTY
: 
	`¥ötf
(" "); ;

153 
X_MARKER
: 
	`¥ötf
(" X "); ;

154 
O_MARKER
: 
	`¥ötf
(" O "); ;

155 : 
	`¥ötf
("???"); ;

158 
	`¥ötf
("\n");

160 
	`¥ötf
("\n");

161 
	}
}

178 
boﬁ


179 
	$ask_ye¢o
(c⁄° *
msg
)

181 
™swî
[
MAXSTRING
];

183 
TRUE
) {

184 
	`¥ötf
("%†[yes/no] ", 
msg
);

185 i‡(
	`ªad_°rög
(
™swî
, 
MAXSTRING
) < 0)

186 (
FALSE
);

187 i‡(
	`Såcmp
(
™swî
, "yes"))

188 (
TRUE
);

189 i‡(
	`Såcmp
(
™swî
, "no"))

190 (
FALSE
);

192 
	`¥ötf
("PleaseánswerÉither yes orÇo\n");

194 
	}
}

212 
boﬁ


213 
	$do_move
(
∂ayî
)

215 
x
, 
y
;

216 
boﬁ
 
fú°
;

217 
™swî
[
MAXSTRING
];

218 
cx
;

220 
fú°
 = 
TRUE
;

221 
	`¥ötf
("Pœyî %d (%c), you∏move\n", 
∂ayî
,

222 
∂ayî
 =
X_PLAYER
 ? 'X' : 'O');

224 
TRUE
) {

225 
	`¥ötf
("WhichÑow [0-%d]: ", 
DIM
-1);

226 i‡(
	`ªad_°rög
(
™swî
, 
MAXSTRING
) < 0)

227 (
FALSE
);

228 
cx
 = 
™swî
[0];

229 
x
 = 
cx
 - '0';

230 i‡(
x
 < 0 || x >
DIM
) {

231 
	`¥ötf
("InvÆidÑow; mu° bê>0ánd < %d\n", 
DIM
-1);

234 
	`¥ötf
("Which cﬁum¿[0-%d]: ", 
DIM
-1);

235 i‡(
	`ªad_°rög
(
™swî
, 
MAXSTRING
) < 0)

236 (
FALSE
);

237 
cx
 = 
™swî
[0];

238 
y
 = 
cx
 - '0';

239 i‡(
y
 < 0 || y >
DIM
) {

240 
	`¥ötf
("Invalid column; must be >= 0ánd < %d\n",

241 
DIM
-1);

245 i‡(
bﬂrd
[
x
][
y
] !
EMPTY
) {

246 
	`¥ötf
("ThatÜocation is occupied;ÖleaseÅryágain\n");

247 
	`¥öt_bﬂrd
();

251 
bﬂrd
[
x
][
y
] = 
∂ayî
 =
X_PLAYER
 ? 
X_MARKER
 : 
O_MARKER
;

253 (
	`is_wö
(
x
, 
y
));

255 
	}
}

279 
boﬁ


280 
	$is_wö
(
x
, 
y
)

282 
m¨kî
;

284 
m¨kî
 = 
bﬂrd
[
x
][
y
];

292 (
	`wö_row
(
x
, 
m¨kî
Ë|| 
	`wö_cﬁumn
(
y
, marker) ||

293 
	`wö_düg_À·
(
x
, 
y
, 
m¨kî
Ë|| 
	`wö_düg_right
(x, y, marker));

294 
	}
}

299 
boﬁ


300 
	$wö_cﬁumn
(
y
, 
m¨kî
)

302 
i
;

303 
i
 = 0; i < 
DIM
; i++)

304 i‡(
bﬂrd
[
i
][
y
] !
m¨kî
)

305 (
FALSE
);

306 (
TRUE
);

307 
	}
}

309 
boﬁ


310 
	$wö_row
(
x
, 
m¨kî
)

312 
i
;

313 
i
 = 0; i < 
DIM
; i++)

314 i‡(
bﬂrd
[
x
][
i
] !
m¨kî
)

315 (
FALSE
);

316 (
TRUE
);

317 
	}
}

319 
boﬁ


320 
	$wö_düg_À·
(
x
, 
y
, 
m¨kî
)

322 
i
;

325 i‡(
x
 !
y
)

326 (
FALSE
);

328 
i
 = 0; i < 
DIM
; i++)

329 i‡(
bﬂrd
[
i
][i] !
m¨kî
)

330 (
FALSE
);

331 (
TRUE
);

332 
	}
}

334 
boﬁ


335 
	$wö_düg_right
(
x
, 
y
, 
m¨kî
)

337 
i
;

340 i‡(
x
 + 
y
 !
DIM
 - 1)

341 (
FALSE
);

342 
i
 = 0; i < 
DIM
; i++)

343 i‡(
bﬂrd
[
i
][
DIM
 - 1 - i] !
m¨kî
)

344 (
FALSE
);

345 (
TRUE
);

346 
	}
}

349 
	$öôülize_bﬂrd
()

351 
i
, 
j
;

353 
i
 = 0; i < 
DIM
; i++)

354 
j
 = 0; j < 
DIM
; j++)

355 
bﬂrd
[
i
][
j
] = 
EMPTY
;

356 
	}
}

359 
	$ªad_°rög
(*
buf
, 
Àngth
)

361 
ch¨_ªad
;

362 
i
;

364 
i
 = 0;

365 (
ch¨_ªad
 = 
	`gëch¨
()Ë!
EOF
 && ch¨_ªad !
NEWLINE
 &&

366 
i
 < 
Àngth
) {

367 
buf
[
i
] = (Ë
ch¨_ªad
;

368 
i
++;

369 
	`putch¨
(
ch¨_ªad
);

372 i‡(
ch¨_ªad
 =
EOF
)

379 i‡(
i
 >
Àngth
)

380 
i
--;

381 
buf
[
i
] = 0;

382 (
i
);

383 
	}
}

385 
boﬁ


386 
	$Såcmp
(c⁄° *
a
, c⁄° *
b
)

388 i‡(
a
 =
NULL
)

389 (
b
 =
NULL
);

390 i‡(
b
 =
NULL
)

391 (
FALSE
);

393 *
a
 && *
b
)

394 i‡(*
a
++ !*
b
++)

395 (
FALSE
);

397 (*
a
 =*
b
);

399 
	}
}

	@test/os161/user/testbin/triplehuge/triple.c

36 
	~<°dio.h
>

37 
	~<uni°d.h
>

38 
	~<îr.h
>

39 
	~"åùÀ.h
"

42 
pid_t


43 
	$•awnv
(c⁄° *
¥og
, **
¨gv
)

45 
pid_t
 
pid
 = 
	`f‹k
();

46 
pid
) {

48 
	`îr
(1, "fork");

51 
	`execv
(
¥og
, 
¨gv
);

52 
	`îr
(1, "%s:Éxecv", 
¥og
);

57  
pid
;

58 
	}
}

62 
	$dowaô
(
ödex
, 
pid
)

64 
°©us
;

66 i‡(
	`waôpid
(
pid
, &
°©us
, 0)<0) {

67 
	`w¨n
("waôpid f‹ c›y #%d (pid %d)", 
ödex
, 
pid
);

70 i‡(
	`WIFSIGNALED
(
°©us
)) {

71 
	`w¨nx
("c›y #%d (pid %d): sig«»%d", 
ödex
, 
pid
,

72 
	`WTERMSIG
(
°©us
));

75 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

76 
	`w¨nx
("c›y #%d (pid %d):Éxô %d", 
ödex
, 
pid
,

77 
	`WEXITSTATUS
(
°©us
));

81 
	}
}

84 
	$åùÀ
(c⁄° *
¥og
)

86 
pid_t
 
pids
[3];

87 
i
, 
Áûuªs
 = 0;

88 *
¨gs
[2];

91 
¨gs
[0]=(*)
¥og
;

92 
¨gs
[1]=
NULL
;

94 
	`w¨nx
("Sèπög:Ñu¬ögÅhªêc›õ†o‡%s...", 
¥og
);

96 
i
=0; i<3; i++) {

97 
pids
[
i
]=
	`•awnv
(
¨gs
[0],árgs);

100 
i
=0; i<3; i++) {

101 
Áûuªs
 +
	`dowaô
(
i
, 
pids
[i]);

104 i‡(
Áûuªs
 > 0) {

105 
	`w¨nx
("%d faûuªs", 
Áûuªs
);

108 
	`w¨nx
("Congratulations! YouÖassed.");

110 
	}
}

	@test/os161/user/testbin/triplehuge/triple.h

30 
åùÀ
(c⁄° *
¥og
);

	@test/os161/user/testbin/triplehuge/triplehuge.c

38 
	~"åùÀ.h
"

41 
	$maö
()

43 
	`åùÀ
("/testbin/huge");

45 
	}
}

	@test/os161/user/testbin/triplemat/triple.c

36 
	~<°dio.h
>

37 
	~<uni°d.h
>

38 
	~<îr.h
>

39 
	~"åùÀ.h
"

42 
pid_t


43 
	$•awnv
(c⁄° *
¥og
, **
¨gv
)

45 
pid_t
 
pid
 = 
	`f‹k
();

46 
pid
) {

48 
	`îr
(1, "fork");

51 
	`execv
(
¥og
, 
¨gv
);

52 
	`îr
(1, "%s:Éxecv", 
¥og
);

57  
pid
;

58 
	}
}

62 
	$dowaô
(
ödex
, 
pid
)

64 
°©us
;

66 i‡(
	`waôpid
(
pid
, &
°©us
, 0)<0) {

67 
	`w¨n
("waôpid f‹ c›y #%d (pid %d)", 
ödex
, 
pid
);

70 i‡(
	`WIFSIGNALED
(
°©us
)) {

71 
	`w¨nx
("c›y #%d (pid %d): sig«»%d", 
ödex
, 
pid
,

72 
	`WTERMSIG
(
°©us
));

75 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

76 
	`w¨nx
("c›y #%d (pid %d):Éxô %d", 
ödex
, 
pid
,

77 
	`WEXITSTATUS
(
°©us
));

81 
	}
}

84 
	$åùÀ
(c⁄° *
¥og
)

86 
pid_t
 
pids
[3];

87 
i
, 
Áûuªs
 = 0;

88 *
¨gs
[2];

91 
¨gs
[0]=(*)
¥og
;

92 
¨gs
[1]=
NULL
;

94 
	`w¨nx
("Sèπög:Ñu¬ögÅhªêc›õ†o‡%s...", 
¥og
);

96 
i
=0; i<3; i++) {

97 
pids
[
i
]=
	`•awnv
(
¨gs
[0],árgs);

100 
i
=0; i<3; i++) {

101 
Áûuªs
 +
	`dowaô
(
i
, 
pids
[i]);

104 i‡(
Áûuªs
 > 0) {

105 
	`w¨nx
("%d faûuªs", 
Áûuªs
);

108 
	`w¨nx
("Congratulations! YouÖassed.");

110 
	}
}

	@test/os161/user/testbin/triplemat/triple.h

30 
åùÀ
(c⁄° *
¥og
);

	@test/os161/user/testbin/triplemat/triplemat.c

38 
	~"åùÀ.h
"

41 
	$maö
()

43 
	`åùÀ
("/testbin/matmult");

45 
	}
}

	@test/os161/user/testbin/triplesort/triple.c

36 
	~<°dio.h
>

37 
	~<uni°d.h
>

38 
	~<îr.h
>

39 
	~"åùÀ.h
"

42 
pid_t


43 
	$•awnv
(c⁄° *
¥og
, **
¨gv
)

45 
pid_t
 
pid
 = 
	`f‹k
();

46 
pid
) {

48 
	`îr
(1, "fork");

51 
	`execv
(
¥og
, 
¨gv
);

52 
	`îr
(1, "%s:Éxecv", 
¥og
);

57  
pid
;

58 
	}
}

62 
	$dowaô
(
ödex
, 
pid
)

64 
°©us
;

66 i‡(
	`waôpid
(
pid
, &
°©us
, 0)<0) {

67 
	`w¨n
("waôpid f‹ c›y #%d (pid %d)", 
ödex
, 
pid
);

70 i‡(
	`WIFSIGNALED
(
°©us
)) {

71 
	`w¨nx
("c›y #%d (pid %d): sig«»%d", 
ödex
, 
pid
,

72 
	`WTERMSIG
(
°©us
));

75 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

76 
	`w¨nx
("c›y #%d (pid %d):Éxô %d", 
ödex
, 
pid
,

77 
	`WEXITSTATUS
(
°©us
));

81 
	}
}

84 
	$åùÀ
(c⁄° *
¥og
)

86 
pid_t
 
pids
[3];

87 
i
, 
Áûuªs
 = 0;

88 *
¨gs
[2];

91 
¨gs
[0]=(*)
¥og
;

92 
¨gs
[1]=
NULL
;

94 
	`w¨nx
("Sèπög:Ñu¬ögÅhªêc›õ†o‡%s...", 
¥og
);

96 
i
=0; i<3; i++) {

97 
pids
[
i
]=
	`•awnv
(
¨gs
[0],árgs);

100 
i
=0; i<3; i++) {

101 
Áûuªs
 +
	`dowaô
(
i
, 
pids
[i]);

104 i‡(
Áûuªs
 > 0) {

105 
	`w¨nx
("%d faûuªs", 
Áûuªs
);

108 
	`w¨nx
("Congratulations! YouÖassed.");

110 
	}
}

	@test/os161/user/testbin/triplesort/triple.h

30 
åùÀ
(c⁄° *
¥og
);

	@test/os161/user/testbin/triplesort/triplesort.c

38 
	~"åùÀ.h
"

41 
	$maö
()

43 
	`åùÀ
("/testbin/sort");

45 
	}
}

	@test/os161/user/testbin/userthreads/userthreads.c

52 
	~<uni°d.h
>

53 
	~<°dio.h
>

55 
	#NTHREADS
 3

	)

56 
	#MAX
 1<<25

	)

61 vﬁ©ûê
	gcou¡
 = 0;

64 
ThªadRu¬î
();

65 
BœdeRu¬î
();

68 
	$maö
(
¨gc
, *
¨gv
[])

70 
i
;

72 ()
¨gc
;

73 ()
¨gv
;

75 
i
=0; i<
NTHREADS
; i++) {

76 i‡(
i
)

77 
	`thªadf‹k
(
ThªadRu¬î
);

79 
	`thªadf‹k
(
BœdeRu¬î
);

82 
	`¥ötf
("Parent hasÜeft.\n");

84 
	}
}

92 
	$BœdeRu¬î
()

94 
cou¡
 < 
MAX
) {

95 i‡(
cou¡
 % 500 == 0)

96 
	`¥ötf
("Blade ");

97 
cou¡
++;

99 
	}
}

102 
	$ThªadRu¬î
()

104 
cou¡
 < 
MAX
) {

105 i‡(
cou¡
 % 513 == 0)

106 
	`¥ötf
(" Runner\n");

107 
cou¡
++;

109 
	}
}

	@test/os161/user/testbin/zero/zero.c

38 
	~<°dio.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

47 
	gd©a_°uff
[] = {

60 
	#SUM_OF_DATA_STUFF
 525

	)

66 
	gbss_°uff
[3000];

70 
	$check_d©a
()

72 
i
, 
num
, 
k
;

74 
num
 = (
d©a_°uff
) / (data_stuff[0]);

75 
k
=
i
=0; i<
num
; i++) {

76 
k
 +
d©a_°uff
[
i
];

78 i‡(
k
 !
SUM_OF_DATA_STUFF
) {

79 
	`w¨nx
("My initialized data sumsÅoÅhe wrong value!");

80 
	`w¨nx
("GŸ: %u Ex≥˘ed: %u", 
k
, 
SUM_OF_DATA_STUFF
);

81 
	`îrx
(1, "FAILED");

83 
	}
}

87 
	$check_bss
()

89 
i
, 
num
;

91 
num
 = (
bss_°uff
) / (bss_stuff[0]);

92 
i
=0; i<
num
; i++) {

93 i‡(
bss_°uff
[
i
] != 0) {

94 
	`w¨nx
("BSSÉntryát index %u (address %p)Çot zero!",

95 
i
, &
bss_°uff
[i]);

96 
	`w¨nx
("Found: 0x%x", 
bss_°uff
[
i
]);

97 
	`îrx
(1, "FAILED");

100 
	}
}

104 
	$check_sbrk
()

106 *
ba£
;

107 
i
;

110 
	#SBRK_SIZE
 10000

	)

112 
ba£
 = 
	`sbrk
(
SBRK_SIZE
);

113 i‡(
ba£
 == (*)-1) {

114 i‡(
î∫o
 =
EUNIMP
) {

115 
	`¥ötf
("I guess you haven't implemented sbrk yet.\n");

118 
	`îr
(1, "sbrk");

121 
i
=0; i<
SBRK_SIZE
; i++) {

122 i‡(
ba£
[
i
] != 0) {

123 
	`w¨nx
("Byteát offset %u (address %p)Çot zero",

124 
i
, &
ba£
[i]);

125 
	`w¨nx
("GŸ: 0x%x", ()
ba£
[
i
]);

126 
	`w¨nx
("Ba£ o‡sbrkÑegi⁄: %p", 
ba£
);

127 
	`îrx
(1, "FAILED");

130 
	}
}

134 
	$maö
()

136 
	`¥ötf
("zero:Öhase 1: checking .bss\n");

137 
	`check_d©a
();

138 
	`check_bss
();

140 
	`¥ötf
("zero:Öhase 2: checking sbrk()\n");

141 
	`check_sbrk
();

143 
	`¥ötf
("zero:Öassed\n");

145 
	}
}

	@test/os161/user/uw-testbin/argtest/argtest.c

9 
	~<°dio.h
>

12 
	$maö
(
¨gc
, *
¨gv
[])

14 c⁄° *
tmp
;

15 
i
;

17 
	`¥ötf
("¨g¯ : %d\n", 
¨gc
);

18 
	`¥ötf
("&tm∞ : %p\n", &
tmp
);

19 
	`¥ötf
("&ò : %p\n", &
i
);

20 
	`¥ötf
("&¨g¯ : %p\n", &
¨gc
);

21 
	`¥ötf
("&¨gv : %p\n", &
¨gv
);

22 
	`¥ötf
("¨gv : %p\n", 
¨gv
);

23 
	`¥ötf
("\n");

25 
i
=0; i<=
¨gc
; i++) {

26 
	`¥ötf
("&¨gv[%d] : %p\n", 
i
, &
¨gv
[i]);

28 
	`¥ötf
("\n");

30 
i
=0; i<=
¨gc
; i++) {

31 
	`¥ötf
("¨gv[%d] : %p\n", 
i
, 
¨gv
[i]);

33 
	`¥ötf
("\n");

35 
i
=0; i<=
¨gc
; i++) {

36 
tmp
 = 
¨gv
[
i
];

37 i‡(
tmp
 =
NULL
) {

38 
tmp
 = "[NULL]";

40 
	`¥ötf
("¨gv[%d] -> %s\n", 
i
, 
tmp
);

44 
	}
}

	@test/os161/user/uw-testbin/argtesttest/argtesttest.c

10 
	~<uni°d.h
>

11 
	~<îr.h
>

13 *
	gx¨gv
[4] = { (*)"¨gã°ã°", (*)"fú°", (*)"£c⁄d", 
NULL
 };

17 
	$•awnv
(c⁄° *
¥og
, **
¨gv
)

19 
pid_t
 
pid
 = 
	`f‹k
();

20 
pid
) {

22 
	`îr
(1, "fork");

25 
	`execv
(
¥og
, 
¨gv
);

26 
	`îr
(1, "%s", 
¥og
);

31 
	}
}

34 
	$maö
()

36 
	`•awnv
("/ã°bö/¨gã°", 
x¨gv
);

38 
	}
}

	@test/os161/user/uw-testbin/conc-io/conc-io.c

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<uni°d.h
>

14 
	#PROCS
 (4)

	)

15 
	#BUF_SIZE
 (10)

	)

16 
	#NUM_WRITES
 (500)

	)

17 
	#TOTAL_WRITES
 (
NUM_WRITES
 * 
PROCS
)

	)

19 c⁄° *
	gto_wrôe
 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

20 
do_wrôes
(
c
);

23 
	$maö
()

25 
buf„r
[
BUF_SIZE
];

26 
°©us
 = -1;

27 
rc
[
PROCS
];

28 
pid_t
 
pid
[
PROCS
];

29 
rvÆ
 = -1;

30 
id
 = -1;

31 
i
,
k
;

33 
rvÆ
 = 
	`›í
("TESTFILE", 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
);

35 i‡(
rvÆ
 < 0)

37 
	`¥ötf
("### TEST FAILED: UnableÅo create file\n");

38 
	`exô
(0);

40 
	`˛o£
(
rvÆ
);

43 
i
=0; i<
PROCS
; i++) {

44 
pid
[
i
] = 
	`f‹k
();

45 i‡(
pid
[
i
] < 0) {

46 
	`¥ötf
("F‹k %d faûed\n", 
i
);

47 
	`exô
(0);

51 i‡(
pid
[
i
] == 0) {

52 
	`do_wrôes
(
to_wrôe
[
i
]);

53 
	`¥ötf
("Pro˚s†numbî %d i†d⁄e\n", 
i
);

54 
	`exô
(0);

59 
i
=0; i<
PROCS
; i++) {

60 i‡(
pid
[
i
] < 0) {

61 
	`¥ötf
("### TEST FAILED: UnableÅo createÖrocesses\n");

66 
i
=0; i<
PROCS
; i++) {

67 
rc
[
i
] = 
	`waôpid
(
pid
[i], &
°©us
, 0);

68 i‡(
rc
[
i
] !
pid
[i]) {

69 
	`¥ötf
("### TEST FAILED: wait forÖrocesses failed\n");

71 
	`¥ötf
("D⁄êwaôög f‹Öro˚s†numbî %d\n", 
i
);

75 
id
 = 
	`›í
("TESTFILE", 
O_RDWR
);

76 i‡(
id
 < 0)

78 
	`¥ötf
("### TEST FAILED: UnableÅo open file\n");

79 
	`exô
(1);

83 
i
=0; i<
TOTAL_WRITES
; i++)

85 
rvÆ
 = 
	`ªad
(
id
, 
buf„r
, 
BUF_SIZE
);

87 
k
=0; k<(
BUF_SIZE
-1); k++) {

88 i‡(
buf„r
[
k
] != buffer[k+1]) {

89 
	`¥ötf
("### TEST FAILED; Writes wereÇotátomic\n");

90 
	`¥ötf
("buffer[%d] = %c != buffer[%d] = %c\n",

91 
k
, 
buf„r
[k], k+1, buffer[k+1]);

92 
	`˛o£
(
id
);

93 
	`exô
(1);

98 
rvÆ
 = 
	`˛o£
(
id
);

100 i‡(
rvÆ
 < 0)

102 
	`¥ötf
("### TEST FAILED: UnableÅo close file\n");

104 
	`¥ötf
("PASSED\n");

106 
	`exô
(0);

108 
	}
}

111 
	$do_wrôes
(
c
)

113 
rvÆ
 = 0;

114 
id
 = -1;

115 
i
 = 0;

116 
j
 = 0;

117 
buf„r
[
BUF_SIZE
];

118 vﬁ©ûê
tŸÆ
 = 0;

120 
j
=0; j<
BUF_SIZE
; j++) {

121 
buf„r
[
j
] = 
c
;

124 
id
 = 
	`›í
("TESTFILE", 
O_RDWR
);

126 i‡(
id
 < 0) {

127 
	`¥ötf
("### TEST FAILED: UnableÅo open file\n");

128 
	`_exô
(1);

131 
i
 = 0; i < 
NUM_WRITES
; i++) {

132 
rvÆ
 = 
	`wrôe
(
id
, 
buf„r
, 
BUF_SIZE
);

134 i‡(
rvÆ
 !
BUF_SIZE
) {

135 
	`¥ötf
("### TEST FAILED: U«bÀÅÿwrôê%d byã†tÿfûe\n", 
BUF_SIZE
);

136 
	`˛o£
(
id
);

137 
	`_exô
(1);

141 
j
=0; j<
BUF_SIZE
; j++) {

142 
buf„r
[
j
] = 
c
;

143 
tŸÆ
 +
j
;

147 
rvÆ
 = 
	`˛o£
(
id
);

149 i‡(
rvÆ
 < 0) {

150 
	`¥ötf
("### TEST FAILED: UnableÅo close file\n");

151 
	`_exô
(1);

154 
	}
}

	@test/os161/user/uw-testbin/files1/files1.c

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<uni°d.h
>

17 
	~<î∫o.h
>

18 
	~"../lib/ã°utûs.h
"

21 
	$maö
()

23 
f1
, 
f2
;

24 
i
 = 42;

25 
j
 = -999;

26 
ötbuf
 = 0;

27 
rc
 = 0;

28 
ßve_î∫o
 = 0;

34 
f1
 = 
	`›í
("FILE1", 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
);

35 
	`TEST_POSITIVE
(
f1
, "UnableÅo open FILE1");

38 
f2
 = 
	`›í
("FILE2", 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
);

39 
	`TEST_POSITIVE
(
f2
, "UnableÅo open FILE2");

41 
	`TEST_NOT_EQUAL
(
f1
, 
f2
, "fd f1 == f2");

44 
rc
 = 
	`wrôe
(
f1
, (*Ë&
i
, (i));

45 
	`TEST_EQUAL
(
rc
, (
i
), "writeÅo f1 doesÇot write/returnÖroper value");

48 
rc
 = 
	`wrôe
(
f2
, (*Ë&
j
, (j));

49 
	`TEST_EQUAL
(
rc
, (
j
), "writeÅo f2 doesÇot write/returnÖroper value");

51 
rc
 = 
	`˛o£
(
f1
);

52 
	`TEST_EQUAL
(
rc
, 
SUCCESS
, "close f1 failed");

54 
rc
 = 
	`˛o£
(
f1
);

55 
ßve_î∫o
 = 
î∫o
;

57 
	`TEST_NEGATIVE
(
rc
, "close f1 secondÅime didn't fail");

59 
rc
 = 
	`˛o£
(
f2
);

60 
	`TEST_EQUAL
(
rc
, 
SUCCESS
, "close f2 failed");

62 
f1
 = 
	`›í
("FILE1", 
O_RDONLY
);

63 
	`TEST_POSITIVE
(
f1
, "UnableÅo open FILE1,áfter Close");

65 
f2
 = 
	`›í
("FILE2", 
O_RDONLY
);

66 
	`TEST_POSITIVE
(
f1
, "UnableÅo open FILE2,áfter Close");

68 
	`TEST_NOT_EQUAL
(
f1
, 
f2
, "fd f1 == f2");

70 
rc
 = 
	`ªad
(
f1
, (*Ë&
ötbuf
, (intbuf));

71 
	`TEST_EQUAL
(
rc
, (
ötbuf
),

73 
	`TEST_EQUAL
(
ötbuf
, 
i
,

76 
rc
 = 
	`ªad
(
f2
, (*Ë&
ötbuf
, (intbuf));

77 
	`TEST_EQUAL
(
rc
, (
j
), "read from f2 doesÇotÑead/returnÖroper value");

78 
	`TEST_EQUAL
(
ötbuf
, 
j
, "read from f2 didÇot get correct value");

80 
	`TEST_STATS
();

82 
	`exô
(0);

83 
	}
}

	@test/os161/user/uw-testbin/files2/files2.c

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<uni°d.h
>

17 
	~<î∫o.h
>

18 
	~<f˙é.h
>

19 
	~"../lib/ã°utûs.h
"

25 
	#USING_ERR_CODES


	)

28 
	#BOGUS_NAME
 "ZZ12ZT"

	)

33 
	#COUNT_LIMIT
 (4*1024)

	)

35 
	gfd_¨øy
[
COUNT_LIMIT
];

38 
	$maö
()

40 
f1
, 
f2
, 
f3
;

41 
i
 = 42;

42 
j
 = -999;

43 
rc
 = 0;

44 
cou¡
 = 0;

45 
ßved_î∫o
 = 0;

51 
rc
 = 
	`›í
("FILE1", 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
);

52 
	`TEST_POSITIVE
(
rc
, "UnableÅo create FILE1 (assumesÅhat it doesn'tÉxist)");

55 
rc
 = 
	`›í
("FILE2", 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
);

56 
	`TEST_POSITIVE
(
rc
, "UnableÅo create FILE2 (assumesÅhat it doesn'tÉxist)");

59 
f1
 = 
	`›í
("FILE1", 
O_RDWR
);

60 
	`TEST_POSITIVE
(
f1
, "UnableÅo open FILE1 firstÅime");

62 
f2
 = 
	`›í
("FILE1", 
O_RDWR
);

63 
	`TEST_POSITIVE
(
f2
, "UnableÅo open FILE1 secondÅime");

65 
f3
 = 
	`›í
("FILE1", 
O_RDWR
);

66 
	`TEST_POSITIVE
(
f3
, "UnableÅo open FILE1ÅhirdÅime");

69 
	`TEST_NOT_EQUAL
(
f1
, 
f2
, "Using same fd for multiple opens f1 = f2");

70 
	`TEST_NOT_EQUAL
(
f2
, 
f3
, "Using same fd for multiple opens f2 = f3");

72 
rc
 = 
	`˛o£
(
f1
);

73 
	`TEST_EQUAL
(
rc
, 
SUCCESS
, "UnableÅo close f1");

74 
rc
 = 
	`˛o£
(
f2
);

75 
	`TEST_EQUAL
(
rc
, 
SUCCESS
, "UnableÅo close f2");

76 
rc
 = 
	`˛o£
(
f3
);

77 
	`TEST_EQUAL
(
rc
, 
SUCCESS
, "UnableÅo close f3");

80 
rc
 = 
	`wrôe
(
f1
, (*Ë&
i
, (i));

81 
ßved_î∫o
 = 
î∫o
;

82 
	`TEST_NEGATIVE
(
rc
, "writeÅo closed file f1 should fail");

83 #ifde‡
USING_ERR_CODES


84 
	`TEST_EQUAL
(
ßved_î∫o
, 
EBADF
, "Expected EBADF when writingÅo closed file f1");

88 
rc
 = 
	`ªad
(
f2
, (*Ë&
j
, (j));

89 
ßved_î∫o
 = 
î∫o
;

90 
	`TEST_NEGATIVE
(
rc
, "read from closed file f2 should fail");

91 #ifde‡
USING_ERR_CODES


92 
	`TEST_EQUAL
(
ßved_î∫o
, 
EBADF
, "Expected EBADF whenÑeading from closed file f2");

95 
rc
 = 
	`˛o£
(0xdeadbeef);

96 
ßved_î∫o
 = 
î∫o
;

97 
	`TEST_NEGATIVE
(
rc
, "close on invalid file id didn'tÑeturnÉrror code");

98 #ifde‡
USING_ERR_CODES


99 
	`TEST_EQUAL
(
ßved_î∫o
, 
EBADF
, "Expected EBADF when closing invalid file fd");

102 
rc
 = 
	`›í
(
BOGUS_NAME
, 
O_RDWR
);

103 
ßved_î∫o
 = 
î∫o
;

104 
	`TEST_NEGATIVE
(
rc
, "openÇon-existant fileÑeturns incorrect value");

105 #ifde‡
USING_ERR_CODES


106 
	`TEST_EQUAL
(
ßved_î∫o
, 
ENOENT
, "Expected ENOENT when openingÇonÉxistant file");

110 
f1
 = 
	`›í
("FILE1", 
O_RDONLY
);

111 
	`TEST_POSITIVE
(
f1
, "UnableÅo open FILE1");

114 
rc
 = 
	`wrôe
(
f1
, "hello", 5);

115 
ßved_î∫o
 = 
î∫o
;

116 
	`TEST_NEGATIVE
(
rc
, "TryingÅo writeÅoÑead only file doesÇot fail");

117 #ifde‡
USING_ERR_CODES


118 
	`TEST_EQUAL
(
ßved_î∫o
, 
EBADF
, "Expected EBAD whenÅryingÅo writeÅoÑead only file");

122 
f2
 = 
	`›í
("FILE2", 
O_WRONLY
);

123 
	`TEST_POSITIVE
(
f1
, "UnableÅo open FILE2");

126 
rc
 = 
	`ªad
(
f2
, &
i
, 1);

127 
ßved_î∫o
 = 
î∫o
;

128 
	`TEST_NEGATIVE
(
rc
, "TryingÅoÑead from write only file doesÇot fail");

129 #ifde‡
USING_ERR_CODES


130 
	`TEST_EQUAL
(
ßved_î∫o
, 
EBADF
, "Expected EBAD whenÅryingÅoÑead from write only file");

133 
rc
 = 
	`˛o£
(
f1
);

134 
	`TEST_EQUAL
(
rc
, 
SUCCESS
, "UnableÅo close f1");

136 
rc
 = 
	`˛o£
(
f2
);

137 
	`TEST_EQUAL
(
rc
, 
SUCCESS
, "UnableÅo close f2");

140 
f1
 = 
	`›í
("FILE1", 
O_RDWR
);

141 
ßved_î∫o
 = 
î∫o
;

142 i‡(
f1
 >= 0) {

143 
fd_¨øy
[
cou¡
] = 
f1
;

144 
cou¡
++;

146 } 
f1
 >0 && 
cou¡
 < 
COUNT_LIMIT
);

148 i‡(
cou¡
 =
COUNT_LIMIT
) {

149 
	`¥ötf
("WARNING: THERE MAY NOT BE A LIMIT ON THE NUMBER OF OPEN FILES\n");

151 
	`TEST_NEGATIVE
(
f1
, "OpeningÅoo many files doesn'tÑeturnÉrror code");

152 #ifde‡
USING_ERR_CODES


153 
	`TEST_EQUAL_ONE_OF
(
ßved_î∫o
, 
EMFILE
, 
ENFILE
, "Expected one of EMFILE or ENFILE when openingÅoo many files");

157 
	`TEST_POSITIVE
(
cou¡
, "Count of open filesÉxpectedÅo be > 0");

158 
	`¥ötf
("Numbî o‡fûe†›íed = %d\n", 
cou¡
);

161 
i
=0; i<
cou¡
; i++) {

162 
rc
 = 
	`˛o£
(
fd_¨øy
[
i
]);

163 
	`TEST_EQUAL
(
rc
, 0, "Expected closeÅoÑeturn 0 for success");

167 
rc
 = 
	`›í
((*Ë0xffffffff, 
O_RDWR
);

168 
ßved_î∫o
 = 
î∫o
;

169 
	`TEST_NEGATIVE
(
rc
, "open file using badáddress doesn'tÑeturnÉrror code");

170 #ifde‡
USING_ERR_CODES


171 
	`TEST_EQUAL
(
ßved_î∫o
, 
EFAULT
, "Expected EFAULT for invalidáddress for filename");

174 
	`TEST_STATS
();

176 
	`exô
(0);

177 
	}
}

	@test/os161/user/uw-testbin/hogparty/hogparty.c

10 
	~<uni°d.h
>

11 
	~<îr.h
>

13 *
	gxh¨gv
[2] = { (*)"xhog", 
NULL
 };

14 *
	gyh¨gv
[2] = { (*)"yhog", 
NULL
 };

15 *
	gzh¨gv
[2] = { (*)"zhog", 
NULL
 };

19 
	$•awnv
(c⁄° *
¥og
, **
¨gv
)

21 
pid_t
 
pid
 = 
	`f‹k
();

22 
pid
) {

24 
	`îr
(1, "fork");

27 
	`execv
(
¥og
, 
¨gv
);

28 
	`îr
(1, "%s", 
¥og
);

33 
	}
}

36 
	$maö
()

38 
	`•awnv
("/uw-ã°bö/xhog", 
xh¨gv
);

39 
	`•awnv
("/uw-ã°bö/yhog", 
yh¨gv
);

40 
	`•awnv
("/uw-ã°bö/zhog", 
zh¨gv
);

42 
	}
}

	@test/os161/user/uw-testbin/lib/testutils.c

17 
	~<°dio.h
>

18 
	~"ã°utûs.h
"

21 
	gã°_num
 = 0;

22 
	gnum_Áûuªs
 = 0;

23 
	gvîbo£
 = 0;

27 
	$¥öt_loˇti⁄
(c⁄° *
fûe
, c⁄° *
func
, 
löe
, c⁄° *
ö_ã°
)

29 
	`¥ötf
(" %†: fun˘i⁄ = %s,Üöê%dÅe° wa†%s\n", 
fûe
, 
func
, 
löe
, 
ö_ã°
);

30 
	}
}

34 
	$ã°_equÆ
(
vÆ
, 
ex≥˘ed_vÆ
, c⁄° *
°r
,

35 c⁄° *
fûe
, c⁄° *
func
, 
löe
)

37 
Áûed
 = 0;

38 c⁄° *
out
 = "SUCCESS";

40 
ã°_num
++;

42 i‡(
vÆ
 !
ex≥˘ed_vÆ
) {

43 
num_Áûuªs
++;

44 
Áûed
 = 1;

45 
out
 = "FAILURE";

48 i‡(
Áûed
 || 
vîbo£
) {

49 
	`¥ötf
("%s ON TEST = %d : Got %d :Éxpected %d\n",

50 
out
, 
ã°_num
, 
vÆ
, 
ex≥˘ed_vÆ
);

52 i‡(
Áûed
) {

53 
	`¥ötf
(" %s\n", 
°r
);

55 
	`¥öt_loˇti⁄
(
fûe
, 
func
, 
löe
, 
__FUNCTION__
);

58 
	}
}

62 
	$ã°_equÆ_⁄e_of
(
vÆ
, 
ex≥˘ed_vÆ1
, 
ex≥˘ed_vÆ2
, c⁄° *
°r
,

63 c⁄° *
fûe
, c⁄° *
func
, 
löe
)

65 
Áûed
 = 0;

66 c⁄° *
out
 = "SUCCESS";

68 
ã°_num
++;

70 i‡(
vÆ
 !
ex≥˘ed_vÆ1
 && vÆ !
ex≥˘ed_vÆ2
) {

71 
num_Áûuªs
++;

72 
Áûed
 = 1;

73 
out
 = "FAILURE";

76 i‡(
Áûed
 || 
vîbo£
) {

77 
	`¥ötf
("%s ON TEST = %d : Got %d :Éxpected one of %d or %d\n",

78 
out
, 
ã°_num
, 
vÆ
, 
ex≥˘ed_vÆ1
, 
ex≥˘ed_vÆ2
);

80 i‡(
Áûed
) {

81 
	`¥ötf
(" %s\n", 
°r
);

83 
	`¥öt_loˇti⁄
(
fûe
, 
func
, 
löe
, 
__FUNCTION__
);

86 
	}
}

90 
	$ã°_posôive
(
vÆ
, c⁄° *
°r
,

91 c⁄° *
fûe
, c⁄° *
func
, 
löe
)

93 
Áûed
 = 0;

94 c⁄° *
out
 = "SUCCESS";

96 
ã°_num
++;

98 i‡(
vÆ
 <= 0) {

99 
num_Áûuªs
++;

100 
Áûed
 = 1;

101 
out
 = "FAILURE";

104 i‡(
Áûed
 || 
vîbo£
) {

105 
	`¥ötf
("%s ON TEST = %d : Got %d :Éxpected Positive Value\n",

106 
out
, 
ã°_num
, 
vÆ
);

108 i‡(
Áûed
) {

109 
	`¥ötf
(" %s\n", 
°r
);

111 
	`¥öt_loˇti⁄
(
fûe
, 
func
, 
löe
, 
__FUNCTION__
);

113 
	}
}

117 
	$ã°_√g©ive
(
vÆ
, c⁄° *
°r
,

118 c⁄° *
fûe
, c⁄° *
func
, 
löe
)

120 
Áûed
 = 0;

121 c⁄° *
out
 = "SUCCESS";

123 
ã°_num
++;

125 i‡(
vÆ
 >= 0) {

126 
num_Áûuªs
++;

127 
Áûed
 = 1;

128 
out
 = "FAILURE";

131 i‡(
Áûed
 || 
vîbo£
) {

132 
	`¥ötf
("%s ON TEST = %d : Got %d :Éxpected Negative Value\n",

133 
out
, 
ã°_num
, 
vÆ
);

135 i‡(
Áûed
) {

136 
	`¥ötf
(" %s\n", 
°r
);

138 
	`¥öt_loˇti⁄
(
fûe
, 
func
, 
löe
, 
__FUNCTION__
);

140 
	}
}

144 
	$ã°_nŸ_equÆ
(
vÆ1
, 
vÆ2
, c⁄° *
°r
,

145 c⁄° *
fûe
, c⁄° *
func
, 
löe
)

147 
Áûed
 = 0;

148 c⁄° *
out
 = "SUCCESS";

150 
ã°_num
++;

152 i‡(
vÆ1
 =
vÆ2
) {

153 
num_Áûuªs
++;

154 
Áûed
 = 1;

155 
out
 = "FAILURE";

158 i‡(
Áûed
 || 
vîbo£
) {

159 
	`¥ötf
("%s ON TEST = %d : Got %d : Expectedánything but %d\n",

160 
out
, 
ã°_num
, 
vÆ1
, 
vÆ2
);

162 i‡(
Áûed
) {

163 
	`¥ötf
(" %s\n", 
°r
);

165 
	`¥öt_loˇti⁄
(
fûe
, 
func
, 
löe
, 
__FUNCTION__
);

167 
	}
}

171 
	$ã°_ª£t_°©s
()

173 
num_Áûuªs
 = 0;

174 
ã°_num
 = 0;

175 
	}
}

178 
	$ã°_vîbo£_⁄
()

180 
	`¥ötf
("TEST VERBOSE ON\n");

181 
vîbo£
 = 1;

182 
	}
}

185 
	$ã°_vîbo£_off
()

187 
	`¥ötf
("TEST VERBOSE OFF\n");

188 
vîbo£
 = 0;

189 
	}
}

192 
	$ã°_¥öt_°©s
(c⁄° *
fûe
, c⁄° * 
func
, 
löe
)

194 
	`¥ötf
("TEST STATS for %s : from function = %s,Üine = %d\n",

195 
fûe
, 
func
, 
löe
);

196 
	`¥ötf
(" Number of failures = %d Number of successes = %d Number of Tests = %d\n",

197 
num_Áûuªs
, 
ã°_num
 -Çum_failures,Åest_num);

198 
	`¥ötf
("\n");

199 
	}
}

202 #ifde‡
UNIT_TEST


204 
	$maö
()

206 
	`TEST_VERBOSE_ON
();

208 
	`TEST_EQUAL
(1, 1, "ShouldÖass\n");

209 
	`TEST_EQUAL
(1, 2, "Should fail\n");

210 
	`TEST_EQUAL_ONE_OF
(1, 1, 2, "ShouldÖass\n");

211 
	`TEST_EQUAL_ONE_OF
(1, 2, 1, "ShouldÖass\n");

212 
	`TEST_EQUAL_ONE_OF
(1, 2, 3, "Should fail\n");

213 
	`TEST_NOT_EQUAL
(1, 2, "ShouldÖass\n");

214 
	`TEST_NOT_EQUAL
(2, 1, "ShouldÖass\n");

215 
	`TEST_NOT_EQUAL
(2, 2, "Should fail\n");

217 
	`TEST_NEGATIVE
(-1, "ShouldÖass\n");

218 
	`TEST_NEGATIVE
(0, "Should fail\n");

219 
	`TEST_NEGATIVE
(1, "Should fail\n");

220 
	`TEST_POSITIVE
(1, "ShouldÖass\n");

221 
	`TEST_POSITIVE
(0, "Should fail\n");

222 
	`TEST_POSITIVE
(-1, "Should fail\n");

224 
	`TEST_STATS
();

225 
	`¥ötf
("Should have 7Öassesánd 7 failures\n");

226 
	}
}

	@test/os161/user/uw-testbin/lib/testutils.h

1 #i‚de‡
TESTUTILS_H


2 
	#TESTUTILS_H


	)

4 
	#SUCCESS
 (0)

	)

6 
	#TEST_EQUAL
(
a
, 
b
, 
s
) \

7 
	`ã°_equÆ
(
a
, 
b
, 
s
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
)

	)

9 
	#TEST_EQUAL_ONE_OF
(
a
, 
b
, 
c
, 
s
) \

10 
	`ã°_equÆ_⁄e_of
(
a
, 
b
, 
c
, 
s
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
)

	)

12 
	#TEST_NOT_EQUAL
(
a
, 
b
, 
s
) \

13 
	`ã°_nŸ_equÆ
(
a
, 
b
, 
s
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
)

	)

15 
	#TEST_NEGATIVE
(
a
, 
s
) \

16 
	`ã°_√g©ive
(
a
, 
s
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
)

	)

18 
	#TEST_POSITIVE
(
a
, 
s
) \

19 
	`ã°_posôive
(
a
, 
s
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
)

	)

21 
	#TEST_STATS
() \

22 
	`ã°_¥öt_°©s
–
__FILE__
, 
__FUNCTION__
, 
__LINE__
)

	)

24 
	#TEST_VERBOSE_ON
() \

25 
	`ã°_vîbo£_⁄
()

	)

27 
	#TEST_VERBOSE_OFF
() \

28 
	`ã°_vîbo£_off
()

	)

30 
ã°_equÆ
(
ªt_vÆ
, 
ex≥˘ed_vÆ
, c⁄° *
°r
,

31 c⁄° *
fûe
, c⁄° * 
func
, 
löe
);

32 
ã°_equÆ_⁄e_of
(
vÆ
, 
ex≥˘ed_vÆ1
, 
ex≥˘ed_vÆ2
, c⁄° *
°r
,

33 c⁄° *
fûe
, c⁄° *
func
, 
löe
);

34 
ã°_posôive
(
ªt_vÆ
, c⁄° *
°r
,

35 c⁄° *
fûe
, c⁄° * 
func
, 
löe
);

36 
ã°_√g©ive
(
ªt_vÆ
, c⁄° *
°r
,

37 c⁄° *
fûe
, c⁄° * 
func
, 
löe
);

38 
ã°_nŸ_equÆ
(
ªt_vÆ
, 
ex≥˘ed_vÆ
, c⁄° *
°r
,

39 c⁄° *
fûe
, c⁄° * 
func
, 
löe
);

40 
ã°_¥öt_°©s
(c⁄° *
fûe
, c⁄° * 
func
, 
löe
);

41 
ã°_ª£t_°©s
();

42 
ã°_vîbo£_⁄
();

43 
ã°_vîbo£_off
();

	@test/os161/user/uw-testbin/onefork/onefork.c

10 
	~<uni°d.h
>

11 
	~<°rög.h
>

12 
	~<°dlib.h
>

13 
	~<°dio.h
>

14 
	~<îr.h
>

17 
	$maö
(
¨gc
, *
¨gv
[])

19 ()
¨gc
;

20 ()
¨gv
;

21 
pid_t
 
pid
;

22 
pid
 = 
	`f‹k
();

23 i‡(
pid
 < 0) {

24 
	`w¨n
("fork");

26 i‡(
pid
 == 0) {

28 
	`putch¨
('C');

29 
	`putch¨
('\n');

33 
	`putch¨
('P');

34 
	`putch¨
('\n');

37 
	}
}

	@test/os161/user/uw-testbin/pidcheck/pidcheck.c

10 
	~<uni°d.h
>

11 
	~<°rög.h
>

12 
	~<°dlib.h
>

13 
	~<°dio.h
>

14 
	~<îr.h
>

18 vﬁ©ûê
	gtŸ
;

21 
	$maö
(
¨gc
, *
¨gv
[])

23 ()
¨gc
;

24 ()
¨gv
;

25 
pid_t
 
pid
,
pid2
;

26 
i
;

27 
pid
 = 
	`f‹k
();

28 i‡(
pid
 < 0) {

29 
	`w¨n
("fork");

31 i‡(
pid
 == 0) {

33 
pid2
 = 
	`gëpid
();

35 
	`¥ötf
("C: %d\n",
pid2
);

40 
tŸ
 = 0;

41 
i
=0;i<1000000;i++) {

42 
tŸ
++;

45 
	`¥ötf
("PC: %d\n",
pid
);

47 
pid2
 = 
	`gëpid
();

48 
	`¥ötf
("PP: %d\n",
pid2
);

51 
	}
}

	@test/os161/user/uw-testbin/romemwrite/romemwrite.c

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

19 
	#INVAL_INSN
 0x0000003f

	)

22 
	$maö
()

24 *
x
 = (*Ë
maö
;

26 
	`¥ötf
("TryingÅo writeÅoÅheÅext segment\n");

27 
	`¥ötf
("ThisÖrogram should fail ifÅheÅext segment isÑead-only.\n");

28 
	`¥ötf
("However,Åhe kernel shouldÇot crash...\n");

30 *
x
 = 
INVAL_INSN
;

32 
	`¥ötf
("IF THIS PRINTS, THE TEST FAILED\n");

33 
	`exô
(1);

34 
	}
}

	@test/os161/user/uw-testbin/segments/segments.c

4 
	~<uni°d.h
>

6 
	#N
 (200)

	)

8 
	gx
 = 0xdeadbeef;

9 
	gt1
;

10 
	gt2
;

11 
	gt3
;

12 
	g¨øy
[4096];

13 c⁄° *
	g°r
 = "Hello World\n";

14 c⁄° 
	gz
 = 0xabcddcba;

16 
	sexam∂e
 {

17 
	mypos
;

18 
	mxpos
;

22 
	$maö
()

24 
cou¡
 = 0;

25 c⁄° 
vÆue
 = 1;

26 
t1
 = 
N
;

27 
t2
 = 2;

28 
cou¡
 = 
x
 + 
t1
;

29 
t2
 = 
z
 +Å2 + 
vÆue
;

31 
	`ªboŸ
(
RB_POWEROFF
);

33 
	}
}

	@test/os161/user/uw-testbin/sparse/sparse.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

20 
	#PageSize
 4096

	)

21 
	#NumPages
 128

	)

24 
	#AºaySize
 (2*
NumPages
*
PageSize
)

	)

25 
	g•¨£
[
AºaySize
];

28 
	$maö
()

30 
i
,
j
;

32 
	`¥ötf
("StartingÅhe sparseÖrogram\n");

36 
i
=0; i<
AºaySize
; i+=(10*
PageSize
)) {

37 
•¨£
[
i
]= 'a';

40 
	`¥ötf
("stage [1] done\n");

43 
j
=0; j<5; j++) {

44 
i
=0; i<
AºaySize
; i+=(10*
PageSize
)) {

45 
•¨£
[
i
] += 1;

49 
	`¥ötf
("stage [2] done\n");

53 
i
=0; i<
AºaySize
; i+=(10*
PageSize
)) {

54 i‡(
•¨£
[
i
] != ('a'+5)) {

55 
	`¥ötf
("Te° faûed! U√x≥˘ed vÆuê©áºayÖosôi⁄ %d\n", 
i
);

60 
	`¥ötf
("SUCCESS\n");

63 
	}
}

	@test/os161/user/uw-testbin/syscall/syscall.c

2 
	~<uni°d.h
>

3 
	~<î∫o.h
>

6 
	$maö
()

8 
x
;

9 
x
 = 
	`˛o£
(999);

10 i‡(
x
 < 0) {

11  
î∫o
;

13  
x
;

15 
	}
}

	@test/os161/user/uw-testbin/tlbfaulter/tlbfaulter.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

24 
	#PageSize
 4096

	)

25 
	#TLBSize
 64

	)

28 
	#AºaySize
 ((
TLBSize
+5)*
PageSize
)

	)

29 
	gébã°
[
AºaySize
];

32 
	$maö
()

34 
i
,
j
;

36 
	`¥ötf
("StartingÅheÅlbfaulterÖrogram\n");

39 
i
=0; i<
AºaySize
; i++) {

40 
ébã°
[
i
]= 'a';

43 
	`¥ötf
("tlbfaulter:árray initialization completed\n");

46 
j
=0; j<5; j++) {

47 
i
=0; i<
AºaySize
; i+=
PageSize
) {

48 
ébã°
[
i
] += 1;

52 
	`¥ötf
("tlbfaulter:árray updates completed\n");

55 
i
=0; i<
AºaySize
; i+=
PageSize
) {

56 i‡(
ébã°
[
i
] != ('a'+5)) {

57 
	`¥ötf
("Te° faûed! U√x≥˘ed vÆuê©áºayÖosôi⁄ %d\n", 
i
);

62 
	`¥ötf
("SUCCESS\n");

65 
	}
}

	@test/os161/user/uw-testbin/vm-crash1/vm-crash1.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 #i‡
deföed
(
__mùs__
)

5 
	#INSN_TYPE
 

	)

6 
	#INVAL_INSN
 0x0000003f

	)

13 
	$maö
()

16 
INSN_TYPE
 *
x
 = (INSN_TYPE *Ë
maö
;

17 *
x
 = 
INVAL_INSN
;

19 
	`¥ötf
("IF THIS PRINTS THE TEST FAILED\n");

20 
	`exô
(1);

21 
	}
}

	@test/os161/user/uw-testbin/vm-crash2/vm-crash2.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

9 c⁄° *
	g°r
 =

89 
	$maö
()

91 
Àn
 = 
	`°æí
(
°r
);

92 *
loˇti⁄
;

94 
loˇti⁄
 = (*Ë&
°r
[
Àn
-5];

95 *
loˇti⁄
 = 'B';

96 
	`¥ötf
("IF THIS PRINTS THE TEST FAILED\n");

98 
	`exô
(1);

99 
	}
}

	@test/os161/user/uw-testbin/vm-crash3/vm-crash3.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 #i‡
deföed
(
__mùs__
)

6 
	#INSN_TYPE
 

	)

7 
	#INVAL_INSN
 0x0000003f

	)

12 
wrôe_to_code
();

13 
ªad_d©a
();

14 
wrôe_d©a
();

17 
	$wrôe_to_code
()

19 
	`func_150
();

21 
INSN_TYPE
 *
x
 = (INSN_TYPE *Ë
func_150
;

22 *
x
 = 
INVAL_INSN
;

24 
	`¥ötf
("IF THIS PRINTS THE TEST FAILED\n");

25 
	}
}

27 
ˇŒ_Æl
();

29 
	#PAGE_SIZE
 (4096)

	)

30 
	#PAGES
 (128)

	)

31 
	#SIZE
 (
PAGE_SIZE
 * 
PAGES
 / ())

	)

32 
	#NUM_REFS
 (2)

	)

34 
	g¨øy
[
SIZE
];

37 
	$wrôe_d©a
()

39 
ªfs
 = 0;

40 
i
 = 0;

42 
ªfs
 = 0;Ñef†< 
NUM_REFS
-1;Ñefs++) {

43 
i
=0; i<
SIZE
; i+
PAGE_SIZE
) {

44 
¨øy
[
i
] = i;

47 
	}
}

50 
	$ªad_d©a
()

52 
i
 = 0;

54 
i
=0; i<
SIZE
; i+
PAGE_SIZE
) {

55 i‡(
¨øy
[
i
] != i) {

56 
	`¥ötf
("FAILEDáºay[%d] = %u !%d\n", 
i
, 
¨øy
[i], i);

57 
	`exô
(1);

60 
	}
}

64 
	$maö
()

66 
i
 = 0;

68 
i
=0; i<5; i++) {

69 
	`ˇŒ_Æl
();

70 
	`wrôe_d©a
();

71 
	`ˇŒ_Æl
();

72 
	`ªad_d©a
();

76 
	`wrôe_to_code
();

77 
	`exô
(0);

78 
	}
}

	@test/os161/user/uw-testbin/vm-data1/vm-data1.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	#PAGE_SIZE
 (4096)

	)

5 
	#PAGES
 (128)

	)

6 
	#SIZE
 (
PAGE_SIZE
 * 
PAGES
 / ())

	)

7 
	#NUM_REFS
 (5)

	)

10 
	g¨øy
[
SIZE
];

13 
	$maö
()

15 
i
 = 0;

16 
ªfs
 = 0;

18 
ªfs
 = 0;Ñef†< 
NUM_REFS
-1;Ñefs++) {

19 
i
=0; i<
SIZE
; i++) {

20 
¨øy
[
i
] = i;

24 
i
=0; i<
SIZE
; i++) {

25 i‡(
¨øy
[
i
] != i) {

26 
	`¥ötf
("FAILEDáºay[%d] = %u !%d\n", 
i
, 
¨øy
[i], i);

27 
	`exô
(1);

31 
	`¥ötf
("SUCCEEDED\n");

32 
	`exô
(0);

33 
	}
}

	@test/os161/user/uw-testbin/vm-data2/vm-data2.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	#PAGE_SIZE
 (4096)

	)

5 
	#PAGES
 (2048Ë

	)

6 
	#SIZE
 (
PAGE_SIZE
 * 
PAGES
 / ())

	)

7 
	#NUM_REFS
 (2)

	)

8 
	#PAGES_TO_TOUCH
 (1536Ë

	)

11 
	g¨øy
[
SIZE
];

14 
	$maö
()

16 
i
 = 0;

17 
ödex
 = 0;

18 
ªfs
 = 0;

20 
ªfs
 = 0;Ñef†< 
NUM_REFS
;Ñefs++) {

21 
i
=0; i<
PAGES_TO_TOUCH
; i++) {

22 
ödex
 = 
i
 * 
PAGE_SIZE
 / ();

23 
¨øy
[
ödex
] = 
i
;

27 
i
=0; i<
PAGES_TO_TOUCH
; i++) {

28 
ödex
 = 
i
 * 
PAGE_SIZE
 / ();

29 i‡(
¨øy
[
ödex
] !
i
) {

30 
	`¥ötf
("FAILEDáºay[%d] = %u !%d\n", 
i
, 
¨øy
[
ödex
], i);

31 
	`exô
(1);

35 
	`¥ötf
("SUCCEEDED\n");

36 
	`exô
(0);

37 
	}
}

	@test/os161/user/uw-testbin/vm-data3/vm-data3.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

10 
ˇŒ_Æl
();

11 
wrôe_d©a
();

12 
ªad_d©a
();

14 
	#PAGE_SIZE
 (4096)

	)

15 
	#PAGES
 (128)

	)

16 
	#SIZE
 (
PAGE_SIZE
 * 
PAGES
 / ())

	)

17 
	#NUM_REFS
 (2)

	)

19 
	g¨øy
[
SIZE
];

22 
	$wrôe_d©a
()

24 
ªfs
 = 0;

25 
i
 = 0;

27 
ªfs
 = 0;Ñef†< 
NUM_REFS
-1;Ñefs++) {

28 
i
=0; i<
SIZE
; i+
PAGE_SIZE
) {

29 
¨øy
[
i
] = i;

32 
	}
}

35 
	$ªad_d©a
()

37 
i
 = 0;

39 
i
=0; i<
SIZE
; i+
PAGE_SIZE
) {

40 i‡(
¨øy
[
i
] != i) {

41 
	`¥ötf
("FAILEDáºay[%d] = %u !%d\n", 
i
, 
¨øy
[i], i);

42 
	`exô
(1);

45 
	}
}

49 
	$maö
()

51 
i
 = 0;

53 
i
=0; i<5; i++) {

54 
	`ˇŒ_Æl
();

55 
	`wrôe_d©a
();

56 
	`ˇŒ_Æl
();

57 
	`ªad_d©a
();

60 
	`¥ötf
("SUCCEEDED\n");

61 
	`exô
(0);

62 
	}
}

	@test/os161/user/uw-testbin/vm-funcs/vm-funcs.c

6 
ˇŒ_Æl_lo›
(
cou¡
);

7 
ˇŒ_Æl
();

10 
	#FUNCTION_LOOP
 (2)

	)

13 
	#PROTFUNC
(
num
Ë
func_
##
	`num
();

	)

14 
PROTFUNC
(0); PROTFUNC(1); PROTFUNC(2); PROTFUNC(3); PROTFUNC(4);

15 
PROTFUNC
(5); PROTFUNC(6); PROTFUNC(7); PROTFUNC(8); PROTFUNC(9);

16 
PROTFUNC
(10); PROTFUNC(11); PROTFUNC(12); PROTFUNC(13); PROTFUNC(14);

17 
PROTFUNC
(15); PROTFUNC(16); PROTFUNC(17); PROTFUNC(18); PROTFUNC(19);

18 
PROTFUNC
(20); PROTFUNC(21); PROTFUNC(22); PROTFUNC(23); PROTFUNC(24);

19 
PROTFUNC
(25); PROTFUNC(26); PROTFUNC(27); PROTFUNC(28); PROTFUNC(29);

20 
PROTFUNC
(30); PROTFUNC(31); PROTFUNC(32); PROTFUNC(33); PROTFUNC(34);

21 
PROTFUNC
(35); PROTFUNC(36); PROTFUNC(37); PROTFUNC(38); PROTFUNC(39);

22 
PROTFUNC
(40); PROTFUNC(41); PROTFUNC(42); PROTFUNC(43); PROTFUNC(44);

23 
PROTFUNC
(45); PROTFUNC(46); PROTFUNC(47); PROTFUNC(48); PROTFUNC(49);

24 
PROTFUNC
(50); PROTFUNC(51); PROTFUNC(52); PROTFUNC(53); PROTFUNC(54);

25 
PROTFUNC
(55); PROTFUNC(56); PROTFUNC(57); PROTFUNC(58); PROTFUNC(59);

26 
PROTFUNC
(60); PROTFUNC(61); PROTFUNC(62); PROTFUNC(63); PROTFUNC(64);

27 
PROTFUNC
(65); PROTFUNC(66); PROTFUNC(67); PROTFUNC(68); PROTFUNC(69);

28 
PROTFUNC
(70); PROTFUNC(71); PROTFUNC(72); PROTFUNC(73); PROTFUNC(74);

29 
PROTFUNC
(75); PROTFUNC(76); PROTFUNC(77); PROTFUNC(78); PROTFUNC(79);

30 
PROTFUNC
(80); PROTFUNC(81); PROTFUNC(82); PROTFUNC(83); PROTFUNC(84);

31 
PROTFUNC
(85); PROTFUNC(86); PROTFUNC(87); PROTFUNC(88); PROTFUNC(89);

32 
PROTFUNC
(90); PROTFUNC(91); PROTFUNC(92); PROTFUNC(93); PROTFUNC(94);

33 
PROTFUNC
(95); PROTFUNC(96); PROTFUNC(97); PROTFUNC(98); PROTFUNC(99);

34 
PROTFUNC
(100); PROTFUNC(101); PROTFUNC(102); PROTFUNC(103); PROTFUNC(104);

35 
PROTFUNC
(105); PROTFUNC(106); PROTFUNC(107); PROTFUNC(108); PROTFUNC(109);

36 
PROTFUNC
(110); PROTFUNC(111); PROTFUNC(112); PROTFUNC(113); PROTFUNC(114);

37 
PROTFUNC
(115); PROTFUNC(116); PROTFUNC(117); PROTFUNC(118); PROTFUNC(119);

38 
PROTFUNC
(120); PROTFUNC(121); PROTFUNC(122); PROTFUNC(123); PROTFUNC(124);

39 
PROTFUNC
(125); PROTFUNC(126); PROTFUNC(127); PROTFUNC(128); PROTFUNC(129);

40 
PROTFUNC
(130); PROTFUNC(131); PROTFUNC(132); PROTFUNC(133); PROTFUNC(134);

41 
PROTFUNC
(135); PROTFUNC(136); PROTFUNC(137); PROTFUNC(138); PROTFUNC(139);

42 
PROTFUNC
(140); PROTFUNC(141); PROTFUNC(142); PROTFUNC(143); PROTFUNC(144);

43 
PROTFUNC
(145); PROTFUNC(146); PROTFUNC(147); PROTFUNC(148); PROTFUNC(149);

44 
PROTFUNC
(150); PROTFUNC(151); PROTFUNC(152); PROTFUNC(153); PROTFUNC(154);

45 
PROTFUNC
(155); PROTFUNC(156); PROTFUNC(157); PROTFUNC(158); PROTFUNC(159);

46 
PROTFUNC
(160); PROTFUNC(161); PROTFUNC(162); PROTFUNC(163); PROTFUNC(164);

47 
PROTFUNC
(165); PROTFUNC(166); PROTFUNC(167); PROTFUNC(168); PROTFUNC(169);

48 
PROTFUNC
(170); PROTFUNC(171); PROTFUNC(172); PROTFUNC(173); PROTFUNC(174);

49 
PROTFUNC
(175); PROTFUNC(176); PROTFUNC(177); PROTFUNC(178); PROTFUNC(179);

50 
PROTFUNC
(180); PROTFUNC(181); PROTFUNC(182); PROTFUNC(183); PROTFUNC(184);

51 
PROTFUNC
(185); PROTFUNC(186); PROTFUNC(187); PROTFUNC(188); PROTFUNC(189);

52 
PROTFUNC
(190); PROTFUNC(191); PROTFUNC(192); PROTFUNC(193); PROTFUNC(194);

53 
PROTFUNC
(195); PROTFUNC(196); PROTFUNC(197); PROTFUNC(198); PROTFUNC(199);

54 
PROTFUNC
(200); PROTFUNC(201); PROTFUNC(202); PROTFUNC(203); PROTFUNC(204);

55 
PROTFUNC
(205); PROTFUNC(206); PROTFUNC(207); PROTFUNC(208); PROTFUNC(209);

56 
PROTFUNC
(210); PROTFUNC(211); PROTFUNC(212); PROTFUNC(213); PROTFUNC(214);

57 
PROTFUNC
(215); PROTFUNC(216); PROTFUNC(217); PROTFUNC(218); PROTFUNC(219);

58 
PROTFUNC
(220); PROTFUNC(221); PROTFUNC(222); PROTFUNC(223); PROTFUNC(224);

59 
PROTFUNC
(225); PROTFUNC(226); PROTFUNC(227); PROTFUNC(228); PROTFUNC(229);

60 
PROTFUNC
(230); PROTFUNC(231); PROTFUNC(232); PROTFUNC(233); PROTFUNC(234);

61 
PROTFUNC
(235); PROTFUNC(236); PROTFUNC(237); PROTFUNC(238); PROTFUNC(239);

62 
PROTFUNC
(240); PROTFUNC(241); PROTFUNC(242); PROTFUNC(243); PROTFUNC(244);

63 
PROTFUNC
(245); PROTFUNC(246); PROTFUNC(247); PROTFUNC(248); PROTFUNC(249);

64 
PROTFUNC
(250); PROTFUNC(251); PROTFUNC(252); PROTFUNC(253); PROTFUNC(254);

65 
PROTFUNC
(255); PROTFUNC(256); PROTFUNC(257); PROTFUNC(258); PROTFUNC(259);

66 
PROTFUNC
(260); PROTFUNC(261); PROTFUNC(262); PROTFUNC(263); PROTFUNC(264);

67 
PROTFUNC
(265); PROTFUNC(266); PROTFUNC(267); PROTFUNC(268); PROTFUNC(269);

68 
PROTFUNC
(270); PROTFUNC(271); PROTFUNC(272); PROTFUNC(273); PROTFUNC(274);

69 
PROTFUNC
(275); PROTFUNC(276); PROTFUNC(277); PROTFUNC(278); PROTFUNC(279);

70 
PROTFUNC
(280); PROTFUNC(281); PROTFUNC(282); PROTFUNC(283); PROTFUNC(284);

71 
PROTFUNC
(285); PROTFUNC(286); PROTFUNC(287); PROTFUNC(288); PROTFUNC(289);

72 
PROTFUNC
(290); PROTFUNC(291); PROTFUNC(292); PROTFUNC(293); PROTFUNC(294);

73 
PROTFUNC
(295); PROTFUNC(296); PROTFUNC(297); PROTFUNC(298); PROTFUNC(299);

79 
	#FUNC
(
num
) \

80 
func_
##
	`num
() \

82 
i
; \

83 vﬁ©ûê
l
 = 10; \

84 vﬁ©ûê
m
 = 11; \

85 vﬁ©ûê
n
 = 12; \

87 
i
=0; i<
FUNCTION_LOOP
; i++) { \

88 
l
 =Ü + 
m
 - 
n
 + 
i
; \

89 
m
 = 
l
 + m - 
n
 + 
i
; \

90 
n
 = 
l
 + 
m
 -Ç + 
i
; \

91 
l
 =Ü + 
m
 - 
n
 + 
i
; \

92 
m
 = 
l
 + m - 
n
 + 
i
; \

93 
n
 = 
l
 + 
m
 -Ç + 
i
; \

94 
l
 =Ü + 
m
 - 
n
 + 
i
; \

95 
m
 = 
l
 + m - 
n
 + 
i
; \

96 
n
 = 
l
 + 
m
 -Ç + 
i
; \

97 
l
 =Ü + 
m
 - 
n
 + 
i
; \

98 
m
 = 
l
 + m - 
n
 + 
i
; \

99 
n
 = 
l
 + 
m
 -Ç + 
i
; \

100 
l
 =Ü + 
m
 - 
n
 + 
i
; \

101 
m
 = 
l
 + m - 
n
 + 
i
; \

102 
n
 = 
l
 + 
m
 -Ç + 
i
; \

103 
l
 =Ü + 
m
 - 
n
 + 
i
; \

105 
i
=0; i<
FUNCTION_LOOP
; i++) { \

106 
m
 = 
l
 + m - 
n
 + 
i
; \

107 
l
 =Ü + 
m
 - 
n
 + 
i
; \

108 
n
 = 
l
 + 
m
 -Ç + 
i
; \

109 
m
 = 
l
 + m - 
n
 + 
i
; \

110 
m
 = 
l
 + m - 
n
 + 
i
; \

111 
l
 =Ü + 
m
 - 
n
 + 
i
; \

112 
n
 = 
l
 + 
m
 -Ç + 
i
; \

113 
m
 = 
l
 + m - 
n
 + 
i
; \

114 
l
 =Ü + 
m
 - 
n
 + 
i
; \

115 
n
 = 
l
 + 
m
 -Ç + 
i
; \

116 
m
 = 
l
 + m - 
n
 + 
i
; \

117 
l
 =Ü + 
m
 - 
n
 + 
i
; \

118 
n
 = 
l
 + 
m
 -Ç + 
i
; \

120 
i
=0; i<
FUNCTION_LOOP
; i++) { \

121 
n
 = 
l
 + 
m
 -Ç + 
i
; \

122 
m
 = 
l
 + m - 
n
 + 
i
; \

123 
l
 =Ü + 
m
 - 
n
 + 
i
; \

124 
n
 = 
l
 + 
m
 -Ç + 
i
; \

125 
m
 = 
l
 + m - 
n
 + 
i
; \

126 
l
 =Ü + 
m
 - 
n
 + 
i
; \

127 
n
 = 
l
 + 
m
 -Ç + 
i
; \

129 
i
=0; i<
FUNCTION_LOOP
; i++) { \

130 
l
 =Ü + 
m
 - 
n
 + 
i
; \

131 
n
 = 
l
 + 
m
 -Ç + 
i
; \

132 
m
 = 
l
 + m - 
n
 + 
i
; \

133 
l
 =Ü + 
m
 - 
n
 + 
i
; \

134 
n
 = 
l
 + 
m
 -Ç + 
i
; \

135 
m
 = 
l
 + m - 
n
 + 
i
; \

136 
l
 =Ü + 
m
 - 
n
 + 
i
; \

137 
m
 = 
l
 + m - 
n
 + 
i
; \

138 
l
 =Ü + 
m
 - 
n
 + 
i
; \

139 
n
 = 
l
 + 
m
 -Ç + 
i
; \

140 
m
 = 
l
 + m - 
n
 + 
i
; \

141 
l
 =Ü + 
m
 - 
n
 + 
i
; \

142 
n
 = 
l
 + 
m
 -Ç + 
i
; \

143 
m
 = 
l
 + m - 
n
 + 
i
; \

144 
l
 =Ü + 
m
 - 
n
 + 
i
; \

145 
m
 = 
l
 + m - 
n
 + 
i
; \

149  
l
 + 
m
 + 
n
; \

150 }

	)

154 
FUNC
(0); FUNC(1); FUNC(2); FUNC(3); FUNC(4);

155 
FUNC
(5); FUNC(6); FUNC(7); FUNC(8); FUNC(9);

156 
FUNC
(10); FUNC(11); FUNC(12); FUNC(13); FUNC(14);

157 
FUNC
(15); FUNC(16); FUNC(17); FUNC(18); FUNC(19);

158 
FUNC
(20); FUNC(21); FUNC(22); FUNC(23); FUNC(24);

159 
FUNC
(25); FUNC(26); FUNC(27); FUNC(28); FUNC(29);

160 
FUNC
(30); FUNC(31); FUNC(32); FUNC(33); FUNC(34);

161 
FUNC
(35); FUNC(36); FUNC(37); FUNC(38); FUNC(39);

162 
FUNC
(40); FUNC(41); FUNC(42); FUNC(43); FUNC(44);

163 
FUNC
(45); FUNC(46); FUNC(47); FUNC(48); FUNC(49);

164 
FUNC
(50); FUNC(51); FUNC(52); FUNC(53); FUNC(54);

165 
FUNC
(55); FUNC(56); FUNC(57); FUNC(58); FUNC(59);

166 
FUNC
(60); FUNC(61); FUNC(62); FUNC(63); FUNC(64);

167 
FUNC
(65); FUNC(66); FUNC(67); FUNC(68); FUNC(69);

168 
FUNC
(70); FUNC(71); FUNC(72); FUNC(73); FUNC(74);

169 
FUNC
(75); FUNC(76); FUNC(77); FUNC(78); FUNC(79);

170 
FUNC
(80); FUNC(81); FUNC(82); FUNC(83); FUNC(84);

171 
FUNC
(85); FUNC(86); FUNC(87); FUNC(88); FUNC(89);

172 
FUNC
(90); FUNC(91); FUNC(92); FUNC(93); FUNC(94);

173 
FUNC
(95); FUNC(96); FUNC(97); FUNC(98); FUNC(99);

174 
FUNC
(100); FUNC(101); FUNC(102); FUNC(103); FUNC(104);

175 
FUNC
(105); FUNC(106); FUNC(107); FUNC(108); FUNC(109);

176 
FUNC
(110); FUNC(111); FUNC(112); FUNC(113); FUNC(114);

177 
FUNC
(115); FUNC(116); FUNC(117); FUNC(118); FUNC(119);

178 
FUNC
(120); FUNC(121); FUNC(122); FUNC(123); FUNC(124);

179 
FUNC
(125); FUNC(126); FUNC(127); FUNC(128); FUNC(129);

180 
FUNC
(130); FUNC(131); FUNC(132); FUNC(133); FUNC(134);

181 
FUNC
(135); FUNC(136); FUNC(137); FUNC(138); FUNC(139);

182 
FUNC
(140); FUNC(141); FUNC(142); FUNC(143); FUNC(144);

183 
FUNC
(145); FUNC(146); FUNC(147); FUNC(148); FUNC(149);

184 
FUNC
(150); FUNC(151); FUNC(152); FUNC(153); FUNC(154);

185 
FUNC
(155); FUNC(156); FUNC(157); FUNC(158); FUNC(159);

186 
FUNC
(160); FUNC(161); FUNC(162); FUNC(163); FUNC(164);

187 
FUNC
(165); FUNC(166); FUNC(167); FUNC(168); FUNC(169);

188 
FUNC
(170); FUNC(171); FUNC(172); FUNC(173); FUNC(174);

189 
FUNC
(175); FUNC(176); FUNC(177); FUNC(178); FUNC(179);

190 
FUNC
(180); FUNC(181); FUNC(182); FUNC(183); FUNC(184);

191 
FUNC
(185); FUNC(186); FUNC(187); FUNC(188); FUNC(189);

192 
FUNC
(190); FUNC(191); FUNC(192); FUNC(193); FUNC(194);

193 
FUNC
(195); FUNC(196); FUNC(197); FUNC(198); FUNC(199);

194 
FUNC
(200); FUNC(201); FUNC(202); FUNC(203); FUNC(204);

195 
FUNC
(205); FUNC(206); FUNC(207); FUNC(208); FUNC(209);

196 
FUNC
(210); FUNC(211); FUNC(212); FUNC(213); FUNC(214);

197 
FUNC
(215); FUNC(216); FUNC(217); FUNC(218); FUNC(219);

198 
FUNC
(220); FUNC(221); FUNC(222); FUNC(223); FUNC(224);

199 
FUNC
(225); FUNC(226); FUNC(227); FUNC(228); FUNC(229);

200 
FUNC
(230); FUNC(231); FUNC(232); FUNC(233); FUNC(234);

201 
FUNC
(235); FUNC(236); FUNC(237); FUNC(238); FUNC(239);

202 
FUNC
(240); FUNC(241); FUNC(242); FUNC(243); FUNC(244);

203 
FUNC
(245); FUNC(246); FUNC(247); FUNC(248); FUNC(249);

204 
FUNC
(250); FUNC(251); FUNC(252); FUNC(253); FUNC(254);

205 
FUNC
(255); FUNC(256); FUNC(257); FUNC(258); FUNC(259);

206 
FUNC
(260); FUNC(261); FUNC(262); FUNC(263); FUNC(264);

207 
FUNC
(265); FUNC(266); FUNC(267); FUNC(268); FUNC(269);

208 
FUNC
(270); FUNC(271); FUNC(272); FUNC(273); FUNC(274);

209 
FUNC
(275); FUNC(276); FUNC(277); FUNC(278); FUNC(279);

210 
FUNC
(280); FUNC(281); FUNC(282); FUNC(283); FUNC(284);

211 
FUNC
(285); FUNC(286); FUNC(287); FUNC(288); FUNC(289);

212 
FUNC
(290); FUNC(291); FUNC(292); FUNC(293); FUNC(294);

213 
FUNC
(295); FUNC(296); FUNC(297); FUNC(298); FUNC(299);

215 
	#CALLFUNC
(
i
) \

216 
func_
##
	`i
()

	)

219 
	$ˇŒ_Æl
()

221 
	`CALLFUNC
(0); CALLFUNC(1); CALLFUNC(2); CALLFUNC(3); CALLFUNC(4);

222 
	`CALLFUNC
(5); CALLFUNC(6); CALLFUNC(7); CALLFUNC(8); CALLFUNC(9);

223 
	`CALLFUNC
(10); CALLFUNC(11); CALLFUNC(12); CALLFUNC(13); CALLFUNC(14);

224 
	`CALLFUNC
(15); CALLFUNC(16); CALLFUNC(17); CALLFUNC(18); CALLFUNC(19);

225 
	`CALLFUNC
(20); CALLFUNC(21); CALLFUNC(22); CALLFUNC(23); CALLFUNC(24);

226 
	`CALLFUNC
(25); CALLFUNC(26); CALLFUNC(27); CALLFUNC(28); CALLFUNC(29);

227 
	`CALLFUNC
(30); CALLFUNC(31); CALLFUNC(32); CALLFUNC(33); CALLFUNC(34);

228 
	`CALLFUNC
(35); CALLFUNC(36); CALLFUNC(37); CALLFUNC(38); CALLFUNC(39);

229 
	`CALLFUNC
(40); CALLFUNC(41); CALLFUNC(42); CALLFUNC(43); CALLFUNC(44);

230 
	`CALLFUNC
(45); CALLFUNC(46); CALLFUNC(47); CALLFUNC(48); CALLFUNC(49);

231 
	`CALLFUNC
(50); CALLFUNC(51); CALLFUNC(52); CALLFUNC(53); CALLFUNC(54);

232 
	`CALLFUNC
(55); CALLFUNC(56); CALLFUNC(57); CALLFUNC(58); CALLFUNC(59);

233 
	`CALLFUNC
(60); CALLFUNC(61); CALLFUNC(62); CALLFUNC(63); CALLFUNC(64);

234 
	`CALLFUNC
(65); CALLFUNC(66); CALLFUNC(67); CALLFUNC(68); CALLFUNC(69);

235 
	`CALLFUNC
(70); CALLFUNC(71); CALLFUNC(72); CALLFUNC(73); CALLFUNC(74);

236 
	`CALLFUNC
(75); CALLFUNC(76); CALLFUNC(77); CALLFUNC(78); CALLFUNC(79);

237 
	`CALLFUNC
(80); CALLFUNC(81); CALLFUNC(82); CALLFUNC(83); CALLFUNC(84);

238 
	`CALLFUNC
(85); CALLFUNC(86); CALLFUNC(87); CALLFUNC(88); CALLFUNC(89);

239 
	`CALLFUNC
(90); CALLFUNC(91); CALLFUNC(92); CALLFUNC(93); CALLFUNC(94);

240 
	`CALLFUNC
(95); CALLFUNC(96); CALLFUNC(97); CALLFUNC(98); CALLFUNC(99);

241 
	`CALLFUNC
(100); CALLFUNC(101); CALLFUNC(102); CALLFUNC(103); CALLFUNC(104);

242 
	`CALLFUNC
(105); CALLFUNC(106); CALLFUNC(107); CALLFUNC(108); CALLFUNC(109);

243 
	`CALLFUNC
(110); CALLFUNC(111); CALLFUNC(112); CALLFUNC(113); CALLFUNC(114);

244 
	`CALLFUNC
(115); CALLFUNC(116); CALLFUNC(117); CALLFUNC(118); CALLFUNC(119);

245 
	`CALLFUNC
(120); CALLFUNC(121); CALLFUNC(122); CALLFUNC(123); CALLFUNC(124);

246 
	`CALLFUNC
(125); CALLFUNC(126); CALLFUNC(127); CALLFUNC(128); CALLFUNC(129);

247 
	`CALLFUNC
(130); CALLFUNC(131); CALLFUNC(132); CALLFUNC(133); CALLFUNC(134);

248 
	`CALLFUNC
(135); CALLFUNC(136); CALLFUNC(137); CALLFUNC(138); CALLFUNC(139);

249 
	`CALLFUNC
(140); CALLFUNC(141); CALLFUNC(142); CALLFUNC(143); CALLFUNC(144);

250 
	`CALLFUNC
(145); CALLFUNC(146); CALLFUNC(147); CALLFUNC(148); CALLFUNC(149);

251 
	`CALLFUNC
(150); CALLFUNC(151); CALLFUNC(152); CALLFUNC(153); CALLFUNC(154);

252 
	`CALLFUNC
(155); CALLFUNC(156); CALLFUNC(157); CALLFUNC(158); CALLFUNC(159);

253 
	`CALLFUNC
(160); CALLFUNC(161); CALLFUNC(162); CALLFUNC(163); CALLFUNC(164);

254 
	`CALLFUNC
(165); CALLFUNC(166); CALLFUNC(167); CALLFUNC(168); CALLFUNC(169);

255 
	`CALLFUNC
(170); CALLFUNC(171); CALLFUNC(172); CALLFUNC(173); CALLFUNC(174);

256 
	`CALLFUNC
(175); CALLFUNC(176); CALLFUNC(177); CALLFUNC(178); CALLFUNC(179);

257 
	`CALLFUNC
(180); CALLFUNC(181); CALLFUNC(182); CALLFUNC(183); CALLFUNC(184);

258 
	`CALLFUNC
(185); CALLFUNC(186); CALLFUNC(187); CALLFUNC(188); CALLFUNC(189);

259 
	`CALLFUNC
(190); CALLFUNC(191); CALLFUNC(192); CALLFUNC(193); CALLFUNC(194);

260 
	`CALLFUNC
(195); CALLFUNC(196); CALLFUNC(197); CALLFUNC(198); CALLFUNC(199);

261 
	`CALLFUNC
(200); CALLFUNC(201); CALLFUNC(202); CALLFUNC(203); CALLFUNC(204);

262 
	`CALLFUNC
(205); CALLFUNC(206); CALLFUNC(207); CALLFUNC(208); CALLFUNC(209);

263 
	`CALLFUNC
(210); CALLFUNC(211); CALLFUNC(212); CALLFUNC(213); CALLFUNC(214);

264 
	`CALLFUNC
(215); CALLFUNC(216); CALLFUNC(217); CALLFUNC(218); CALLFUNC(219);

265 
	`CALLFUNC
(220); CALLFUNC(221); CALLFUNC(222); CALLFUNC(223); CALLFUNC(224);

266 
	`CALLFUNC
(225); CALLFUNC(226); CALLFUNC(227); CALLFUNC(228); CALLFUNC(229);

267 
	`CALLFUNC
(230); CALLFUNC(231); CALLFUNC(232); CALLFUNC(233); CALLFUNC(234);

268 
	`CALLFUNC
(235); CALLFUNC(236); CALLFUNC(237); CALLFUNC(238); CALLFUNC(239);

269 
	`CALLFUNC
(240); CALLFUNC(241); CALLFUNC(242); CALLFUNC(243); CALLFUNC(244);

270 
	`CALLFUNC
(245); CALLFUNC(246); CALLFUNC(247); CALLFUNC(248); CALLFUNC(249);

271 
	`CALLFUNC
(250); CALLFUNC(251); CALLFUNC(252); CALLFUNC(253); CALLFUNC(254);

272 
	`CALLFUNC
(255); CALLFUNC(256); CALLFUNC(257); CALLFUNC(258); CALLFUNC(259);

273 
	`CALLFUNC
(260); CALLFUNC(261); CALLFUNC(262); CALLFUNC(263); CALLFUNC(264);

274 
	`CALLFUNC
(265); CALLFUNC(266); CALLFUNC(267); CALLFUNC(268); CALLFUNC(269);

275 
	`CALLFUNC
(270); CALLFUNC(271); CALLFUNC(272); CALLFUNC(273); CALLFUNC(274);

276 
	`CALLFUNC
(275); CALLFUNC(276); CALLFUNC(277); CALLFUNC(278); CALLFUNC(279);

277 
	`CALLFUNC
(280); CALLFUNC(281); CALLFUNC(282); CALLFUNC(283); CALLFUNC(284);

278 
	`CALLFUNC
(285); CALLFUNC(286); CALLFUNC(287); CALLFUNC(288); CALLFUNC(289);

279 
	`CALLFUNC
(290); CALLFUNC(291); CALLFUNC(292); CALLFUNC(293); CALLFUNC(294);

280 
	`CALLFUNC
(295); CALLFUNC(296); CALLFUNC(297); CALLFUNC(298); CALLFUNC(299);

281 
	}
}

284 
	$ˇŒ_Æl_lo›
(
cou¡
)

286 
i
 = 0;

287 
i
=0; i<
cou¡
; i++) {

288 
	`ˇŒ_Æl
();

290 
	}
}

	@test/os161/user/uw-testbin/vm-mix1-exec/vm-mix1-exec.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

6 *
	g¨gv
[2] = { (*)"vm-mix1", 
NULL
 };

9 
	$maö
()

11 
	`execv
("vm-mix1/vm-mix1", 
¨gv
);

12 
	`exô
(0);

13 
	}
}

	@test/os161/user/uw-testbin/vm-mix1-fork/vm-mix1-fork.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

15 
ˇŒ_Æl
();

16 
wrôe_d©a
(
¨øy
[], 
°¨t
);

17 
ªad_d©a
(
¨øy
[], 
°¨t
, c⁄° *
¨øy_«me
);

18 
¥öt_d©a
(
¨øy
[]);

19 
do_w‹k
(
°¨t
);

21 
	#PAGE_SIZE
 (4096)

	)

22 
	#DATA_BYTES
 (3 * 1024 * 1024)

	)

23 
	#PAGES
 (
DATA_BYTES
 / 
PAGE_SIZE
)

	)

24 
	#ELEM_SIZE
 (())

	)

25 
	#ELEMS
 ((
PAGE_SIZE
 * 
PAGES
 / ()Ë/ 2)

	)

26 
	#ELEMS_PER_PAGE
 (
PAGE_SIZE
 / 
ELEM_SIZE
)

	)

27 
	#NUM_REFS
 (2)

	)

29 
	#STACK_PAGES_USED
 (9)

	)

30 
	#STACK_ARRAY_ELEMS
 (
PAGE_SIZE
 * 
STACK_PAGES_USED
 / ())

	)

32 
	göô
[] = {

41 
	#INIT_ARRAY_ELEMS
 ((
öô
Ë/ ())

	)

43 
	g¨øy1
[
ELEMS
];

44 
	g¨øy2
[
ELEMS
];

47 
	$wrôe_d©a
(
¨øy
[], 
°¨t
)

49 
ªf
 = 0;

50 
i
 = 0;

52 
ªf
 = 0;Ñe‡< 
NUM_REFS
-1;Ñef++) {

53 
i
=0; i<
ELEMS
; i++) {

54 
¨øy
[
i
] = 
°¨t
 + (ò/ 
ELEMS_PER_PAGE
);

57 
	}
}

60 
	$ªad_d©a
(
¨øy
[], 
°¨t
, c⁄° *
¨øy_«me
)

62 
ªf
 = 0;

63 
i
 = 0;

65 
ªf
 = 0;Ñe‡< 
NUM_REFS
-1;Ñef++) {

66 
i
=0; i<
ELEMS
; i++) {

67 i‡(
¨øy
[
i
] !(
°¨t
 + (ò/ 
ELEMS_PER_PAGE
))) {

68 
	`¥ötf
("FAILED in file %sátÜine %d %s[%d] = %u != %uÑef = %d\n",

69 
__FILE__
, 
__LINE__
, 
¨øy_«me
, 
i
, 
¨øy
[i], i, 
ªf
+1);

70 
	`exô
(1);

74 
	}
}

77 
	$¥öt_d©a
(
¨øy
[])

79 
i
 = 0;

80 
cou¡
 = 0;

82 
i
=0; i<
ELEMS
; i+(
ELEMS_PER_PAGE
)) {

83 
	`¥ötf
("[%10u] = %10u ", 
i
, 
¨øy
[i]);

84 i‡(((
cou¡
+1) % 4) == 0) {

85 
	`¥ötf
("\n");

87 
cou¡
++;

89 
	`¥ötf
("\n");

90 
	}
}

93 
	$do_w‹k
(
°¨t
)

95 
°ack_¨øy
[
STACK_ARRAY_ELEMS
];

96 
i
 = 0;

97 
¨øy1_°¨t
 = 
°¨t
;

98 
¨øy2_°¨t
 = 
°¨t
 + (
ELEMS
 / (
ELEMS_PER_PAGE
)) + 10;

100 
	`¥ötf
("Checkög unöôülizedáºay1Öid = %d\n", 
	`gëpid
());

102 
i
=0; i<
ELEMS
; i++) {

103 i‡(
¨øy1
[
i
] != 0) {

104 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay1[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy1
[i], 0);

105 
	`exô
(1);

109 
	`¥ötf
("Checkög unöôülizedáºay2Öid = %d\n", 
	`gëpid
());

111 
i
=0; i<
ELEMS
; i++) {

112 i‡(
¨øy2
[
i
] != 0) {

113 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay2[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy2
[i], 0);

114 
	`exô
(1);

118 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

119 
°ack_¨øy
[
i
] = i * 1000;

122 
i
=0; i<2; i++) {

123 
	`ˇŒ_Æl
();

124 
	`wrôe_d©a
(
¨øy1
, 
¨øy1_°¨t
);

125 
	`ˇŒ_Æl
();

126 
	`¥ötf
("Checkög inôülizedáºay1Öid = %d\n", 
	`gëpid
());

127 
	`ªad_d©a
(
¨øy1
, 
¨øy1_°¨t
, "array1");

131 
	`¥ötf
("Checkög inôülizedáºay2ágaöÖid = %d\n", 
	`gëpid
());

132 
i
=0; i<
ELEMS
; i++) {

133 i‡(
¨øy2
[
i
] != 0) {

134 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay2[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy2
[i], 0);

135 
	`exô
(1);

139 
	`¥ötf
("Checkög inôülized sèck_¨øyÖid = %d\n", 
	`gëpid
());

140 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

141 i‡(
°ack_¨øy
[
i
] != i * 1000) {

142 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: sèck_¨øy[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
°ack_¨øy
[i], i);

143 
	`exô
(1);

147 
	`¥ötf
("Checkög inôülized inôÖid = %d\n", 
	`gëpid
());

149 
i
=0; i<
INIT_ARRAY_ELEMS
; i++) {

150 i‡(
öô
[
i
] != i) {

151 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: inô[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
öô
[i], i);

152 
	`exô
(1);

156 
i
=0; i<2; i++) {

157 
	`ˇŒ_Æl
();

158 
	`wrôe_d©a
(
¨øy2
, 
¨øy2_°¨t
);

159 
	`ˇŒ_Æl
();

160 
	`¥ötf
("Checkög inôülizedáºay2Öid = %d\n", 
	`gëpid
());

161 
	`ªad_d©a
(
¨øy2
, 
¨øy2_°¨t
, "array2");

164 
	`¥ötf
("Checkög inôülized sèck_¨øyÖid = %d\n", 
	`gëpid
());

165 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

166 i‡(
°ack_¨øy
[
i
] != i * 1000) {

167 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: sèck_¨øy[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
°ack_¨øy
[i], i);

168 
	`exô
(1);

173 
	`¥ötf
("Checkög inôülized inôÖid = %d\n", 
	`gëpid
());

174 
i
=0; i<
INIT_ARRAY_ELEMS
; i++) {

175 i‡(
öô
[
i
] != i) {

176 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: inô[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
öô
[i], i);

177 
	`exô
(1);

182 
	`¥ötf
("Checkög inôülizedáºay1 f‹Åhêœ°Åimêpid = %d\n", 
	`gëpid
());

183 
	`ªad_d©a
(
¨øy1
, 
¨øy1_°¨t
, "array1");

184 
	`¥ötf
("Checkög inôülizedáºay2 f‹Åhêœ°Åimêpid = %d\n", 
	`gëpid
());

185 
	`ªad_d©a
(
¨øy2
, 
¨øy2_°¨t
, "array2");

188 
	`¥ötf
("Pid = %d SUCCEEDED\n", 
	`gëpid
());

189 
	}
}

192 
	$maö
()

194 
pid
 = 0;

195 
rc
 = 0;

196 
°©us
 = 0;

198 #ifde‡
DEBUG


199 
	`¥ötf
("PAGE_SIZE = %d\n", 
PAGE_SIZE
);

200 
	`¥ötf
("DATA_BYTES = %d\n", 
DATA_BYTES
);

201 
	`¥ötf
("ELEMS = %d\n", 
ELEMS
);

202 
	`¥ötf
("ELEMS_PER_PAGE = %d\n", 
ELEMS_PER_PAGE
);

203 
	`¥ötf
("PAGES = %d\n", 
PAGES
);

204 
	`¥ötf
("AºayÉÀmít†%d\n", 
ELEMS
);

205 
	`¥ötf
("Page†≥∏¨øy = %d\n", ((
ELEMS
 * ()Ë/ 
PAGE_SIZE
));

208 
pid
 = 
	`f‹k
();

209 i‡(
pid
 < 0) {

210 
	`¥ötf
("UnableÅo fork\n");

211 
	`exô
(1);

214 i‡(
pid
 == 0) {

215 
	`¥ötf
("ChûdÖid = %d cÆlög do_w‹k\n", 
	`gëpid
());

216 
	`do_w‹k
(20);

217 #ifde‡
DEBUG_CHILD


218 
	`¥ötf
("array 1\n");

219 
	`¥öt_d©a
(
¨øy1
);

220 
	`¥ötf
("array 2\n");

221 
	`¥öt_d©a
(
¨øy2
);

223 
	`exô
(0);

226 
	`¥ötf
("P¨íàpid = %d cÆlög do_w‹k\n", 
	`gëpid
());

227 
	`do_w‹k
(1);

228 #ifde‡
DEBUG_PARENT


229 
	`¥ötf
("array 1\n");

230 
	`¥öt_d©a
(
¨øy1
);

231 
	`¥ötf
("array 2\n");

232 
	`¥öt_d©a
(
¨øy2
);

234 
rc
 = 
	`waôpid
(
pid
, &
°©us
, 0);

235 
	`exô
(0);

236 
	}
}

	@test/os161/user/uw-testbin/vm-mix1/vm-mix1.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

13 
ˇŒ_Æl
();

14 
wrôe_d©a
(
¨øy
[], 
°¨t
);

15 
ªad_d©a
(
¨øy
[], 
°¨t
, c⁄° *
¨øy_«me
);

16 
¥öt_d©a
(
¨øy
[]);

17 
do_w‹k
(
°¨t
);

19 
	#PAGE_SIZE
 (4096)

	)

20 
	#DATA_BYTES
 (3 * 1024 * 1024)

	)

21 
	#PAGES
 (
DATA_BYTES
 / 
PAGE_SIZE
)

	)

22 
	#ELEM_SIZE
 (())

	)

23 
	#ELEMS
 ((
PAGE_SIZE
 * 
PAGES
 / ()Ë/ 2)

	)

24 
	#ELEMS_PER_PAGE
 (
PAGE_SIZE
 / 
ELEM_SIZE
)

	)

25 
	#NUM_REFS
 (2)

	)

27 
	#STACK_PAGES_USED
 (9)

	)

28 
	#STACK_ARRAY_ELEMS
 (
PAGE_SIZE
 * 
STACK_PAGES_USED
 / ())

	)

30 
	göô
[] = {

39 
	#INIT_ARRAY_ELEMS
 ((
öô
Ë/ ())

	)

41 
	g¨øy1
[
ELEMS
];

42 
	g¨øy2
[
ELEMS
];

45 
	$wrôe_d©a
(
¨øy
[], 
°¨t
)

47 
ªf
 = 0;

48 
i
 = 0;

50 
ªf
 = 0;Ñe‡< 
NUM_REFS
-1;Ñef++) {

51 
i
=0; i<
ELEMS
; i++) {

52 
¨øy
[
i
] = 
°¨t
 + (ò/ 
ELEMS_PER_PAGE
);

55 
	}
}

58 
	$ªad_d©a
(
¨øy
[], 
°¨t
, c⁄° *
¨øy_«me
)

60 
ªf
 = 0;

61 
i
 = 0;

63 
ªf
 = 0;Ñe‡< 
NUM_REFS
-1;Ñef++) {

64 
i
=0; i<
ELEMS
; i++) {

65 i‡(
¨øy
[
i
] !(
°¨t
 + (ò/ 
ELEMS_PER_PAGE
))) {

66 
	`¥ötf
("FAILED in file %sátÜine %d %s[%d] = %u != %uÑef = %d\n",

67 
__FILE__
, 
__LINE__
, 
¨øy_«me
, 
i
, 
¨øy
[i], i, 
ªf
+1);

68 
	`exô
(1);

72 
	}
}

75 
	$¥öt_d©a
(
¨øy
[])

77 
i
 = 0;

78 
cou¡
 = 0;

80 
i
=0; i<
ELEMS
; i+(
ELEMS_PER_PAGE
)) {

81 
	`¥ötf
("[%10u] = %10u ", 
i
, 
¨øy
[i]);

82 i‡(((
cou¡
+1) % 4) == 0) {

83 
	`¥ötf
("\n");

85 
cou¡
++;

87 
	`¥ötf
("\n");

88 
	}
}

91 
	$do_w‹k
(
°¨t
)

93 
°ack_¨øy
[
STACK_ARRAY_ELEMS
];

94 
i
 = 0;

95 
¨øy1_°¨t
 = 
°¨t
;

96 
¨øy2_°¨t
 = 
°¨t
 + (
ELEMS
 / (
ELEMS_PER_PAGE
)) + 10;

98 
	`¥ötf
("Checking uninitializedárray1\n");

100 
i
=0; i<
ELEMS
; i++) {

101 i‡(
¨øy1
[
i
] != 0) {

102 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay1[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy1
[i], 0);

103 
	`exô
(1);

107 
	`¥ötf
("Checking uninitializedárray2\n");

109 
i
=0; i<
ELEMS
; i++) {

110 i‡(
¨øy2
[
i
] != 0) {

111 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay2[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy2
[i], 0);

112 
	`exô
(1);

116 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

117 
°ack_¨øy
[
i
] = i * 1000;

120 
i
=0; i<2; i++) {

121 
	`ˇŒ_Æl
();

122 
	`wrôe_d©a
(
¨øy1
, 
¨øy1_°¨t
);

123 
	`ˇŒ_Æl
();

124 
	`¥ötf
("Checking initializedárray1\n");

125 
	`ªad_d©a
(
¨øy1
, 
¨øy1_°¨t
, "array1");

129 
	`¥ötf
("Checking initializedárray2ágain\n");

130 
i
=0; i<
ELEMS
; i++) {

131 i‡(
¨øy2
[
i
] != 0) {

132 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay2[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy2
[i], 0);

133 
	`exô
(1);

137 
	`¥ötf
("Checking initialized stack_array\n");

138 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

139 i‡(
°ack_¨øy
[
i
] != i * 1000) {

140 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: sèck_¨øy[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
°ack_¨øy
[i], i);

141 
	`exô
(1);

145 
	`¥ötf
("Checking initialized init\n");

147 
i
=0; i<
INIT_ARRAY_ELEMS
; i++) {

148 i‡(
öô
[
i
] != i) {

149 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: inô[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
öô
[i], i);

150 
	`exô
(1);

154 
i
=0; i<2; i++) {

155 
	`ˇŒ_Æl
();

156 
	`wrôe_d©a
(
¨øy2
, 
¨øy2_°¨t
);

157 
	`ˇŒ_Æl
();

158 
	`¥ötf
("Checking initializedárray2\n");

159 
	`ªad_d©a
(
¨øy2
, 
¨øy2_°¨t
, "array2");

162 
	`¥ötf
("Checking initialized stack_array\n");

163 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

164 i‡(
°ack_¨øy
[
i
] != i * 1000) {

165 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: sèck_¨øy[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
°ack_¨øy
[i], i);

166 
	`exô
(1);

171 
	`¥ötf
("Checking initialized init\n");

172 
i
=0; i<
INIT_ARRAY_ELEMS
; i++) {

173 i‡(
öô
[
i
] != i) {

174 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: inô[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
öô
[i], i);

175 
	`exô
(1);

180 
	`¥ötf
("Checking initializedárray1 forÅheÜastÅime\n");

181 
	`ªad_d©a
(
¨øy1
, 
¨øy1_°¨t
, "array1");

182 
	`¥ötf
("Checking initializedárray2 forÅheÜastÅime\n");

183 
	`ªad_d©a
(
¨øy2
, 
¨øy2_°¨t
, "array2");

186 
	`¥ötf
("SUCCEEDED\n");

187 
	}
}

190 
	$maö
()

193 #ifde‡
DEBUG


194 
	`¥ötf
("PAGE_SIZE = %d\n", 
PAGE_SIZE
);

195 
	`¥ötf
("DATA_BYTES = %d\n", 
DATA_BYTES
);

196 
	`¥ötf
("ELEMS = %d\n", 
ELEMS
);

197 
	`¥ötf
("ELEMS_PER_PAGE = %d\n", 
ELEMS_PER_PAGE
);

198 
	`¥ötf
("PAGES = %d\n", 
PAGES
);

199 
	`¥ötf
("AºayÉÀmít†%d\n", 
ELEMS
);

200 
	`¥ötf
("Page†≥∏¨øy = %d\n", ((
ELEMS
 * ()Ë/ 
PAGE_SIZE
));

203 
	`do_w‹k
(1);

204 #ifde‡
DEBUG


205 
	`¥ötf
("array 1\n");

206 
	`¥öt_d©a
(
¨øy1
);

207 
	`¥ötf
("array 2\n");

208 
	`¥öt_d©a
(
¨øy2
);

210 
	`exô
(0);

211 
	}
}

	@test/os161/user/uw-testbin/vm-mix2/vm-mix2.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

13 
ˇŒ_Æl_lo›
(
cou¡
);

14 
wrôe_d©a
(
¨øy
[], 
°¨t
);

15 
ªad_d©a
(
¨øy
[], 
°¨t
, c⁄° *
¨øy_«me
);

16 
¥öt_d©a
(
¨øy
[]);

17 
do_w‹k
(
°¨t
);

19 
	#PAGE_SIZE
 (4096)

	)

20 
	#DATA_BYTES
 (3 * 1024 * 1024)

	)

21 
	#PAGES
 (
DATA_BYTES
 / 
PAGE_SIZE
)

	)

22 
	#ELEM_SIZE
 (())

	)

23 
	#ELEMS
 ((
PAGE_SIZE
 * 
PAGES
 / ()Ë/ 2)

	)

24 
	#ELEMS_PER_PAGE
 (
PAGE_SIZE
 / 
ELEM_SIZE
)

	)

26 
	#TLB_SIZE
 (64)

	)

27 
	#LOCAL_REFS
 (
TLB_SIZE
 - 6Ë

	)

29 
	#STACK_PAGES_USED
 (9)

	)

30 
	#STACK_ARRAY_ELEMS
 (
PAGE_SIZE
 * 
STACK_PAGES_USED
 / ())

	)

32 
	#MIN
(
a
,
b
Ë(◊ < bË?á : b)

	)

34 
	göô
[] = {

43 
	#INIT_ARRAY_ELEMS
 ((
öô
Ë/ ())

	)

45 
	g¨øy1
[
ELEMS
];

46 
	g¨øy2
[
ELEMS
];

49 
	$wrôe_d©a
(
¨øy
[], 
°¨t
)

51 
i
 = 0;

52 
k
 = 0;

53 
íd
 = 0;

55 
k
=0; k<
ELEMS
; k +
PAGE_SIZE
) {

56 
íd
 = 
	`MIN
(
ELEMS
, (
k
 + (
LOCAL_REFS
 * 
ELEMS_PER_PAGE
)));

57 
i
=
k
; i<
íd
; i++) {

58 
¨øy
[
i
] = 
°¨t
 + (ò/ 
ELEMS_PER_PAGE
);

60 #ifde‡
DEBUG


61 
	`¥ötf
("‰om k = %dÅÿò%dÉnd %d\n", 
i
, 
k
, 
íd
);

64 
	}
}

67 
	$ªad_d©a
(
¨øy
[], 
°¨t
, c⁄° *
¨øy_«me
)

69 
i
 = 0;

70 
j
 = 
°¨t
;

72 
j
 = 
°¨t
;

73 
i
=0; i<
ELEMS
; i++) {

74 i‡(
¨øy
[
i
] !(
°¨t
 + (ò/ 
ELEMS_PER_PAGE
))) {

75 
	`¥ötf
("FAILED in file %sátÜine %d %s[%d] = %u != %u\n",

76 
__FILE__
, 
__LINE__
, 
¨øy_«me
, 
i
, 
¨øy
[i], i);

77 
	`exô
(1);

80 
	}
}

83 
	$¥öt_d©a
(
¨øy
[])

85 
i
 = 0;

86 
cou¡
 = 0;

88 
i
=0; i<
ELEMS
; i+(
ELEMS_PER_PAGE
)) {

89 
	`¥ötf
("[%10u] = %10u ", 
i
, 
¨øy
[i]);

90 i‡(((
cou¡
+1) % 4) == 0) {

91 
	`¥ötf
("\n");

93 
cou¡
++;

95 
	`¥ötf
("\n");

96 
	}
}

99 
	$do_w‹k
(
°¨t
)

101 
°ack_¨øy
[
STACK_ARRAY_ELEMS
];

102 
i
 = 0;

103 
¨øy1_°¨t
 = 
°¨t
;

104 
¨øy2_°¨t
 = 
°¨t
 + (
ELEMS
 / (
ELEMS_PER_PAGE
)) + 10;

106 
	`¥ötf
("Checking uninitializedárray1\n");

108 
i
=0; i<
ELEMS
; i++) {

109 i‡(
¨øy1
[
i
] != 0) {

110 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay1[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy1
[i], 0);

111 
	`exô
(1);

115 
	`¥ötf
("Checking uninitializedárray2\n");

117 
i
=0; i<
ELEMS
; i++) {

118 i‡(
¨øy2
[
i
] != 0) {

119 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay2[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy2
[i], 0);

120 
	`exô
(1);

124 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

125 
°ack_¨øy
[
i
] = i * 1000;

128 
i
=0; i<2; i++) {

129 
	`ˇŒ_Æl_lo›
(1);

130 
	`wrôe_d©a
(
¨øy1
, 
¨øy1_°¨t
);

131 
	`ˇŒ_Æl_lo›
(1);

132 
	`¥ötf
("Checking initializedárray1\n");

133 
	`ªad_d©a
(
¨øy1
, 
¨øy1_°¨t
, "array1");

137 
	`¥ötf
("Checking initializedárray2ágain\n");

138 
i
=0; i<
ELEMS
; i++) {

139 i‡(
¨øy2
[
i
] != 0) {

140 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay2[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy2
[i], 0);

141 
	`exô
(1);

145 
	`¥ötf
("Checking initialized stack_array\n");

146 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

147 i‡(
°ack_¨øy
[
i
] != i * 1000) {

148 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: sèck_¨øy[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
°ack_¨øy
[i], i);

149 
	`exô
(1);

153 
	`¥ötf
("Checking initialized init\n");

155 
i
=0; i<
INIT_ARRAY_ELEMS
; i++) {

156 i‡(
öô
[
i
] != i) {

157 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: inô[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
öô
[i], i);

158 
	`exô
(1);

162 
i
=0; i<2; i++) {

163 
	`ˇŒ_Æl_lo›
(20);

164 
	`wrôe_d©a
(
¨øy2
, 
¨øy2_°¨t
);

165 
	`ˇŒ_Æl_lo›
(20);

166 
	`¥ötf
("Checking initializedárray2\n");

167 
	`ªad_d©a
(
¨øy2
, 
¨øy2_°¨t
, "array2");

170 
	`¥ötf
("Checking initialized stack_array\n");

171 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

172 i‡(
°ack_¨øy
[
i
] != i * 1000) {

173 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: sèck_¨øy[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
°ack_¨øy
[i], i);

174 
	`exô
(1);

179 
	`¥ötf
("Checking initialized init\n");

180 
i
=0; i<
INIT_ARRAY_ELEMS
; i++) {

181 i‡(
öô
[
i
] != i) {

182 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: inô[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
öô
[i], i);

183 
	`exô
(1);

188 
	`¥ötf
("Checking initializedárray1 forÅheÜastÅime\n");

189 
	`ªad_d©a
(
¨øy1
, 
¨øy1_°¨t
, "array1");

190 
	`¥ötf
("Checking initializedárray2 forÅheÜastÅime\n");

191 
	`ªad_d©a
(
¨øy2
, 
¨øy2_°¨t
, "array2");

194 
	`¥ötf
("SUCCEEDED\n");

195 
	}
}

198 
	$maö
()

201 #ifde‡
DEBUG


202 
	`¥ötf
("PAGE_SIZE = %d\n", 
PAGE_SIZE
);

203 
	`¥ötf
("DATA_BYTES = %d\n", 
DATA_BYTES
);

204 
	`¥ötf
("ELEMS = %d\n", 
ELEMS
);

205 
	`¥ötf
("ELEMS_PER_PAGE = %d\n", 
ELEMS_PER_PAGE
);

206 
	`¥ötf
("PAGES = %d\n", 
PAGES
);

207 
	`¥ötf
("AºayÉÀmít†%d\n", 
ELEMS
);

208 
	`¥ötf
("Page†≥∏¨øy = %d\n", ((
ELEMS
 * ()Ë/ 
PAGE_SIZE
));

211 
	`do_w‹k
(1);

212 #ifde‡
DEBUG


213 
	`¥ötf
("array 1\n");

214 
	`¥öt_d©a
(
¨øy1
);

215 
	`¥ötf
("array 2\n");

216 
	`¥öt_d©a
(
¨øy2
);

218 
	`exô
(0);

219 
	}
}

	@test/os161/user/uw-testbin/vm-stack1/vm-stack1.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	#PAGE_SIZE
 (4096)

	)

5 
	#PAGES
 (9)

	)

6 
	#SIZE
 (
PAGE_SIZE
 * 
PAGES
 / ())

	)

9 
	$maö
()

11 
¨øy
[
SIZE
];

12 
i
 = 0;

14 
i
=0; i<
SIZE
; i++) {

15 
¨øy
[
i
] = i;

18 
i
=0; i<
SIZE
; i++) {

19 i‡(
¨øy
[
i
] != i) {

20 
	`¥ötf
("FAILEDáºay[%d] = %u !%d\n", 
i
, 
¨øy
[i], i);

21 
	`exô
(1);

25 
	`¥ötf
("SUCCEEDED\n");

26 
	`exô
(0);

27 
	}
}

	@test/os161/user/uw-testbin/vm-stack2/vm-stack2.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	#PAGE_SIZE
 (4096)

	)

5 
	#STACK_PAGES_USED
 (9)

	)

6 
	#STACK_ARRAY_ELEMS
 (
PAGE_SIZE
 * 
STACK_PAGES_USED
 / ())

	)

7 
	#UNINIT_PAGES
 (9)

	)

8 
	#UNINIT_ARRAY_ELEMS
 (
PAGE_SIZE
 * 
UNINIT_PAGES
 / ())

	)

10 
	gunöô
[
UNINIT_ARRAY_ELEMS
];

11 
	göô
[] = {

20 
	#INIT_ARRAY_ELEMS
 ((
öô
Ë/ ())

	)

23 
	$maö
()

25 
¨øy
[
STACK_ARRAY_ELEMS
];

26 
i
 = 0;

29 
i
=0; i<
UNINIT_ARRAY_ELEMS
; i++) {

30 i‡(
unöô
[
i
] != 0) {

31 
	`¥ötf
("FAILED unöô[%d] = %u !%d\n", 
i
, 
unöô
[i], 0);

32 
	`exô
(1);

37 
i
=0; i<
UNINIT_ARRAY_ELEMS
; i++) {

38 
unöô
[
i
] = i * 100;

42 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

43 
¨øy
[
i
] = i * 1000;

47 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

48 i‡(
¨øy
[
i
] != i * 1000) {

49 
	`¥ötf
("FAILEDáºay[%d] = %u !%d\n", 
i
, 
¨øy
[i], i);

50 
	`exô
(1);

55 
i
=0; i<
UNINIT_ARRAY_ELEMS
; i++) {

56 i‡(
unöô
[
i
] != i * 100) {

57 
	`¥ötf
("FAILED unöô[%d] = %u !%d\n", 
i
, 
unöô
[i], i);

58 
	`exô
(1);

63 
i
=0; i<
INIT_ARRAY_ELEMS
; i++) {

64 i‡(
öô
[
i
] != i) {

65 
	`¥ötf
("FAILED inô[%d] = %u !%d\n", 
i
, 
öô
[i], i);

66 
	`exô
(1);

70 
	`¥ötf
("SUCCEEDED\n");

71 
	`exô
(0);

72 
	}
}

	@test/os161/user/uw-testbin/widefork/widefork.c

17 
	~<uni°d.h
>

18 
	~<°dlib.h
>

19 
	~<°dio.h
>

20 
	~<îr.h
>

22 
dof‹k
();

23 
dowaô
(,);

26 
	$dof‹k
(
chûdnum
)

28 
pid_t
 
pid
;

29 
pid
 = 
	`f‹k
();

30 i‡(
pid
 < 0) {

31 
	`îrx
(1,"f‹k %d",
chûdnum
);

33 i‡(
pid
 == 0) {

35 
	`putch¨
('A'+
chûdnum
-1);

36 
	`putch¨
('\n');

37 
	`_exô
(
chûdnum
);

39 (
pid
);

40 
	}
}

43 
	$dowaô
(
chûdpid
, 
chûdnum
)

45 
rvÆ
;

46 i‡(
	`waôpid
(
chûdpid
,&
rvÆ
,0) < 0) {

47 
	`w¨nx
("waitpid 1");

50 i‡(
	`WIFEXITED
(
rvÆ
)) {

51 i‡((
	`WEXITSTATUS
(
rvÆ
)Ë=
chûdnum
) {

52 
	`putch¨
('a'+
chûdnum
-1);

53 
	`putch¨
('\n');

57 
	`putch¨
('x');

58 
	`putch¨
('\n');

60 
	}
}

63 
	$maö
(
¨gc
, *
¨gv
[])

65 ()
¨gc
;

66 ()
¨gv
;

67 
pid_t
 
pid1
,
pid2
,
pid3
;

68 
	`putch¨
('P');

69 
	`putch¨
('\n');

70 
pid1
 = 
	`dof‹k
(1);

71 
	`putch¨
('P');

72 
	`putch¨
('\n');

73 
pid2
 = 
	`dof‹k
(2);

74 
	`putch¨
('P');

75 
	`putch¨
('\n');

76 
pid3
 = 
	`dof‹k
(3);

77 
	`dowaô
(
pid1
,1);

78 
	`dowaô
(
pid2
,2);

79 
	`dowaô
(
pid3
,3);

81 
	}
}

	@test/os161/user/uw-testbin/writeread/writeread.c

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<as£π.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

10 
	~<f˙é.h
>

11 
	~"../lib/ã°utûs.h
"

13 
	#NUM_TIMES
 (1)

	)

14 
	#NUM_INTS
 (4*1024)

	)

17 
	$maö
()

19 
i
, 
rc
, 
fd
;

20 
wrôe_¨øy
[
NUM_INTS
];

21 
ªad_¨øy
[
NUM_INTS
];

27 
i
=0; i<
NUM_INTS
; i++) {

28 
wrôe_¨øy
[
i
] = i;

32 
fd
 = 
	`›í
("WRITE_READ_FILE", 
O_WRONLY
 | 
O_CREAT
);

33 
	`TEST_POSITIVE
(
fd
, "Open fileÇamed WRITE_READ_FILE failed\n");

35 
i
=0; i<
NUM_TIMES
; i++) {

36 
rc
 = 
	`wrôe
(
fd
, 
wrôe_¨øy
, (write_array));

37 
	`TEST_EQUAL
(
rc
, (
wrôe_¨øy
), "FailedÅo writeáll ofÅheárray");

40 
	`˛o£
(
fd
);

43 
fd
 = 
	`›í
("WRITE_READ_FILE", 
O_RDONLY
);

44 
	`TEST_POSITIVE
(
fd
, "Open fileÇamed WRITE_READ_FILE failed\n");

46 
i
=0; i<
NUM_TIMES
; i++) {

47 
rc
 = 
	`ªad
(
fd
, 
ªad_¨øy
, (read_array));

48 
	`TEST_EQUAL
(
rc
, (
ªad_¨øy
), "FailedÅoÑeadáll ofÅheárray");

49 
i
=0; i<
NUM_INTS
; i++) {

50 
	`TEST_EQUAL
(
ªad_¨øy
[
i
], 
wrôe_¨øy
[i], "ValueÑeadÇotÉqualÅo value written");

54 
	`TEST_STATS
();

56 
	`exô
(0);

57 
	}
}

	@test/os161/user/uw-testbin/xhog/xhog.c

35 
	~<°dio.h
>

38 
	$maö
()

40 vﬁ©ûê
i
;

42 
i
=0; i<50000; i++) {

43 i‡(
i
%10000 == 0) {

44 
	`putch¨
('x');

47 
	`putch¨
('\n');

50 
	}
}

	@test/os161/user/uw-testbin/yhog/yhog.c

35 
	~<°dio.h
>

38 
	$maö
()

40 vﬁ©ûê
i
;

42 
i
=0; i<50000; i++) {

43 i‡(
i
%10000 == 0) {

44 
	`putch¨
('y');

47 
	`putch¨
('\n');

50 
	}
}

	@test/os161/user/uw-testbin/zhog/zhog.c

35 
	~<°dio.h
>

38 
	$maö
()

40 vﬁ©ûê
i
;

42 
i
=0; i<50000; i++) {

43 i‡(
i
%10000 == 0) {

44 
	`putch¨
('z');

47 
	`putch¨
('\n');

50 
	}
}

	@
1
.
0
955
34419
os161/build/install/hostinclude/hostcompat.h
os161/build/install/include/assert.h
os161/build/install/include/err.h
os161/build/install/include/errno.h
os161/build/install/include/fcntl.h
os161/build/install/include/kern/endian.h
os161/build/install/include/kern/errmsg.h
os161/build/install/include/kern/errno.h
os161/build/install/include/kern/fcntl.h
os161/build/install/include/kern/ioctl.h
os161/build/install/include/kern/iovec.h
os161/build/install/include/kern/limits.h
os161/build/install/include/kern/mips/endian.h
os161/build/install/include/kern/mips/regdefs.h
os161/build/install/include/kern/mips/setjmp.h
os161/build/install/include/kern/mips/signal.h
os161/build/install/include/kern/mips/types.h
os161/build/install/include/kern/reboot.h
os161/build/install/include/kern/resource.h
os161/build/install/include/kern/seek.h
os161/build/install/include/kern/sfs.h
os161/build/install/include/kern/signal.h
os161/build/install/include/kern/socket.h
os161/build/install/include/kern/stat.h
os161/build/install/include/kern/stattypes.h
os161/build/install/include/kern/syscall.h
os161/build/install/include/kern/time.h
os161/build/install/include/kern/types.h
os161/build/install/include/kern/unistd.h
os161/build/install/include/kern/wait.h
os161/build/install/include/limits.h
os161/build/install/include/setjmp.h
os161/build/install/include/signal.h
os161/build/install/include/stdarg.h
os161/build/install/include/stdint.h
os161/build/install/include/stdio.h
os161/build/install/include/stdlib.h
os161/build/install/include/string.h
os161/build/install/include/sys/endian.h
os161/build/install/include/sys/ioctl.h
os161/build/install/include/sys/null.h
os161/build/install/include/sys/reboot.h
os161/build/install/include/sys/stat.h
os161/build/install/include/sys/types.h
os161/build/install/include/sys/wait.h
os161/build/install/include/time.h
os161/build/install/include/types/size_t.h
os161/build/install/include/unistd.h
os161/common/gcc-millicode/adddi3.c
os161/common/gcc-millicode/anddi3.c
os161/common/gcc-millicode/ashldi3.c
os161/common/gcc-millicode/ashrdi3.c
os161/common/gcc-millicode/cmpdi2.c
os161/common/gcc-millicode/divdi3.c
os161/common/gcc-millicode/iordi3.c
os161/common/gcc-millicode/longlong.h
os161/common/gcc-millicode/lshldi3.c
os161/common/gcc-millicode/lshrdi3.c
os161/common/gcc-millicode/moddi3.c
os161/common/gcc-millicode/muldi3.c
os161/common/gcc-millicode/negdi2.c
os161/common/gcc-millicode/notdi2.c
os161/common/gcc-millicode/qdivrem.c
os161/common/gcc-millicode/subdi3.c
os161/common/gcc-millicode/ucmpdi2.c
os161/common/gcc-millicode/udivdi3.c
os161/common/gcc-millicode/umoddi3.c
os161/common/gcc-millicode/xordi3.c
os161/common/libc/printf/__printf.c
os161/common/libc/printf/snprintf.c
os161/common/libc/stdlib/atoi.c
os161/common/libc/string/bzero.c
os161/common/libc/string/memcpy.c
os161/common/libc/string/memmove.c
os161/common/libc/string/strcat.c
os161/common/libc/string/strchr.c
os161/common/libc/string/strcmp.c
os161/common/libc/string/strcpy.c
os161/common/libc/string/strlen.c
os161/common/libc/string/strrchr.c
os161/common/libc/string/strtok_r.c
os161/kern/arch/mips/include/current.h
os161/kern/arch/mips/include/elf.h
os161/kern/arch/mips/include/kern/endian.h
os161/kern/arch/mips/include/kern/regdefs.h
os161/kern/arch/mips/include/kern/setjmp.h
os161/kern/arch/mips/include/kern/signal.h
os161/kern/arch/mips/include/kern/types.h
os161/kern/arch/mips/include/specialreg.h
os161/kern/arch/mips/include/spinlock.h
os161/kern/arch/mips/include/thread.h
os161/kern/arch/mips/include/tlb.h
os161/kern/arch/mips/include/trapframe.h
os161/kern/arch/mips/include/types.h
os161/kern/arch/mips/include/vm.h
os161/kern/arch/mips/locore/trap.c
os161/kern/arch/mips/syscall/syscall.c
os161/kern/arch/mips/thread/cpu.c
os161/kern/arch/mips/thread/switchframe.c
os161/kern/arch/mips/thread/switchframe.h
os161/kern/arch/mips/thread/thread_machdep.c
os161/kern/arch/mips/vm/dumbvm.c
os161/kern/arch/mips/vm/ram.c
os161/kern/arch/sys161/dev/lamebus_machdep.c
os161/kern/arch/sys161/include/bus.h
os161/kern/arch/sys161/include/maxcpus.h
os161/kern/compile/ASST0/autoconf.c
os161/kern/compile/ASST0/autoconf.h
os161/kern/compile/ASST0/opt-A0.h
os161/kern/compile/ASST0/opt-A1.h
os161/kern/compile/ASST0/opt-A2.h
os161/kern/compile/ASST0/opt-A3.h
os161/kern/compile/ASST0/opt-A4.h
os161/kern/compile/ASST0/opt-A5.h
os161/kern/compile/ASST0/opt-dumbvm.h
os161/kern/compile/ASST0/opt-net.h
os161/kern/compile/ASST0/opt-netfs.h
os161/kern/compile/ASST0/opt-noasserts.h
os161/kern/compile/ASST0/opt-sfs.h
os161/kern/compile/ASST0/opt-synchprobs.h
os161/kern/compile/ASST0/vers.c
os161/kern/compile/ASST1/autoconf.c
os161/kern/compile/ASST1/autoconf.h
os161/kern/compile/ASST1/opt-A0.h
os161/kern/compile/ASST1/opt-A1.h
os161/kern/compile/ASST1/opt-A2.h
os161/kern/compile/ASST1/opt-A3.h
os161/kern/compile/ASST1/opt-A4.h
os161/kern/compile/ASST1/opt-A5.h
os161/kern/compile/ASST1/opt-dumbvm.h
os161/kern/compile/ASST1/opt-net.h
os161/kern/compile/ASST1/opt-netfs.h
os161/kern/compile/ASST1/opt-noasserts.h
os161/kern/compile/ASST1/opt-sfs.h
os161/kern/compile/ASST1/opt-synchprobs.h
os161/kern/compile/ASST1/vers.c
os161/kern/dev/generic/beep.c
os161/kern/dev/generic/beep.h
os161/kern/dev/generic/console.c
os161/kern/dev/generic/console.h
os161/kern/dev/generic/random.c
os161/kern/dev/generic/random.h
os161/kern/dev/generic/rtclock.c
os161/kern/dev/generic/rtclock.h
os161/kern/dev/lamebus/beep_ltimer.c
os161/kern/dev/lamebus/con_lscreen.c
os161/kern/dev/lamebus/con_lser.c
os161/kern/dev/lamebus/emu.c
os161/kern/dev/lamebus/emu.h
os161/kern/dev/lamebus/emu_att.c
os161/kern/dev/lamebus/lamebus.c
os161/kern/dev/lamebus/lamebus.h
os161/kern/dev/lamebus/lhd.c
os161/kern/dev/lamebus/lhd.h
os161/kern/dev/lamebus/lhd_att.c
os161/kern/dev/lamebus/lnet.c
os161/kern/dev/lamebus/lnet_att.c
os161/kern/dev/lamebus/lrandom.c
os161/kern/dev/lamebus/lrandom.h
os161/kern/dev/lamebus/lrandom_att.c
os161/kern/dev/lamebus/lscreen.c
os161/kern/dev/lamebus/lscreen.h
os161/kern/dev/lamebus/lscreen_att.c
os161/kern/dev/lamebus/lser.c
os161/kern/dev/lamebus/lser.h
os161/kern/dev/lamebus/lser_att.c
os161/kern/dev/lamebus/ltimer.c
os161/kern/dev/lamebus/ltimer.h
os161/kern/dev/lamebus/ltimer_att.c
os161/kern/dev/lamebus/ltrace.c
os161/kern/dev/lamebus/ltrace.h
os161/kern/dev/lamebus/ltrace_att.c
os161/kern/dev/lamebus/random_lrandom.c
os161/kern/dev/lamebus/rtclock_ltimer.c
os161/kern/fs/sfs/sfs_fs.c
os161/kern/fs/sfs/sfs_io.c
os161/kern/fs/sfs/sfs_vnode.c
os161/kern/include/addrspace.h
os161/kern/include/array.h
os161/kern/include/bitmap.h
os161/kern/include/cdefs.h
os161/kern/include/clock.h
os161/kern/include/copyinout.h
os161/kern/include/cpu.h
os161/kern/include/current.h
os161/kern/include/device.h
os161/kern/include/elf.h
os161/kern/include/emufs.h
os161/kern/include/endian.h
os161/kern/include/fs.h
os161/kern/include/kern/endian.h
os161/kern/include/kern/errmsg.h
os161/kern/include/kern/errno.h
os161/kern/include/kern/fcntl.h
os161/kern/include/kern/ioctl.h
os161/kern/include/kern/iovec.h
os161/kern/include/kern/limits.h
os161/kern/include/kern/reboot.h
os161/kern/include/kern/resource.h
os161/kern/include/kern/seek.h
os161/kern/include/kern/sfs.h
os161/kern/include/kern/signal.h
os161/kern/include/kern/socket.h
os161/kern/include/kern/stat.h
os161/kern/include/kern/stattypes.h
os161/kern/include/kern/syscall.h
os161/kern/include/kern/time.h
os161/kern/include/kern/types.h
os161/kern/include/kern/unistd.h
os161/kern/include/kern/wait.h
os161/kern/include/lib.h
os161/kern/include/limits.h
os161/kern/include/mainbus.h
os161/kern/include/proc.h
os161/kern/include/queue.h
os161/kern/include/setjmp.h
os161/kern/include/sfs.h
os161/kern/include/signal.h
os161/kern/include/spinlock.h
os161/kern/include/spl.h
os161/kern/include/stat.h
os161/kern/include/stdarg.h
os161/kern/include/synch.h
os161/kern/include/synchprobs.h
os161/kern/include/syscall.h
os161/kern/include/test.h
os161/kern/include/thread.h
os161/kern/include/threadlist.h
os161/kern/include/threadprivate.h
os161/kern/include/types.h
os161/kern/include/uio.h
os161/kern/include/uw-vmstats.h
os161/kern/include/version.h
os161/kern/include/vfs.h
os161/kern/include/vm.h
os161/kern/include/vnode.h
os161/kern/include/wchan.h
os161/kern/lib/array.c
os161/kern/lib/bitmap.c
os161/kern/lib/bswap.c
os161/kern/lib/kgets.c
os161/kern/lib/kprintf.c
os161/kern/lib/misc.c
os161/kern/lib/queue.c
os161/kern/lib/stpdprog.c
os161/kern/lib/uio.c
os161/kern/proc/proc.c
os161/kern/startup/hello.c
os161/kern/startup/main.c
os161/kern/startup/menu.c
os161/kern/startup/stpdprgrm.c
os161/kern/synchprobs/catmouse.c
os161/kern/synchprobs/catmouse_synch.c
os161/kern/synchprobs/whalemating.c
os161/kern/syscall/file_syscalls.c
os161/kern/syscall/loadelf.c
os161/kern/syscall/proc_syscalls.c
os161/kern/syscall/runprogram.c
os161/kern/syscall/time_syscalls.c
os161/kern/test/arraytest.c
os161/kern/test/bitmaptest.c
os161/kern/test/cmdreader.c
os161/kern/test/fstest.c
os161/kern/test/malloctest.c
os161/kern/test/nettest.c
os161/kern/test/synchtest.c
os161/kern/test/threadfun.c
os161/kern/test/threadtest.c
os161/kern/test/tt3.c
os161/kern/test/uw-tests.c
os161/kern/thread/clock.c
os161/kern/thread/spinlock.c
os161/kern/thread/spl.c
os161/kern/thread/synch.c
os161/kern/thread/thread.c
os161/kern/thread/threadlist.c
os161/kern/thread/threadlocks.c
os161/kern/vfs/device.c
os161/kern/vfs/devnull.c
os161/kern/vfs/vfscwd.c
os161/kern/vfs/vfslist.c
os161/kern/vfs/vfslookup.c
os161/kern/vfs/vfspath.c
os161/kern/vfs/vnode.c
os161/kern/vm/copyinout.c
os161/kern/vm/kmalloc.c
os161/kern/vm/uw-vmstats.c
os161/root/hostinclude/hostcompat.h
os161/root/include/assert.h
os161/root/include/err.h
os161/root/include/errno.h
os161/root/include/fcntl.h
os161/root/include/kern/endian.h
os161/root/include/kern/errmsg.h
os161/root/include/kern/errno.h
os161/root/include/kern/fcntl.h
os161/root/include/kern/ioctl.h
os161/root/include/kern/iovec.h
os161/root/include/kern/limits.h
os161/root/include/kern/mips/endian.h
os161/root/include/kern/mips/regdefs.h
os161/root/include/kern/mips/setjmp.h
os161/root/include/kern/mips/signal.h
os161/root/include/kern/mips/types.h
os161/root/include/kern/reboot.h
os161/root/include/kern/resource.h
os161/root/include/kern/seek.h
os161/root/include/kern/sfs.h
os161/root/include/kern/signal.h
os161/root/include/kern/socket.h
os161/root/include/kern/stat.h
os161/root/include/kern/stattypes.h
os161/root/include/kern/syscall.h
os161/root/include/kern/time.h
os161/root/include/kern/types.h
os161/root/include/kern/unistd.h
os161/root/include/kern/wait.h
os161/root/include/limits.h
os161/root/include/setjmp.h
os161/root/include/signal.h
os161/root/include/stdarg.h
os161/root/include/stdint.h
os161/root/include/stdio.h
os161/root/include/stdlib.h
os161/root/include/string.h
os161/root/include/sys/endian.h
os161/root/include/sys/ioctl.h
os161/root/include/sys/null.h
os161/root/include/sys/reboot.h
os161/root/include/sys/stat.h
os161/root/include/sys/types.h
os161/root/include/sys/wait.h
os161/root/include/time.h
os161/root/include/types/size_t.h
os161/root/include/unistd.h
os161/user/bin/cat/cat.c
os161/user/bin/cp/cp.c
os161/user/bin/false/false.c
os161/user/bin/ln/ln.c
os161/user/bin/ls/ls.c
os161/user/bin/mkdir/mkdir.c
os161/user/bin/mv/mv.c
os161/user/bin/pwd/pwd.c
os161/user/bin/rm/rm.c
os161/user/bin/rmdir/rmdir.c
os161/user/bin/sh/sh.c
os161/user/bin/sync/sync.c
os161/user/bin/true/true.c
os161/user/include/assert.h
os161/user/include/err.h
os161/user/include/errno.h
os161/user/include/fcntl.h
os161/user/include/limits.h
os161/user/include/setjmp.h
os161/user/include/signal.h
os161/user/include/stdarg.h
os161/user/include/stdint.h
os161/user/include/stdio.h
os161/user/include/stdlib.h
os161/user/include/string.h
os161/user/include/sys/endian.h
os161/user/include/sys/ioctl.h
os161/user/include/sys/null.h
os161/user/include/sys/reboot.h
os161/user/include/sys/stat.h
os161/user/include/sys/types.h
os161/user/include/sys/wait.h
os161/user/include/time.h
os161/user/include/types/size_t.h
os161/user/include/unistd.h
os161/user/lib/hostcompat/err.c
os161/user/lib/hostcompat/host-err.h
os161/user/lib/hostcompat/hostcompat.c
os161/user/lib/hostcompat/hostcompat.h
os161/user/lib/hostcompat/time.c
os161/user/lib/libc/stdio/__puts.c
os161/user/lib/libc/stdio/getchar.c
os161/user/lib/libc/stdio/printf.c
os161/user/lib/libc/stdio/putchar.c
os161/user/lib/libc/stdio/puts.c
os161/user/lib/libc/stdlib/abort.c
os161/user/lib/libc/stdlib/exit.c
os161/user/lib/libc/stdlib/malloc.c
os161/user/lib/libc/stdlib/random.c
os161/user/lib/libc/stdlib/system.c
os161/user/lib/libc/string/memcmp.c
os161/user/lib/libc/string/memset.c
os161/user/lib/libc/string/strerror.c
os161/user/lib/libc/string/strtok.c
os161/user/lib/libc/time/time.c
os161/user/lib/libc/unix/__assert.c
os161/user/lib/libc/unix/err.c
os161/user/lib/libc/unix/errno.c
os161/user/lib/libc/unix/getcwd.c
os161/user/my-testbin/example/example.c
os161/user/sbin/dumpsfs/dumpsfs.c
os161/user/sbin/halt/halt.c
os161/user/sbin/mksfs/disk.c
os161/user/sbin/mksfs/disk.h
os161/user/sbin/mksfs/mksfs.c
os161/user/sbin/mksfs/support.c
os161/user/sbin/mksfs/support.h
os161/user/sbin/poweroff/poweroff.c
os161/user/sbin/reboot/reboot.c
os161/user/sbin/sfsck/sfsck.c
os161/user/testbin/add/add.c
os161/user/testbin/argtest/argtest.c
os161/user/testbin/badcall/bad_chdir.c
os161/user/testbin/badcall/bad_close.c
os161/user/testbin/badcall/bad_dup2.c
os161/user/testbin/badcall/bad_execv.c
os161/user/testbin/badcall/bad_fsync.c
os161/user/testbin/badcall/bad_ftruncate.c
os161/user/testbin/badcall/bad_getcwd.c
os161/user/testbin/badcall/bad_getdirentry.c
os161/user/testbin/badcall/bad_ioctl.c
os161/user/testbin/badcall/bad_link.c
os161/user/testbin/badcall/bad_lseek.c
os161/user/testbin/badcall/bad_mkdir.c
os161/user/testbin/badcall/bad_open.c
os161/user/testbin/badcall/bad_pipe.c
os161/user/testbin/badcall/bad_read.c
os161/user/testbin/badcall/bad_readlink.c
os161/user/testbin/badcall/bad_reboot.c
os161/user/testbin/badcall/bad_remove.c
os161/user/testbin/badcall/bad_rename.c
os161/user/testbin/badcall/bad_rmdir.c
os161/user/testbin/badcall/bad_sbrk.c
os161/user/testbin/badcall/bad_stat.c
os161/user/testbin/badcall/bad_symlink.c
os161/user/testbin/badcall/bad_time.c
os161/user/testbin/badcall/bad_waitpid.c
os161/user/testbin/badcall/bad_write.c
os161/user/testbin/badcall/common_buf.c
os161/user/testbin/badcall/common_fds.c
os161/user/testbin/badcall/common_path.c
os161/user/testbin/badcall/config.h
os161/user/testbin/badcall/driver.c
os161/user/testbin/badcall/test.h
os161/user/testbin/bigfile/bigfile.c
os161/user/testbin/conman/conman.c
os161/user/testbin/crash/crash.c
os161/user/testbin/ctest/ctest.c
os161/user/testbin/dirconc/dirconc.c
os161/user/testbin/dirseek/dirseek.c
os161/user/testbin/dirtest/dirtest.c
os161/user/testbin/f_test/f_hdr.h
os161/user/testbin/f_test/f_read.c
os161/user/testbin/f_test/f_test.c
os161/user/testbin/f_test/f_write.c
os161/user/testbin/farm/farm.c
os161/user/testbin/faulter/faulter.c
os161/user/testbin/filetest/filetest.c
os161/user/testbin/forkbomb/forkbomb.c
os161/user/testbin/forktest/forktest.c
os161/user/testbin/guzzle/guzzle.c
os161/user/testbin/hash/hash.c
os161/user/testbin/hog/hog.c
os161/user/testbin/huge/huge.c
os161/user/testbin/kitchen/kitchen.c
os161/user/testbin/malloctest/malloctest.c
os161/user/testbin/matmult/matmult-orig.c
os161/user/testbin/matmult/matmult.c
os161/user/testbin/palin/palin.c
os161/user/testbin/parallelvm/parallelvm.c
os161/user/testbin/psort/psort.c
os161/user/testbin/randcall/calls.c
os161/user/testbin/randcall/extern.h
os161/user/testbin/randcall/main.c
os161/user/testbin/rmdirtest/rmdirtest.c
os161/user/testbin/rmtest/rmtest.c
os161/user/testbin/sink/sink.c
os161/user/testbin/sort/sort.c
os161/user/testbin/sty/sty.c
os161/user/testbin/tail/tail.c
os161/user/testbin/tictac/tictac.c
os161/user/testbin/triplehuge/triple.c
os161/user/testbin/triplehuge/triple.h
os161/user/testbin/triplehuge/triplehuge.c
os161/user/testbin/triplemat/triple.c
os161/user/testbin/triplemat/triple.h
os161/user/testbin/triplemat/triplemat.c
os161/user/testbin/triplesort/triple.c
os161/user/testbin/triplesort/triple.h
os161/user/testbin/triplesort/triplesort.c
os161/user/testbin/userthreads/userthreads.c
os161/user/testbin/zero/zero.c
os161/user/uw-testbin/argtest/argtest.c
os161/user/uw-testbin/argtesttest/argtesttest.c
os161/user/uw-testbin/conc-io/conc-io.c
os161/user/uw-testbin/files1/files1.c
os161/user/uw-testbin/files2/files2.c
os161/user/uw-testbin/hogparty/hogparty.c
os161/user/uw-testbin/lib/testutils.c
os161/user/uw-testbin/lib/testutils.h
os161/user/uw-testbin/onefork/onefork.c
os161/user/uw-testbin/pidcheck/pidcheck.c
os161/user/uw-testbin/romemwrite/romemwrite.c
os161/user/uw-testbin/segments/segments.c
os161/user/uw-testbin/sparse/sparse.c
os161/user/uw-testbin/syscall/syscall.c
os161/user/uw-testbin/tlbfaulter/tlbfaulter.c
os161/user/uw-testbin/vm-crash1/vm-crash1.c
os161/user/uw-testbin/vm-crash2/vm-crash2.c
os161/user/uw-testbin/vm-crash3/vm-crash3.c
os161/user/uw-testbin/vm-data1/vm-data1.c
os161/user/uw-testbin/vm-data2/vm-data2.c
os161/user/uw-testbin/vm-data3/vm-data3.c
os161/user/uw-testbin/vm-funcs/vm-funcs.c
os161/user/uw-testbin/vm-mix1-exec/vm-mix1-exec.c
os161/user/uw-testbin/vm-mix1-fork/vm-mix1-fork.c
os161/user/uw-testbin/vm-mix1/vm-mix1.c
os161/user/uw-testbin/vm-mix2/vm-mix2.c
os161/user/uw-testbin/vm-stack1/vm-stack1.c
os161/user/uw-testbin/vm-stack2/vm-stack2.c
os161/user/uw-testbin/widefork/widefork.c
os161/user/uw-testbin/writeread/writeread.c
os161/user/uw-testbin/xhog/xhog.c
os161/user/uw-testbin/yhog/yhog.c
os161/user/uw-testbin/zhog/zhog.c
test/os161/common/gcc-millicode/adddi3.c
test/os161/common/gcc-millicode/anddi3.c
test/os161/common/gcc-millicode/ashldi3.c
test/os161/common/gcc-millicode/ashrdi3.c
test/os161/common/gcc-millicode/cmpdi2.c
test/os161/common/gcc-millicode/divdi3.c
test/os161/common/gcc-millicode/iordi3.c
test/os161/common/gcc-millicode/longlong.h
test/os161/common/gcc-millicode/lshldi3.c
test/os161/common/gcc-millicode/lshrdi3.c
test/os161/common/gcc-millicode/moddi3.c
test/os161/common/gcc-millicode/muldi3.c
test/os161/common/gcc-millicode/negdi2.c
test/os161/common/gcc-millicode/notdi2.c
test/os161/common/gcc-millicode/qdivrem.c
test/os161/common/gcc-millicode/subdi3.c
test/os161/common/gcc-millicode/ucmpdi2.c
test/os161/common/gcc-millicode/udivdi3.c
test/os161/common/gcc-millicode/umoddi3.c
test/os161/common/gcc-millicode/xordi3.c
test/os161/common/libc/printf/__printf.c
test/os161/common/libc/printf/snprintf.c
test/os161/common/libc/stdlib/atoi.c
test/os161/common/libc/string/bzero.c
test/os161/common/libc/string/memcpy.c
test/os161/common/libc/string/memmove.c
test/os161/common/libc/string/strcat.c
test/os161/common/libc/string/strchr.c
test/os161/common/libc/string/strcmp.c
test/os161/common/libc/string/strcpy.c
test/os161/common/libc/string/strlen.c
test/os161/common/libc/string/strrchr.c
test/os161/common/libc/string/strtok_r.c
test/os161/kern/arch/mips/include/current.h
test/os161/kern/arch/mips/include/elf.h
test/os161/kern/arch/mips/include/kern/endian.h
test/os161/kern/arch/mips/include/kern/regdefs.h
test/os161/kern/arch/mips/include/kern/setjmp.h
test/os161/kern/arch/mips/include/kern/signal.h
test/os161/kern/arch/mips/include/kern/types.h
test/os161/kern/arch/mips/include/specialreg.h
test/os161/kern/arch/mips/include/spinlock.h
test/os161/kern/arch/mips/include/thread.h
test/os161/kern/arch/mips/include/tlb.h
test/os161/kern/arch/mips/include/trapframe.h
test/os161/kern/arch/mips/include/types.h
test/os161/kern/arch/mips/include/vm.h
test/os161/kern/arch/mips/locore/trap.c
test/os161/kern/arch/mips/syscall/syscall.c
test/os161/kern/arch/mips/thread/cpu.c
test/os161/kern/arch/mips/thread/switchframe.c
test/os161/kern/arch/mips/thread/switchframe.h
test/os161/kern/arch/mips/thread/thread_machdep.c
test/os161/kern/arch/mips/vm/dumbvm.c
test/os161/kern/arch/mips/vm/ram.c
test/os161/kern/arch/sys161/dev/lamebus_machdep.c
test/os161/kern/arch/sys161/include/bus.h
test/os161/kern/arch/sys161/include/maxcpus.h
test/os161/kern/dev/generic/beep.c
test/os161/kern/dev/generic/beep.h
test/os161/kern/dev/generic/console.c
test/os161/kern/dev/generic/console.h
test/os161/kern/dev/generic/random.c
test/os161/kern/dev/generic/random.h
test/os161/kern/dev/generic/rtclock.c
test/os161/kern/dev/generic/rtclock.h
test/os161/kern/dev/lamebus/beep_ltimer.c
test/os161/kern/dev/lamebus/con_lscreen.c
test/os161/kern/dev/lamebus/con_lser.c
test/os161/kern/dev/lamebus/emu.c
test/os161/kern/dev/lamebus/emu.h
test/os161/kern/dev/lamebus/emu_att.c
test/os161/kern/dev/lamebus/lamebus.c
test/os161/kern/dev/lamebus/lamebus.h
test/os161/kern/dev/lamebus/lhd.c
test/os161/kern/dev/lamebus/lhd.h
test/os161/kern/dev/lamebus/lhd_att.c
test/os161/kern/dev/lamebus/lnet.c
test/os161/kern/dev/lamebus/lnet_att.c
test/os161/kern/dev/lamebus/lrandom.c
test/os161/kern/dev/lamebus/lrandom.h
test/os161/kern/dev/lamebus/lrandom_att.c
test/os161/kern/dev/lamebus/lscreen.c
test/os161/kern/dev/lamebus/lscreen.h
test/os161/kern/dev/lamebus/lscreen_att.c
test/os161/kern/dev/lamebus/lser.c
test/os161/kern/dev/lamebus/lser.h
test/os161/kern/dev/lamebus/lser_att.c
test/os161/kern/dev/lamebus/ltimer.c
test/os161/kern/dev/lamebus/ltimer.h
test/os161/kern/dev/lamebus/ltimer_att.c
test/os161/kern/dev/lamebus/ltrace.c
test/os161/kern/dev/lamebus/ltrace.h
test/os161/kern/dev/lamebus/ltrace_att.c
test/os161/kern/dev/lamebus/random_lrandom.c
test/os161/kern/dev/lamebus/rtclock_ltimer.c
test/os161/kern/fs/sfs/sfs_fs.c
test/os161/kern/fs/sfs/sfs_io.c
test/os161/kern/fs/sfs/sfs_vnode.c
test/os161/kern/include/addrspace.h
test/os161/kern/include/array.h
test/os161/kern/include/bitmap.h
test/os161/kern/include/cdefs.h
test/os161/kern/include/clock.h
test/os161/kern/include/copyinout.h
test/os161/kern/include/cpu.h
test/os161/kern/include/current.h
test/os161/kern/include/device.h
test/os161/kern/include/elf.h
test/os161/kern/include/emufs.h
test/os161/kern/include/endian.h
test/os161/kern/include/fs.h
test/os161/kern/include/kern/endian.h
test/os161/kern/include/kern/errmsg.h
test/os161/kern/include/kern/errno.h
test/os161/kern/include/kern/fcntl.h
test/os161/kern/include/kern/ioctl.h
test/os161/kern/include/kern/iovec.h
test/os161/kern/include/kern/limits.h
test/os161/kern/include/kern/reboot.h
test/os161/kern/include/kern/resource.h
test/os161/kern/include/kern/seek.h
test/os161/kern/include/kern/sfs.h
test/os161/kern/include/kern/signal.h
test/os161/kern/include/kern/socket.h
test/os161/kern/include/kern/stat.h
test/os161/kern/include/kern/stattypes.h
test/os161/kern/include/kern/syscall.h
test/os161/kern/include/kern/time.h
test/os161/kern/include/kern/types.h
test/os161/kern/include/kern/unistd.h
test/os161/kern/include/kern/wait.h
test/os161/kern/include/lib.h
test/os161/kern/include/limits.h
test/os161/kern/include/mainbus.h
test/os161/kern/include/proc.h
test/os161/kern/include/queue.h
test/os161/kern/include/setjmp.h
test/os161/kern/include/sfs.h
test/os161/kern/include/signal.h
test/os161/kern/include/spinlock.h
test/os161/kern/include/spl.h
test/os161/kern/include/stat.h
test/os161/kern/include/stdarg.h
test/os161/kern/include/synch.h
test/os161/kern/include/synchprobs.h
test/os161/kern/include/syscall.h
test/os161/kern/include/test.h
test/os161/kern/include/thread.h
test/os161/kern/include/threadlist.h
test/os161/kern/include/threadprivate.h
test/os161/kern/include/types.h
test/os161/kern/include/uio.h
test/os161/kern/include/uw-vmstats.h
test/os161/kern/include/version.h
test/os161/kern/include/vfs.h
test/os161/kern/include/vm.h
test/os161/kern/include/vnode.h
test/os161/kern/include/wchan.h
test/os161/kern/lib/array.c
test/os161/kern/lib/bitmap.c
test/os161/kern/lib/bswap.c
test/os161/kern/lib/kgets.c
test/os161/kern/lib/kprintf.c
test/os161/kern/lib/misc.c
test/os161/kern/lib/queue.c
test/os161/kern/lib/uio.c
test/os161/kern/proc/proc.c
test/os161/kern/startup/main.c
test/os161/kern/startup/menu.c
test/os161/kern/synchprobs/catmouse.c
test/os161/kern/synchprobs/catmouse_synch.c
test/os161/kern/synchprobs/whalemating.c
test/os161/kern/syscall/file_syscalls.c
test/os161/kern/syscall/loadelf.c
test/os161/kern/syscall/proc_syscalls.c
test/os161/kern/syscall/runprogram.c
test/os161/kern/syscall/time_syscalls.c
test/os161/kern/test/arraytest.c
test/os161/kern/test/bitmaptest.c
test/os161/kern/test/fstest.c
test/os161/kern/test/malloctest.c
test/os161/kern/test/nettest.c
test/os161/kern/test/synchtest.c
test/os161/kern/test/threadtest.c
test/os161/kern/test/tt3.c
test/os161/kern/test/uw-tests.c
test/os161/kern/thread/clock.c
test/os161/kern/thread/spinlock.c
test/os161/kern/thread/spl.c
test/os161/kern/thread/synch.c
test/os161/kern/thread/thread.c
test/os161/kern/thread/threadlist.c
test/os161/kern/vfs/device.c
test/os161/kern/vfs/devnull.c
test/os161/kern/vfs/vfscwd.c
test/os161/kern/vfs/vfslist.c
test/os161/kern/vfs/vfslookup.c
test/os161/kern/vfs/vfspath.c
test/os161/kern/vfs/vnode.c
test/os161/kern/vm/copyinout.c
test/os161/kern/vm/kmalloc.c
test/os161/kern/vm/uw-vmstats.c
test/os161/root/hostinclude/hostcompat.h
test/os161/root/include/assert.h
test/os161/root/include/err.h
test/os161/root/include/errno.h
test/os161/root/include/fcntl.h
test/os161/root/include/kern/endian.h
test/os161/root/include/kern/errmsg.h
test/os161/root/include/kern/errno.h
test/os161/root/include/kern/fcntl.h
test/os161/root/include/kern/ioctl.h
test/os161/root/include/kern/iovec.h
test/os161/root/include/kern/limits.h
test/os161/root/include/kern/mips/endian.h
test/os161/root/include/kern/mips/regdefs.h
test/os161/root/include/kern/mips/setjmp.h
test/os161/root/include/kern/mips/signal.h
test/os161/root/include/kern/mips/types.h
test/os161/root/include/kern/reboot.h
test/os161/root/include/kern/resource.h
test/os161/root/include/kern/seek.h
test/os161/root/include/kern/sfs.h
test/os161/root/include/kern/signal.h
test/os161/root/include/kern/socket.h
test/os161/root/include/kern/stat.h
test/os161/root/include/kern/stattypes.h
test/os161/root/include/kern/syscall.h
test/os161/root/include/kern/time.h
test/os161/root/include/kern/types.h
test/os161/root/include/kern/unistd.h
test/os161/root/include/kern/wait.h
test/os161/root/include/limits.h
test/os161/root/include/setjmp.h
test/os161/root/include/signal.h
test/os161/root/include/stdarg.h
test/os161/root/include/stdint.h
test/os161/root/include/stdio.h
test/os161/root/include/stdlib.h
test/os161/root/include/string.h
test/os161/root/include/sys/endian.h
test/os161/root/include/sys/ioctl.h
test/os161/root/include/sys/null.h
test/os161/root/include/sys/reboot.h
test/os161/root/include/sys/stat.h
test/os161/root/include/sys/types.h
test/os161/root/include/sys/wait.h
test/os161/root/include/time.h
test/os161/root/include/types/size_t.h
test/os161/root/include/unistd.h
test/os161/user/bin/cat/cat.c
test/os161/user/bin/cp/cp.c
test/os161/user/bin/false/false.c
test/os161/user/bin/ln/ln.c
test/os161/user/bin/ls/ls.c
test/os161/user/bin/mkdir/mkdir.c
test/os161/user/bin/mv/mv.c
test/os161/user/bin/pwd/pwd.c
test/os161/user/bin/rm/rm.c
test/os161/user/bin/rmdir/rmdir.c
test/os161/user/bin/sh/sh.c
test/os161/user/bin/sync/sync.c
test/os161/user/bin/true/true.c
test/os161/user/include/assert.h
test/os161/user/include/err.h
test/os161/user/include/errno.h
test/os161/user/include/fcntl.h
test/os161/user/include/limits.h
test/os161/user/include/setjmp.h
test/os161/user/include/signal.h
test/os161/user/include/stdarg.h
test/os161/user/include/stdint.h
test/os161/user/include/stdio.h
test/os161/user/include/stdlib.h
test/os161/user/include/string.h
test/os161/user/include/sys/endian.h
test/os161/user/include/sys/ioctl.h
test/os161/user/include/sys/null.h
test/os161/user/include/sys/reboot.h
test/os161/user/include/sys/stat.h
test/os161/user/include/sys/types.h
test/os161/user/include/sys/wait.h
test/os161/user/include/time.h
test/os161/user/include/types/size_t.h
test/os161/user/include/unistd.h
test/os161/user/lib/hostcompat/err.c
test/os161/user/lib/hostcompat/host-err.h
test/os161/user/lib/hostcompat/hostcompat.c
test/os161/user/lib/hostcompat/hostcompat.h
test/os161/user/lib/hostcompat/time.c
test/os161/user/lib/libc/stdio/__puts.c
test/os161/user/lib/libc/stdio/getchar.c
test/os161/user/lib/libc/stdio/printf.c
test/os161/user/lib/libc/stdio/putchar.c
test/os161/user/lib/libc/stdio/puts.c
test/os161/user/lib/libc/stdlib/abort.c
test/os161/user/lib/libc/stdlib/exit.c
test/os161/user/lib/libc/stdlib/malloc.c
test/os161/user/lib/libc/stdlib/random.c
test/os161/user/lib/libc/stdlib/system.c
test/os161/user/lib/libc/string/memcmp.c
test/os161/user/lib/libc/string/memset.c
test/os161/user/lib/libc/string/strerror.c
test/os161/user/lib/libc/string/strtok.c
test/os161/user/lib/libc/time/time.c
test/os161/user/lib/libc/unix/__assert.c
test/os161/user/lib/libc/unix/err.c
test/os161/user/lib/libc/unix/errno.c
test/os161/user/lib/libc/unix/getcwd.c
test/os161/user/my-testbin/example/example.c
test/os161/user/sbin/dumpsfs/dumpsfs.c
test/os161/user/sbin/halt/halt.c
test/os161/user/sbin/mksfs/disk.c
test/os161/user/sbin/mksfs/disk.h
test/os161/user/sbin/mksfs/mksfs.c
test/os161/user/sbin/mksfs/support.c
test/os161/user/sbin/mksfs/support.h
test/os161/user/sbin/poweroff/poweroff.c
test/os161/user/sbin/reboot/reboot.c
test/os161/user/sbin/sfsck/sfsck.c
test/os161/user/testbin/add/add.c
test/os161/user/testbin/argtest/argtest.c
test/os161/user/testbin/badcall/bad_chdir.c
test/os161/user/testbin/badcall/bad_close.c
test/os161/user/testbin/badcall/bad_dup2.c
test/os161/user/testbin/badcall/bad_execv.c
test/os161/user/testbin/badcall/bad_fsync.c
test/os161/user/testbin/badcall/bad_ftruncate.c
test/os161/user/testbin/badcall/bad_getcwd.c
test/os161/user/testbin/badcall/bad_getdirentry.c
test/os161/user/testbin/badcall/bad_ioctl.c
test/os161/user/testbin/badcall/bad_link.c
test/os161/user/testbin/badcall/bad_lseek.c
test/os161/user/testbin/badcall/bad_mkdir.c
test/os161/user/testbin/badcall/bad_open.c
test/os161/user/testbin/badcall/bad_pipe.c
test/os161/user/testbin/badcall/bad_read.c
test/os161/user/testbin/badcall/bad_readlink.c
test/os161/user/testbin/badcall/bad_reboot.c
test/os161/user/testbin/badcall/bad_remove.c
test/os161/user/testbin/badcall/bad_rename.c
test/os161/user/testbin/badcall/bad_rmdir.c
test/os161/user/testbin/badcall/bad_sbrk.c
test/os161/user/testbin/badcall/bad_stat.c
test/os161/user/testbin/badcall/bad_symlink.c
test/os161/user/testbin/badcall/bad_time.c
test/os161/user/testbin/badcall/bad_waitpid.c
test/os161/user/testbin/badcall/bad_write.c
test/os161/user/testbin/badcall/common_buf.c
test/os161/user/testbin/badcall/common_fds.c
test/os161/user/testbin/badcall/common_path.c
test/os161/user/testbin/badcall/config.h
test/os161/user/testbin/badcall/driver.c
test/os161/user/testbin/badcall/test.h
test/os161/user/testbin/bigfile/bigfile.c
test/os161/user/testbin/conman/conman.c
test/os161/user/testbin/crash/crash.c
test/os161/user/testbin/ctest/ctest.c
test/os161/user/testbin/dirconc/dirconc.c
test/os161/user/testbin/dirseek/dirseek.c
test/os161/user/testbin/dirtest/dirtest.c
test/os161/user/testbin/f_test/f_hdr.h
test/os161/user/testbin/f_test/f_read.c
test/os161/user/testbin/f_test/f_test.c
test/os161/user/testbin/f_test/f_write.c
test/os161/user/testbin/farm/farm.c
test/os161/user/testbin/faulter/faulter.c
test/os161/user/testbin/filetest/filetest.c
test/os161/user/testbin/forkbomb/forkbomb.c
test/os161/user/testbin/forktest/forktest.c
test/os161/user/testbin/guzzle/guzzle.c
test/os161/user/testbin/hash/hash.c
test/os161/user/testbin/hog/hog.c
test/os161/user/testbin/huge/huge.c
test/os161/user/testbin/kitchen/kitchen.c
test/os161/user/testbin/malloctest/malloctest.c
test/os161/user/testbin/matmult/matmult-orig.c
test/os161/user/testbin/matmult/matmult.c
test/os161/user/testbin/palin/palin.c
test/os161/user/testbin/parallelvm/parallelvm.c
test/os161/user/testbin/psort/psort.c
test/os161/user/testbin/randcall/extern.h
test/os161/user/testbin/randcall/main.c
test/os161/user/testbin/rmdirtest/rmdirtest.c
test/os161/user/testbin/rmtest/rmtest.c
test/os161/user/testbin/sink/sink.c
test/os161/user/testbin/sort/sort.c
test/os161/user/testbin/sty/sty.c
test/os161/user/testbin/tail/tail.c
test/os161/user/testbin/tictac/tictac.c
test/os161/user/testbin/triplehuge/triple.c
test/os161/user/testbin/triplehuge/triple.h
test/os161/user/testbin/triplehuge/triplehuge.c
test/os161/user/testbin/triplemat/triple.c
test/os161/user/testbin/triplemat/triple.h
test/os161/user/testbin/triplemat/triplemat.c
test/os161/user/testbin/triplesort/triple.c
test/os161/user/testbin/triplesort/triple.h
test/os161/user/testbin/triplesort/triplesort.c
test/os161/user/testbin/userthreads/userthreads.c
test/os161/user/testbin/zero/zero.c
test/os161/user/uw-testbin/argtest/argtest.c
test/os161/user/uw-testbin/argtesttest/argtesttest.c
test/os161/user/uw-testbin/conc-io/conc-io.c
test/os161/user/uw-testbin/files1/files1.c
test/os161/user/uw-testbin/files2/files2.c
test/os161/user/uw-testbin/hogparty/hogparty.c
test/os161/user/uw-testbin/lib/testutils.c
test/os161/user/uw-testbin/lib/testutils.h
test/os161/user/uw-testbin/onefork/onefork.c
test/os161/user/uw-testbin/pidcheck/pidcheck.c
test/os161/user/uw-testbin/romemwrite/romemwrite.c
test/os161/user/uw-testbin/segments/segments.c
test/os161/user/uw-testbin/sparse/sparse.c
test/os161/user/uw-testbin/syscall/syscall.c
test/os161/user/uw-testbin/tlbfaulter/tlbfaulter.c
test/os161/user/uw-testbin/vm-crash1/vm-crash1.c
test/os161/user/uw-testbin/vm-crash2/vm-crash2.c
test/os161/user/uw-testbin/vm-crash3/vm-crash3.c
test/os161/user/uw-testbin/vm-data1/vm-data1.c
test/os161/user/uw-testbin/vm-data2/vm-data2.c
test/os161/user/uw-testbin/vm-data3/vm-data3.c
test/os161/user/uw-testbin/vm-funcs/vm-funcs.c
test/os161/user/uw-testbin/vm-mix1-exec/vm-mix1-exec.c
test/os161/user/uw-testbin/vm-mix1-fork/vm-mix1-fork.c
test/os161/user/uw-testbin/vm-mix1/vm-mix1.c
test/os161/user/uw-testbin/vm-mix2/vm-mix2.c
test/os161/user/uw-testbin/vm-stack1/vm-stack1.c
test/os161/user/uw-testbin/vm-stack2/vm-stack2.c
test/os161/user/uw-testbin/widefork/widefork.c
test/os161/user/uw-testbin/writeread/writeread.c
test/os161/user/uw-testbin/xhog/xhog.c
test/os161/user/uw-testbin/yhog/yhog.c
test/os161/user/uw-testbin/zhog/zhog.c
